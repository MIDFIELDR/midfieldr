[{"path":"/articles/art-000-getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"beginning survey student unit record (SUR) data, check necessary prerequisites met: Requirements Install midfieldr Install midfielddata vignette, Load practice data midfielddata Inspect four data tables Preview midfieldr functions","code":""},{"path":"/articles/art-000-getting-started.html","id":"student-unit-record-data","dir":"Articles","previous_headings":"","what":"Student unit record data","title":"Getting started","text":"MIDFIELD Student Unit Record (SUR) data de-identified undergraduate student-level information covering admission characteristics, demographics, programs, courses, instructors, grades, degrees. data organized four tables—student, course, term, degree—keyed student ID. vignette, examine contents practice data midfielddata, R data package longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016:","code":""},{"path":"/articles/art-000-getting-started.html","id":"load-practice-data","dir":"Articles","previous_headings":"","what":"Load practice data","title":"Getting started","text":"writing script follow along, start packages: Use data() load midfielddata data tables memory use. example, loading package library(\"midfielddata\") , can run ls() see environment contains zero objects, load student data midfielddata memory, run Checking environment , look RStudio Environment pane, see student listed. typically load data sets need top script just loading midfielddata package. need load session. Checking environment ,","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE ) # the names of objects in the environment ls() #> character(0) # loading a data set  data(student) # the names of objects in the environment ls() #> [1] \"student\" # load remaining data used in this vignette data(course) data(term) data(degree) # the names of objects in the environment ls() #> [1] \"course\"  \"degree\"  \"student\" \"term\""},{"path":"/articles/art-000-getting-started.html","id":"inspect-the-student-data","dir":"Articles","previous_headings":"","what":"Inspect the student data","title":"Getting started","text":"student table 13 student-related variables students sample, collected time admitted institutions degree-seeking undergraduates. data dictionary, can navigate midfielddata website student page view information help page running observation unique student keyed student ID. Student IDs institution names de-identified consistent across four data sets. see data structure, run student 97,640 observations occupies approximately 19 MB memory. can confirm student IDs unique running, Summarize quantitative variables. Examine categorical variables values.","code":"? student # view the structure of the data set str(student) #> Classes 'data.table' and 'data.frame':   97640 obs. of  13 variables: #>  $ mcid          : chr  \"MID25783135\" \"MID25783147\" \"MID25783156\" \"MID25783162\" ... #>  $ institution   : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ transfer      : chr  \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" ... #>  $ hours_transfer: num  NA NA NA NA NA NA NA NA NA NA ... #>  $ race          : chr  \"White\" \"White\" \"White\" \"White\" ... #>  $ sex           : chr  \"Male\" \"Female\" \"Female\" \"Male\" ... #>  $ age           : num  17 17 18 17 18 18 17 18 18 18 ... #>  $ us_citizen    : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ home_zip      : chr  \"29485\" \"29072\" \"43026\" \"29572\" ... #>  $ high_school   : chr  \"411900\" \"410825\" \"210568\" \"411465\" ... #>  $ sat_math      : num  580 470 750 560 670 620 642 590 492 620 ... #>  $ sat_verbal    : num  505 530 627 395 530 500 486 620 594 456 ... #>  $ act_comp      : num  21 19 29 18 26 22 24 25 21 21 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # number of unique IDs length(unique(student$mcid)) #> [1] 97640 summary(student$sat_math) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   200.0   520.0   580.0   578.1   640.0   800.0   31705  summary(student$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   16.00   18.00   18.00   18.47   18.00   75.00   22916 sort(unique(student$sex)) #> [1] \"Female\"  \"Male\"    \"Unknown\"  sort(unique(student$race)) #> [1] \"Asian\"           \"Black\"           \"Hispanic/Latinx\" \"International\"   #> [5] \"Native American\" \"Other/Unknown\"   \"White\""},{"path":"/articles/art-000-getting-started.html","id":"exercises","dir":"Articles","previous_headings":"Inspect the student data","what":"Exercises","title":"Getting started","text":"Determine possible values institution column. Determine possible values transfer column. Determine median sat_verbal score.","code":""},{"path":"/articles/art-000-getting-started.html","id":"inspect-the-course-data","dir":"Articles","previous_headings":"","what":"Inspect the course data","title":"Getting started","text":"course table 12 course-related variables students sample. data dictionary, can navigate midfielddata website course page view information help page running observation one course one term one student keyed student ID combination course, abbreviation, number, section. see data structure, run four practice data sets midfielddata, course far largest, 3,540,533 observations occupying 349 MB memory. Depending machine, loading course can cause noticeable delay execution time (13 seconds machine), probably want load needed. number unique students. Summarize quantitative variable. Examine categorical variable values.","code":"? course # view the structure of the data set str(course) #> Classes 'data.table' and 'data.frame':   3540533 obs. of  12 variables: #>  $ mcid        : chr  \"MID25783135\" \"MID25783135\" \"MID25783135\" \"MID25783135\" ... #>  $ institution : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term        : chr  \"19911\" \"19911\" \"19911\" \"19911\" ... #>  $ course      : chr  \"\" \"\" \"\" \"\" ... #>  $ abbrev      : chr  \"SPCH\" \"CH\" \"ED\" \"ENGL\" ... #>  $ number      : chr  \"363\" \"101\" \"103\" \"101\" ... #>  $ section     : chr  \"001\" \"005\" \"002\" \"050\" ... #>  $ type        : chr  \"Lecture\" \"Lecture\" \"Lecture\" \"Lecture\" ... #>  $ faculty_rank: chr  \"\" \"\" \"\" \"\" ... #>  $ hours_course: num  3 4 1 3 5 3 3 3 3 4 ... #>  $ pass_fail   : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ grade       : chr  \"A\" \"C\" \"A\" \"B\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(course$mcid)) #> [1] 97640 summary(course$hours_course) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    3.00    3.00    2.69    3.00   99.50   60775 # type of courses sort(unique(course$type)) #>  [1] \"\"                         \"Academic Redemption\"      #>  [3] \"Blended\"                  \"Directed Study\"           #>  [5] \"Duplicate Credit\"         \"Exemption Credit\"         #>  [7] \"Grade History\"            \"Honors\"                   #>  [9] \"Individual Study\"         \"Ineigible to Repeat\"      #> [11] \"Internship/Practicum\"     \"Laboratory\"               #> [13] \"Lecture\"                  \"Lecture/Supervised Lab\"   #> [15] \"Lecture/Unsupervised Lab\" \"Living Community\"         #> [17] \"Make-Up\"                  \"Online\"                   #> [19] \"Problem Session\"          \"Research\"                 #> [21] \"Seminar\"                  \"Special Exam\"             #> [23] \"Special Topics\"           \"Supervised Laboratory\"    #> [25] \"Synchronized\"             \"Test\"                     #> [27] \"Thesis/Dissertation\"      \"Unsupervised Laboratory\""},{"path":"/articles/art-000-getting-started.html","id":"exercises-1","dir":"Articles","previous_headings":"Inspect the course data","what":"Exercises","title":"Getting started","text":"Determine possible values faculty_rank column. Determine range terms term column. Determine possible values grade column.","code":""},{"path":"/articles/art-000-getting-started.html","id":"inspect-the-term-data","dir":"Articles","previous_headings":"","what":"Inspect the term data","title":"Getting started","text":"term table 13 term-related variables students sample. data dictionary, can navigate midfielddata website term page view information help page running observation one term one student keyed student ID term. see data structure, run term 727,369 observations occupies approximately 82 MB memory. number unique students found , number unique students student term . recorded student, students must degree-seeking. recorded term, students must complete term. data can include degree-seekers fail complete term well term-completers seeking degree—hence difference numbers Summarize quantitative variables. Examine categorical variables values.","code":"? term str(term) #> Classes 'data.table' and 'data.frame':   727369 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783147\" \"MID25783147\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20041\" \"20043\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"131202\" \"131210\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 17 18 15 15 3 15 15 6 ... #>  $ hours_term_attempt : num  19 14 13 18 15 15 3 15 15 6 ... #>  $ hours_cumul        : num  19 33 17 35 50 65 68 83 98 104 ... #>  $ hours_cumul_attempt: num  19 33 13 31 46 61 64 79 94 100 ... #>  $ gpa_term           : num  2.47 3.21 3.76 2.67 3.2 4 4 4 4 4 ... #>  $ gpa_cumul          : num  2.47 2.79 3.76 3.13 3.15 3.36 3.39 3.5 3.59 3.61 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # number of unique IDs length(unique(term$mcid)) #> [1] 95995 summary(term$hours_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    9.00   12.00   11.48   15.00   46.00  summary(term$gpa_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   2.400   3.000   2.862   3.540   9.300     267 sort(unique(term$level)) #> [1] \"01 Freshman\"  \"02 Sophomore\" \"03 Junior\"    \"04 Senior\"  sort(unique(term$standing)) #> [1] \"Academic Probation\"               \"Academic Suspension\"              #> [3] \"Academic Suspension - Reinstated\" \"Academic Warning\"                 #> [5] \"Good Standing\""},{"path":"/articles/art-000-getting-started.html","id":"exercises-2","dir":"Articles","previous_headings":"Inspect the term data","what":"Exercises","title":"Getting started","text":"Determine possible values coop column. Determine range terms term column. Determine median value gpa_cumul column.","code":""},{"path":"/articles/art-000-getting-started.html","id":"inspect-the-degree-data","dir":"Articles","previous_headings":"","what":"Inspect the degree data","title":"Getting started","text":"degree table 5 degree-related variables students sample. data dictionary, can navigate midfielddata website degree page view information help page running observation unique student keyed student ID. see data structure, run degree 47,499 observations occupies approximately 10 MB memory. number unique students found Thus 47,499 graduates (degree) 97,640 students admitted (student). Examine categorical variables values. Checking degrees recorded NA results empty table, thus students degree graduates.","code":"? degree str(degree) #> Classes 'data.table' and 'data.frame':   47499 obs. of  5 variables: #>  $ mcid       : chr  \"MID25783162\" \"MID25783178\" \"MID25783188\" \"MID25783195\" ... #>  $ institution: chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term       : chr  \"19963\" \"20001\" \"20023\" \"19966\" ... #>  $ cip6       : chr  \"521401\" \"143501\" \"230101\" \"521401\" ... #>  $ degree     : chr  \"Bachelor of Science\" \"Bachelor of Science\" \"Bachelor of Arts\" \"Bachelor of Science\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(degree$mcid)) #> [1] 47499 sort(unique(degree$institution)) #>  [1] \"Institution A\" \"Institution B\" \"Institution C\" \"Institution D\" #>  [5] \"Institution E\" \"Institution F\" \"Institution G\" \"Institution H\" #>  [9] \"Institution J\" \"Institution K\" \"Institution L\" \"Institution M\"  sort(unique(degree$degree)) #>  [1] \"Bachelor's Degree\"                   \"Bachelor of Architecture\"            #>  [3] \"Bachelor of Arts\"                    \"Bachelor of Arts and Sciences\"       #>  [5] \"Bachelor of Arts in Letters\"         \"Bachelor of Business Administration\" #>  [7] \"Bachelor of Fine Arts\"               \"Bachelor of Interior Design\"         #>  [9] \"Bachelor of Music\"                   \"Bachelor of Science\" degree[is.na(degree)] #> Empty data.table (0 rows and 5 cols): mcid,institution,term,cip6,degree"},{"path":"/articles/art-000-getting-started.html","id":"exercises-3","dir":"Articles","previous_headings":"Inspect the degree data","what":"Exercises","title":"Getting started","text":"packages functions specialized data frame summaries. Try one—may find useful future data explorations. Install skimr package, load library(\"skimr\"), run skim(x), x one data tables, example, skim(student), skim(degree), etc.","code":""},{"path":"/articles/art-000-getting-started.html","id":"review-the-midfieldr-functions","dir":"Articles","previous_headings":"","what":"Review the midfieldr functions","title":"Getting started","text":"midfieldr functions introduced detail subsequent vignettes, can introduce general organization . add_* family functions takes working data frames input adds specific columns interest without subsetting rows. filter_* family functions takes working data frames input subsets rows match conditions; selected columns subset specified. condition_* family functions takes highly-structured data frames input produces output data frames conditioned particular tasks.","code":""},{"path":"/articles/art-000-getting-started.html","id":"exercises-4","dir":"Articles","previous_headings":"Review the midfieldr functions","what":"Exercises","title":"Getting started","text":"View help pages functions add_timely_term() add_completion_timely(). Summarize difference(s) two functions. Describe manner one depends . View help pages functions add_institution() add_race_sex(). List similarities two functions . List differences two functions .","code":""},{"path":"/articles/art-000-getting-started.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Getting started","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # loading data data(student) data(course) data(term) data(degree)  # student str(student) length(unique(student$mcid)) summary(student$sat_math) summary(student$age) sort(unique(student$sex)) sort(unique(student$race))  # course str(course) length(unique(course$mcid)) summary(course$hours_course) sort(unique(course$type))  # term str(term) length(unique(term$mcid)) summary(term$hours_term) summary(term$gpa_term) sort(unique(term$level)) sort(unique(term$standing))  # degree str(degree) length(unique(degree$mcid)) sort(unique(degree$institution)) sort(unique(degree$degree)) degree[is.na(degree)]"},{"path":"/articles/art-002-case-study-programs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Case study programs","text":"case study tour typical workflow student unit record data. sake brevity, focus logic analysis leave detailed discussion functions arguments later vignettes. Assuming completed introduction four data tables (Getting started), case study four parts: Case study programs ◁ . Case study students Case study stickiness Case study graduation rate Longer vignettes detailed development methods functions related part study include: Program codes names Subsetting MIDFIELD data","code":""},{"path":"/articles/art-002-case-study-programs.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Case study programs","text":"studying student records, common first step select specific set programs explore. vignette, start case study four engineering programs : Identify CIP codes Assign custom program names Save results use following midfieldr functions filter_search() vignette output data frame study_program.","code":""},{"path":"/articles/art-002-case-study-programs.html","id":"identify-program-codes","dir":"Articles","previous_headings":"","what":"Identify program codes","title":"Case study programs","text":"writing script follow along, start packages: midfieldr includes cip, data table academic program codes names. View help page running know conventional names desired programs (Civil, Electrical, Industrial, Mechanical Engineering) necessarily exact program names used CIP. Thus search CIP thoroughly make sure find 6-digit CIP codes associated disciplines. start text search cip engineering using filter_search(). number 2-digit codes reported. Let’s examine closely using data.table syntax selecting columns. one (14) programs looking . second pass, can restrict search codes starting 14. next pass, let’s try restricting search four conventional terms: civil, electrical, industrial, mechanical. search case-sensitive. result, Electromechanical Engineering superfluous, can drop next pass. see 4-digit level describes programs customary names Civil Engineering encompasses six programs 6-digit level Electrical Engineering encompasses four programs 6-digit level Mechanical Industrial one program 6-digit level MIDFIELD data tables column CIP codes use 6-digit codes. Therefore, case study, need cip6 column work . names want (case), however, 4-digit level. can select columns need.","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE ) # Type in the Console ? cip # subset rows of the CIP data matching conditions pass01 <- filter_search(cip, \"engineering\")  # Examine the result pass01 #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>  ---                                                                #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                   cip4name   cip6 #>                                                     <char> <char> #>   1:                                  Engineering, General 140101 #>   2:                                  Engineering, General 140102 #>   3: Aerospace, Aeronautical and Astronautical Engineering 140201 #>  ---                                                              #> 117:                             Military Applied Sciences 290301 #> 118:                             Military Applied Sciences 290303 #> 119:            Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>  ---                                                                  #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering cols_we_want <- c(\"cip2\", \"cip2name\") unique(pass01[, ..cols_we_want]) #>      cip2                                         cip2name #>    <char>                                           <char> #> 1:     14                                      Engineering #> 2:     15                           Engineering Technology #> 3:     29                            Military Technologies #> 4:     51 Health Professions and Related Clinical Sciences pass02 <- filter_search(pass01, \"^14\")  # Examine the result pass02 #>       cip2    cip2name   cip4 #>     <char>      <char> <char> #>  1:     14 Engineering   1401 #>  2:     14 Engineering   1401 #>  3:     14 Engineering   1402 #> ---                           #> 52:     14 Engineering   1444 #> 53:     14 Engineering   1445 #> 54:     14 Engineering   1499 #>                                                  cip4name   cip6 #>                                                    <char> <char> #>  1:                                  Engineering, General 140101 #>  2:                                  Engineering, General 140102 #>  3: Aerospace, Aeronautical and Astronautical Engineering 140201 #> ---                                                              #> 52:                                 Engineering Chemistry 144401 #> 53:                    Biological, Biosystems Engineering 144501 #> 54:                                    Engineering, Other 149999 #>                                                         cip6name #>                                                           <char> #>  1:                                         Engineering, General #>  2:                                              Pre-Engineering #>  3: Aerospace, Aeronautical and Astronautical, Space Engineering #> ---                                                              #> 52:                                        Engineering Chemistry #> 53:                           Biological, Biosystems Engineering #> 54:                                           Engineering, Other # optional code to control data.table printing options(datatable.print.topn = 13)  pass03 <- filter_search(   pass02,   c(\"civil\", \"electrical\", \"industrial\", \"mechanical\") )  # Examine the result cols_we_want <- c(\"cip6\", \"cip6name\") pass03[, ..cols_we_want] #>       cip6                                                      cip6name #>     <char>                                                        <char> #>  1: 140801                                    Civil Engineering, General #>  2: 140802                                      Geotechnical Engineering #>  3: 140803                                        Structural Engineering #>  4: 140804                        Transportation and Highway Engineering #>  5: 140805                                   Water Resources Engineering #>  6: 140899                                      Civil Engineering, Other #>  7: 141001        Electrical, Electronics and Communications Engineering #>  8: 141003                                 Laser and Optical Engineering #>  9: 141004                                Telecommunications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering, Other #> 11: 141901                                        Mechanical Engineering #> 12: 143501                                        Industrial Engineering #> 13: 144101                                 Electromechanical Engineering pass04 <- filter_search(pass03, drop_text = \"electromechanical\")  # Examine the result pass04 #>       cip2    cip2name   cip4 #>     <char>      <char> <char> #>  1:     14 Engineering   1408 #>  2:     14 Engineering   1408 #>  3:     14 Engineering   1408 #>  4:     14 Engineering   1408 #>  5:     14 Engineering   1408 #>  6:     14 Engineering   1408 #>  7:     14 Engineering   1410 #>  8:     14 Engineering   1410 #>  9:     14 Engineering   1410 #> 10:     14 Engineering   1410 #> 11:     14 Engineering   1419 #> 12:     14 Engineering   1435 #>                                                   cip4name   cip6 #>                                                     <char> <char> #>  1:                                      Civil Engineering 140801 #>  2:                                      Civil Engineering 140802 #>  3:                                      Civil Engineering 140803 #>  4:                                      Civil Engineering 140804 #>  5:                                      Civil Engineering 140805 #>  6:                                      Civil Engineering 140899 #>  7: Electrical, Electronics and Communications Engineering 141001 #>  8: Electrical, Electronics and Communications Engineering 141003 #>  9: Electrical, Electronics and Communications Engineering 141004 #> 10: Electrical, Electronics and Communications Engineering 141099 #> 11:                                 Mechanical Engineering 141901 #> 12:                                 Industrial Engineering 143501 #>                                                          cip6name #>                                                            <char> #>  1:                                    Civil Engineering, General #>  2:                                      Geotechnical Engineering #>  3:                                        Structural Engineering #>  4:                        Transportation and Highway Engineering #>  5:                                   Water Resources Engineering #>  6:                                      Civil Engineering, Other #>  7:        Electrical, Electronics and Communications Engineering #>  8:                                 Laser and Optical Engineering #>  9:                                Telecommunications Engineering #> 10: Electrical, Electronics and Communications Engineering, Other #> 11:                                        Mechanical Engineering #> 12:                                        Industrial Engineering cols_we_want <- c(\"cip6\", \"cip4name\") case_cip <- pass04[, ..cols_we_want]  # Examine the result case_cip #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering"},{"path":"/articles/art-002-case-study-programs.html","id":"assign-program-names","dir":"Articles","previous_headings":"","what":"Assign program names","title":"Case study programs","text":"study proceeds, want compare contrast programs name. names cip4name close want, can shortened later reporting graphs tables. use data.table fcase() function %ilike% add program column values depend values cip4name column. View help pages running subsequent work need cip6 program values, can drop cip4name column.","code":"# Type in the Console ? `%ilike%`  ? fcase # Create a new memory location to avoid updating by reference case_program <- copy(case_cip)  # Add a new column for custom program labels case_program[, program := fcase(   cip4name %ilike% \"civil\", \"Civil\",   cip4name %ilike% \"electrical\", \"Electrical\",   cip4name %ilike% \"mechanical\", \"Mechanical\",   cip4name %ilike% \"industrial\", \"Industrial\" )]  # Examine the result case_program #>       cip6                                               cip4name    program #>     <char>                                                 <char>     <char> #>  1: 140801                                      Civil Engineering      Civil #>  2: 140802                                      Civil Engineering      Civil #>  3: 140803                                      Civil Engineering      Civil #>  4: 140804                                      Civil Engineering      Civil #>  5: 140805                                      Civil Engineering      Civil #>  6: 140899                                      Civil Engineering      Civil #>  7: 141001 Electrical, Electronics and Communications Engineering Electrical #>  8: 141003 Electrical, Electronics and Communications Engineering Electrical #>  9: 141004 Electrical, Electronics and Communications Engineering Electrical #> 10: 141099 Electrical, Electronics and Communications Engineering Electrical #> 11: 141901                                 Mechanical Engineering Mechanical #> 12: 143501                                 Industrial Engineering Industrial # Drop an unnecessary column case_program[, cip4name := NULL]  # Examine the result case_program #>       cip6    program #>     <char>     <char> #>  1: 140801      Civil #>  2: 140802      Civil #>  3: 140803      Civil #>  4: 140804      Civil #>  5: 140805      Civil #>  6: 140899      Civil #>  7: 141001 Electrical #>  8: 141003 Electrical #>  9: 141004 Electrical #> 10: 141099 Electrical #> 11: 141901 Mechanical #> 12: 143501 Industrial"},{"path":"/articles/art-002-case-study-programs.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save results","title":"Case study programs","text":"save case_program data frame CSV file results directory easy access work study. use fast write fwrite() data.table. may prefer read/write functions base R packages readr rio. Note relative file path shown assumes working within RStudio project results subdirectory (described Getting started). suggest saving intermediate results like significant milestone study, especially steps requiring lot computing time. results included midfieldr built-data set study_program. View help page running View data frame, Check two data frames identical, subsequent vignettes, can read case_program data results directory can use study_program data provided midfieldr.","code":"# Assumes you have a results folder in the project directory fwrite(case_program, file = \"results/case_program.csv\") # Type in the Console ? study_program study_program #>       cip6    program #>     <char>     <char> #>  1: 140801      Civil #>  2: 140802      Civil #>  3: 140803      Civil #>  4: 140804      Civil #>  5: 140805      Civil #>  6: 140899      Civil #>  7: 141001 Electrical #>  8: 141003 Electrical #>  9: 141004 Electrical #> 10: 141099 Electrical #> 11: 141901 Mechanical #> 12: 143501 Industrial all.equal(case_program, study_program) #> [1] TRUE"},{"path":"/articles/art-002-case-study-programs.html","id":"related-articles","dir":"Articles","previous_headings":"","what":"Related articles","title":"Case study programs","text":"Program codes names practice working CIP codes assigning program names.","code":""},{"path":"/articles/art-002-case-study-programs.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case study programs","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # identify program codes pass01 <- filter_search(cip, \"engineering\") pass02 <- filter_search(pass01, \"^14\") pass03 <- filter_search(   pass02,   c(\"civil\", \"electrical\", \"industrial\", \"mechanical\") ) pass04 <- filter_search(pass03, drop_text = \"electromechanical\") cols_we_want <- c(\"cip6\", \"cip4name\") case_cip <- pass04[, ..cols_we_want]  # assign program names case_program <- copy(case_cip) dframe <- copy(case_program) case_program[, program := fcase(   cip4name %ilike% \"civil\", \"Civil\",   cip4name %ilike% \"electrical\", \"Electrical\",   cip4name %ilike% \"mechanical\", \"Mechanical\",   cip4name %ilike% \"industrial\", \"Industrial\" )] case_program[, cip4name := NULL]  # save results fwrite(case_program, file = \"results/case_program.csv\")"},{"path":"/articles/art-004-case-study-students.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Case study students","text":"continue case study, tour typical workflow student unit record data. , sake brevity focus logic analysis leave detailed discussion functions arguments later vignettes. Assuming completed introduction four data tables (Getting started), case study four parts: Case study programs Case study students ◁ . Case study stickiness Case study graduation rate Longer vignettes detailed development methods functions related part study include: Subsetting MIDFIELD data Data sufficiency","code":""},{"path":"/articles/art-004-case-study-students.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Case study students","text":"Starting study_program data frame previous vignette (Case study programs), : Gather degree-seeking students ever enrolled programs Join columns program names student race/ethnicity sex Subset rows data sufficiency Save results use following midfieldr functions filter_match() add_race_sex() add_timely_term() add_data_sufficiency() vignette output data frame study_student.","code":""},{"path":"/articles/art-004-case-study-students.html","id":"gather-students","dir":"Articles","previous_headings":"","what":"Gather students","title":"Case study students","text":"writing script follow along, start packages: saved results previous vignette file results/case_program.csv, can read back workspace using following specify CIP column string variable prevent read integer. , data included midfieldr study_program data set. View help page running remainder vignette, assume ’re using study_program data frame. reminder contents: start filter_match() subset rows term cip6 values match cip6 values study_program returning three columns student ID, institution, CIP code. result duplicate rows data include terms student. remove duplicates unique(). general, term data can include non-degree-seeking students. limit study degree-seeking students , subset rows DT mcid values match mcid values student table (students th student data table degree-seeking). happens, example students degree-seeking, results don’t change.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE )  # load data tables from midfielddata data(student, term) # Optional  case_program <- fread(\"results/case_program.csv\",                        colClasses = c(cip6 = \"character\")) ? study_program # Loaded with midfieldr study_program #>       cip6    program #>     <char>     <char> #>  1: 140801      Civil #>  2: 140802      Civil #>  3: 140803      Civil #> ---                   #> 10: 141099 Electrical #> 11: 141901 Mechanical #> 12: 143501 Industrial # All terms for all students in the study programs DT <- filter_match(term,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"institution\", \"cip6\") )  # Examine the result DT #>               mcid   institution   cip6 #>             <char>        <char> <char> #>     1: MID25783197 Institution M 140801 #>     2: MID25783197 Institution M 140801 #>     3: MID25783197 Institution M 140801 #>    ---                                  #> 67091: MID26696429 Institution L 143501 #> 67092: MID26696429 Institution L 143501 #> 67093: MID26696429 Institution L 143501 DT <- unique(DT)  # Examine the result DT #>               mcid   institution   cip6 #>             <char>        <char> <char> #>     1: MID25783197 Institution M 140801 #>     2: MID25783441 Institution M 140801 #>     3: MID25783553 Institution M 140801 #>    ---                                  #> 10762: MID26695626 Institution L 143501 #> 10763: MID26696116 Institution L 143501 #> 10764: MID26696429 Institution L 143501 # Limit the study to degree-seeking students DT <- filter_match(DT,   match_to = student,   by_col = \"mcid\" )  # Examine the result DT #>               mcid   institution   cip6 #>             <char>        <char> <char> #>     1: MID25783178 Institution M 143501 #>     2: MID25783197 Institution M 140801 #>     3: MID25783388 Institution M 141901 #>    ---                                  #> 10762: MID26697163 Institution L 141901 #> 10763: MID26697444 Institution L 141901 #> 10764: MID26697447 Institution L 141001"},{"path":"/articles/art-004-case-study-students.html","id":"join-grouping-variables","dir":"Articles","previous_headings":"","what":"Join grouping variables","title":"Case study students","text":"support examining student characteristics (race/ethnicity sex) curricular pathways (program), join characteristics student data. “group ” variables used persistence metrics. Program names joined merging study_program working data frame. Student race/ethnicity sex joined using midfieldr add_race_sex() function.","code":"# Program name is a commonly used grouping variable DT <- merge(DT, study_program, by = \"cip6\", all.x = TRUE)  # Examine the result DT #>          cip6        mcid   institution    program #>        <char>      <char>        <char>     <char> #>     1: 140801 MID25783197 Institution M      Civil #>     2: 140801 MID25783441 Institution M      Civil #>     3: 140801 MID25783553 Institution M      Civil #>    ---                                             #> 10762: 143501 MID26695626 Institution L Industrial #> 10763: 143501 MID26696116 Institution L Industrial #> 10764: 143501 MID26696429 Institution L Industrial # Race/ethnicity and sex are commonly used grouping variables DT <- add_race_sex(DT, midfield_student = student)  # Examine the result DT #>          cip6        mcid   institution    program   race    sex #>        <char>      <char>        <char>     <char> <char> <char> #>     1: 140801 MID25783197 Institution M      Civil  White   Male #>     2: 140801 MID25783441 Institution M      Civil  White   Male #>     3: 140801 MID25783553 Institution M      Civil  White   Male #>    ---                                                           #> 10762: 143501 MID26695626 Institution L Industrial  White   Male #> 10763: 143501 MID26696116 Institution L Industrial  White Female #> 10764: 143501 MID26696429 Institution L Industrial  White Female"},{"path":"/articles/art-004-case-study-students.html","id":"filter-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Filter for data sufficiency","title":"Case study students","text":"students admitted near upper limit institution’s data range, available data cover insufficient number years fairly assess student performance. students data range sufficient included analysis. Data sufficiency defined terms timely completion term: last term program completion considered timely given student. timely completion term many students admission term plus 6 years. midfieldr function add_timely_term() estimates timely completion term student. data sufficiency criterion study must limited students whose timely completion term within range data provided institution. midfieldr function add_data_sufficiency accesses finds upper limit institution’s data range, compares timely completion term, reports TRUE/FALSE column whether data sufficient. limit study students data sufficiency criterion met.","code":"# Timely completion term is required for determining data sufficiency DT <- add_timely_term(DT, midfield_term = term)  # Examine the result DT #>          cip6        mcid   institution    program   race    sex timely_term #>        <char>      <char>        <char>     <char> <char> <char>      <char> #>     1: 140801 MID25783197 Institution M      Civil  White   Male       19923 #>     2: 140801 MID25783441 Institution M      Civil  White   Male       19973 #>     3: 140801 MID25783553 Institution M      Civil  White   Male       20073 #>    ---                                                                       #> 10762: 143501 MID26695626 Institution L Industrial  White   Male       20143 #> 10763: 143501 MID26696116 Institution L Industrial  White Female       20153 #> 10764: 143501 MID26696429 Institution L Industrial  White Female       20153 # Establish the criterion DT <- add_data_sufficiency(DT, midfield_term = term)  # Examine the result DT #>          cip6        mcid   institution    program   race    sex timely_term #>        <char>      <char>        <char>     <char> <char> <char>      <char> #>     1: 140801 MID25783197 Institution M      Civil  White   Male       19923 #>     2: 140801 MID25783441 Institution M      Civil  White   Male       19973 #>     3: 140801 MID25783553 Institution M      Civil  White   Male       20073 #>    ---                                                                       #> 10762: 143501 MID26695626 Institution L Industrial  White   Male       20143 #> 10763: 143501 MID26696116 Institution L Industrial  White Female       20153 #> 10764: 143501 MID26696429 Institution L Industrial  White Female       20153 #>        data_sufficiency #>                  <lgcl> #>     1:             TRUE #>     2:             TRUE #>     3:             TRUE #>    ---                  #> 10762:             TRUE #> 10763:             TRUE #> 10764:             TRUE # Apply the criterion DT <- DT[data_sufficiency == TRUE]  # Examine the result DT #>         cip6        mcid   institution    program   race    sex timely_term #>       <char>      <char>        <char>     <char> <char> <char>      <char> #>    1: 140801 MID25783197 Institution M      Civil  White   Male       19923 #>    2: 140801 MID25783441 Institution M      Civil  White   Male       19973 #>    3: 140801 MID25783553 Institution M      Civil  White   Male       20073 #>   ---                                                                       #> 8217: 143501 MID26695626 Institution L Industrial  White   Male       20143 #> 8218: 143501 MID26696116 Institution L Industrial  White Female       20153 #> 8219: 143501 MID26696429 Institution L Industrial  White Female       20153 #>       data_sufficiency #>                 <lgcl> #>    1:             TRUE #>    2:             TRUE #>    3:             TRUE #>   ---                  #> 8217:             TRUE #> 8218:             TRUE #> 8219:             TRUE"},{"path":"/articles/art-004-case-study-students.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save results","title":"Case study students","text":"can order columns result using data.table function setcolorder()—strictly necessary, facilitate reproducibility. save DT data frame CSV file results directory easy access work study. results included midfieldr built-data set study_student. View help page running View data frame, Check two data frames identical, subsequent vignettes, can read case_student data results directory can use study_student data provided midfieldr.","code":"# Optional step to order the rows setcolorder(DT, c(\"mcid\", \"institution\")) # Assumes you have a results folder in the project directory fwrite(DT, file = \"results/case_student.csv\") ? study_student study_student #>              mcid   institution   cip6    program   race    sex timely_term #>            <char>        <char> <char>     <char> <char> <char>      <char> #>    1: MID25783197 Institution M 140801      Civil  White   Male       19923 #>    2: MID25783441 Institution M 140801      Civil  White   Male       19973 #>    3: MID25783553 Institution M 140801      Civil  White   Male       20073 #>   ---                                                                       #> 8217: MID26695626 Institution L 143501 Industrial  White   Male       20143 #> 8218: MID26696116 Institution L 143501 Industrial  White Female       20153 #> 8219: MID26696429 Institution L 143501 Industrial  White Female       20153 #>       data_sufficiency #>                 <lgcl> #>    1:             TRUE #>    2:             TRUE #>    3:             TRUE #>   ---                  #> 8217:             TRUE #> 8218:             TRUE #> 8219:             TRUE all.equal(DT, study_student) #> [1] TRUE"},{"path":"/articles/art-004-case-study-students.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case study students","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # load data tables from midfielddata data(student, term)  # Gather students DT <- filter_match(term,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"institution\", \"cip6\") ) DT <- unique(DT) DT <- filter_match(DT,   match_to = student,   by_col = \"mcid\" )  # Join grouping variables DT <- merge(DT, study_program, by = \"cip6\", all.x = TRUE) DT <- add_race_sex(DT, midfield_student = student)  # Filter for data sufficiency DT <- add_timely_term(DT, midfield_term = term) DT <- add_data_sufficiency(DT, midfield_term = term) DT <- DT[data_sufficiency == TRUE]  # Save results setcolorder(DT, c(\"mcid\", \"institution\")) fwrite(DT, file = \"results/case_student.csv\")"},{"path":"/articles/art-006-case-study-stickiness.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Case study stickiness","text":"continue case study, tour typical workflow student unit record data. , sake brevity focus logic analysis leave detailed discussion functions arguments later vignettes. Assuming completed introduction four data tables (Getting started), case study four parts: Case study programs Case study students Case study stickiness ◁ . Case study graduation rate Longer vignettes detailed development methods functions related part study include: Data sufficiency Timely completion Multiway graphs","code":""},{"path":"/articles/art-006-case-study-stickiness.html","id":"longitudinal-stickiness","dir":"Articles","previous_headings":"Introduction","what":"Longitudinal stickiness","title":"Case study stickiness","text":"Longitudinal stickiness ratio number students graduating program number students ever enrolled program accounting data sufficiency timely completion criteria [1]. Stickiness measures extent program succeeds basic goal graduating students admits, without regard student admitted program—metric includes students begin college part-time, enroll mid-year, switch majors, transfer, addition first-time--college students.","code":""},{"path":"/articles/art-006-case-study-stickiness.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Case study stickiness","text":"Starting study_student data frame previous vignette (Case study students), : Apply timely completion criterion Tally students ever enrolled program race/ethnicity, sex Tally students completing program race/ethnicity, sex Compute graph stickiness Save results use following midfieldr functions add_completion_timely() condition_multiway() vignette output data frame study_stickiness.","code":""},{"path":"/articles/art-006-case-study-stickiness.html","id":"apply-the-timely-completion-criterion","dir":"Articles","previous_headings":"","what":"Apply the timely completion criterion","title":"Case study stickiness","text":"writing script follow along, start packages: saved results previous vignette file results/case_student.csv, can read back workspace using following specify CIP timely term columns character variables prevent read integers. , data included midfieldr study_student data set. View help page running remainder vignette, assume ’re using study_student data frame. reminder contents: data sufficiency criterion applied. usual, use assign working data frame DT. can count number graduates, assess whether graduates complete program timely manner. student graduating later timely-completion term grouped non-graduates purposes computing persistence metric. add_completion_timely() function accesses degree data determine term student’s first degree (), compares student’s timely completion term, reports whether degree term satisfies timely completion criterion.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE )  # load data tables from midfielddata data(degree) # Optional  case_program <- fread(\"results/case_student.csv\",                        colClasses = c(                         cip6 = \"character\",                         timely_term = \"character\"                       )) ? study_student # Loaded with midfieldr study_student #>              mcid   institution   cip6    program   race    sex timely_term #>            <char>        <char> <char>     <char> <char> <char>      <char> #>    1: MID25783197 Institution M 140801      Civil  White   Male       19923 #>    2: MID25783441 Institution M 140801      Civil  White   Male       19973 #>    3: MID25783553 Institution M 140801      Civil  White   Male       20073 #>   ---                                                                       #> 8217: MID26695626 Institution L 143501 Industrial  White   Male       20143 #> 8218: MID26696116 Institution L 143501 Industrial  White Female       20153 #> 8219: MID26696429 Institution L 143501 Industrial  White Female       20153 #>       data_sufficiency #>                 <lgcl> #>    1:             TRUE #>    2:             TRUE #>    3:             TRUE #>   ---                  #> 8217:             TRUE #> 8218:             TRUE #> 8219:             TRUE # Create a new memory location to avoid updating by reference DT <- copy(study_student) # Determine whether the timely completion criterion is satisfied DT <- add_completion_timely(DT, midfield_degree = degree)  # Examine the result DT #>              mcid   institution   cip6    program            race    sex #>            <char>        <char> <char>     <char>          <char> <char> #>    1: MID25783178 Institution M 143501 Industrial           Black   Male #>    2: MID25783197 Institution M 140801      Civil           White   Male #>    3: MID25783388 Institution M 141901 Mechanical           White   Male #>   ---                                                                    #> 8217: MID26697163 Institution L 141901 Mechanical Hispanic/Latinx   Male #> 8218: MID26697444 Institution L 141901 Mechanical           White   Male #> 8219: MID26697447 Institution L 141001 Electrical           Asian   Male #>       timely_term data_sufficiency completion_timely #>            <char>           <lgcl>            <lgcl> #>    1:       20003             TRUE              TRUE #>    2:       19923             TRUE              TRUE #>    3:       19923             TRUE             FALSE #>   ---                                                #> 8217:       20143             TRUE              TRUE #> 8218:       20153             TRUE              TRUE #> 8219:       20163             TRUE              TRUE"},{"path":"/articles/art-006-case-study-stickiness.html","id":"summarize-by-group","dir":"Articles","previous_headings":"","what":"Summarize by group","title":"Case study stickiness","text":"variables group program, race/ethnicity, sex. proven convenient years combine race/ethnicity sex column. assign grouping variables vector. Starting working data frame DT, count enrollees groups assign result new ever column. result new data frame 55 rows since aggregated counts. Returning working data frame DT, subset rows satisfying timely-completion criterion. count graduates assign result new grad column. Now join two data frames, setting .x = TRUE retain rows enrolled. case, completed data fewer rows enrolled data merge() introduced NA values grad column. NA values better encoded zeros.","code":"# Construct one of the grouping variables. DT[, race_sex := paste(race, sex)]  # Examine the result DT #>              mcid   institution   cip6    program            race    sex #>            <char>        <char> <char>     <char>          <char> <char> #>    1: MID25783178 Institution M 143501 Industrial           Black   Male #>    2: MID25783197 Institution M 140801      Civil           White   Male #>    3: MID25783388 Institution M 141901 Mechanical           White   Male #>   ---                                                                    #> 8217: MID26697163 Institution L 141901 Mechanical Hispanic/Latinx   Male #> 8218: MID26697444 Institution L 141901 Mechanical           White   Male #> 8219: MID26697447 Institution L 141001 Electrical           Asian   Male #>       timely_term data_sufficiency completion_timely             race_sex #>            <char>           <lgcl>            <lgcl>               <char> #>    1:       20003             TRUE              TRUE           Black Male #>    2:       19923             TRUE              TRUE           White Male #>    3:       19923             TRUE             FALSE           White Male #>   ---                                                                     #> 8217:       20143             TRUE              TRUE Hispanic/Latinx Male #> 8218:       20153             TRUE              TRUE           White Male #> 8219:       20163             TRUE              TRUE           Asian Male # A reusable vector for grouping, summarizing, and joining. grouping_variables <- c(\"program\", \"race_sex\") # Create a new memory location to avoid updating by reference enrolled <- copy(DT)  # Count enrolled <- enrolled[, .(ever = .N), by = grouping_variables]  # Examine the result enrolled #>        program               race_sex  ever #>         <char>                 <char> <int> #>  1: Industrial             Black Male   106 #>  2:      Civil             White Male  1147 #>  3: Mechanical             White Male  1940 #> ---                                         #> 53:      Civil   International Female     1 #> 54: Mechanical Native American Female     5 #> 55: Industrial Native American Female     1 # Create a new memory location to avoid updating by reference completed <- copy(DT)  # Limit the graduate count to those with timely completion completed <- completed[completion_timely == TRUE]  # Examine the result completed #>              mcid   institution   cip6    program            race    sex #>            <char>        <char> <char>     <char>          <char> <char> #>    1: MID25783178 Institution M 143501 Industrial           Black   Male #>    2: MID25783197 Institution M 140801      Civil           White   Male #>    3: MID25783441 Institution M 140801      Civil           White   Male #>   ---                                                                    #> 5168: MID26697163 Institution L 141901 Mechanical Hispanic/Latinx   Male #> 5169: MID26697444 Institution L 141901 Mechanical           White   Male #> 5170: MID26697447 Institution L 141001 Electrical           Asian   Male #>       timely_term data_sufficiency completion_timely             race_sex #>            <char>           <lgcl>            <lgcl>               <char> #>    1:       20003             TRUE              TRUE           Black Male #>    2:       19923             TRUE              TRUE           White Male #>    3:       19973             TRUE              TRUE           White Male #>   ---                                                                     #> 5168:       20143             TRUE              TRUE Hispanic/Latinx Male #> 5169:       20153             TRUE              TRUE           White Male #> 5170:       20163             TRUE              TRUE           Asian Male # Obtain count of graduates completed <- completed[, .(grad = .N), by = grouping_variables]  # Examine the result completed #>        program               race_sex  grad #>         <char>                 <char> <int> #>  1: Industrial             Black Male    57 #>  2:      Civil             White Male   783 #>  3: Electrical             White Male   870 #> ---                                         #> 49: Mechanical Native American Female     3 #> 50:      Civil   Native American Male     1 #> 51: Industrial Native American Female     1 # Join DT <- merge(enrolled, completed, by = grouping_variables, all.x = TRUE)  # Examine the result DT #>        program           race_sex  ever  grad #>         <char>             <char> <int> <int> #>  1:      Civil       Asian Female    17    12 #>  2:      Civil         Asian Male    37    24 #>  3:      Civil       Black Female    54    28 #> ---                                           #> 53: Mechanical Other/Unknown Male    48    28 #> 54: Mechanical       White Female   291   195 #> 55: Mechanical         White Male  1940  1265  # Merging created a data.table \"key\" that we delete setkey(DT, NULL) # Checking if any NAs were introduced in the grad column sum(is.na(DT$grad)) #> [1] 4 # NA in this case represents a count of zero DT[is.na(grad), grad := 0][] #>        program           race_sex  ever  grad #>         <char>             <char> <int> <int> #>  1:      Civil       Asian Female    17    12 #>  2:      Civil         Asian Male    37    24 #>  3:      Civil       Black Female    54    28 #> ---                                           #> 53: Mechanical Other/Unknown Male    48    28 #> 54: Mechanical       White Female   291   195 #> 55: Mechanical         White Male  1940  1265  # Examine the result DT #>        program           race_sex  ever  grad #>         <char>             <char> <int> <int> #>  1:      Civil       Asian Female    17    12 #>  2:      Civil         Asian Male    37    24 #>  3:      Civil       Black Female    54    28 #> ---                                           #> 53: Mechanical Other/Unknown Male    48    28 #> 54: Mechanical       White Female   291   195 #> 55: Mechanical         White Male  1940  1265"},{"path":"/articles/art-006-case-study-stickiness.html","id":"compute-stickiness","dir":"Articles","previous_headings":"","what":"Compute stickiness","title":"Case study stickiness","text":"Stickiness ratio graduates enrollees group. save DT data frame CSV file results directory easy access work study. results included midfieldr built-data set study_stickiness. View help page running View data frame, Check two data frames identical, subsequent vignettes, can read case_stickiness data results directory can use study_stickiness data provided midfieldr.","code":"# data table printing option options(datatable.print.topn = 40)  # Reached our goal of computing longitudinal stickiness DT[, stick := round(100 * grad / ever, 1)]  # Examine the result DT #>        program               race_sex  ever  grad stick #>         <char>                 <char> <int> <int> <num> #>  1:      Civil           Asian Female    17    12  70.6 #>  2:      Civil             Asian Male    37    24  64.9 #>  3:      Civil           Black Female    54    28  51.9 #>  4:      Civil             Black Male    98    43  43.9 #>  5:      Civil Hispanic/Latinx Female    10     5  50.0 #>  6:      Civil   Hispanic/Latinx Male    56    33  58.9 #>  7:      Civil   International Female     1     0   0.0 #>  8:      Civil     International Male    14     6  42.9 #>  9:      Civil   Native American Male     7     1  14.3 #> 10:      Civil   Other/Unknown Female     6     3  50.0 #> 11:      Civil     Other/Unknown Male    16     5  31.2 #> 12:      Civil           White Female   329   232  70.5 #> 13:      Civil             White Male  1147   783  68.3 #> 14: Electrical           Asian Female    38    27  71.1 #> 15: Electrical             Asian Male   197   127  64.5 #> 16: Electrical           Black Female   154    95  61.7 #> 17: Electrical             Black Male   304   137  45.1 #> 18: Electrical Hispanic/Latinx Female    14    10  71.4 #> 19: Electrical   Hispanic/Latinx Male    67    37  55.2 #> 20: Electrical   International Female     8     4  50.0 #> 21: Electrical     International Male    71    42  59.2 #> 22: Electrical Native American Female     3     0   0.0 #> 23: Electrical   Native American Male     8     4  50.0 #> 24: Electrical   Other/Unknown Female     8     5  62.5 #> 25: Electrical     Other/Unknown Male    28    14  50.0 #> 26: Electrical           White Female   193   122  63.2 #> 27: Electrical             White Male  1366   870  63.7 #> 28: Industrial           Asian Female    40    20  50.0 #> 29: Industrial             Asian Male    60    38  63.3 #> 30: Industrial           Black Female    94    55  58.5 #> 31: Industrial             Black Male   106    57  53.8 #> 32: Industrial Hispanic/Latinx Female     6     4  66.7 #> 33: Industrial   Hispanic/Latinx Male    25    22  88.0 #> 34: Industrial   International Female     5     3  60.0 #> 35: Industrial     International Male    22    12  54.5 #> 36: Industrial Native American Female     1     1 100.0 #> 37: Industrial   Native American Male     1     0   0.0 #> 38: Industrial   Other/Unknown Female     3     3 100.0 #> 39: Industrial     Other/Unknown Male     2     0   0.0 #> 40: Industrial           White Female   234   142  60.7 #> 41: Industrial             White Male   494   321  65.0 #> 42: Mechanical           Asian Female    23    19  82.6 #> 43: Mechanical             Asian Male   122    77  63.1 #> 44: Mechanical           Black Female    83    46  55.4 #> 45: Mechanical             Black Male   214   100  46.7 #> 46: Mechanical Hispanic/Latinx Female    11     8  72.7 #> 47: Mechanical   Hispanic/Latinx Male    76    47  61.8 #> 48: Mechanical   International Female     3     1  33.3 #> 49: Mechanical     International Male    37    19  51.4 #> 50: Mechanical Native American Female     5     3  60.0 #> 51: Mechanical   Native American Male    14     8  57.1 #> 52: Mechanical   Other/Unknown Female     8     7  87.5 #> 53: Mechanical     Other/Unknown Male    48    28  58.3 #> 54: Mechanical           White Female   291   195  67.0 #> 55: Mechanical             White Male  1940  1265  65.2 #>        program               race_sex  ever  grad stick # Assumes you have a results folder in the project directory fwrite(DT, file = \"results/case_stickiness.csv\") ? study_stickiness study_stickiness #>        program               race_sex  ever  grad stick #>         <char>                 <char> <int> <int> <num> #>  1:      Civil           Asian Female    17    12  70.6 #>  2:      Civil             Asian Male    37    24  64.9 #>  3:      Civil           Black Female    54    28  51.9 #>  4:      Civil             Black Male    98    43  43.9 #>  5:      Civil Hispanic/Latinx Female    10     5  50.0 #>  6:      Civil   Hispanic/Latinx Male    56    33  58.9 #>  7:      Civil   International Female     1     0   0.0 #>  8:      Civil     International Male    14     6  42.9 #>  9:      Civil   Native American Male     7     1  14.3 #> 10:      Civil   Other/Unknown Female     6     3  50.0 #> 11:      Civil     Other/Unknown Male    16     5  31.2 #> 12:      Civil           White Female   329   232  70.5 #> 13:      Civil             White Male  1147   783  68.3 #> 14: Electrical           Asian Female    38    27  71.1 #> 15: Electrical             Asian Male   197   127  64.5 #> 16: Electrical           Black Female   154    95  61.7 #> 17: Electrical             Black Male   304   137  45.1 #> 18: Electrical Hispanic/Latinx Female    14    10  71.4 #> 19: Electrical   Hispanic/Latinx Male    67    37  55.2 #> 20: Electrical   International Female     8     4  50.0 #> 21: Electrical     International Male    71    42  59.2 #> 22: Electrical Native American Female     3     0   0.0 #> 23: Electrical   Native American Male     8     4  50.0 #> 24: Electrical   Other/Unknown Female     8     5  62.5 #> 25: Electrical     Other/Unknown Male    28    14  50.0 #> 26: Electrical           White Female   193   122  63.2 #> 27: Electrical             White Male  1366   870  63.7 #> 28: Industrial           Asian Female    40    20  50.0 #> 29: Industrial             Asian Male    60    38  63.3 #> 30: Industrial           Black Female    94    55  58.5 #> 31: Industrial             Black Male   106    57  53.8 #> 32: Industrial Hispanic/Latinx Female     6     4  66.7 #> 33: Industrial   Hispanic/Latinx Male    25    22  88.0 #> 34: Industrial   International Female     5     3  60.0 #> 35: Industrial     International Male    22    12  54.5 #> 36: Industrial Native American Female     1     1 100.0 #> 37: Industrial   Native American Male     1     0   0.0 #> 38: Industrial   Other/Unknown Female     3     3 100.0 #> 39: Industrial     Other/Unknown Male     2     0   0.0 #> 40: Industrial           White Female   234   142  60.7 #> 41: Industrial             White Male   494   321  65.0 #> 42: Mechanical           Asian Female    23    19  82.6 #> 43: Mechanical             Asian Male   122    77  63.1 #> 44: Mechanical           Black Female    83    46  55.4 #> 45: Mechanical             Black Male   214   100  46.7 #> 46: Mechanical Hispanic/Latinx Female    11     8  72.7 #> 47: Mechanical   Hispanic/Latinx Male    76    47  61.8 #> 48: Mechanical   International Female     3     1  33.3 #> 49: Mechanical     International Male    37    19  51.4 #> 50: Mechanical Native American Female     5     3  60.0 #> 51: Mechanical   Native American Male    14     8  57.1 #> 52: Mechanical   Other/Unknown Female     8     7  87.5 #> 53: Mechanical     Other/Unknown Male    48    28  58.3 #> 54: Mechanical           White Female   291   195  67.0 #> 55: Mechanical             White Male  1940  1265  65.2 #>        program               race_sex  ever  grad stick all.equal(DT, study_stickiness) #> [1] TRUE"},{"path":"/articles/art-006-case-study-stickiness.html","id":"graph-the-results","dir":"Articles","previous_headings":"","what":"Graph the results","title":"Case study stickiness","text":"data conditioning presenting results. Even students institutions de-identified, privacy risk small populations, omit observations fewer 10 students ever enrolled. also omit rows ambiguous values race/ethnicity (International /Unknown). graphed results advance, find small population subset removed Native American students one disciplines—add list observations omit. Condition data graphing using condition_multiway(). comments give brief clue purpose argument. ’ll use without lengthy explanation (covered detail separate vignette). stickiness percentage, can use “percent” method ordering: panels ordered program stickiness (ignoring race/ethnicity sex) rows ordered race/sex stickiness (ignoring program).  Observations: graph illustrates ordering rows panels crucial Cleveland calls “asymmetry perception effects.” example, consider low stickiness Hispanic/Latinx women Civil Engineering (given overall high stickiness across programs) high stickiness Hispanic/Latinx men Industrial Engineering (given overall low stickiness across programs). Recall, however, practice data, research data—suitable learning student-record analysis, drawing inferences student performance.","code":"# Omit before graphing DT <- DT[ever >= 10] # data table printing option options(datatable.print.topn = 3)  # Omit before graphing DT <- DT[!race_sex %ilike% c(\"International|Other|Native\")]  # Examine the result DT #>        program             race_sex  ever  grad stick #>         <char>               <char> <int> <int> <num> #>  1:      Civil         Asian Female    17    12  70.6 #>  2:      Civil           Asian Male    37    24  64.9 #>  3:      Civil         Black Female    54    28  51.9 #> ---                                                   #> 29: Mechanical Hispanic/Latinx Male    76    47  61.8 #> 30: Mechanical         White Female   291   195  67.0 #> 31: Mechanical           White Male  1940  1265  65.2 DT <- condition_multiway(   dframe = DT, # input data frame   categ_col = c(\"program\", \"race_sex\"), # multiway categorical variables   quant_col = \"stick\", # multiway quantitative variable   detail = FALSE, # do not return columns of details   order_by = \"percent\", # stickiness (a percentage) used to order rows and panels   param_col = c(\"grad\", \"ever\") # parameters for computing group stickiness )  # Examine the result DT #>        program             race_sex  ever  grad stick #>         <fctr>               <fctr> <num> <num> <num> #>  1:      Civil         Asian Female    17    12  70.6 #>  2:      Civil           Asian Male    37    24  64.9 #>  3:      Civil         Black Female    54    28  51.9 #> ---                                                   #> 29: Mechanical Hispanic/Latinx Male    76    47  61.8 #> 30: Mechanical         White Female   291   195  67.0 #> 31: Mechanical           White Male  1940  1265  65.2 ggplot(data = DT, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness (%)\",     y = \"\",     title = \"Ordered by computed group metric\",     caption = \"Source: midfielddata.\"   )"},{"path":"/articles/art-006-case-study-stickiness.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case study stickiness","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # load data tables from midfielddata data(degree)  # Apply the timely completion criterion DT <- copy(study_student) DT <- add_completion_timely(DT, midfield_degree = degree)  # Summarize by group DT[, race_sex := paste(race, sex)] grouping_variables <- c(\"program\", \"race_sex\") enrolled <- copy(DT) enrolled <- enrolled[, .(ever = .N), by = grouping_variables] completed <- copy(DT) completed <- completed[completion_timely == TRUE] completed <- completed[, .(grad = .N), by = grouping_variables] DT <- merge(enrolled, completed, by = grouping_variables, all.x = TRUE) setkey(DT, NULL) DT[is.na(grad), grad := 0][]  # Compute longitudinal stickiness DT[, stick := round(100 * grad / ever, 1)]  # Graph the results DT <- DT[ever >= 10] DT <- DT[!race_sex %ilike% c(\"International|Other|Native\")] DT <- condition_multiway(   dframe = DT, # input data frame   categ_col = c(\"program\", \"race_sex\"), # multiway categorical variables   quant_col = \"stick\", # multiway quantitative variable   detail = FALSE, # do not return columns of details   order_by = \"percent\", # stickiness (a percentage) used to order rows and panels   param_col = c(\"grad\", \"ever\") # parameters for computing group stickiness ) ggplot(data = DT, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness (%)\",     y = \"\",     title = \"Ordered by computed group metric\",     caption = \"Source: midfielddata.\"   )"},{"path":"/articles/art-008-case-study-grad-rate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Case study graduation rate","text":"continue case study, tour typical workflow student unit record data. , sake brevity focus logic analysis leave detailed discussion functions arguments later vignettes. Assuming completed introduction four data tables (Getting started), case study four parts: Case study programs Case study students Case study stickiness Case study graduation rate ◁ . Longer vignettes detailed development methods functions related part study include: Timely completion FYE programs Multiway graphs Tabulating data","code":""},{"path":"/articles/art-008-case-study-grad-rate.html","id":"graduation-rate","dir":"Articles","previous_headings":"Introduction","what":"Graduation rate","title":"Case study graduation rate","text":"defined IPEDS: US, Integrated Postsecondary Education Data System (IPEDS) defines “graduation rate” fraction cohort full-time, first-time, degree-seeking undergraduates complete program within percentage (100%, 150%, 200%) “normal” time (typically 4 years) defined institution [1]. MIDFIELD team typically uses 150% (6-year) definition. IPEDS definition limits cohort studied excluding students attend college part-time, transfer one institution another, start college term Fall term. Moreover, IPEDS policy extend time limit students change majors (switchers) even student institution satisfied student graduated new major timely fashion. American Council Education (ACE) estimates definition graduation rate may exclude 60% students 4-year institutions [2]. use metric ? Cook Hartle explain, … eyes public, policy makers, media, graduation rate clear, simple, logical—often misleading—number. defined MIDFIELD: Compared IPEDS, inclusive cohort used MIDFIELD calculations graduation rate. differences summarized table. Comparing graduation rate criteria","code":""},{"path":"/articles/art-008-case-study-grad-rate.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Case study graduation rate","text":"Starting study_student data frame previous vignette (Case study students), : T T Compute graph graduation rate Save results use following midfieldr functions add_completion_timely() condition_multiway() vignette output data frame study_grad_rate.","code":""},{"path":"/articles/art-008-case-study-grad-rate.html","id":"apply-the-timely-completion-criterion","dir":"Articles","previous_headings":"","what":"Apply the timely completion criterion","title":"Case study graduation rate","text":"writing script follow along, start packages: gathered eligible students case study programs previous case study vignettes. data saved study_student data set loads midfieldr. View help page running Review data. data sufficiency criterion applied. usual, use assign working data frame DT. can count number graduates, assess whether graduates complete program timely manner. student graduating later timely-completion term grouped non-graduates purposes computing persistence metric. add_completion_timely() function requires input data frame timely_term column—. function accesses degree data determine term student’s first degree reports whether degree term () satisfies timely completion criterion.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # load data tables from midfielddata data(degree) ? study_student # Create a new memory location to avoid updating by reference DT <- copy(study_student)  # Examine the result DT #>              mcid   institution   cip6    program          race    sex #>            <char>        <char> <char>     <char>        <char> <char> #>    1: MID25783197 Institution M 140801      Civil         White   Male #>    2: MID25783441 Institution M 140801      Civil         White   Male #>    3: MID25783553 Institution M 140801      Civil         White   Male #>    4: MID25784209 Institution M 140801      Civil International   Male #>    5: MID25784489 Institution M 140801      Civil         Asian Female #>   ---                                                                  #> 8215: MID26692926 Institution L 143501 Industrial         White   Male #> 8216: MID26693368 Institution L 143501 Industrial         White   Male #> 8217: MID26695626 Institution L 143501 Industrial         White   Male #> 8218: MID26696116 Institution L 143501 Industrial         White Female #> 8219: MID26696429 Institution L 143501 Industrial         White Female #>       timely_term data_sufficiency #>            <char>           <lgcl> #>    1:       19923             TRUE #>    2:       19973             TRUE #>    3:       20073             TRUE #>    4:       20003             TRUE #>    5:       19943             TRUE #>   ---                              #> 8215:       20153             TRUE #> 8216:       20143             TRUE #> 8217:       20143             TRUE #> 8218:       20153             TRUE #> 8219:       20153             TRUE DT <- add_completion_timely(DT, midfield_degree = degree) DT #>              mcid   institution   cip6    program            race    sex #>            <char>        <char> <char>     <char>          <char> <char> #>    1: MID25783178 Institution M 143501 Industrial           Black   Male #>    2: MID25783197 Institution M 140801      Civil           White   Male #>    3: MID25783388 Institution M 141901 Mechanical           White   Male #>    4: MID25783441 Institution M 140801      Civil           White   Male #>    5: MID25783491 Institution M 141001 Electrical           White   Male #>   ---                                                                    #> 8215: MID26696958 Institution L 141901 Mechanical           White   Male #> 8216: MID26696967 Institution L 141901 Mechanical           White   Male #> 8217: MID26697163 Institution L 141901 Mechanical Hispanic/Latinx   Male #> 8218: MID26697444 Institution L 141901 Mechanical           White   Male #> 8219: MID26697447 Institution L 141001 Electrical           Asian   Male #>       timely_term data_sufficiency completion_timely #>            <char>           <lgcl>            <lgcl> #>    1:       20003             TRUE              TRUE #>    2:       19923             TRUE              TRUE #>    3:       19923             TRUE             FALSE #>    4:       19973             TRUE              TRUE #>    5:       20013             TRUE              TRUE #>   ---                                                #> 8215:       20163             TRUE             FALSE #> 8216:       20153             TRUE              TRUE #> 8217:       20143             TRUE              TRUE #> 8218:       20153             TRUE              TRUE #> 8219:       20163             TRUE              TRUE"},{"path":"/articles/art-008-case-study-grad-rate.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case study graduation rate","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")"},{"path":"/articles/art-010-program-codes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Program codes and names","text":"US, instructional programs encoded “CIP” codes. CIP acronym Classification Instructional Programs, taxonomy academic programs curated US Department Education [1]. 2010 CIP codes included midfieldr data set cip. IPEDS standard encoding format two-digit number followed period, followed four-digit number, example, 14.0102 [2]. MIDFIELD uses numerals, omits period, .e., 140102, stores variable character string. vignette, practice strategies searching cip programs want study.","code":""},{"path":"/articles/art-010-program-codes.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Program codes and names","text":"Explore taxonomy academic programs Inspect CIP data Practice searching CIP data using different approaches Assigning program names Save results","code":""},{"path":"/articles/art-010-program-codes.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Program codes and names","text":"midfieldr functions filter_search() packages data","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # CIP codes and names loads with midfieldr cip #>         cip2                                                  cip2name   cip4 #>       <char>                                                    <char> <char> #>    1:     01 Agriculture, Agricultural Operations and Related Sciences   0100 #>    2:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    3:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    4:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    5:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>   ---                                                                         #> 1578:     54                                                   History   5401 #> 1579:     54                                                   History   5401 #> 1580:     54                                                   History   5401 #> 1581:     54                                                   History   5401 #> 1582:     99                         NonIPEDS - Undecided, Unspecified   9999 #>                                   cip4name   cip6 #>                                     <char> <char> #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>    4: Agricultural Business and Management 010103 #>    5: Agricultural Business and Management 010104 #>   ---                                             #> 1578:                              History 540106 #> 1579:                              History 540107 #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>                                               <char> #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>    4:                         Agricultural Economics #>    5:                Farm, Farm and Ranch Management #>   ---                                                #> 1578:                                  Asian History #> 1579:                               Canadian History #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified"},{"path":"/articles/art-010-program-codes.html","id":"taxonomy-of-programs","dir":"Articles","previous_headings":"","what":"Taxonomy of programs","title":"Program codes and names","text":"Academic programs three levels codes names: 6-digit code, specific program 4-digit code, group 6-digit programs comparable content 2-digit code, grouping 4-digit groups related content Loosely, 6-digit level can thought specialty within discipline, 4-digit level often equivalent academic department, 2-digit level roughly equivalent academic college. example, Geotechnical Engineering (140802) specialty Civil Engineering (1408) department college Engineering (14). table , show programs broad area “Science Technologies, Technicians” (code 41) illustrate relationships among 2-, 4-, 6-digit program codes names detail. 2-digit grouping subdivided 5 groups 4-digit level (codes 4100–4199) subdivided 9 programs 6-digit level (codes 410000–419999).  number 6-digit programs 4-digit group varies program. Four-digit groupings include anywhere 1 program (code 4100 example) 37 programs (code 1313 Education). Similarly, 2-digit groupings include anywhere four 4-digit programs (code 24 Liberal Arts Sciences, General Studies Humanities) 238 programs (code 51 Health Professions Related Clinical Sciences).","code":""},{"path":"/articles/art-010-program-codes.html","id":"inspect-the-cip-data","dir":"Articles","previous_headings":"","what":"Inspect the cip data","title":"Program codes and names","text":"Data set loads midfieldr. definitions variables, view help page running see data structure, run following. Note variables character strings, protect leading zeros codes. see observations, run number unique programs. sample program names (sample() uses random number generator, result differ shown)","code":"? cip str(cip) #> Classes 'data.table' and 'data.frame':   1582 obs. of  6 variables: #>  $ cip2    : chr  \"01\" \"01\" \"01\" \"01\" ... #>  $ cip2name: chr  \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" ... #>  $ cip4    : chr  \"0100\" \"0101\" \"0101\" \"0101\" ... #>  $ cip4name: chr  \"Agriculture, General\" \"Agricultural Business and Management\" \"Agricultural Business and Management\" \"Agricultural Business and Management\" ... #>  $ cip6    : chr  \"010000\" \"010101\" \"010102\" \"010103\" ... #>  $ cip6name: chr  \"Agriculture, General\" \"Agricultural Business and Management, General\" \"Agribusiness, Agricultural Business Operations\" \"Agricultural Economics\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> cip #>         cip2                                                  cip2name   cip4 #>       <char>                                                    <char> <char> #>    1:     01 Agriculture, Agricultural Operations and Related Sciences   0100 #>    2:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    3:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    4:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    5:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>   ---                                                                         #> 1578:     54                                                   History   5401 #> 1579:     54                                                   History   5401 #> 1580:     54                                                   History   5401 #> 1581:     54                                                   History   5401 #> 1582:     99                         NonIPEDS - Undecided, Unspecified   9999 #>                                   cip4name   cip6 #>                                     <char> <char> #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>    4: Agricultural Business and Management 010103 #>    5: Agricultural Business and Management 010104 #>   ---                                             #> 1578:                              History 540106 #> 1579:                              History 540107 #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>                                               <char> #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>    4:                         Agricultural Economics #>    5:                Farm, Farm and Ranch Management #>   ---                                                #> 1578:                                  Asian History #> 1579:                               Canadian History #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified # at the 2-digit level sort(unique(cip$cip2)) #>  [1] \"01\" \"03\" \"04\" \"05\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"19\" \"22\" \"23\" #> [16] \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" #> [31] \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"54\" #> [46] \"99\"  # at the 4-digit level sort(unique(cip$cip4)) #>   [1] \"0100\" \"0101\" \"0102\" \"0103\" \"0104\" \"0105\" \"0106\" \"0107\" \"0108\" \"0109\" #>  [11] \"0110\" \"0111\" \"0112\" \"0199\" \"0301\" \"0302\" \"0303\" \"0305\" \"0306\" \"0399\" #>  [21] \"0402\" \"0403\" \"0404\" \"0405\" \"0406\" \"0408\" \"0409\" \"0410\" \"0499\" \"0501\" #>  [31] \"0502\" \"0599\" \"0901\" \"0904\" \"0907\" \"0909\" \"0910\" \"0999\" \"1001\" \"1002\" #>  [41] \"1003\" \"1099\" \"1100\" \"1101\" \"1102\" \"1103\" \"1104\" \"1105\" \"1106\" \"1107\" #>  [51] \"1108\" \"1109\" \"1110\" \"1199\" \"1203\" \"1204\" \"1205\" \"1299\" \"1301\" \"1302\" #>  [61] \"1303\" \"1304\" \"1305\" \"1306\" \"1307\" \"1309\" \"1310\" \"1311\" \"1312\" \"1313\" #>  [71] \"1314\" \"1315\" \"1399\" \"1401\" \"1402\" \"1403\" \"1404\" \"1405\" \"1406\" \"1407\" #>  [81] \"1408\" \"1409\" \"1410\" \"1411\" \"1412\" \"1413\" \"1414\" \"1418\" \"1419\" \"1420\" #>  [91] \"1421\" \"1422\" \"1423\" \"1424\" \"1425\" \"1427\" \"1428\" \"1431\" \"1432\" \"1433\" #> [101] \"1434\" \"1435\" \"1436\" \"1437\" \"1438\" \"1439\" \"1440\" \"1441\" \"1442\" \"1443\" #> [111] \"1444\" \"1445\" \"1499\" \"1500\" \"1501\" \"1502\" \"1503\" \"1504\" \"1505\" \"1506\" #> [121] \"1507\" \"1508\" \"1509\" \"1510\" \"1511\" \"1512\" \"1513\" \"1514\" \"1515\" \"1516\" #> [131] \"1599\" \"1600\" \"1601\" \"1602\" \"1603\" \"1604\" \"1605\" \"1606\" \"1607\" \"1608\" #> [141] \"1609\" \"1610\" \"1611\" \"1612\" \"1613\" \"1614\" \"1615\" \"1616\" \"1699\" \"1900\" #> [151] \"1901\" \"1902\" \"1904\" \"1905\" \"1906\" \"1907\" \"1909\" \"1999\" \"2200\" \"2201\" #> [161] \"2202\" \"2203\" \"2299\" \"2301\" \"2304\" \"2305\" \"2307\" \"2308\" \"2310\" \"2311\" #> [171] \"2313\" \"2314\" \"2399\" \"2401\" \"2501\" \"2503\" \"2599\" \"2601\" \"2602\" \"2603\" #> [181] \"2604\" \"2605\" \"2606\" \"2607\" \"2608\" \"2609\" \"2610\" \"2611\" \"2612\" \"2613\" #> [191] \"2614\" \"2615\" \"2699\" \"2701\" \"2703\" \"2705\" \"2799\" \"2801\" \"2803\" \"2804\" #> [201] \"2805\" \"2806\" \"2807\" \"2899\" \"2902\" \"2903\" \"2904\" \"2999\" \"3000\" \"3001\" #> [211] \"3005\" \"3006\" \"3008\" \"3010\" \"3011\" \"3012\" \"3013\" \"3014\" \"3015\" \"3016\" #> [221] \"3017\" \"3018\" \"3019\" \"3020\" \"3021\" \"3022\" \"3023\" \"3024\" \"3025\" \"3026\" #> [231] \"3027\" \"3028\" \"3029\" \"3030\" \"3031\" \"3032\" \"3033\" \"3099\" \"3101\" \"3103\" #> [241] \"3105\" \"3106\" \"3199\" \"3201\" \"3301\" \"3401\" \"3501\" \"3601\" \"3701\" \"3800\" #> [251] \"3801\" \"3802\" \"3899\" \"3902\" \"3903\" \"3904\" \"3905\" \"3906\" \"3907\" \"3999\" #> [261] \"4001\" \"4002\" \"4004\" \"4005\" \"4006\" \"4008\" \"4010\" \"4099\" \"4100\" \"4101\" #> [271] \"4102\" \"4103\" \"4199\" \"4201\" \"4227\" \"4228\" \"4299\" \"4301\" \"4302\" \"4303\" #> [281] \"4399\" \"4400\" \"4402\" \"4404\" \"4405\" \"4407\" \"4499\" \"4501\" \"4502\" \"4503\" #> [291] \"4504\" \"4505\" \"4506\" \"4507\" \"4509\" \"4510\" \"4511\" \"4512\" \"4513\" \"4514\" #> [301] \"4599\" \"4600\" \"4601\" \"4602\" \"4603\" \"4604\" \"4605\" \"4699\" \"4700\" \"4701\" #> [311] \"4702\" \"4703\" \"4704\" \"4706\" \"4799\" \"4800\" \"4803\" \"4805\" \"4807\" \"4808\" #> [321] \"4899\" \"4901\" \"4902\" \"4903\" \"4999\" \"5001\" \"5002\" \"5003\" \"5004\" \"5005\" #> [331] \"5006\" \"5007\" \"5009\" \"5010\" \"5099\" \"5100\" \"5101\" \"5102\" \"5104\" \"5105\" #> [341] \"5106\" \"5107\" \"5108\" \"5109\" \"5110\" \"5111\" \"5112\" \"5114\" \"5115\" \"5117\" #> [351] \"5118\" \"5119\" \"5120\" \"5121\" \"5122\" \"5123\" \"5124\" \"5125\" \"5126\" \"5127\" #> [361] \"5131\" \"5132\" \"5133\" \"5134\" \"5135\" \"5136\" \"5137\" \"5138\" \"5139\" \"5199\" #> [371] \"5201\" \"5202\" \"5203\" \"5204\" \"5205\" \"5206\" \"5207\" \"5208\" \"5209\" \"5210\" #> [381] \"5211\" \"5212\" \"5213\" \"5214\" \"5215\" \"5216\" \"5217\" \"5218\" \"5219\" \"5220\" #> [391] \"5221\" \"5299\" \"5401\" \"9999\"  # at the 6-digit level length(unique(cip$cip6)) #> [1] 1582 some_programs <- cip[, cip4name, drop = FALSE] sample(some_programs, 20) #>  [1] \"Educational Administration and Supervision\"                             #>  [2] \"Linguistic, Comparative Related Language Studies and Services\"          #>  [3] \"Business Operations Support and Assistant Services\"                     #>  [4] \"Biomedical, Medical Engineering\"                                        #>  [5] \"Human Development, Family Studies Related Services\"                     #>  [6] \"Industrial Production Technologies, Technicians\"                        #>  [7] \"Somatic Bodywork and Related Therapeutic Services\"                      #>  [8] \"Business Operations Support and Assistant Services\"                     #>  [9] \"Rehabilitation and Therapeutic Professions\"                             #> [10] \"Astronomy and Astrophysics\"                                             #> [11] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #> [12] \"Applied Horticulture, Horticultural Business Services\"                  #> [13] \"Ophthalmic and Optometric Support Services and Allied Professions\"      #> [14] \"Specialized Sales, Merchandising and Marketing Operations\"              #> [15] \"Engineering-Related Fields\"                                             #> [16] \"Teacher Education and Professional Development, Specific Subject Areas\" #> [17] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #> [18] \"Leatherworking and Upholstery\"                                          #> [19] \"Health, Medical Preparatory Programs\"                                   #> [20] \"Research and Experimental Psychology\""},{"path":"/articles/art-010-program-codes.html","id":"filter-using-a-keyword-search","dir":"Articles","previous_headings":"","what":"Filter using a keyword search","title":"Program codes and names","text":"filter_search() midfieldr function searching cip data set program codes names. View help page running variables cip characters filter_search() subsets data frame using character search terms. arguments : dframe data frame subset keep_text character vector search text retaining rows, case-sensitive drop_text (optional) character vector search text dropping rows select (optional) character vector column names search return, default columns example, filtering CIP data programs containing word “engineering” yields 119 observations. first two arguments filter_search() named explicitly, optional drop_text select arguments . Columns select subset filtering keep_text drop_text. Thus repeat search different column selection return rows different columns. Suppose want find CIP codes names programs Civil Engineering. search insensitive case, start following code chunk. information tabulated help see structure. examples follow, show table like one instead R output.  search returns programs Civilization names well Engineering Technology. wanted Civil Engineering , can use sequence function calls, outcome one operation assigned first argument next operation. following code chunk read , “Start cip data frame, keep rows ‘civil’ detected, keep rows ‘engineering’ detected, drop rows ‘technology’ detected.”  Seeing Civil Engineering programs cip4name, used keep_text = c(\"civil engineering\") narrow search rows match full phrase. example, produces result reported table .","code":"? filter_search() # filter basics filter_search(dframe = cip, keep_text = \"engineering\") #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>   4:     14                                      Engineering   1403 #>   5:     14                                      Engineering   1404 #>  ---                                                                #> 115:     15                           Engineering Technology   1516 #> 116:     15                           Engineering Technology   1599 #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                     cip4name   cip6 #>                                                       <char> <char> #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering # applying optional argument drop_text and select filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip6\", \"cip6name\") ) #>       cip6                                                     cip6name #>     <char>                                                       <char> #>  1: 140101                                         Engineering, General #>  2: 140102                                              Pre-Engineering #>  3: 140201 Aerospace, Aeronautical and Astronautical, Space Engineering #>  4: 140301      Agricultural, Biological Engineering and Bioengineering #>  5: 140401                                    Architectural Engineering #> ---                                                                     #> 50: 144201            Mechatronics, Robotics and Automation Engineering #> 51: 144301                                      Biochemical Engineering #> 52: 144401                                        Engineering Chemistry #> 53: 144501                           Biological, Biosystems Engineering #> 54: 149999                                           Engineering, Other # repeat search with different columns selected filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip4\", \"cip4name\") ) #>       cip4                                                cip4name #>     <char>                                                  <char> #>  1:   1401                                    Engineering, General #>  2:   1401                                    Engineering, General #>  3:   1402   Aerospace, Aeronautical and Astronautical Engineering #>  4:   1403 Agricultural, Biological Engineering and Bioengineering #>  5:   1404                               Architectural Engineering #> ---                                                                #> 50:   1442       Mechatronics, Robotics and Automation Engineering #> 51:   1443                                 Biochemical Engineering #> 52:   1444                                   Engineering Chemistry #> 53:   1445                      Biological, Biosystems Engineering #> 54:   1499                                      Engineering, Other # example 1 filter using keywords filter_search(cip, \"civil\") #>       cip2                                            cip2name   cip4 #>     <char>                                              <char> <char> #>  1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #>  2:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #>  3:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #>  4:     14                                         Engineering   1408 #>  5:     14                                         Engineering   1408 #> ---                                                                   #>  8:     14                                         Engineering   1408 #>  9:     14                                         Engineering   1408 #> 10:     15                              Engineering Technology   1502 #> 11:     15                              Engineering Technology   1513 #> 12:     30                     Muti, Interdisciplinary Studies   3022 #>                                                                       cip4name #>                                                                         <char> #>  1:                                                               Area Studies #>  2:                                                               Area Studies #>  3:                                                               Area Studies #>  4:                                                          Civil Engineering #>  5:                                                          Civil Engineering #> ---                                                                            #>  8:                                                          Civil Engineering #>  9:                                                          Civil Engineering #> 10:                                Civil Engineering Technologies, Technicians #> 11:                     Drafting, Design Engineering Technologies, Technicians #> 12: Classical and Ancient, Oriental Studies - Multi, Interdisciplinary Studies #>       cip6                                                         cip6name #>     <char>                                                           <char> #>  1: 050102                    American, United States Studies, Civilization #>  2: 050103                                      Asian Studies, Civilization #>  3: 050106                                   European Studies, Civilization #>  4: 140801                                       Civil Engineering, General #>  5: 140802                                         Geotechnical Engineering #> ---                                                                         #>  8: 140805                                      Water Resources Engineering #>  9: 140899                                         Civil Engineering, Other #> 10: 150201                         Civil Engineering Technology, Technician #> 11: 151304                   Civil Drafting and Civil Engineering CAD, CADD #> 12: 302201 Multi, Interdisciplinary Studies - Ancient Studies, Civilization # first search first_pass <- filter_search(cip, \"civil\")  # refine the search second_pass <- filter_search(first_pass, \"engineering\")  # refine further third_pass <- filter_search(second_pass, drop_text = \"technology\") filter_search(cip, \"civil engineering\", drop_text = \"technology\")"},{"path":"/articles/art-010-program-codes.html","id":"exercises","dir":"Articles","previous_headings":"Filter using a keyword search","what":"Exercises","title":"Program codes and names","text":"Determine set 6-digit CIP codes expect used College Business. social sciences 2-digit CIP necessarily include possible social science programs. Let anthropology, economics, geography, linguistics, political science, jurisprudence, psychology, sociology defined social sciences. Determine set 6-digit codes collect study programs.","code":""},{"path":"/articles/art-010-program-codes.html","id":"filter-using-a-numerical-code-search","dir":"Articles","previous_headings":"","what":"Filter using a numerical code search","title":"Program codes and names","text":"Suppose want study programs relating German culture, language, literature. Using “german” keep_text value yields  6-digit program names find two interest, German Studies (050125) German Language Literature (160501). use character vector assign two codes keep_text argument.  6-digit codes entered integers, produce error.","code":"# example 2 filter using numerical codes filter_search(cip, \"german\") # character vector of search terms  filter_search(cip, c(\"050125\", \"160501\")) filter_search(cip, c(050125, 160501)) #> Error in filter_search(cip, c(50125, 160501)): Assertion on 'keep_text' failed. Must be of class 'string', not 'double'."},{"path":"/articles/art-010-program-codes.html","id":"exercise","dir":"Articles","previous_headings":"Filter using a numerical code search","what":"Exercise","title":"Program codes and names","text":"Social sciences exercise previous section, searching “jurisprudence” produced two codes: “220203” “220204.” Search cip two codes determine 2-digit program belong. Identify 2-digit CIP history. Use numerical search programs start 2-digit CIP. Subset 6-digit CIPs 6-digit CIP names. Assign result object name exercise_cip. Answer given , check work.","code":"# Answer to exercise 2. exercise_cip #>      cip6                                            cip6name #>    <char>                                              <char> #> 1: 540101                                    History, General #> 2: 540102                    American History (United States) #> 3: 540103                                    European History #> 4: 540104    History and Philosophy of Science and Technology #> 5: 540105 Public, Applied History and Archival Administration #> 6: 540106                                       Asian History #> 7: 540107                                    Canadian History #> 8: 540108                                    Military History #> 9: 540199                                      History, Other"},{"path":"/articles/art-010-program-codes.html","id":"filter-using-a-regular-expression-search","dir":"Articles","previous_headings":"","what":"Filter using a regular expression search","title":"Program codes and names","text":"Specifying 4-digit codes yields data frame 6-digit programs containing 4-digit string. use regular expression notation ^ match start strings.  2-digit series represent general groupings related programs. , result includes History programs.  series argument can include combination 2, 4, 6-digit codes. can also passed function character vector.","code":"# example 3 filter using regular expressions filter_search(cip, c(\"^1407\", \"^1408\")) # 2-digit example filter_search(cip, \"^54\") # character vector of search terms codes_we_want <- c(\"^24\", \"^4102\", \"^450202\")  # a series with 2, 4, and 6-digits specified filter_search(cip, codes_we_want)"},{"path":"/articles/art-010-program-codes.html","id":"when-search-terms-cannot-be-found","dir":"Articles","previous_headings":"","what":"When search terms cannot be found","title":"Program codes and names","text":"keep_text argument includes terms found CIP data frame, unsuccessful terms identified message successful terms produce usual output. example, following keep_text argument includes three search terms present CIP data (“111111,” “^55,” “Bogus”) two (“050125” “160501”). However, seen earlier, none search terms found, error occurs.","code":"# unsuccessful terms produce a message sub_cip <- filter_search(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) #> Can't find these terms: 111111, Bogus, ^55  # but the successful terms are returned sub_cip #>      cip2                                            cip2name   cip4 #>    <char>                                              <char> <char> #> 1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #> 2:     16      Foreign Languages, Literatures and Linguistics   1605 #>                                       cip4name   cip6 #>                                         <char> <char> #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #>                            <char> #> 1:                 German Studies #> 2: German Language and Literature filter_search(cip, c(\"111111\", \"Bogus\", \"^55\")) #> Error: The search result is empty. Possible causes are: #>  * 'dframe' contained no matches to terms in 'keep_text'. #>  * 'drop_text' eliminated all remaining rows."},{"path":"/articles/art-010-program-codes.html","id":"exercise-1","dir":"Articles","previous_headings":"When search terms cannot be found","what":"Exercise","title":"Program codes and names","text":"Determine set programs 4-digit codes “220203” “220204.”","code":""},{"path":"/articles/art-010-program-codes.html","id":"cip-data-from-another-source","dir":"Articles","previous_headings":"","what":"CIP data from another source","title":"Program codes and names","text":"use CIP data set another source, must structure cip: six character columns named follows,","code":"# name and class of variables (columns) in cip unlist(lapply(cip, FUN = class)) #>        cip2    cip2name        cip4    cip4name        cip6    cip6name  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"/articles/art-010-program-codes.html","id":"assigning-program-names","dir":"Articles","previous_headings":"","what":"Assigning program names","title":"Program codes and names","text":"may noticed program names CIP tend verbose. addition, groups programs particular institution may grouped differently CIP structure, e.g., Liberal Arts, Humanities, Arts Sciences. always found useful, therefore, add program column data frame CIP codes customized label group programs. use case study group four engineering programs illustrate several methods adding program column CIP data frame. First, assume ’ve found 4-digit codes four engineering programs: Civil (1408), Electrical (1410), Mechanical (1419), Industrial (1435). obtain CIP codes names, approach assign new program column values cip4name column, edit new column values","code":"options(datatable.print.nrows = 12)  # Four engineering programs DT <- filter_search(cip, c(\"^1408\", \"^1410\", \"^1419\", \"^1435\"))  # Retain the needed columns cols_we_want <- c(\"cip6\", \"cip4name\") DT <- DT[, ..cols_we_want]  # Examine the result DT #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering # Assign a new column DT[, program := cip4name]  # Examine the result DT #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                                                    program #>                                                     <char> #>  1:                                      Civil Engineering #>  2:                                      Civil Engineering #>  3:                                      Civil Engineering #>  4:                                      Civil Engineering #>  5:                                      Civil Engineering #>  6:                                      Civil Engineering #>  7: Electrical, Electronics and Communications Engineering #>  8: Electrical, Electronics and Communications Engineering #>  9: Electrical, Electronics and Communications Engineering #> 10: Electrical, Electronics and Communications Engineering #> 11:                                 Mechanical Engineering #> 12:                                 Industrial Engineering"},{"path":"/articles/art-010-program-codes.html","id":"use-program-like-to-edit-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"1. Use program %like% to edit one value","title":"Program codes and names","text":"%like% function essentially wrapper function around base R grepl() function. See help page running (back-ticks facilitate help search terms starting symbol): approach, search one distinctive term .","code":"? `%like%` # return matches in the cip4name column temp <- copy(DT) rows_to_edit <- temp$program %ilike% \"electrical\" temp[rows_to_edit, program := \"Electrical Engineering\"] temp #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                    program #>                     <char> #>  1:      Civil Engineering #>  2:      Civil Engineering #>  3:      Civil Engineering #>  4:      Civil Engineering #>  5:      Civil Engineering #>  6:      Civil Engineering #>  7: Electrical Engineering #>  8: Electrical Engineering #>  9: Electrical Engineering #> 10: Electrical Engineering #> 11: Mechanical Engineering #> 12: Industrial Engineering"},{"path":"/articles/art-010-program-codes.html","id":"use-cip6-like-to-edit-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"2. Use cip6 %like% to edit one value","title":"Program codes and names","text":"second approach, use %like% function , apply CIP codes. use regular expression ^1410 meaning “starts 1410.”","code":"# return matches that start with 1410 temp <- copy(DT) rows_to_edit <- temp$cip6 %like% \"^1410\" temp[rows_to_edit, program := \"Electrical Engineering\"] temp #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                    program #>                     <char> #>  1:      Civil Engineering #>  2:      Civil Engineering #>  3:      Civil Engineering #>  4:      Civil Engineering #>  5:      Civil Engineering #>  6:      Civil Engineering #>  7: Electrical Engineering #>  8: Electrical Engineering #>  9: Electrical Engineering #> 10: Electrical Engineering #> 11: Mechanical Engineering #> 12: Industrial Engineering"},{"path":"/articles/art-010-program-codes.html","id":"use-program-fcase-to-edit-all-values","dir":"Articles","previous_headings":"Assigning program names","what":"3. Use program := fcase() to edit all values","title":"Program codes and names","text":"approach, use data.table fcase() function change program names one word labels. %ilike% variant %like% sets ignore.case = TRUE. completed labeling programs, can remove original verbose cip4nme column. needed, can always recover names using values cip6 column.","code":"DT[, program := fcase(   program %ilike% \"civil\", \"Civil\",   program %ilike% \"electrical\", \"Electrical\",   program %ilike% \"mechanical\", \"Mechanical\",   program %ilike% \"industrial\", \"Industrial\" )] DT #>       cip6                                               cip4name    program #>     <char>                                                 <char>     <char> #>  1: 140801                                      Civil Engineering      Civil #>  2: 140802                                      Civil Engineering      Civil #>  3: 140803                                      Civil Engineering      Civil #>  4: 140804                                      Civil Engineering      Civil #>  5: 140805                                      Civil Engineering      Civil #>  6: 140899                                      Civil Engineering      Civil #>  7: 141001 Electrical, Electronics and Communications Engineering Electrical #>  8: 141003 Electrical, Electronics and Communications Engineering Electrical #>  9: 141004 Electrical, Electronics and Communications Engineering Electrical #> 10: 141099 Electrical, Electronics and Communications Engineering Electrical #> 11: 141901                                 Mechanical Engineering Mechanical #> 12: 143501                                 Industrial Engineering Industrial DT[, cip4name := NULL]  DT #>       cip6    program #>     <char>     <char> #>  1: 140801      Civil #>  2: 140802      Civil #>  3: 140803      Civil #>  4: 140804      Civil #>  5: 140805      Civil #>  6: 140899      Civil #>  7: 141001 Electrical #>  8: 141003 Electrical #>  9: 141004 Electrical #> 10: 141099 Electrical #> 11: 141901 Mechanical #> 12: 143501 Industrial"},{"path":"/articles/art-010-program-codes.html","id":"exercises-1","dir":"Articles","previous_headings":"Assigning program names","what":"Exercises","title":"Program codes and names","text":"Assign copy exercise_cip (exercise previous section) name exercise_program. Add program column exercise_program initial values cip6name. Rename “General” “” “General History” Shorten “History Philosophy…” “Science Techn” Shorten “American History …” “US History” Shorten “Public Applied …” “Resource Admin” Delete cip6name column. Answer given check work.","code":"# Answer exercise_program #>      cip6           program #>    <char>            <char> #> 1: 540101   General History #> 2: 540102        US History #> 3: 540103  European History #> 4: 540104 Science and Techn #> 5: 540105    Resource Admin #> 6: 540106     Asian History #> 7: 540107  Canadian History #> 8: 540108  Military History #> 9: 540199   General History"},{"path":"/articles/art-010-program-codes.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save results","title":"Program codes and names","text":"identified set codes names programs want study, save use later without rerunning code created . example, save program codes names DT data frame project results directory easy access work study. file path names shown read/write commands relative file paths incorporating two assumptions—first described Getting started working RStudio project. project main directory contains results folder. use fast write fwrite() data.table. can view help page running may prefer read/write functions base R packages readr rio, ’ll use data.table functions. read using fread(). use colClasses argument ensure cip6 variable type read character, integer. suggest saving intermediate results like significant milestone study, especially steps requiring lot computing time.","code":"? fwrite # write to the results directory fwrite(DT, file = \"results/case_program.csv\") # read from the results directory case_program <- fread(   \"results/case_program.csv\",   colClasses = list(character = c(\"cip6\")) )"},{"path":"/articles/art-010-program-codes.html","id":"exercises-2","dir":"Articles","previous_headings":"Save results","what":"Exercises","title":"Program codes and names","text":"Write copy exercise results (exercise_program) file local results directory.","code":""},{"path":"/articles/art-010-program-codes.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Program codes and names","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # cip str(cip) sort(unique(cip$cip2)) sort(unique(cip$cip4)) length(unique(cip$cip6)) some_programs <- cip[, cip4name, drop = FALSE] sample(some_programs, 20)  # filter using keywords filter_search(dframe = cip, keep_text = \"engineering\") filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip6\", \"cip6name\") ) filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip4\", \"cip4name\") ) filter_search(cip, \"civil\") first_pass <- filter_search(cip, \"civil\") second_pass <- filter_search(first_pass, \"engineering\") third_pass <- filter_search(second_pass, drop_text = \"technology\") filter_search(cip, \"civil engineering\", drop_text = \"technology\")  # filter using numerical codes filter_search(cip, \"german\") filter_search(cip, c(\"050125\", \"160501\")) filter_search(cip, c(\"^1407\", \"^1408\")) filter_search(cip, \"^54\") codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_search(cip, codes_we_want)  # when search terms cannot be found sub_cip <- filter_search(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) sub_cip  # Assigning program names DT <- filter_search(cip, c(\"^1408\", \"^1410\", \"^1419\", \"^1435\")) cols_we_want <- c(\"cip6\", \"cip4name\") DT <- DT[, ..cols_we_want] DT[, program := cip4name] temp <- copy(DT) rows_to_edit <- temp$program %ilike% \"electrical\" temp[rows_to_edit, program := \"Electrical Engineering\"] temp <- copy(DT) rows_to_edit <- temp$cip6 %like% \"^1410\" temp[rows_to_edit, program := \"Electrical Engineering\"] DT[, program := fcase(   program %ilike% \"civil\", \"Civil\",   program %ilike% \"electrical\", \"Electrical\",   program %ilike% \"mechanical\", \"Mechanical\",   program %ilike% \"industrial\", \"Industrial\" )] DT[, cip4name := NULL]  # results directory read/write fwrite(DT, file = \"results/case_program.csv\") case_program <- fread(   \"results/case_program.csv\",   colClasses = list(character = c(\"cip6\")) )"},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Subsetting MIDFIELD data","text":"previous vignette, practiced gathering 6-digit CIP codes programs want study assigning custom program label . vignette, use programs codes subset MIDFIELD data tables. examples practice exercises illustrate number data manipulation methods regularly use working student unit record data.","code":""},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Subsetting MIDFIELD data","text":"Subset program code Subset ID Merge program names","code":""},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Subsetting MIDFIELD data","text":"midfieldr functions filter_match() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) data(student, term, degree)"},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"subset-by-program-code","dir":"Articles","previous_headings":"","what":"Subset by program code","title":"Subsetting MIDFIELD data","text":"examples, use study_program data frame starting point subset MIDFIELD data tables. can view help page running Review structure, extract students programs graduated, subset rows degree keep values cip6 match values cip6 study_program. often want select specific rows well, e.g., two operations combined, code chunk represents routine encounter fairly often: subset rows one data frame keep values key variable match values key variable second data frame. use filter_match() entire task: subset rows degree keep values cip6 match values cip6 study_program return three columns degree subset. duplicate rows possibility want delete , unique() job.","code":"? study_program study_program #>       cip6    program #>     <char>     <char> #>  1: 140801      Civil #>  2: 140802      Civil #>  3: 140803      Civil #>  4: 140804      Civil #>  5: 140805      Civil #> ---                   #>  8: 141003 Electrical #>  9: 141004 Electrical #> 10: 141099 Electrical #> 11: 141901 Mechanical #> 12: 143501 Industrial # subset degree rows rows_we_want <- degree$cip6 %chin% study_program$cip6 dframe <- degree[rows_we_want]  # examine the result dframe #>              mcid   institution   term   cip6              degree #>            <char>        <char> <char> <char>              <char> #>    1: MID25783178 Institution M  20001 143501 Bachelor of Science #>    2: MID25783197 Institution M  19911 140801 Bachelor of Science #>    3: MID25783441 Institution M  19963 140801 Bachelor of Science #>    4: MID25783491 Institution M  20001 141001 Bachelor of Science #>    5: MID25783912 Institution M  20001 143501 Bachelor of Science #>   ---                                                             #> 4672: MID26696738 Institution L  20133 141901 Bachelor of Science #> 4673: MID26696771 Institution L  20143 141001 Bachelor of Science #> 4674: MID26696967 Institution L  20141 141901 Bachelor of Science #> 4675: MID26697163 Institution L  20133 141901 Bachelor of Science #> 4676: MID26697447 Institution L  20154 141001 Bachelor of Science # subset degree columns cols_we_want <- c(\"mcid\", \"institution\", \"cip6\") dframe <- dframe[, ..cols_we_want]  # examine the result dframe #>              mcid   institution   cip6 #>            <char>        <char> <char> #>    1: MID25783178 Institution M 143501 #>    2: MID25783197 Institution M 140801 #>    3: MID25783441 Institution M 140801 #>    4: MID25783491 Institution M 141001 #>    5: MID25783912 Institution M 143501 #>   ---                                  #> 4672: MID26696738 Institution L 141901 #> 4673: MID26696771 Institution L 141001 #> 4674: MID26696967 Institution L 141901 #> 4675: MID26697163 Institution L 141901 #> 4676: MID26697447 Institution L 141001 # subset rows and columns rows_we_want <- degree$cip6 %chin% study_program$cip6 cols_we_want <- c(\"mcid\", \"institution\", \"cip6\") dframe <- degree[rows_we_want, ..cols_we_want]  # examine the result dframe #>              mcid   institution   cip6 #>            <char>        <char> <char> #>    1: MID25783178 Institution M 143501 #>    2: MID25783197 Institution M 140801 #>    3: MID25783441 Institution M 140801 #>    4: MID25783491 Institution M 141001 #>    5: MID25783912 Institution M 143501 #>   ---                                  #> 4672: MID26696738 Institution L 141901 #> 4673: MID26696771 Institution L 141001 #> 4674: MID26696967 Institution L 141901 #> 4675: MID26697163 Institution L 141901 #> 4676: MID26697447 Institution L 141001 # subset degree table case_degree <- filter_match(degree,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"institution\", \"cip6\") )  # compare to the DT we obtained above after ordering rows the same way all.equal(case_degree[order(mcid)], dframe[order(mcid)]) #> [1] TRUE # omit duplicate rows if any case_degree <- unique(case_degree)  # examine the results case_degree #>              mcid   institution   cip6 #>            <char>        <char> <char> #>    1: MID25783197 Institution M 140801 #>    2: MID25783441 Institution M 140801 #>    3: MID25784334 Institution M 140801 #>    4: MID25784418 Institution M 140801 #>    5: MID25784489 Institution M 140801 #>   ---                                  #> 4672: MID26689274 Institution L 143501 #> 4673: MID26692926 Institution L 143501 #> 4674: MID26695626 Institution L 143501 #> 4675: MID26696116 Institution L 143501 #> 4676: MID26696429 Institution L 143501"},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"subset-by-id","dir":"Articles","previous_headings":"","what":"Subset by ID","title":"Subsetting MIDFIELD data","text":"Another common data access task retrieve information student ID. Suppose wanted examine transfer status time admission students degrees subset . use filter_match() subset rows student keep values mcid match values mcid case_degree return three columns student subset. next step compare numbers students transfer status, use .N data.table. example,","code":"# subset student table case_student <- filter_match(student,   match_to = case_degree,   by_col = \"mcid\",   select = c(\"mcid\", \"transfer\", \"hours_transfer\") ) # examine the result case_student #>              mcid              transfer hours_transfer #>            <char>                <char>          <num> #>    1: MID25783178 First-Time in College             NA #>    2: MID25783197 First-Time in College             NA #>    3: MID25783441 First-Time in College             NA #>    4: MID25783491 First-Time in College             NA #>    5: MID25783912 First-Time in College             NA #>   ---                                                  #> 4672: MID26696738   First-Time Transfer             84 #> 4673: MID26696771 First-Time in College             NA #> 4674: MID26696967 First-Time in College             NA #> 4675: MID26697163 First-Time in College             NA #> 4676: MID26697447 First-Time in College             NA # omit any duplicate rows before counting case_student <- unique(case_student) case_student[, .N, by = \"transfer\"] #>                 transfer     N #>                   <char> <int> #> 1: First-Time in College  3873 #> 2:   First-Time Transfer   803"},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"merge-program-names","dir":"Articles","previous_headings":"","what":"Merge program names","title":"Subsetting MIDFIELD data","text":"Another common use study_program data merge program names another data frame matching cip6 values. program names can used grouping summarizing. example, let’s join program names case degree data frame created . .x = TRUE argument performs merge “left outer join,” retaining rows case_degree (“left” data frame). next step group summarize program, use .N , example,","code":"# join program names case_degree <- merge(case_degree, study_program, by = \"cip6\", all.x = TRUE)  # examine the result case_degree #>         cip6        mcid   institution    program #>       <char>      <char>        <char>     <char> #>    1: 140801 MID25783197 Institution M      Civil #>    2: 140801 MID25783441 Institution M      Civil #>    3: 140801 MID25784334 Institution M      Civil #>    4: 140801 MID25784418 Institution M      Civil #>    5: 140801 MID25784489 Institution M      Civil #>   ---                                             #> 4672: 143501 MID26689274 Institution L Industrial #> 4673: 143501 MID26692926 Institution L Industrial #> 4674: 143501 MID26695626 Institution L Industrial #> 4675: 143501 MID26696116 Institution L Industrial #> 4676: 143501 MID26696429 Institution L Industrial case_degree[, .N, by = \"program\"] #>       program     N #>        <char> <int> #> 1:      Civil  1053 #> 2: Electrical  1221 #> 3: Mechanical  1646 #> 4: Industrial   756"},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"exercises","dir":"Articles","previous_headings":"Merge program names","what":"Exercises","title":"Subsetting MIDFIELD data","text":"Start reading exercise_program file saved exercises previous vignette. Try fread(). can view help page running, read saved data results directory, Use filter_match() find terms students ever enrolled programs matching term data table exercise_program cip6 column. Select ID CIP variables. Assign result object exercise_student. Eliminate duplicate rows using unique(). Merge program names exercise_program students exercise_student CIP code. Summarize number students history programs program column.","code":"? fread exercise_program <- fread(   \"results/case_program.csv\",   colClasses = list(character = c(\"cip6\")) ) # answer exercise_summary #>              program     N #>               <char> <int> #> 1:   General History  2002 #> 2: Science and Techn    41"},{"path":"/articles/art-015-subsetting-midfield-data.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Subsetting MIDFIELD data","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\")"},{"path":"/articles/art-020-data-sufficiency.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data sufficiency","text":"data provided institutions MIDFIELD cover finite span years, different starting ending terms institution. students admitted near upper limit institution’s data range, available data cover insufficient number years fairly assess student performance. students data range sufficient included analysis. vignette, introduce two concepts related midfieldr functions: timely completion (TC) term last term program completion considered timely given student. example, TC term many cases defined admission term plus 6 years. data sufficiency criterion study must limited students whose timely completion term within range data provided institution. figure compare two first-time--college students admitted different terms, 6-year spans program completion considered timely. Student enters Fall 1989 timely completion (TC) term Spring 1995. Student B enters Fall 1991 TC term Spring 1997. Institution data available 1986 1996.  TC term Student B within range data provided institution. data sufficiency criterion, exclude student B study. criterion applies even Student B known graduated within data limit. students like Student B graduate data limit, know program completion timely . students must excluded study, must every student whose TC term encompassed available data.","code":""},{"path":"/articles/art-020-data-sufficiency.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Data sufficiency","text":"Start case study programs (study_program) Obtain students ever enrolled programs Determine timely completion terms Determine data sufficiency institution student Filter observations data sufficiency Result set students analysis (study_student)","code":""},{"path":"/articles/art-020-data-sufficiency.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Data sufficiency","text":"midfieldr functions filter_match() add_timely_term() add_institution() add_data_sufficiency() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # optional code to format data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term, degree)"},{"path":"/articles/art-020-data-sufficiency.html","id":"case-study-students","dir":"Articles","previous_headings":"","what":"Case study students","title":"Data sufficiency","text":"Recall case study program codes names saved midfieldr package data set study_program. View help page running View data frame, obtain students enrolled case study programs, use filter_match() access term table. Delete duplicate rows, ,","code":"? study_program study_program #>       cip6    program #>     <char>     <char> #>  1: 140801      Civil #>  2: 140802      Civil #>  3: 140803      Civil #>  4: 140804      Civil #>  5: 140805      Civil #> ---                   #>  8: 141003 Electrical #>  9: 141004 Electrical #> 10: 141099 Electrical #> 11: 141901 Mechanical #> 12: 143501 Industrial case_students <- filter_match(term,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) case_students #>               mcid   cip6 #>             <char> <char> #>     1: MID25783197 140801 #>     2: MID25783197 140801 #>     3: MID25783197 140801 #>     4: MID25783197 140801 #>     5: MID25783197 140801 #>    ---                    #> 67089: MID26696429 143501 #> 67090: MID26696429 143501 #> 67091: MID26696429 143501 #> 67092: MID26696429 143501 #> 67093: MID26696429 143501 case_students <- unique(case_students) case_students #>               mcid   cip6 #>             <char> <char> #>     1: MID25783197 140801 #>     2: MID25783441 140801 #>     3: MID25783553 140801 #>     4: MID25783648 140801 #>     5: MID25784209 140801 #>    ---                    #> 10760: MID26693368 143501 #> 10761: MID26695188 143501 #> 10762: MID26695626 143501 #> 10763: MID26696116 143501 #> 10764: MID26696429 143501"},{"path":"/articles/art-020-data-sufficiency.html","id":"estimate-the-timely-completion-term","dir":"Articles","previous_headings":"","what":"Estimate the timely completion term","title":"Data sufficiency","text":"necessary prerequisite applying data sufficiency criterion determine timely completion term every prospective student study. confirm pool students degree-seeking, use filter_match() match IDs student table. use add_timely_term() estimate timely completion term. View help page running function name suggests, add_timely_term() adds timely_term column input data frame. new variable contains estimated timely completion term student. first argument working data frame column added; second argument term (equivalent term-variables data frame). required. basic heuristic starts span number years student (default 6 years) adjusts span subtracting whole number years based level student admitted. example, student admitted second-year level assumed completed one year program, span reduced one year. Similarly, spans reduced two years students admitted 3rd-year level three years students admitted fourth-year level. adjusted span years added starting term produces timely completion term. Optional arguments detail, span, sched_span. used, arguments must named. span must less sched_span. sched_span number years institution schedules program completion, typically 4 years. detail, TRUE, provides additional columns (described next) Setting detail TRUE yields additional columns used determine timely-term results: term_i admission term level_i level upon admitted adj_span adjusted span potential use data implement one’s heuristic determining timely completion terms. input data frame existing column name matching added column names, existing columns deleted. example, examined details, can delete (especially useful interactive session) running code details set FALSE.","code":"# limit population to degree-seeking students DT <- filter_match(case_students,   match_to = student,   by_col = \"mcid\" )  # examine the result DT <- unique(DT) DT #>               mcid   cip6 #>             <char> <char> #>     1: MID25783178 143501 #>     2: MID25783197 140801 #>     3: MID25783388 141901 #>     4: MID25783441 140801 #>     5: MID25783491 141001 #>    ---                    #> 10760: MID26696967 141901 #> 10761: MID26696979 141901 #> 10762: MID26697163 141901 #> 10763: MID26697444 141901 #> 10764: MID26697447 141001 ? add_timely_term # estimate the timely completion term DT <- add_timely_term(DT, midfield_term = term) DT #>               mcid   cip6 timely_term #>             <char> <char>      <char> #>     1: MID25783178 143501       20003 #>     2: MID25783197 140801       19923 #>     3: MID25783388 141901       19923 #>     4: MID25783441 140801       19973 #>     5: MID25783491 141001       20013 #>    ---                                #> 10760: MID26696967 141901       20153 #> 10761: MID26696979 141901       20183 #> 10762: MID26697163 141901       20143 #> 10763: MID26697444 141901       20153 #> 10764: MID26697447 141001       20163 add_timely_term(dframe,                 midfield_term,                 ...,                 detail = NULL,     # default FALSE                 span = NULL,        # default 6 years                 sched_span = NULL)  # default 4 years # show detail DT <- add_timely_term(DT,   midfield_term = term,   detail = TRUE ) DT #>               mcid   cip6 term_i      level_i adj_span timely_term #>             <char> <char> <char>       <char>    <num>      <char> #>     1: MID25783178 143501  19946  01 Freshman        6       20003 #>     2: MID25783197 140801  19871  01 Freshman        6       19923 #>     3: MID25783388 141901  19871  01 Freshman        6       19923 #>     4: MID25783441 140801  19921  01 Freshman        6       19973 #>     5: MID25783491 141001  19961  01 Freshman        6       20013 #>    ---                                                             #> 10760: MID26696967 141901  20101  01 Freshman        6       20153 #> 10761: MID26696979 141901  20154    04 Senior        3       20183 #> 10762: MID26697163 141901  20101 02 Sophomore        5       20143 #> 10763: MID26697444 141901  20101  01 Freshman        6       20153 #> 10764: MID26697447 141001  20111  01 Freshman        6       20163 # remove detail DT <- add_timely_term(DT,   midfield_term = term,   detail = FALSE ) DT #>               mcid   cip6 timely_term #>             <char> <char>      <char> #>     1: MID25783178 143501       20003 #>     2: MID25783197 140801       19923 #>     3: MID25783388 141901       19923 #>     4: MID25783441 140801       19973 #>     5: MID25783491 141001       20013 #>    ---                                #> 10760: MID26696967 141901       20153 #> 10761: MID26696979 141901       20183 #> 10762: MID26697163 141901       20143 #> 10763: MID26697444 141901       20153 #> 10764: MID26697447 141001       20163"},{"path":"/articles/art-020-data-sufficiency.html","id":"exercises","dir":"Articles","previous_headings":"Estimate the timely completion term","what":"Exercises","title":"Data sufficiency","text":"start data frame detail shown following code chunk, subsets x follows: adj_span == 6 subsets rows 6 year span = cip6 groups data four CIP codes .SD[1] retains first row group resulting 4 rows (one CIP): Recall (term help page) terms academic year encoded YYYY value. Choose row. Confirm student starting initial term shown graduating full 6 academic years later graduate term reported timely-term column. Reuse code chunk change adjusted span 4 5 years. Select one row repeat assessment.","code":"x <- add_timely_term(DT, term, detail = TRUE) x[adj_span == 6, .SD[1], by = cip6] #>      cip6        mcid term_i     level_i adj_span timely_term #>    <char>      <char> <char>      <char>    <num>      <char> #> 1: 143501 MID25783178  19946 01 Freshman        6       20003 #> 2: 140801 MID25783197  19871 01 Freshman        6       19923 #> 3: 141901 MID25783388  19871 01 Freshman        6       19923 #> 4: 141001 MID25783491  19961 01 Freshman        6       20013"},{"path":"/articles/art-020-data-sufficiency.html","id":"determine-data-sufficiency","dir":"Articles","previous_headings":"","what":"Determine data sufficiency","title":"Data sufficiency","text":"Data sufficiency depends range data institution, first step add column institution keyed student ID. use add_institution(). View help page running function two arguments, data frame new variable added term MIDFIELD data table (equivalent). event student admitted one institution history data, function reports institution student enrolled greatest number terms. Like midfieldr add_ functions, existing columns deleted overwritten name variables added (, institution). Now working data frame timely_term institution columns, can use add_data_sufficiency() add logical variable (TRUE/FALSE) answers question, “data sufficiency constraint satisfied?” View help page running, Similar add_timely_term(), function two required arguments one optional detail argument. details, case, add one extra column show institution’s upper data limit. detail FALSE, data_sufficieny column added.","code":"? add_institution # add institutions DT <- add_institution(DT,   midfield_term = term )  # examine the result DT #>               mcid   institution   cip6 timely_term #>             <char>        <char> <char>      <char> #>     1: MID25783178 Institution M 143501       20003 #>     2: MID25783197 Institution M 140801       19923 #>     3: MID25783388 Institution M 141901       19923 #>     4: MID25783441 Institution M 140801       19973 #>     5: MID25783491 Institution M 141001       20013 #>    ---                                              #> 10760: MID26696967 Institution L 141901       20153 #> 10761: MID26696979 Institution L 141901       20183 #> 10762: MID26697163 Institution L 141901       20143 #> 10763: MID26697444 Institution L 141901       20153 #> 10764: MID26697447 Institution L 141001       20163 ? add_data_sufficiency # add column with details DT <- add_data_sufficiency(DT,   midfield_term = term,   detail = TRUE ) # examine the result DT #>               mcid   institution   cip6 timely_term inst_limit data_sufficiency #>             <char>        <char> <char>      <char>     <char>           <lgcl> #>     1: MID25783178 Institution M 143501       20003      20096             TRUE #>     2: MID25783197 Institution M 140801       19923      20096             TRUE #>     3: MID25783388 Institution M 141901       19923      20096             TRUE #>     4: MID25783441 Institution M 140801       19973      20096             TRUE #>     5: MID25783491 Institution M 141001       20013      20096             TRUE #>    ---                                                                          #> 10760: MID26696967 Institution L 141901       20153      20164             TRUE #> 10761: MID26696979 Institution L 141901       20183      20164            FALSE #> 10762: MID26697163 Institution L 141901       20143      20164             TRUE #> 10763: MID26697444 Institution L 141901       20153      20164             TRUE #> 10764: MID26697447 Institution L 141001       20163      20164             TRUE # without detail DT <- add_data_sufficiency(DT,   midfield_term = term,   detail = FALSE ) # examine the result DT #>               mcid   institution   cip6 timely_term data_sufficiency #>             <char>        <char> <char>      <char>           <lgcl> #>     1: MID25783178 Institution M 143501       20003             TRUE #>     2: MID25783197 Institution M 140801       19923             TRUE #>     3: MID25783388 Institution M 141901       19923             TRUE #>     4: MID25783441 Institution M 140801       19973             TRUE #>     5: MID25783491 Institution M 141001       20013             TRUE #>    ---                                                               #> 10760: MID26696967 Institution L 141901       20153             TRUE #> 10761: MID26696979 Institution L 141901       20183            FALSE #> 10762: MID26697163 Institution L 141901       20143             TRUE #> 10763: MID26697444 Institution L 141901       20153             TRUE #> 10764: MID26697447 Institution L 141001       20163             TRUE"},{"path":"/articles/art-020-data-sufficiency.html","id":"exercises-1","dir":"Articles","previous_headings":"Determine data sufficiency","what":"Exercises","title":"Data sufficiency","text":"start term data table, select two columns, order rows institution term, following code chunk, subsets x follows: = institution groups data 12 institutions .SD[.N] retains last row group (previously ordered rows term within institution) yielding data frame (shown) giving last term data institution. Obtain data frame running code chunks . run: Filter one institution using institution == \"Institution \" filters Institution .SD[1:5] pulls first 5 rows, Confirm last term Institution found earlier match inst_limit reported add_data_sufficiency(). Repeat last code chunk another institution confirm result.","code":"# select columns from term cols_we_want <- c(\"institution\", \"term\") x <- term[order(institution, term), ..cols_we_want] # optional code to format data.table printing options(datatable.print.nrows = 12)  # filter for last term grouped by instititution x[, .SD[.N], by = institution] y <- add_data_sufficiency(DT,   midfield_term = term,   detail = TRUE ) y[institution == \"Institution A\", .SD[1:5]]"},{"path":"/articles/art-020-data-sufficiency.html","id":"subset-data-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Subset data for data sufficiency","title":"Data sufficiency","text":"Observations (rows) satisfying data sufficiency criterion labeled TRUE data_sufficiency column; labeled FALSE. Limiting population students satisfying criterion straightforward—retain TRUE data sufficiency rows. performed subset, working columns used get point can deleted. retain two columns started vignette, mcid cip6. , suggest saving intermediate results like . data frame IDs CIP codes saved midfieldr data set study_student. View help page running View data frame, Confirm two .","code":"# limit population to data sufficient DT <- DT[data_sufficiency == TRUE]  # examine the result DT #>              mcid   institution   cip6 timely_term data_sufficiency #>            <char>        <char> <char>      <char>           <lgcl> #>    1: MID25783178 Institution M 143501       20003             TRUE #>    2: MID25783197 Institution M 140801       19923             TRUE #>    3: MID25783388 Institution M 141901       19923             TRUE #>    4: MID25783441 Institution M 140801       19973             TRUE #>    5: MID25783491 Institution M 141001       20013             TRUE #>   ---                                                               #> 8215: MID26696958 Institution L 141901       20163             TRUE #> 8216: MID26696967 Institution L 141901       20153             TRUE #> 8217: MID26697163 Institution L 141901       20143             TRUE #> 8218: MID26697444 Institution L 141901       20153             TRUE #> 8219: MID26697447 Institution L 141001       20163             TRUE DT <- DT[, .(mcid, cip6)] ? study_student study_student #>              mcid   institution   cip6    program          race    sex #>            <char>        <char> <char>     <char>        <char> <char> #>    1: MID25783197 Institution M 140801      Civil         White   Male #>    2: MID25783441 Institution M 140801      Civil         White   Male #>    3: MID25783553 Institution M 140801      Civil         White   Male #>    4: MID25784209 Institution M 140801      Civil International   Male #>    5: MID25784489 Institution M 140801      Civil         Asian Female #>   ---                                                                  #> 8215: MID26692926 Institution L 143501 Industrial         White   Male #> 8216: MID26693368 Institution L 143501 Industrial         White   Male #> 8217: MID26695626 Institution L 143501 Industrial         White   Male #> 8218: MID26696116 Institution L 143501 Industrial         White Female #> 8219: MID26696429 Institution L 143501 Industrial         White Female #>       timely_term data_sufficiency #>            <char>           <lgcl> #>    1:       19923             TRUE #>    2:       19973             TRUE #>    3:       20073             TRUE #>    4:       20003             TRUE #>    5:       19943             TRUE #>   ---                              #> 8215:       20153             TRUE #> 8216:       20143             TRUE #> 8217:       20143             TRUE #> 8218:       20153             TRUE #> 8219:       20153             TRUE DT <- DT[order(mcid)] study_student <- study_student[order(mcid)] all.equal(DT, study_student) #> [1] \"Different number of columns\" \"Different column names\""},{"path":"/articles/art-020-data-sufficiency.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Data sufficiency","text":"data sufficiency criterion must applied whenever study incorporates program completion (graduation) part metric. Different heuristics might used determine term timely completion (discussed separate vignette), timely term determined, sufficiency data available immediately determines whether student remains study.","code":""},{"path":"/articles/art-020-data-sufficiency.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Data sufficiency","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # load data tables from midfielddata data(student, term, degree)  # Case study students case_students <- filter_match(term,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) case_students <- unique(case_students)  # Estimate the timely completion term DT <- filter_match(case_students,   match_to = student,   by_col = \"mcid\" ) DT <- unique(DT) DT <- add_timely_term(DT, midfield_term = term)  # Determine data sufficiency DT <- add_institution(DT, midfield_term = term) DT <- add_data_sufficiency(DT,   midfield_term = term,   detail = TRUE )  # Subset data for data sufficiency DT <- DT[data_sufficiency == TRUE] DT <- DT[, .(mcid, cip6)]"},{"path":"/articles/art-030-timely-completion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Timely completion","text":"Program completion—key component persistence measures—must timely, , occur within specific span years. default set point six years—150% typical “scheduled” span four years. Students complete programs later timely completion term (introduced Data sufficiency vignette). reclassified non-graduates persistence metrics. vignette, introduce timely completion criterion related midfieldr functions. timely completion (TC) term last term program completion considered timely given student. example, TC term many cases defined admission term plus 6 years. timely completion criterion Graduates completing program later TC term grouped non-graduates purposes computing persistence metric. figure compare history two students: enter Fall 2010 graduate Spring 2015. assume basis 6 years timely completion. Student first-time--college student. TC term 6 academic years later, Spring 2016. Student B transfer student, entering junior. already satisfied 2 years program requirements, TC term 4 years later, Spring 2014.  Student ’s degree term TC term. completion timely counted among program graduates. However, Student B’s degree term TC term. completion timely graduation classification (purposes computing persistence metric ) converted graduate non-graduate.","code":""},{"path":"/articles/art-030-timely-completion.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Timely completion","text":"Start case study students (study_student) Determine whether completion timely Summarize pre-metric criteria Explore: Compare programs completion status","code":""},{"path":"/articles/art-030-timely-completion.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Timely completion","text":"midfieldr functions add_completion_timely() add_timely_term() condition_multiway() packages data","code":"# Packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # Optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # Load data tables from midfielddata data(student, term, degree)"},{"path":"/articles/art-030-timely-completion.html","id":"case-study-students","dir":"Articles","previous_headings":"","what":"Case study students","title":"Timely completion","text":"applied data sufficiency criterion case study programs, saved result midfieldr package data set study_student. students timely completion terms within range data provided institutions. Review help page running Review data frame,","code":"? study_student study_student #>              mcid   institution   cip6    program          race    sex #>            <char>        <char> <char>     <char>        <char> <char> #>    1: MID25783197 Institution M 140801      Civil         White   Male #>    2: MID25783441 Institution M 140801      Civil         White   Male #>    3: MID25783553 Institution M 140801      Civil         White   Male #>    4: MID25784209 Institution M 140801      Civil International   Male #>    5: MID25784489 Institution M 140801      Civil         Asian Female #>   ---                                                                  #> 8215: MID26692926 Institution L 143501 Industrial         White   Male #> 8216: MID26693368 Institution L 143501 Industrial         White   Male #> 8217: MID26695626 Institution L 143501 Industrial         White   Male #> 8218: MID26696116 Institution L 143501 Industrial         White Female #> 8219: MID26696429 Institution L 143501 Industrial         White Female #>       timely_term data_sufficiency #>            <char>           <lgcl> #>    1:       19923             TRUE #>    2:       19973             TRUE #>    3:       20073             TRUE #>    4:       20003             TRUE #>    5:       19943             TRUE #>   ---                              #> 8215:       20153             TRUE #> 8216:       20143             TRUE #> 8217:       20143             TRUE #> 8218:       20153             TRUE #> 8219:       20153             TRUE"},{"path":"/articles/art-030-timely-completion.html","id":"determine-whether-completion-is-timely","dir":"Articles","previous_headings":"","what":"Determine whether completion is timely","title":"Timely completion","text":"use add_timely_term() estimate timely completion term. See Data sufficiency vignette additional details function. Now working data frame timely_term column, use add_completion_timely() add logical variable (TRUE/FALSE) answers question, “program completion timely?” View help page running, function two required arguments one optional detail argument. input dframe must timely_term column. details, case, add two extra columns show whether program completed, , term. Interpreting result: TRUE completion_timely column indicates student completed program (completion = TRUE) degree term later timely completion term (term_degree <= timely_term). FALSE completion_timely column indicates non-completion (completion = FALSE) degree term later timely completion term (term_degree > timely_term). detail FALSE, completion_timely column added. Like midfieldr add_* functions, existing columns deleted overwritten name variables added. case, term_degree completion columns deleted completion_timely column overwritten.","code":"# Estimate the timely completion term DT <- add_timely_term(study_student, midfield_term = term) DT #>              mcid   institution   cip6    program            race    sex #>            <char>        <char> <char>     <char>          <char> <char> #>    1: MID25783178 Institution M 143501 Industrial           Black   Male #>    2: MID25783197 Institution M 140801      Civil           White   Male #>    3: MID25783388 Institution M 141901 Mechanical           White   Male #>    4: MID25783441 Institution M 140801      Civil           White   Male #>    5: MID25783491 Institution M 141001 Electrical           White   Male #>   ---                                                                    #> 8215: MID26696958 Institution L 141901 Mechanical           White   Male #> 8216: MID26696967 Institution L 141901 Mechanical           White   Male #> 8217: MID26697163 Institution L 141901 Mechanical Hispanic/Latinx   Male #> 8218: MID26697444 Institution L 141901 Mechanical           White   Male #> 8219: MID26697447 Institution L 141001 Electrical           Asian   Male #>       data_sufficiency timely_term #>                 <lgcl>      <char> #>    1:             TRUE       20003 #>    2:             TRUE       19923 #>    3:             TRUE       19923 #>    4:             TRUE       19973 #>    5:             TRUE       20013 #>   ---                              #> 8215:             TRUE       20163 #> 8216:             TRUE       20153 #> 8217:             TRUE       20143 #> 8218:             TRUE       20153 #> 8219:             TRUE       20163 ? add_completion_timely # Add the completion timely column DT <- add_completion_timely(   dframe = DT,   midfield_degree = degree,   detail = TRUE )  # Examine the result DT #>              mcid   institution   cip6    program            race    sex #>            <char>        <char> <char>     <char>          <char> <char> #>    1: MID25783178 Institution M 143501 Industrial           Black   Male #>    2: MID25783197 Institution M 140801      Civil           White   Male #>    3: MID25783388 Institution M 141901 Mechanical           White   Male #>    4: MID25783441 Institution M 140801      Civil           White   Male #>    5: MID25783491 Institution M 141001 Electrical           White   Male #>   ---                                                                    #> 8215: MID26696958 Institution L 141901 Mechanical           White   Male #> 8216: MID26696967 Institution L 141901 Mechanical           White   Male #> 8217: MID26697163 Institution L 141901 Mechanical Hispanic/Latinx   Male #> 8218: MID26697444 Institution L 141901 Mechanical           White   Male #> 8219: MID26697447 Institution L 141001 Electrical           Asian   Male #>       data_sufficiency timely_term term_degree completion completion_timely #>                 <lgcl>      <char>      <char>     <lgcl>            <lgcl> #>    1:             TRUE       20003       20001       TRUE              TRUE #>    2:             TRUE       19923       19911       TRUE              TRUE #>    3:             TRUE       19923        <NA>      FALSE             FALSE #>    4:             TRUE       19973       19963       TRUE              TRUE #>    5:             TRUE       20013       20001       TRUE              TRUE #>   ---                                                                       #> 8215:             TRUE       20163        <NA>      FALSE             FALSE #> 8216:             TRUE       20153       20141       TRUE              TRUE #> 8217:             TRUE       20143       20133       TRUE              TRUE #> 8218:             TRUE       20153       20151       TRUE              TRUE #> 8219:             TRUE       20163       20154       TRUE              TRUE # With detail FALSE DT <- add_completion_timely(   dframe = DT,   midfield_degree = degree,   detail = FALSE )  # Examine the result DT #>              mcid   institution   cip6    program            race    sex #>            <char>        <char> <char>     <char>          <char> <char> #>    1: MID25783178 Institution M 143501 Industrial           Black   Male #>    2: MID25783197 Institution M 140801      Civil           White   Male #>    3: MID25783388 Institution M 141901 Mechanical           White   Male #>    4: MID25783441 Institution M 140801      Civil           White   Male #>    5: MID25783491 Institution M 141001 Electrical           White   Male #>   ---                                                                    #> 8215: MID26696958 Institution L 141901 Mechanical           White   Male #> 8216: MID26696967 Institution L 141901 Mechanical           White   Male #> 8217: MID26697163 Institution L 141901 Mechanical Hispanic/Latinx   Male #> 8218: MID26697444 Institution L 141901 Mechanical           White   Male #> 8219: MID26697447 Institution L 141001 Electrical           Asian   Male #>       data_sufficiency timely_term completion_timely #>                 <lgcl>      <char>            <lgcl> #>    1:             TRUE       20003              TRUE #>    2:             TRUE       19923              TRUE #>    3:             TRUE       19923             FALSE #>    4:             TRUE       19973              TRUE #>    5:             TRUE       20013              TRUE #>   ---                                                #> 8215:             TRUE       20163             FALSE #> 8216:             TRUE       20153              TRUE #> 8217:             TRUE       20143              TRUE #> 8218:             TRUE       20153              TRUE #> 8219:             TRUE       20163              TRUE"},{"path":"/articles/art-030-timely-completion.html","id":"exercises","dir":"Articles","previous_headings":"Determine whether completion is timely","what":"Exercises","title":"Timely completion","text":"start result add details, order rows examine last 20 rows , Find row completion_timely TRUE. Confirm student completed program degree term precedes TC term. Find row term_degree NA, , student complete program. Confirm completion_timely value FALSE. Find row completion TRUE completion_timely FALSE. Confirm student’s degree term overshoots TC term.","code":"# Assign a new memory location x <- copy(DT)  # Add the detail x <- add_completion_timely(   dframe = x,   midfield_degree = degree,   detail = TRUE ) # Examine the final 20 rows options(datatable.print.topn = 20) x <- x[order(cip6)] x <- x[8180:8199]"},{"path":"/articles/art-030-timely-completion.html","id":"summarize-the-pre-metric-criteria","dir":"Articles","previous_headings":"","what":"Summarize the pre-metric criteria","title":"Timely completion","text":"point case study example, illustrated two criteria typically applied developing persistence metric, .e., “pre-metric” criteria. depend estimate timely completion (TC) term: data sufficiency criterion Excludes students, limiting study whose TC terms within range data provided institution. timely completion criterion Retains students reclassifies completers whose degree terms overshoot TC terms non-graduates. applied criteria, data ready use persistence metric.","code":""},{"path":"/articles/art-030-timely-completion.html","id":"explore-compare-programs-by-completion-status","dir":"Articles","previous_headings":"","what":"Explore: Compare programs by completion status","title":"Timely completion","text":"typical persistence metric, untimely graduates non-completers grouped together non-graduates. However, keep separate example explore data. construct new status column three possible values: Timely grad Untimely grad Non-completer timely graduate completed program later timely completion term. untimely graduate completed program timely completion term. non-completer complete program. Remove unnecessary columns less cluttered viewing. Recall data frame case-study program CIP codes names study_program data set. review hep page, run Join program names working data frame drop unnecessary columns, Group summarize, anticipation graph, condition multiway data categorical columns converted factors levels ordered total values N_group. Graph numbers students completion status program.  useful comparison might percentage total number program (panel). Repeat graph, percentage program instead numbers per program. rows panels remain ordered factor levels.  can see four programs percentage timely graduates (just 60%), Industrial Engineering lowest fraction non-completers higher fraction untimely graduates. graph can’t tell us , raise question. particular question may significant, illustrate exploratory data graphics can raise new research questions.","code":"# Need the completion column for this application DT <- add_completion_timely(   dframe = DT,   midfield_degree = degree,   detail = TRUE ) # Timely grads DT[   completion == TRUE & completion_timely == TRUE,   status := \"Timely grad\" ] # Untimely grads DT[   completion == TRUE & completion_timely == FALSE,   status := \"Untimely grad\" ] # Non-completers DT[completion == FALSE, status := \"Non-completer\"] # Improve viewing cols_we_want <- c(\"cip6\", \"completion\", \"completion_timely\", \"status\") DT <- DT[order(cip6), ..cols_we_want]  # Examine the result options(datatable.print.topn = 12) DT #>         cip6 completion completion_timely        status #>       <char>     <lgcl>            <lgcl>        <char> #>    1: 140801       TRUE              TRUE   Timely grad #>    2: 140801       TRUE              TRUE   Timely grad #>    3: 140801      FALSE             FALSE Non-completer #>    4: 140801      FALSE             FALSE Non-completer #>    5: 140801       TRUE              TRUE   Timely grad #>    6: 140801       TRUE              TRUE   Timely grad #>    7: 140801       TRUE              TRUE   Timely grad #>    8: 140801       TRUE              TRUE   Timely grad #>    9: 140801       TRUE              TRUE   Timely grad #>   10: 140801      FALSE             FALSE Non-completer #>   11: 140801       TRUE              TRUE   Timely grad #>   12: 140801      FALSE             FALSE Non-completer #>   ---                                                   #> 8208: 143501       TRUE             FALSE Untimely grad #> 8209: 143501       TRUE             FALSE Untimely grad #> 8210: 143501      FALSE             FALSE Non-completer #> 8211: 143501       TRUE              TRUE   Timely grad #> 8212: 143501       TRUE              TRUE   Timely grad #> 8213: 143501       TRUE              TRUE   Timely grad #> 8214: 143501       TRUE              TRUE   Timely grad #> 8215: 143501       TRUE              TRUE   Timely grad #> 8216: 143501      FALSE             FALSE Non-completer #> 8217: 143501       TRUE              TRUE   Timely grad #> 8218: 143501       TRUE              TRUE   Timely grad #> 8219: 143501       TRUE              TRUE   Timely grad ? study_program # Join program names DT <- merge(DT, study_program, by = \"cip6\", all.x = TRUE)  # Keep columns we need for grouping and summarizing cols_we_want <- c(\"status\", \"program\") DT <- DT[, ..cols_we_want]  # Examine the result DT #>              status    program #>              <char>     <char> #>    1:   Timely grad      Civil #>    2:   Timely grad      Civil #>    3: Non-completer      Civil #>    4: Non-completer      Civil #>    5:   Timely grad      Civil #>    6:   Timely grad      Civil #>    7:   Timely grad      Civil #>    8:   Timely grad      Civil #>    9:   Timely grad      Civil #>   10: Non-completer      Civil #>   11:   Timely grad      Civil #>   12: Non-completer      Civil #>   ---                          #> 8208: Untimely grad Industrial #> 8209: Untimely grad Industrial #> 8210: Non-completer Industrial #> 8211:   Timely grad Industrial #> 8212:   Timely grad Industrial #> 8213:   Timely grad Industrial #> 8214:   Timely grad Industrial #> 8215:   Timely grad Industrial #> 8216: Non-completer Industrial #> 8217:   Timely grad Industrial #> 8218:   Timely grad Industrial #> 8219:   Timely grad Industrial # Count students by program and completion status DT <- DT[, .(N_group = .N), by = .(program, status)] DT #>        program        status N_group #>         <char>        <char>   <int> #>  1:      Civil   Timely grad    1175 #>  2:      Civil Non-completer     441 #>  3:      Civil Untimely grad     176 #>  4: Electrical   Timely grad    1494 #>  5: Electrical Non-completer     666 #>  6: Electrical Untimely grad     299 #>  7: Mechanical Non-completer     781 #>  8: Mechanical Untimely grad     271 #>  9: Mechanical   Timely grad    1823 #> 10: Industrial   Timely grad     678 #> 11: Industrial Non-completer     243 #> 12: Industrial Untimely grad     172 # Create factors with ordered levels mw <- condition_multiway(DT,   categ_col = c(\"program\", \"status\"),   quant_col = \"N_group\",   order_by = \"sum\",   detail = TRUE ) mw #>        program        status N_group program_N_group status_N_group #>         <fctr>        <fctr>   <int>           <int>          <int> #>  1:      Civil   Timely grad    1175            1792           5170 #>  2:      Civil Non-completer     441            1792           2131 #>  3:      Civil Untimely grad     176            1792            918 #>  4: Electrical   Timely grad    1494            2459           5170 #>  5: Electrical Non-completer     666            2459           2131 #>  6: Electrical Untimely grad     299            2459            918 #>  7: Mechanical Non-completer     781            2875           2131 #>  8: Mechanical Untimely grad     271            2875            918 #>  9: Mechanical   Timely grad    1823            2875           5170 #> 10: Industrial   Timely grad     678            1093           5170 #> 11: Industrial Non-completer     243            1093           2131 #> 12: Industrial Untimely grad     172            1093            918 # Graph the counts ggplot(mw, aes(x = N_group, y = status)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   scale_x_continuous(limits = c(0, 2000)) +   geom_point() +   labs(     x = \"Number of students\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   ) # Compute percentage of total in a program mw[, pct_of_program := round(100 * N_group / program_N_group, 1)] mw #>        program        status N_group program_N_group status_N_group #>         <fctr>        <fctr>   <int>           <int>          <int> #>  1:      Civil   Timely grad    1175            1792           5170 #>  2:      Civil Non-completer     441            1792           2131 #>  3:      Civil Untimely grad     176            1792            918 #>  4: Electrical   Timely grad    1494            2459           5170 #>  5: Electrical Non-completer     666            2459           2131 #>  6: Electrical Untimely grad     299            2459            918 #>  7: Mechanical Non-completer     781            2875           2131 #>  8: Mechanical Untimely grad     271            2875            918 #>  9: Mechanical   Timely grad    1823            2875           5170 #> 10: Industrial   Timely grad     678            1093           5170 #> 11: Industrial Non-completer     243            1093           2131 #> 12: Industrial Untimely grad     172            1093            918 #>     pct_of_program #>              <num> #>  1:           65.6 #>  2:           24.6 #>  3:            9.8 #>  4:           60.8 #>  5:           27.1 #>  6:           12.2 #>  7:           27.2 #>  8:            9.4 #>  9:           63.4 #> 10:           62.0 #> 11:           22.2 #> 12:           15.7 # Graph percentages ggplot(mw, aes(x = pct_of_program, y = status)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, 20)) +   geom_point() +   labs(     x = \"Percentage of N students in the major\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   )"},{"path":"/articles/art-030-timely-completion.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Timely completion","text":"vignette code chunks collected single, condensed script.","code":"# Packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # Timely completion data(student, term, degree) DT <- add_timely_term(study_student, midfield_term = term) DT <- add_completion_timely(   dframe = DT,   midfield_degree = degree,   detail = TRUE )  # Compare programs by completion status DT[   completion == TRUE & completion_timely == TRUE,   status := \"Timely grad\" ] DT[   completion == TRUE & completion_timely == FALSE,   status := \"Untimely grad\" ] DT[completion == FALSE, status := \"Non-completer\"] DT <- merge(DT, study_program, by = \"cip6\", all.x = TRUE) DT <- DT[, .(N_group = .N), by = .(program, status)]  # Graph counts"},{"path":"/articles/art-040-fye-programs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"FYE programs","text":"US institutions first year engineering (FYE) programs—typically common first-year curriculum prerequisite acceptance degree-granting engineering major. persistence metrics computed program level, FYE programs can problematic. example, graduation rate conventionally defined ratio number students complete program (specified span years) number students entering cohort [1]. FYE students don’t transition particular engineering program easily overlooked potential members program’s entering cohort—reducing size cohort artificially increasing graduation rate. FYE students admitted Engineering (CIP 14)—status neither “undecided” “unknown.” simply don’t know degree-granting program intend transition. Therefore, include FYE students persistence metric requiring degree-granting “starting” program, predict engineering program FYE student declared required enroll FYE. vignette describes prediction process results used.","code":""},{"path":"/articles/art-040-fye-programs.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"FYE programs","text":"Two approaches described vignette. Use prepared predictions fye_start, built-data set midfieldr predicted starting programs FYE students midfielddata practice data tables. Perform imputation. Use condition_fye() construct data frame appropriate predictor variables formatted can used input argument mice() function R package “mice” (multivariate imputation chained equations).","code":""},{"path":"/articles/art-040-fye-programs.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"FYE programs","text":"midfieldr functions filter_match() filter_search() add_race_sex() condition_fye() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # only if performing your own imputation library(\"mice\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term)"},{"path":"/articles/art-040-fye-programs.html","id":"use-prepared-predictions","dir":"Articles","previous_headings":"","what":"Use prepared predictions","title":"FYE programs","text":"set predicted starting programs degree-seeking FYE students midfielddata provided midfieldr data set fye_start. View help page running, Examine data.","code":"? fye_start # prepared starting programs of FYE students fye_start #>              mcid  start #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701"},{"path":"/articles/art-040-fye-programs.html","id":"example-using-fye_start","dir":"Articles","previous_headings":"Use prepared predictions","what":"Example using fye_start","title":"FYE programs","text":"illustrate using data, let’s suppose trying determine number students four majors case study (Civil, Electrical, Industrial, Mechanical Engineering) start first year, second year, third year, etc. FYE students transition majors appear term data second year beyond, first year. example, therefore, focus determining include FYE students first-year count. use two additional prepared data sets, study_program case-study CIP codes program names, study_student, students ever enrolled programs. see help pages, run Examine two data sets. student data include predicted starting majors FYE students. subset term table rows matching student IDs. matching IDs, obtain terms students ever enrolled programs. set keys organize rows block ID ordered terms. Now, use ID key subset first row student’s block. now one row per unique student. data subset matching program codes study_program, thereby omitting students enrolled one four programs first term. adding FYE students, can group summarize comparison later. Now, turn FYE students. subset fye_start four programs. using filter_match(), change name key column start cip6. Bind two data frames. Now can group CIP count. Adding program names study_program helpful interpreting results. Compare earlier results, summarized without FYE students, course, imputation, counts estimates. However, ignored FYE students, starting term counts programs artificially low—leading unreliable comparisons totals subsequent years.","code":"# case study data sets  ? study_program ? study_student # case study programs study_program #>       cip6    program #>     <char>     <char> #>  1: 140801      Civil #>  2: 140802      Civil #>  3: 140803      Civil #>  4: 140804      Civil #>  5: 140805      Civil #> ---                   #>  8: 141003 Electrical #>  9: 141004 Electrical #> 10: 141099 Electrical #> 11: 141901 Mechanical #> 12: 143501 Industrial  # students ever enrolled in the case study programs study_student #>              mcid   institution   cip6    program          race    sex #>            <char>        <char> <char>     <char>        <char> <char> #>    1: MID25783197 Institution M 140801      Civil         White   Male #>    2: MID25783441 Institution M 140801      Civil         White   Male #>    3: MID25783553 Institution M 140801      Civil         White   Male #>    4: MID25784209 Institution M 140801      Civil International   Male #>    5: MID25784489 Institution M 140801      Civil         Asian Female #>   ---                                                                  #> 8215: MID26692926 Institution L 143501 Industrial         White   Male #> 8216: MID26693368 Institution L 143501 Industrial         White   Male #> 8217: MID26695626 Institution L 143501 Industrial         White   Male #> 8218: MID26696116 Institution L 143501 Industrial         White Female #> 8219: MID26696429 Institution L 143501 Industrial         White Female #>       timely_term data_sufficiency #>            <char>           <lgcl> #>    1:       19923             TRUE #>    2:       19973             TRUE #>    3:       20073             TRUE #>    4:       20003             TRUE #>    5:       19943             TRUE #>   ---                              #> 8215:       20153             TRUE #> 8216:       20143             TRUE #> 8217:       20143             TRUE #> 8218:       20153             TRUE #> 8219:       20153             TRUE # subset term table by ID of case study students DT <- filter_match(term,   match_to = study_student,   by_col = \"mcid\",   select = c(\"mcid\", \"term\", \"cip6\") ) # set keys for ordering rows keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT #>               mcid   term   cip6 #>             <char> <char> <char> #>     1: MID25783178  19946 140102 #>     2: MID25783178  19951 140102 #>     3: MID25783178  19953 140102 #>     4: MID25783178  19956 140102 #>     5: MID25783178  19961 140102 #>    ---                           #> 80864: MID26697447  20134 141001 #> 80865: MID26697447  20141 141001 #> 80866: MID26697447  20143 141001 #> 80867: MID26697447  20151 141001 #> 80868: MID26697447  20153 141001 # first term of each student DT <- DT[, .SD[1], by = \"mcid\"]  # keys no longer required setkey(DT, NULL)  # examine the result DT #>              mcid   term   cip6 #>            <char> <char> <char> #>    1: MID25783178  19946 140102 #>    2: MID25783197  19871 140102 #>    3: MID25783388  19871 140102 #>    4: MID25783441  19921 140102 #>    5: MID25783491  19961 140102 #>   ---                           #> 7680: MID26696958  20111 141901 #> 7681: MID26696967  20101 141901 #> 7682: MID26697163  20101 140101 #> 7683: MID26697444  20101 141901 #> 7684: MID26697447  20111 140701 # filter for case study programs only DT <- filter_match(DT,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") )  # ensure rows are unique DT <- unique(DT)  # examine the result DT #>              mcid   cip6 #>            <char> <char> #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 3895: MID26687969 143501 #> 3896: MID26690944 143501 #> 3897: MID26692128 143501 #> 3898: MID26692594 143501 #> 3899: MID26696429 143501 # summarize by CIP code DT_no_fye <- DT[, .N, by = \"cip6\"]  # join program names DT_no_fye <- merge(DT_no_fye, study_program, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want] DT_no_fye #>       program     N #>        <char> <int> #> 1: Electrical  1422 #> 2: Mechanical  1350 #> 3:      Civil   807 #> 4: Industrial   320 # subset predicted FYE start programs setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_match(fye_start,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") )  # examine the result study_fye #>              mcid   cip6 #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783441 140801 #>    3: MID25783553 140801 #>    4: MID25783648 140801 #>    5: MID25783753 140801 #>   ---                    #> 3109: MID26641136 143501 #> 3110: MID26641265 143501 #> 3111: MID26642173 143501 #> 3112: MID26642851 143501 #> 3113: MID26643299 143501 # combine the two data frames DT <- rbindlist(list(DT, study_fye))  # examine the result DT #>              mcid   cip6 #>            <char> <char> #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 7008: MID26641136 143501 #> 7009: MID26641265 143501 #> 7010: MID26642173 143501 #> 7011: MID26642851 143501 #> 7012: MID26643299 143501  # check that the IDs are unique length(unique(DT[, mcid])) #> [1] 7012 # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"]  # examine the result DT_with_fye #>      cip6     N #>    <char> <int> #> 1: 140801  1598 #> 2: 141001  2081 #> 3: 141901  2631 #> 4: 143501   702 # join program names DT_with_fye <- merge(DT_with_fye, study_program, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\") DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # examine the result DT_with_fye #>       program     N #>        <char> <int> #> 1: Mechanical  2631 #> 2: Electrical  2081 #> 3:      Civil  1598 #> 4: Industrial   702 # earlier summary for comparison DT_no_fye #>       program     N #>        <char> <int> #> 1: Electrical  1422 #> 2: Mechanical  1350 #> 3:      Civil   807 #> 4: Industrial   320"},{"path":"/articles/art-040-fye-programs.html","id":"using-condition_fye","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using condition_fye()","title":"FYE programs","text":"section shows details preparing data imputation using mice package perform imputation. procedure results prepared fye_start data set used . main preparation work done condition_fye(). View help page running first argument condition_fye() data frame available degree-seeking engineering students, required variables student ID, race, sex. Regardless programs happen studying, impute starting majors FYE students, include engineering programs point. collect students, start obtaining CIP codes start “14” (Engineering). obtain IDs students ever enrolled programs, access term table. students must degree-seeking, want subset rows engr keep values mcid match values mcid student data table. use filter_match() . case, change data frame students degree-seeking. Lastly, add demographic information add_race_sex(). View help page running Next use engr data frame first argument condition_fye() function. second argument term data table midfielddata (equivalent). third argument fye_codes optional default assignment (“140102”). engineering students, 5033 enrolled FYE program least . FYE students, NA cip6 column indicates students impute starting major. number NAs CIP code column can found using sum(). Thus 1931 starting programs impute. (works applying sum() logical vector, R coerces TRUE/FALSE values numerical values 1 0.)","code":"? condition_fye() # get engineering CIP codes engr_cip <- filter_search(cip, keep_text = \"^14\")  # examine the result engr_cip #>       cip2    cip2name   cip4 #>     <char>      <char> <char> #>  1:     14 Engineering   1401 #>  2:     14 Engineering   1401 #>  3:     14 Engineering   1402 #>  4:     14 Engineering   1403 #>  5:     14 Engineering   1404 #> ---                           #> 50:     14 Engineering   1442 #> 51:     14 Engineering   1443 #> 52:     14 Engineering   1444 #> 53:     14 Engineering   1445 #> 54:     14 Engineering   1499 #>                                                    cip4name   cip6 #>                                                      <char> <char> #>  1:                                    Engineering, General 140101 #>  2:                                    Engineering, General 140102 #>  3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>  4: Agricultural, Biological Engineering and Bioengineering 140301 #>  5:                               Architectural Engineering 140401 #> ---                                                                #> 50:       Mechatronics, Robotics and Automation Engineering 144201 #> 51:                                 Biochemical Engineering 144301 #> 52:                                   Engineering Chemistry 144401 #> 53:                      Biological, Biosystems Engineering 144501 #> 54:                                      Engineering, Other 149999 #>                                                         cip6name #>                                                           <char> #>  1:                                         Engineering, General #>  2:                                              Pre-Engineering #>  3: Aerospace, Aeronautical and Astronautical, Space Engineering #>  4:      Agricultural, Biological Engineering and Bioengineering #>  5:                                    Architectural Engineering #> ---                                                              #> 50:            Mechatronics, Robotics and Automation Engineering #> 51:                                      Biochemical Engineering #> 52:                                        Engineering Chemistry #> 53:                           Biological, Biosystems Engineering #> 54:                                           Engineering, Other # get IDs of all engineering students in all terms engr <- filter_match(term,   match_to = engr_cip,   by_col = \"cip6\",   select = \"mcid\" )  # all terms, so there will be duplictae IDs engr #>                mcid #>              <char> #>      1: MID25853474 #>      2: MID25853474 #>      3: MID25864225 #>      4: MID25864225 #>      5: MID25864273 #>     ---             #> 129718: MID26529140 #> 129719: MID26529140 #> 129720: MID26544796 #> 129721: MID26544796 #> 129722: MID26550059  # omit duplicate rows engr <- unique(engr)  # examine the result engr #>               mcid #>             <char> #>     1: MID25853474 #>     2: MID25864225 #>     3: MID25864273 #>     4: MID25864554 #>     5: MID25864996 #>    ---             #> 19032: MID26346976 #> 19033: MID26355610 #> 19034: MID26529140 #> 19035: MID26544796 #> 19036: MID26550059 # limit the population to degree-seeking students engr <- filter_match(engr,   match_to = student,   by_col = \"mcid\" )  # examine the result engr #>               mcid #>             <char> #>     1: MID25783162 #>     2: MID25783166 #>     3: MID25783167 #>     4: MID25783178 #>     5: MID25783197 #>    ---             #> 19032: MID26697295 #> 19033: MID26697298 #> 19034: MID26697367 #> 19035: MID26697444 #> 19036: MID26697447 ? add_race_sex # add race and sex variables engr <- add_race_sex(engr, midfield_student = student)  # examine the result engr #>               mcid            race    sex #>             <char>          <char> <char> #>     1: MID25783162           White   Male #>     2: MID25783166           White   Male #>     3: MID25783167           White   Male #>     4: MID25783178           Black   Male #>     5: MID25783197           White   Male #>    ---                                    #> 19032: MID26697295           White   Male #> 19033: MID26697298           Asian   Male #> 19034: MID26697367 Hispanic/Latinx   Male #> 19035: MID26697444           White   Male #> 19036: MID26697447           Asian   Male # set up a data frame for imputation fye <- condition_fye(engr, midfield_term = term)  # view the result fye #>              mcid   institution            race    sex   cip6 #>            <char>        <fctr>          <fctr> <fctr> <fctr> #>    1: MID26060301 Institution C           Asian Female   <NA> #>    2: MID25995980 Institution C Hispanic/Latinx Female   <NA> #>    3: MID25997636 Institution C Hispanic/Latinx Female   <NA> #>    4: MID26086310 Institution C Hispanic/Latinx Female   <NA> #>    5: MID26000057 Institution C           White Female   <NA> #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 # number of NA values in cip6 column sum(is.na(fye[, cip6])) #> [1] 1931"},{"path":"/articles/art-040-fye-programs.html","id":"using-the-mice-package","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using the mice package","title":"FYE programs","text":"mice package [2] implements multivariate imputation chained equations (MICE). MICE also known “fully conditional specification” “sequential regression multiple imputation” suitable categorical variables [3]. computational procedure follows approach suggested Dhana [4]. procedure assumes missing CIP data—NA values prepared data frame—“missing random” (MAR), , independent variables used impute missing values. rationale using data FYE institutions impute missing values—existence missing data depend institution type, FYE non-FYE. Within FYE data , however, assume imputed starting majors missing random. first use mice examine framework calling function zero iterations fye data frame. (warning may appear console. can ignored.) look closely two elements framework. first imputation method variables method applied. case, correct. “polyreg” imputation method (polytomous logistic regression) appropriate data comprised unordered categorical variables. method correctly assigned, assign follows, second element review predictor matrix. row predictor matrix identifies predictors used predict variable row name—variables prediction method assigned . Since variable predicted cip6, really examine last row matrix, zeros ones tell us cip6 going predicted institution, race, sex (mcid). correct. default setting incorrect, can set manually ready imputation. default seed argument NULL, setting seed shown vignette results reproducible. Setting printFlag = TRUE displays progress console. mice() produces calls mids object: “multiply-imputed data set.” complete() function extracts completed data frame mids object, convert data.table. use result, need two columns, predicted starting program keyed ID. program codes still factors. change back characters. program codes data frame predicted, change variable name start distinguish cip6 variables data tables. process built-data set fye_start constructed, using random number seed used . confirm identical, Lastly, mice package masks base R rbind() cbind() functions, use following unload package ’re done .","code":"# imputation framework <- mice(fye, maxit = 0)  # examine the results framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 #> Number of logged events:  1  #>   it im dep     meth  out #> 1  0  0     constant mcid method <- framework[[\"method\"]] method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # variable(s) being imputed method[c(\"cip6\")] <- \"polyreg\"  # variable(s) not being imputed method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\"  # examine the result method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" predictors <- framework[[\"predictorMatrix\"]] predictors #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 predictors[\"cip6\", , drop = FALSE] #>      mcid institution race sex cip6 #> cip6    0           1    1   1    0 # set individual columns of the predictor matrix predictors[, c(\"mcid\", \"cip6\")] <- 0  # we need a one only in the last row for these three predictors predictors[, c(\"institution\", \"race\", \"sex\")] <- c(0, 0, 0, 0, 1)  # examine the result predictors #>             mcid institution race sex cip6 #> mcid           0           0    0   0    0 #> institution    0           0    0   0    0 #> race           0           0    0   0    0 #> sex            0           0    0   0    0 #> cip6           0           1    1   1    0 # imputation fye_mids <- mice(   data = fye,   method = method,   predictorMatrix = predictors,   seed = 20180624,   printFlag = TRUE )  # output in console with printFlag = TRUE # >  iter imp variable # >   1   1  cip6 # >   1   2  cip6 # >   1   3  cip6 # >   1   4  cip6 # >   1   5  cip6 # >   --- # >   5   1  cip6 # >   5   2  cip6 # >   5   3  cip6 # >   5   4  cip6 # >   5   5  cip6 fye <- complete(fye_mids) setDT(fye)  # examine the result fye #>              mcid   institution            race    sex   cip6 #>            <char>        <fctr>          <fctr> <fctr> <fctr> #>    1: MID26060301 Institution C           Asian Female 140801 #>    2: MID25995980 Institution C Hispanic/Latinx Female 141901 #>    3: MID25997636 Institution C Hispanic/Latinx Female 140701 #>    4: MID26086310 Institution C Hispanic/Latinx Female 141901 #>    5: MID26000057 Institution C           White Female 140701 #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: Factor w/ 17 levels \"140201\",\"140301\",..: 6 13 5 13 5 5 6 5 3 13 ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye[, cip6 := as.character(cip6)] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: chr  \"140801\" \"141901\" \"140701\" \"141901\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\") fye #>              mcid  start #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701 all.equal(fye, fye_start) #> [1] \"Different column names\" detach(\"package:mice\", unload = TRUE) set.seed(NULL)"},{"path":"/articles/art-040-fye-programs.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"FYE programs","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"mice\")  # prepared predictions DT <- filter_match(term,   match_to = study_student,   by_col = \"mcid\",   select = c(\"mcid\", \"term\", \"cip6\") ) keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT <- DT[, .SD[1], by = \"mcid\"] setkey(DT, NULL) DT <- filter_match(DT,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) DT <- unique(DT)  # summarize for later DT_no_fye <- DT[, .N, by = \"cip6\"] DT_no_fye <- merge(DT_no_fye, study_program, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want]  # subset predicted FYE start programs setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_match(fye_start,   match_to = study_program,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) DT <- rbindlist(list(DT, study_fye))  # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"] DT_with_fye <- merge(DT_with_fye, study_program, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\") DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # perform your own prediction engr_cip <- filter_search(cip, keep_text = \"^14\") engr <- filter_match(term,   match_to = engr_cip,   by_col = \"cip6\",   select = \"mcid\" ) engr <- unique(engr) engr <- filter_match(engr,   match_to = student,   by_col = \"mcid\" ) engr <- add_race_sex(engr, midfield_student = student) fye <- condition_fye(engr, midfield_term = term)  # mice framework <- mice(fye, maxit = 0) method <- framework[[\"method\"]] method[c(\"cip6\")] <- \"polyreg\" method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\" predictors <- framework[[\"predictorMatrix\"]] predictors[, c(\"mcid\", \"cip6\")] <- 0 predictors[, c(\"institution\", \"race\", \"sex\")] <- c(0, 0, 0, 0, 1) fye_mids <- mice(   data = fye,   method = method,   predictorMatrix = predictors,   seed = 20180624,   printFlag = TRUE ) fye <- complete(fye_mids)  # prepare for use setDT(fye) cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] fye[, cip6 := as.character(cip6)] fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\")  # reinitialize random number seed set.seed(NULL)"},{"path":"/articles/art-050-multiway-graphs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multiway graphs","text":"introduce graphs multiway data one quantitative variable two categorical variables. explained Cleveland [1], … quantitative variable response, goal study depends categorical variables, factors. distinguishes multiway data cross-classification categorical variables; value response combination levels two categorical variables. Multiway data specific structure: categorical variable \\(m\\) levels; independent categorical variable \\(n\\) levels; single quantitative value associated every combinations levels two categories. Multiway data typically organized three columns \\(m \\times n\\) rows. Note “multiway” context refers data structure graph design defined Cleveland, methods analysis described Kroonenberg [2].","code":""},{"path":"/articles/art-050-multiway-graphs.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Multiway graphs","text":"Start case study stickiness results (study_stickiness) Practice conditioning multiway data display Practice creating multiway graphs duals Practice different options ordering rows panels","code":""},{"path":"/articles/art-050-multiway-graphs.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Multiway graphs","text":"midfieldr functions condition_multiway() packages can control data.table printed screen following options.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\") # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )"},{"path":"/articles/art-050-multiway-graphs.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Multiway graphs","text":"Longitudinal “stickiness” ratio number students graduating program number students ever enrolled program [3]. stickiness metric developed separate vignette—focus graphing result. computed stickiness case study Civil, Electrical, Industrial, Mechanical Engineering saved results data set, study_stickiness. may view help page running data loaded midfieldr (don’t use data() access .) Categorical variables often provided character variables. Without ordering levels, rows panels multiway graph ordered alphabetically—best design gaining insights graph. condition categorical variables, use condition_multiway() convert factors levels ordered quantitative response variable fashion, see help page, run function requires two categorical variables one quantitative variable. data frame, two categorical columns program race_sex. quantitative variable stick (longitudinal stickiness). conditioning, categorical variables characters, data conditioning presenting results. Even students institutions de-identified, privacy risk small populations, omit observations fewer 10 students ever enrolled. also omit rows ambiguous values race/ethnicity (International /Unknown). graphed results advance, find small population subset removed Native American students one disciplines—add list observations omit. process data frame change row column structure, can see, previous character variables converted factors, levels factors ordered non-alphabetically. program now factor 4 levels; race_sex factor 8 levels. values determine order levels can obtained using detail argument. ordering data program, can see given program single value program_stick copied many times needed. Similarly, ordering data race_sex, can see given demographic group single value race_sex_stick copied many times needed.","code":"? study_stickiness # examine the built-in data study_stickiness #>        program               race_sex  ever  grad stick #>         <char>                 <char> <int> <int> <num> #>  1:      Civil           Asian Female    17    12  70.6 #>  2:      Civil             Asian Male    37    24  64.9 #>  3:      Civil           Black Female    54    28  51.9 #>  4:      Civil             Black Male    98    43  43.9 #>  5:      Civil Hispanic/Latinx Female    10     5  50.0 #> ---                                                     #> 51: Mechanical   Native American Male    14     8  57.1 #> 52: Mechanical   Other/Unknown Female     8     7  87.5 #> 53: Mechanical     Other/Unknown Male    48    28  58.3 #> 54: Mechanical           White Female   291   195  67.0 #> 55: Mechanical             White Male  1940  1265  65.2 ? condition_multiway() # create a new memory location DT <- copy(study_stickiness)  # first category is a character class(DT$program) #> [1] \"character\"  # second category is a character class(DT$race_sex) #> [1] \"character\" # Omit before graphing DT <- DT[ever >= 10] # data table printing option options(datatable.print.topn = 3)  # Omit before graphing DT <- DT[!race_sex %ilike% c(\"International|Other|Native\")]  # Examine the result DT #>        program             race_sex  ever  grad stick #>         <char>               <char> <int> <int> <num> #>  1:      Civil         Asian Female    17    12  70.6 #>  2:      Civil           Asian Male    37    24  64.9 #>  3:      Civil         Black Female    54    28  51.9 #> ---                                                   #> 29: Mechanical Hispanic/Latinx Male    76    47  61.8 #> 30: Mechanical         White Female   291   195  67.0 #> 31: Mechanical           White Male  1940  1265  65.2  temp <- copy(DT) # condition as multiway data DT <- condition_multiway(   dframe = DT, # input data frame   categ_col = c(\"program\", \"race_sex\"), # multiway categorical variables   quant_col = \"stick\", # multiway quantitative variable   detail = FALSE, # do not return columns of details   order_by = \"percent\", # row and panel ordering method   param_col = c(\"grad\", \"ever\") # parameters used for ordering ) DT #>        program             race_sex  ever  grad stick #>         <fctr>               <fctr> <num> <num> <num> #>  1:      Civil         Asian Female    17    12  70.6 #>  2:      Civil           Asian Male    37    24  64.9 #>  3:      Civil         Black Female    54    28  51.9 #> ---                                                   #> 29: Mechanical Hispanic/Latinx Male    76    47  61.8 #> 30: Mechanical         White Female   291   195  67.0 #> 31: Mechanical           White Male  1940  1265  65.2 # first category is now a factor levels(DT$program) #> [1] \"Electrical\" \"Industrial\" \"Mechanical\" \"Civil\"  # second category is now a factor levels(DT$race_sex) #> [1] \"Black Male\"             \"Black Female\"           \"Hispanic/Latinx Male\"   #> [4] \"Asian Male\"             \"White Male\"             \"Hispanic/Latinx Female\" #> [7] \"White Female\"           \"Asian Female\" # return stickiness by category DT <- condition_multiway(   dframe = DT, # input data frame   categ_col = c(\"program\", \"race_sex\"), # multiway categorical variables   quant_col = \"stick\", # multiway quantitative variable   detail = TRUE, # return columns of details   order_by = \"percent\", # row and panel ordering method   param_col = c(\"grad\", \"ever\") # parameters used for ordering ) # optional code to control data.table printing options(datatable.print.topn = 10)  # programs have a median stickiness across race-sex groups DT[order(program)] #>        program               race_sex  grad  ever stick program_grad #>         <fctr>                 <fctr> <num> <num> <num>        <num> #>  1: Electrical           Asian Female    27    38  71.1         1425 #>  2: Electrical             Asian Male   127   197  64.5         1425 #>  3: Electrical           Black Female    95   154  61.7         1425 #>  4: Electrical             Black Male   137   304  45.1         1425 #>  5: Electrical Hispanic/Latinx Female    10    14  71.4         1425 #>  6: Electrical   Hispanic/Latinx Male    37    67  55.2         1425 #>  7: Electrical           White Female   122   193  63.2         1425 #>  8: Electrical             White Male   870  1366  63.7         1425 #>  9: Industrial           Asian Female    20    40  50.0          655 #> 10: Industrial             Asian Male    38    60  63.3          655 #> ---                                                                  #> 22: Mechanical           White Female   195   291  67.0         1757 #> 23: Mechanical             White Male  1265  1940  65.2         1757 #> 24:      Civil           Asian Female    12    17  70.6         1160 #> 25:      Civil             Asian Male    24    37  64.9         1160 #> 26:      Civil           Black Female    28    54  51.9         1160 #> 27:      Civil             Black Male    43    98  43.9         1160 #> 28:      Civil Hispanic/Latinx Female     5    10  50.0         1160 #> 29:      Civil   Hispanic/Latinx Male    33    56  58.9         1160 #> 30:      Civil           White Female   232   329  70.5         1160 #> 31:      Civil             White Male   783  1147  68.3         1160 #>     program_ever race_sex_grad race_sex_ever program_stick race_sex_stick #>            <num>         <num>         <num>         <num>          <num> #>  1:         2333            78           118          61.1           66.1 #>  2:         2333           266           416          61.1           63.9 #>  3:         2333           224           385          61.1           58.2 #>  4:         2333           337           722          61.1           46.7 #>  5:         2333            23            35          61.1           65.7 #>  6:         2333           139           224          61.1           62.1 #>  7:         2333           691          1047          61.1           66.0 #>  8:         2333          3239          4947          61.1           65.5 #>  9:         1053            78           118          62.2           66.1 #> 10:         1053           266           416          62.2           63.9 #> ---                                                                       #> 22:         2760           691          1047          63.7           66.0 #> 23:         2760          3239          4947          63.7           65.5 #> 24:         1748            78           118          66.4           66.1 #> 25:         1748           266           416          66.4           63.9 #> 26:         1748           224           385          66.4           58.2 #> 27:         1748           337           722          66.4           46.7 #> 28:         1748            23            35          66.4           65.7 #> 29:         1748           139           224          66.4           62.1 #> 30:         1748           691          1047          66.4           66.0 #> 31:         1748          3239          4947          66.4           65.5 # race_sex groupings have a median stickiness across programs DT[order(race_sex)] #>        program               race_sex  grad  ever stick program_grad #>         <fctr>                 <fctr> <num> <num> <num>        <num> #>  1:      Civil             Black Male    43    98  43.9         1160 #>  2: Electrical             Black Male   137   304  45.1         1425 #>  3: Industrial             Black Male    57   106  53.8          655 #>  4: Mechanical             Black Male   100   214  46.7         1757 #>  5:      Civil           Black Female    28    54  51.9         1160 #>  6: Electrical           Black Female    95   154  61.7         1425 #>  7: Industrial           Black Female    55    94  58.5          655 #>  8: Mechanical           Black Female    46    83  55.4         1757 #>  9:      Civil   Hispanic/Latinx Male    33    56  58.9         1160 #> 10: Electrical   Hispanic/Latinx Male    37    67  55.2         1425 #> ---                                                                  #> 22: Electrical Hispanic/Latinx Female    10    14  71.4         1425 #> 23: Mechanical Hispanic/Latinx Female     8    11  72.7         1757 #> 24:      Civil           White Female   232   329  70.5         1160 #> 25: Electrical           White Female   122   193  63.2         1425 #> 26: Industrial           White Female   142   234  60.7          655 #> 27: Mechanical           White Female   195   291  67.0         1757 #> 28:      Civil           Asian Female    12    17  70.6         1160 #> 29: Electrical           Asian Female    27    38  71.1         1425 #> 30: Industrial           Asian Female    20    40  50.0          655 #> 31: Mechanical           Asian Female    19    23  82.6         1757 #>     program_ever race_sex_grad race_sex_ever program_stick race_sex_stick #>            <num>         <num>         <num>         <num>          <num> #>  1:         1748           337           722          66.4           46.7 #>  2:         2333           337           722          61.1           46.7 #>  3:         1053           337           722          62.2           46.7 #>  4:         2760           337           722          63.7           46.7 #>  5:         1748           224           385          66.4           58.2 #>  6:         2333           224           385          61.1           58.2 #>  7:         1053           224           385          62.2           58.2 #>  8:         2760           224           385          63.7           58.2 #>  9:         1748           139           224          66.4           62.1 #> 10:         2333           139           224          61.1           62.1 #> ---                                                                       #> 22:         2333            23            35          61.1           65.7 #> 23:         2760            23            35          63.7           65.7 #> 24:         1748           691          1047          66.4           66.0 #> 25:         2333           691          1047          61.1           66.0 #> 26:         1053           691          1047          62.2           66.0 #> 27:         2760           691          1047          63.7           66.0 #> 28:         1748            78           118          66.4           66.1 #> 29:         2333            78           118          61.1           66.1 #> 30:         1053            78           118          62.2           66.1 #> 31:         2760            78           118          63.7           66.1"},{"path":"/articles/art-050-multiway-graphs.html","id":"exercises","dir":"Articles","previous_headings":"Prepare data","what":"Exercises","title":"Multiway graphs","text":"Determine class categorical variables built-data set study_grad_rate. Apply condition_multiway(). Confirm categorical variables factors. Determine order factor levels.","code":""},{"path":"/articles/art-050-multiway-graphs.html","id":"create-a-multiway-graph","dir":"Articles","previous_headings":"","what":"Create a multiway graph","title":"Multiway graphs","text":"use conventional ggplot2 functions create multiway graphs. previously ordering levels factors, structured data rows panels multiway graph ordered method selected. used “percent” method. Program stickiness drawn vertical reference line panel. Reminder: practice data, suitable drawing inferences student performance, .e., research.  graph permits direct visual comparison stickiness varies race sex within particular major. Reading multiway graph can effectively compare values within panel panels. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. interesting stories often visual anomalies. explore comparison panels, swap row panel categories, creating dual multiway.","code":"# create one multiway graph ggplot(data = DT, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_stick),     linetype = 2,     color = \"gray70\"   ) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness (%)\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   )"},{"path":"/articles/art-050-multiway-graphs.html","id":"exercise","dir":"Articles","previous_headings":"Create a multiway graph","what":"Exercise","title":"Multiway graphs","text":"Create multiway graph using conditioned study_grad_rate data","code":""},{"path":"/articles/art-050-multiway-graphs.html","id":"create-the-dual-multiway-graph","dir":"Articles","previous_headings":"","what":"Create the dual multiway graph","title":"Multiway graphs","text":"previous graph facilitate visual comparisons members race-sex group. Cleveland says, asymmetry, often important explore multiway data many multiway dot plots categorical variables, variable assigned levels. create dual multiway graph, swap roles rows panels. y = race_sex becomes y = program facet_wrap(vars(program) ... becomes facet_wrap(vars(race_sex) ...  graph permits direct visual comparison stickiness varies major one group students. Race/ethnicity/sex group stickiness drawn vertical reference line panel. multiways created discussion. Usually one convey compelling visual story gets included published findings.","code":"# create the dual multiway graph ggplot(data = DT, aes(x = stick, y = program)) +   facet_wrap(vars(race_sex), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = race_sex_stick),     linetype = 2,     color = \"gray70\"   ) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness (%)\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   )"},{"path":"/articles/art-050-multiway-graphs.html","id":"exercise-1","dir":"Articles","previous_headings":"Create the dual multiway graph","what":"Exercise","title":"Multiway graphs","text":"Create dual multiway graph using conditioned study_grad_rate data","code":""},{"path":"/articles/art-050-multiway-graphs.html","id":"panel-and-row-ordering-options","dir":"Articles","previous_headings":"","what":"Panel and row ordering options","title":"Multiway graphs","text":"order_by argument condition_multiway() provides options ordering two categorical variables (panel order row order) multiway graph. following values order_by possible: percent Orders ratios computed category. Used quantitative response variable ratio (percent) two columns integer counts (two columns numerator denominator ratio), ratio graduates ever-enrolled (stickiness) ratio graduates starters (graduation rate). counts two columns summed category ratios category computed. grouped ratios used order levels categories. graphs shown representative type ordering. Requires optional param_col argument names columns two terms ratio. median (default) Orders median values quantitative column grouped category. , quantity manipulated  mean Orders mean values quantitative column grouped category.  sum Orders sum values quantitative column grouped category. Useful response variable count frequency.  alphabet Orders levels categorical variables alphabetically. Rarely useful perceiving effects, can useful value look .","code":"# create a common graph framework to use in the example below p <- ggplot(data = temp, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point(na.rm = TRUE) +   labs(     x = \"Longitudinal stickiness (%)\",     y = \"\",     caption = \"Source: midfielddata\"   ) dtf <- condition_multiway(   dframe = temp,   categ_col = c(\"program\", \"race_sex\"),   quant_col = \"stick\",   detail = TRUE ) p %+% dtf +   labs(title = \"Levels ordered by median values\") +   geom_vline(aes(xintercept = program_stick),     linetype = 2,     col = \"gray50\"   ) dtf <- condition_multiway(   dframe = temp,   categ_col = c(\"program\", \"race_sex\"),   quant_col = \"stick\",   order_by = \"mean\",   detail = TRUE ) p %+% dtf +   labs(title = \"Levels ordered by mean values\") +   geom_vline(aes(xintercept = program_stick),     linetype = 2,     col = \"gray50\"   ) dtf <- condition_multiway(   dframe = temp,   categ_col = c(\"program\", \"race_sex\"),   quant_col = \"ever\",   order_by = \"sum\",   detail = TRUE ) ggplot(data = dtf, aes(x = ever, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point(na.rm = TRUE) +   scale_x_continuous(trans = \"log2\") +   geom_vline(aes(xintercept = program_ever),     linetype = 2,     col = \"gray50\"   ) +   labs(     x = \"Number of students ever enrolled (log-2 scale)\",     y = \"\",     title = \"Levels ordered by count totals\",     caption = \"Source: midfielddata\"   ) dtf <- condition_multiway(   dframe = temp,   categ_col = c(\"program\", \"race_sex\"),   quant_col = \"stick\",   order_by = \"alphabet\" ) p %+% dtf +   labs(title = \"Levels ordered alphbetically\")"},{"path":"/articles/art-050-multiway-graphs.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Multiway graphs","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )"},{"path":"/articles/art-060-tabulating-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tabulating data","text":"Data analysis graphing often laid “block record” “long” form every key variable response variable columns [1]. use form regularly, example, preparing data graphing using ggplot2 package. However, “row-record” “wide” format generally preferred data tables publications sharing research collaborators. illustrate difference, consider following small subset study_stickiness data. first two columns keys uniquely identify rows third column response “payload” column containing data. Database designers call “denormalized” form; many R users recognize -called “tidy” form [2]. Table 1. Block-record form  data shown row-record form table . leftmost column still key; new column names contain values second key; cells row-column intersections contain response. lost labels second key (program) response (stick), though table caption includes “stickiness” label identify cell content. Table 2. Row-record form  Depending software background, may encountered block-record/row-record transformation using function pairs—list adapted [1]. pivot / anti-pivot crosstab / shred (databases) pivot_to_rowrecs / unpivot_to_blocks (cdata) reshape “wide” / reshape “long” (R) pivot_wider / pivot_longer (tidyr) pivot / unpivot (Microsoft Excel) dcast / melt (data.table) cast / melt (reshape2) work often multiway data (two keys, one response), transformation forms easily accomplished using data.table functions dcast() melt(). complicated transformations—multiple response variables example—recommend cdata package [3].","code":""},{"path":"/articles/art-060-tabulating-data.html","id":"in-this-vignette","dir":"Articles","previous_headings":"Introduction","what":"In this vignette","title":"Tabulating data","text":"Using study_student study_stickiness data sets included midfieldr, : Illustrate block-record form using multiway data. Transform multiway block records row records. Transform multiway row-records block-records. Create two-way frequency table row column totals.","code":""},{"path":"/articles/art-060-tabulating-data.html","id":"block-record-form","dir":"Articles","previous_headings":"","what":"Block-record form","title":"Tabulating data","text":"writing script follow along, start packages: example, use case study longitudinal stickiness results case study. View data help page running data currently laid block-record form, race_sex key program key columns response, stickiness, column. tabulating data, impose constraints case study omitting: observations fewer 10 students ever enrolled; Native American students small numbers one program; ambiguous values race/ethnicity (International /Unknown). limit data table three multiway variables. Following HTML version data table block-record form. Table 3. Stickiness block-record form","code":"# packages used library(\"midfieldr\") library(\"janitor\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) ? study_stickiness # Copy to avoid update by reference block_form <- copy(study_stickiness)  # Omit before presenting block_form <- block_form[ever >= 10] block_form <- block_form[!race_sex %ilike% c(\"International|Other|Native\")]  # Examine the result block_form #>        program               race_sex  ever  grad stick #>         <char>                 <char> <int> <int> <num> #>  1:      Civil           Asian Female    17    12  70.6 #>  2:      Civil             Asian Male    37    24  64.9 #>  3:      Civil           Black Female    54    28  51.9 #>  4:      Civil             Black Male    98    43  43.9 #>  5:      Civil Hispanic/Latinx Female    10     5  50.0 #> ---                                                     #> 27: Mechanical             Black Male   214   100  46.7 #> 28: Mechanical Hispanic/Latinx Female    11     8  72.7 #> 29: Mechanical   Hispanic/Latinx Male    76    47  61.8 #> 30: Mechanical           White Female   291   195  67.0 #> 31: Mechanical             White Male  1940  1265  65.2 # Three columns block_form <- block_form[, .(program, race_sex, stick)]  # examine the result block_form #>        program               race_sex stick #>         <char>                 <char> <num> #>  1:      Civil           Asian Female  70.6 #>  2:      Civil             Asian Male  64.9 #>  3:      Civil           Black Female  51.9 #>  4:      Civil             Black Male  43.9 #>  5:      Civil Hispanic/Latinx Female  50.0 #> ---                                         #> 27: Mechanical             Black Male  46.7 #> 28: Mechanical Hispanic/Latinx Female  72.7 #> 29: Mechanical   Hispanic/Latinx Male  61.8 #> 30: Mechanical           White Female  67.0 #> 31: Mechanical             White Male  65.2"},{"path":"/articles/art-060-tabulating-data.html","id":"transform-block-records-to-row-records","dir":"Articles","previous_headings":"","what":"Transform block-records to row-records","title":"Tabulating data","text":"row-record form want rows columns ordered alphabetically, convert factors characters. Use dcast() reshape data frame block-record form row-record form. can edit column names presentation, Following HTML version data table row-record form. Table 4. Stickiness row-record form","code":"# create a new memory location row_form <- copy(block_form)  # convert factors to characters row_form[, race_sex := as.character(race_sex)] row_form[, program := as.character(program)] # reshape row_form <- dcast(row_form, race_sex ~ program, value.var = \"stick\")  # examine the result row_form #>                  race_sex Civil Electrical Industrial Mechanical #>                    <char> <num>      <num>      <num>      <num> #> 1:           Asian Female  70.6       71.1       50.0       82.6 #> 2:             Asian Male  64.9       64.5       63.3       63.1 #> 3:           Black Female  51.9       61.7       58.5       55.4 #> 4:             Black Male  43.9       45.1       53.8       46.7 #> 5: Hispanic/Latinx Female  50.0       71.4         NA       72.7 #> 6:   Hispanic/Latinx Male  58.9       55.2       88.0       61.8 #> 7:           White Female  70.5       63.2       60.7       67.0 #> 8:             White Male  68.3       63.7       65.0       65.2 setnames(row_form,   old = c(\"race_sex\"),   new = c(\"Race/Ethnicity/Sex\") )"},{"path":"/articles/art-060-tabulating-data.html","id":"exercise","dir":"Articles","previous_headings":"Transform block-records to row-records","what":"Exercise","title":"Tabulating data","text":"Create table study_grad_rate data similar table .","code":""},{"path":"/articles/art-060-tabulating-data.html","id":"transform-row-records-to-block-records","dir":"Articles","previous_headings":"","what":"Transform row-records to block-records","title":"Tabulating data","text":"Mount Zumel state, “coordinatized data, different layouts rows columns demonstrably equivalent.”—keys provide invariant “coordinates” data values, one form readily transformed another. example (, simple example two coordinates one response), can use melt() transform row records block records. Note can re-establish key label program response label stick. Working student unit record data, melt() particularly useful colleague provides data row-record form need transform block record analysis graphing. , transformations multiple response variables, recommend cdata package [3].","code":"melt(row_form,   id.vars = \"Race/Ethnicity/Sex\",   measure.vars = c(\"Civil\", \"Electrical\", \"Industrial\", \"Mechanical\"),   variable.name = \"program\",   value.name = \"stick\" ) #>         Race/Ethnicity/Sex    program stick #>                     <char>     <fctr> <num> #>  1:           Asian Female      Civil  70.6 #>  2:             Asian Male      Civil  64.9 #>  3:           Black Female      Civil  51.9 #>  4:             Black Male      Civil  43.9 #>  5: Hispanic/Latinx Female      Civil  50.0 #> ---                                         #> 28:             Black Male Mechanical  46.7 #> 29: Hispanic/Latinx Female Mechanical  72.7 #> 30:   Hispanic/Latinx Male Mechanical  61.8 #> 31:           White Female Mechanical  67.0 #> 32:             White Male Mechanical  65.2"},{"path":"/articles/art-060-tabulating-data.html","id":"tables-with-totals","dir":"Articles","previous_headings":"","what":"Tables with totals","title":"Tabulating data","text":"Another commonly-encountered table student unit record research summary table numbers students different groups. example, use study_student data. View help page running focus two categories, e.g., program race_sex, frequency occurrences combinations levels two categories two-way frequency table. join race/ethnicity sex variables construct usual categories, Counting two grouping variables yields frequency combinations levels omits columns. Reshaping block-record row-record form creates two-way frequency table. data sort, readers often wish see row column totals. janitor package adorn_totals() function just . can sum rows, columns, . Following HTML version data. Table 5. Two-way frequency table totals","code":"? study_student # Create a new memory location DT <- copy(study_student)  # View the data DT #>              mcid   institution   cip6    program          race    sex #>            <char>        <char> <char>     <char>        <char> <char> #>    1: MID25783197 Institution M 140801      Civil         White   Male #>    2: MID25783441 Institution M 140801      Civil         White   Male #>    3: MID25783553 Institution M 140801      Civil         White   Male #>    4: MID25784209 Institution M 140801      Civil International   Male #>    5: MID25784489 Institution M 140801      Civil         Asian Female #>   ---                                                                  #> 8215: MID26692926 Institution L 143501 Industrial         White   Male #> 8216: MID26693368 Institution L 143501 Industrial         White   Male #> 8217: MID26695626 Institution L 143501 Industrial         White   Male #> 8218: MID26696116 Institution L 143501 Industrial         White Female #> 8219: MID26696429 Institution L 143501 Industrial         White Female #>       timely_term data_sufficiency #>            <char>           <lgcl> #>    1:       19923             TRUE #>    2:       19973             TRUE #>    3:       20073             TRUE #>    4:       20003             TRUE #>    5:       19943             TRUE #>   ---                              #> 8215:       20153             TRUE #> 8216:       20143             TRUE #> 8217:       20143             TRUE #> 8218:       20153             TRUE #> 8219:       20153             TRUE # Merge the groups as usual DT[, race_sex := paste(race, sex)]  # Subset the same populations as above DT <- DT[!race_sex %ilike% c(\"International|Other|Native\")] DT <- DT[, .N, by = c(\"program\", \"race_sex\")]  # omit small populations DT <- DT[N >= 10]  # Examine the result DT #>        program             race_sex     N #>         <char>               <char> <int> #>  1:      Civil           White Male  1147 #>  2:      Civil         Asian Female    17 #>  3:      Civil         White Female   329 #>  4:      Civil           Black Male    98 #>  5:      Civil         Black Female    54 #> ---                                       #> 27: Industrial         White Female   234 #> 28: Industrial         Black Female    94 #> 29: Industrial           Asian Male    60 #> 30: Industrial Hispanic/Latinx Male    25 #> 31: Industrial         Asian Female    40 DT <- dcast(DT, race_sex ~ program, value.var = \"N\")  # Examine the result DT #>                  race_sex Civil Electrical Industrial Mechanical #>                    <char> <int>      <int>      <int>      <int> #> 1:           Asian Female    17         38         40         23 #> 2:             Asian Male    37        197         60        122 #> 3:           Black Female    54        154         94         83 #> 4:             Black Male    98        304        106        214 #> 5: Hispanic/Latinx Female    10         14         NA         11 #> 6:   Hispanic/Latinx Male    56         67         25         76 #> 7:           White Female   329        193        234        291 #> 8:             White Male  1147       1366        494       1940 DT <- adorn_totals(DT, where = c(\"row\", \"col\"), na.rm = TRUE)  DT #>                race_sex Civil Electrical Industrial Mechanical Total #>            Asian Female    17         38         40         23   118 #>              Asian Male    37        197         60        122   416 #>            Black Female    54        154         94         83   385 #>              Black Male    98        304        106        214   722 #>  Hispanic/Latinx Female    10         14         NA         11    35 #>    Hispanic/Latinx Male    56         67         25         76   224 #>            White Female   329        193        234        291  1047 #>              White Male  1147       1366        494       1940  4947 #>                   Total  1748       2333       1053       2760  7894"},{"path":"/articles/art-060-tabulating-data.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Tabulating data","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"janitor\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # Block-record form block_form <- copy(study_stickiness) block_form <- block_form[ever >= 10] block_form <- block_form[!race_sex %ilike% c(\"International|Other|Native\")] block_form <- block_form[, .(program, race_sex, stick)]  # Transform block-records to row-records row_form <- copy(block_form) row_form[, race_sex := as.character(race_sex)] row_form[, program := as.character(program)] row_form <- dcast(row_form, race_sex ~ program, value.var = \"stick\") setnames(row_form,   old = c(\"race_sex\"),   new = c(\"Race/Ethnicity/Sex\") )  # Transform row-records to block-records melt(row_form,   id.vars = \"Race/Ethnicity/Sex\",   measure.vars = c(\"Civil\", \"Electrical\", \"Industrial\", \"Mechanical\"),   variable.name = \"program\",   value.name = \"stick\" )  # Tables with totals DT <- copy(study_student) DT[, race_sex := paste(race, sex)] DT <- DT[!race_sex %ilike% c(\"International|Other|Native\")] DT <- DT[, .N, by = c(\"program\", \"race_sex\")] DT <- DT[N >= 10] DT <- dcast(DT, race_sex ~ program, value.var = \"N\") DT <- adorn_totals(DT, where = c(\"row\", \"col\"), na.rm = TRUE)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors","text":"Richard Layton. Maintainer, author, copyright holder. Russell Long. Data manager, author, copyright holder. Matthew Ohland. Author, copyright holder. Marisa Orr. Contributor, copyright holder. Susan Lord. Contributor, copyright holder. US National Science Foundation. Funder.","code":""},{"path":"/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our pledge","title":"Contributor code of conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Contributor code of conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement responsibilities","title":"Contributor code of conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor code of conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor code of conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement midfield@purdue.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement guidelines","title":"Contributor code of conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement guidelines","what":"1. Correction","title":"Contributor code of conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement guidelines","what":"2. Warning","title":"Contributor code of conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement guidelines","what":"3. Temporary Ban","title":"Contributor code of conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement guidelines","what":"4. Permanent Ban","title":"Contributor code of conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor code of conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/index.html","id":"midfieldr","dir":"","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Tools Studying MIDFIELD Student Unit Record Data R goal midfieldr provide tools working MIDFIELD data, resource longitudinal, de-identified, individual student unit records.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 33 US institutions (June 2021). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework major) institution time. midfieldr R package provides tools working MIDFIELD SURs. tools midfieldr work equally well research data MIDFIELD practice data midfielddata. midfielddata R package provides practice data (proportionate stratified sample MIDFIELD) longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016 organized four data tables:","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"brief usage example, compare counts engineering students race/ethnicity, sex, graduation status. Data manipulation performed using data.table syntax.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # Load the data tables data(student, term, degree)  # Filter for engineering programs DT <- copy(term) DT <- DT[cip6 %like% \"^14\", .(mcid, institution, cip6)] DT <- unique(DT)  # Ensure students are degree-seeking DT <- filter_match(DT, match_to = student, by_col = \"mcid\")  # Estimate timely completion terms DT <- add_timely_term(DT, midfield_term = term)  # Determine graduation status DT <- add_completion_timely(DT, midfield_degree = degree) DT[, grad_status := fifelse(completion_timely, \"grad\", \"non-grad\")]  # Apply the data sufficiency criterion DT <- add_data_sufficiency(DT, midfield_term = term) DT <- DT[data_sufficiency == TRUE]  # Obtain race/ethnicity and sex DT <- add_race_sex(DT, midfield_student = student)  # Count by grouping variables DT <- DT[, .N, by = .(grad_status, sex, race)]  # Examine the result DT #>     grad_status    sex            race     N #>          <char> <char>          <char> <int> #>  1:        grad   Male           White  7172 #>  2:        grad   Male           Black   533 #>  3:    non-grad   Male           White  4423 #>  4:    non-grad   Male           Black   706 #>  5:    non-grad   Male   Other/Unknown   113 #> ---                                          #> 24:        grad Female   Other/Unknown    35 #> 25:        grad Female Native American    14 #> 26:    non-grad Female   International    24 #> 27:    non-grad Female Native American     7 #> 28:        grad   Male Native American    36"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Articles. listing vignettes. Reference (midfieldr). listing midfieldr functions prepared data. Reference (midfielddata). listing four practice MIDFIELD data tables.","code":""},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"R (>= 3.5.0) data.table (>= 1.9.8) ggplot2 recommended data graphics, required.","code":""},{"path":"/index.html","id":"install-midfieldr","dir":"","previous_headings":"","what":"Install midfieldr","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr yet available CRAN. install development version midfieldr drat repository, type Console: can confirm successful installation running following lines bring package help page Help window.","code":"# install midfieldr from drat repo install.packages(\"midfieldr\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") library(\"midfieldr\") help(\"midfieldr-package\")"},{"path":"/index.html","id":"install-midfielddata","dir":"","previous_headings":"","what":"Install midfielddata","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"size, installing practice data takes time; please patient wait prompt “>” reappear. Console, run: can confirm successful installation running following lines bring package help page Help window.","code":"# install midfielddata   install.packages(\"midfielddata\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") # be patient library(\"midfielddata\") help(\"midfielddata-package\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"contribute midfieldr, Please clone repo locally. Commit code separate branch. Use checkmate package include runtime argument checks functions. Use tinytest package write unit tests code. Save tests inst/tinytest/ directory. provide feedback report bug, Use GitHub Issues page. Please run package unit tests report results bug report. user can run package tests installing tinytest package running: Participation open source project subject Code Conduct.","code":"test_results <- tinytest::test_package(\"midfieldr\")     as.data.frame(test_results)"},{"path":"/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfielddata Sample MIDFIELD student unit record data. MIDFIELD partnership US institutions. MIDFIELD workshops additional information tutorials.","code":""},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr licensed GPL (>= 2.0) © 2018 Richard Layton, Russell Long, Matthew Ohland, Susan Lord, Marisa Orr","code":""},{"path":"/LICENSE.html","id":"gnu-general-public-license","dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"/reference/add_completion_timely.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column to evaluate program completion — add_completion_timely","title":"Add a column to evaluate program completion — add_completion_timely","text":"Add column logical values (TRUE/FALSE) data frame indicating whether student completes program timely manner. Obtains information MIDFIELD degree data table equivalent.","code":""},{"path":"/reference/add_completion_timely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column to evaluate program completion — add_completion_timely","text":"","code":"add_completion_timely(dframe, midfield_degree, ..., detail = NULL)"},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"dframe Data frame required variables mcid timely_term.","code":""},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-midfield_degree","dir":"Reference","previous_headings":"","what":"midfield_degree (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"midfield_degree MIDFIELD degree data table equivalent required variables mcid term.","code":""},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-detail","dir":"Reference","previous_headings":"","what":"detail (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"detail Optional flag add columns reporting information evaluation based, default FALSE.","code":""},{"path":"/reference/add_completion_timely.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column to evaluate program completion — add_completion_timely","text":"data.table following properties: Rows modified. Column completion_timely added option add           columns completion term_degree. Grouping structures preserved.","code":""},{"path":"/reference/add_completion_timely.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column to evaluate program completion — add_completion_timely","text":"Program completion typically considered timely occurs within specific span years admission. persistence metric depends program completion (graduation), students whose program completion timely counted graduates; students whose program completion untimely (taking longer specific span complete) counted non-graduates. input data frame dframe must include timely_term column obtained using add_timely_term() function. Completion considered timely : 1) student completed program; 2) degree term later estimated timely completion term. function performs subsetting. detail TRUE, additional column(s) support finding returned well. extra columns completion indicating TRUE/FALSE student completed program term_degree degree table giving first term degree(s), , earned. Existing columns names added columns overwritten.","code":""},{"path":"/reference/add_data_sufficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column to evaluate data sufficiency — add_data_sufficiency","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"Add column logical values (TRUE/FALSE) data frame indicating whether available data include sufficient range years justify including student analysis. Obtains information MIDFIELD term data table equivalent.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"","code":"add_data_sufficiency(dframe, midfield_term, ..., detail = NULL)"},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"dframe Data frame required variables institution timely_term.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"midfield_term MIDFIELD term data table equivalent required variables institution term.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-detail","dir":"Reference","previous_headings":"","what":"detail (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"detail Optional flag add columns reporting information evaluation based, default FALSE.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"data.table  following properties: Rows modified. Column data_sufficiency added option add           column inst_limit. Grouping structures preserved.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"Program completion typically considered timely occurs within specific span years admission. Students admitted near last term available data generally excluded study data insufficient range fairly assess records. input data frame dframe must include timely_term column obtained using add_timely_term() function. Students can retained study estimated timely completion term later last term institution's data. result data_sufficiency column TRUE, student included research. FALSE, student excluded calculating persistence metric involving program completion (graduation). function performs subsetting. detail TRUE, additional column(s) support finding returned well. extra column inst_limit, latest term reported institution available data. Existing columns names added columns overwritten.","code":""},{"path":"/reference/add_institution.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column of institution names — add_institution","title":"Add a column of institution names — add_institution","text":"Add column character values institution names (labels) using student ID join-variable. Obtains information MIDFIELD term data table equivalent. MIDFIELD practice data, labels de-identified.","code":""},{"path":"/reference/add_institution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column of institution names — add_institution","text":"","code":"add_institution(dframe, midfield_term)"},{"path":"/reference/add_institution.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column of institution names — add_institution","text":"dframe Data frame required variable mcid.","code":""},{"path":"/reference/add_institution.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Add a column of institution names — add_institution","text":"midfield_term MIDFIELD term data table equivalent required variables mcid, institution, term.","code":""},{"path":"/reference/add_institution.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column of institution names — add_institution","text":"data.table  following properties: Rows modified. Column institution added. Grouping structures preserved.","code":""},{"path":"/reference/add_institution.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column of institution names — add_institution","text":"student associated one institution, institution completed terms returned. existing column name added column overwritten.","code":""},{"path":"/reference/add_race_sex.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns for student race/ethnicity and sex — add_race_sex","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"Add columns students' self-reported race/ethnicity sex using student ID join-variable. Obtains information MIDFIELD student data table equivalent.","code":""},{"path":"/reference/add_race_sex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"","code":"add_race_sex(dframe, midfield_student)"},{"path":"/reference/add_race_sex.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"dframe Data frame required variable mcid.","code":""},{"path":"/reference/add_race_sex.html","id":"pkg-arg-midfield_student","dir":"Reference","previous_headings":"","what":"midfield_student (argument)","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"midfield_student MIDFIELD student data table equivalent required variables mcid, race, sex.","code":""},{"path":"/reference/add_race_sex.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"data.table  following properties: Rows modified. Columns race sex added. Grouping structures preserved.","code":""},{"path":"/reference/add_race_sex.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"Existing columns names added columns overwritten.","code":""},{"path":"/reference/add_timely_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column of timely completion terms — add_timely_term","title":"Add a column of timely completion terms — add_timely_term","text":"Add column academic term values data frame indicating latest term student can graduate considered timely completion. Student ID join-variable; terms encoded character strings YYYYT. Obtains information MIDFIELD term data table equivalent.","code":""},{"path":"/reference/add_timely_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column of timely completion terms — add_timely_term","text":"","code":"add_timely_term(   dframe,   midfield_term,   ...,   detail = NULL,   span = NULL,   sched_span = NULL )"},{"path":"/reference/add_timely_term.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"dframe Data frame required variable mcid.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"midfield_term MIDFIELD term data table equivalent required variables mcid, term, level.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-detail","dir":"Reference","previous_headings":"","what":"detail (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"detail Optional flag add columns reporting information evaluation based, default FALSE.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-span","dir":"Reference","previous_headings":"","what":"span (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"span Optional numeric scalar, number years define timely completion. Values 100%, 150%, 200% \"scheduled span\" (sched_span) commonly used. Default 6 years.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-sched_span","dir":"Reference","previous_headings":"","what":"sched_span (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"sched_span Optional numeric scalar, number years institution officially schedules completing program. Default 4 years.","code":""},{"path":"/reference/add_timely_term.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column of timely completion terms — add_timely_term","text":"data.table  following properties: Rows modified. Column timely_term added option add           columns term_i, level_i, adj_span. Grouping structures preserved.","code":""},{"path":"/reference/add_timely_term.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column of timely completion terms — add_timely_term","text":"basic heuristic starts span number years student (default 6 years). span students admitted higher level first year reduced one year full year student assumed completed. example, student admitted second-year level assumed completed one year program, span reduced one year. Similarly, spans reduced two years students admitted 3rd-year level three years students admitted fourth-year level. adjusted span years added starting term; result timely completion term reported timely_term column. timely completion term used two evaluations: filtering data sufficiency (see add_data_sufficiency()) assessing completion timeliness (add_completion_timely()). detail TRUE, additional column(s) support finding returned well. extra columns student's initial (admission) term term_i, initial level level_i, adjusted span adj_span. Existing columns names added columns overwritten.","code":""},{"path":"/reference/cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of academic programs — cip","title":"Table of academic programs — cip","text":"data table based US National Center Education Statistics (NCES), Integrated Postsecondary Education Data System (IPEDS), 2010 CIP, https://nces.ed.gov/ipeds/cipcode. data codes names 1582 instructional programs organized three levels: 2-digit series, 4-digit series, 6-digit series.","code":""},{"path":"/reference/cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of academic programs — cip","text":"","code":"cip"},{"path":"/reference/cip.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of academic programs — cip","text":"data.table 1582 rows 6 columns keyed 6-digit CIP code: cip6 Character 6-digit code representing \"specific   instructional programs\" (US National Center Education Statistics). cip6name Character program name 6-digit level cip4 Character 4-digit code (first 4 digits cip6)   representing \"intermediate groupings programs   comparable content objectives.\" cip4name Character program name 4-digit level. cip2 Character 2-digit code (first 2 digits cip6)   representing \"general groupings related programs.\" cip2name Character program name 2-digit level.","code":""},{"path":"/reference/cip.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of academic programs — cip","text":"midfielddata taxonomy includes one non-IPEDS code: 999999 Undecided Unspecified. instances   institutions reported program information students   enrolled program.","code":""},{"path":"/reference/condition_fye.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition FYE data for multiple imputation — condition_fye","title":"Condition FYE data for multiple imputation — condition_fye","text":"Filter first-year-engineering (FYE) students prepare variables predicting unknown starting majors. prepared variables institution, race, sex (predictors) cip6 (missing values imputed). Obtains requisite information MIDFIELD term data table equivalent. Returns data frame formatted multiple imputation using mice package.","code":""},{"path":"/reference/condition_fye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition FYE data for multiple imputation — condition_fye","text":"","code":"condition_fye(dframe, midfield_term, ..., fye_codes = NULL)"},{"path":"/reference/condition_fye.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"dframe Data frame degree-seeking engineering students database, required variables mcid, race, sex.","code":""},{"path":"/reference/condition_fye.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"midfield_term MIDFIELD term data table equivalent required variables mcid, institution, term, cip6.","code":""},{"path":"/reference/condition_fye.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/condition_fye.html","id":"pkg-arg-fye_codes","dir":"Reference","previous_headings":"","what":"fye_codes (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default 140102. Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes---start 14\"---ignored.","code":""},{"path":"/reference/condition_fye.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition FYE data for multiple imputation — condition_fye","text":"data.table following properties: One row every FYE student. Columns ID, institution, race, sex, CIP code,     except ID converted factors. Additional columns dframe     dropped. Grouping structures preserved.","code":""},{"path":"/reference/condition_fye.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition FYE data for multiple imputation — condition_fye","text":"US institutions first year engineering (FYE) programs, typically common first year curriculum prerequisite declaring engineering major. FYE programs problematic persistence metrics. example, conventional graduation rate metric, students count graduates complete program admitted. students graduate FYE; instead, upon completing FYE, transition degree-granting engineering program. Therefore, include FYE students persistence metric requiring degree-granting \"starting\" program, predict engineering program FYE student declared required enroll FYE. predict_fye() sorts students two categories: Students complete FYE declare engineering major.     easy case--student's first opportunity,     enrolled engineering program choosing. use     program predicted  starting program. Students , FYE, declare engineering major.     complicated case---data provide information     regarding engineering program student declared     originally institution required enroll FYE.     students, treat starting program missing data     predicted using multiple imputation. function extracts terms FYE students midfield_term. cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. first () post-FYE program identified. program engineering, CIP retained predicted starting major. , CIP replaced NA treated missing data imputation. Lastly, predictor variables (institution, race, sex) imputed variable (cip6) converted unordered factors. resulting data frame ready use input mice package.","code":""},{"path":"/reference/condition_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition multiway data for graphing — condition_multiway","title":"Condition multiway data for graphing — condition_multiway","text":"Transform data frame two categorical variables factors levels ordered display Cleveland \"multiway dot plot,\" ordering panels rows crucial perception effects. multiway data---defined Cleveland (1993) ---single quantitative value (response) every combination levels two categorical variables. Typically quantitative column used order levels two categorical columns.","code":""},{"path":"/reference/condition_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition multiway data for graphing — condition_multiway","text":"","code":"condition_multiway(   dframe,   categ_col,   quant_col,   ...,   detail = NULL,   order_by = NULL,   param_col = NULL )"},{"path":"/reference/condition_multiway.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"dframe Data frame least three columns: two categorical variables (columns can character factor) one quantitative response variable (column must numeric).","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-categ_col","dir":"Reference","previous_headings":"","what":"categ_col (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"categ_col Character vector names (quotes) two categorical columns.","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-quant_col","dir":"Reference","previous_headings":"","what":"quant_col (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"quant_col Character scalar name (quotes) quantitative response column.","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-detail","dir":"Reference","previous_headings":"","what":"detail (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"detail Optional flag retain columns created implement ordering scheme, default FALSE. TRUE, extra columns useful graphing vertical reference lines---indicating, instance, panel median, mean, total count---visualize quantity panels ordered.","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-order_by","dir":"Reference","previous_headings":"","what":"order_by (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"order_by Optional character scalar (quotes) assigning        method ordering levels categorical variables.        following values possible:\"median\" (default) Orders median values        quantitative column grouped category. \"mean\" Orders mean values quantitative        column grouped category. \"sum\" Orders sum values quantitative        column grouped category. Useful quantitative variable        count frequency. \"percent\" Orders ratios computed category. Used        quantitative response variable ratio (percent) two        columns integer counts (frequencies). counts summed        category obtain grouped percentages used order levels        categorical variables. Requires two parameter columns        identified param_col assumes parameter        larger column sum denominator ratio. \"alphabet\" Orders levels categorical variables        alphabetically. Rarely useful perceiving effects, can        useful value look .","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-param_col","dir":"Reference","previous_headings":"","what":"param_col (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"param_col Optional character vector names (quotes) columns used parameters order_by method. Currently supports \"percent\" method ---expects two column names (order) integer count columns used construct percentage response column.","code":""},{"path":"/reference/condition_multiway.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition multiway data for graphing — condition_multiway","text":"data.table following properties: Rows modified. quantitative column modified. two categorical columns factors levels ordered         method selected. Optionally, additional columns ()         created implement ordering scheme can retained. Grouping structures preserved.","code":""},{"path":"/reference/condition_multiway.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition multiway data for graphing — condition_multiway","text":"multiway dot plot, panels, individual dot plots display, levels, rows panel. One category encoded panels; rows. panels quantitative scale x-axis organization category levels y-axis. Panels rows ordered ordering scheme increases \"graph order\", , increases left right bottom top. Note \"multiway\" context refers data structure graph design defined Cleveland, methods analysis described Kroonenberg (2008) .","code":""},{"path":"/reference/condition_multiway.html","id":"section-references","dir":"Reference","previous_headings":"","what":"References","title":"Condition multiway data for graphing — condition_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley, Hoboken, NJ.","code":""},{"path":"/reference/filter_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows by matching values in shared key columns — filter_match","title":"Subset rows by matching values in shared key columns — filter_match","text":"Subset rows one data frame values key column match values similar key column second data frame. Columns subset unless selected optional argument.","code":""},{"path":"/reference/filter_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"filter_match(dframe, match_to, by_col, ..., select = NULL)"},{"path":"/reference/filter_match.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"dframe Data frame subset returned. Must contain key column named by_col.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-match_to","dir":"Reference","previous_headings":"","what":"match_to (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"match_to Data frame key column values matched . column used required key column named by_col.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-by_col","dir":"Reference","previous_headings":"","what":"by_col (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"by_col Character scalar, name key column. Values key column must character strings.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"... used, force later arguments used name.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-select","dir":"Reference","previous_headings":"","what":"select (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"select Optional character vector dframe column names retain, default columns.","code":""},{"path":"/reference/filter_match.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows by matching values in shared key columns — filter_match","text":"data.table following properties: Rows matching values. columns specified select. Grouping structures preserved.","code":""},{"path":"/reference/filter_match.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows by matching values in shared key columns — filter_match","text":"Two data frames input. match_to data frame subset retain key column .  result merged dframe inner-join, returning rows dframe values matching key values match_to. Column subsetting occurs inner join, key column included vector column names select.","code":""},{"path":"/reference/filter_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_search","title":"Subset rows that include matches to search strings — filter_search","text":"Subset data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument. commonly used searching CIP data set.","code":""},{"path":"/reference/filter_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"filter_search(dframe, keep_text = NULL, ..., drop_text = NULL, select = NULL)"},{"path":"/reference/filter_search.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"dframe Data frame searched.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-keep_text","dir":"Reference","previous_headings":"","what":"keep_text (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"keep_text Optional character vector search text retaining rows, default NULL.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"... used, force later arguments used name.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-drop_text","dir":"Reference","previous_headings":"","what":"drop_text (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"drop_text Optional character vector search text dropping rows, default NULL.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-select","dir":"Reference","previous_headings":"","what":"select (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"select Optional character vector column names return, default columns.","code":""},{"path":"/reference/filter_search.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_search","text":"data.table following properties: Rows matching elements keep_text excluding rows           matching elements drop_text. columns specified select. Grouping structures preserved.","code":""},{"path":"/reference/filter_search.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_search","text":"Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":"/reference/fye_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting programs imputed for FYE students — fye_start","title":"Starting programs imputed for FYE students — fye_start","text":"Degree-granting, engineering CIP codes can substituted First-Year-Engineering (FYE) codes required persistence metric.","code":""},{"path":"/reference/fye_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting programs imputed for FYE students — fye_start","text":"","code":"fye_start"},{"path":"/reference/fye_start.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting programs imputed for FYE students — fye_start","text":"data.table 5033 rows 2 columns keyed student ID. variables : mcid Character, de-identified student ID. start Character, 6-digit CIP code predicted starting   program.","code":""},{"path":"/reference/fye_start.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting programs imputed for FYE students — fye_start","text":"FYE different non-degree-granting CIP designations \"undecided\" \"undeclared\". FYE students neither undecided undeclared---accepted institutions Engineering majors. Starting programs fye_start engineering programs predict students declared required enroll FYE. prediction based first post-FYE program imputation suitable multiple categorical variables using mice package. predictor variables institution, race, sex. predicted variable 6-digit CIP code degree-granting engineering program institution. fye_start holds practice data midfielddata---values commingled research database available MIDFIELD partners.","code":""},{"path":"/reference/midfieldr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"goal midfieldr provide tools working MIDFIELD data, resource longitudinal, de-identified, individual student unit records.","code":""},{"path":"/reference/midfieldr-package.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 33 US institutions (June 2021). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework major) institution time. proportionate stratified sample data (practice) available midfielddata, R data package longitudinal student unit-records 98,000 undergraduates 12 institutions  1987--2016 organized four data tables: student course term degree tools midfieldr work equally well practice data midfielddata research data MIDFIELD. work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"/reference/study_grad_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study graduation rate results — study_grad_rate","title":"Case-study graduation rate results — study_grad_rate","text":"Graduation rate metric results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results grouped program, race/ethnicity, sex. Used case study developed vignettes.","code":""},{"path":"/reference/study_grad_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study graduation rate results — study_grad_rate","text":"","code":"study_grad_rate"},{"path":"/reference/study_grad_rate.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study graduation rate results — study_grad_rate","text":"data.table 32 rows 3 columns keyed program, race/ethnicity, sex. program Character, instructional programs selected study race_sex Character, student race/ethnicity sex grad_rate Numerical, program graduation rate, persistence metric","code":""},{"path":"/reference/study_grad_rate.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study graduation rate results — study_grad_rate","text":"Graduation rate program fraction students starting program graduate program. Data also subset remove ambiguous levels race/ethnicity.","code":""},{"path":"/reference/study_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study programs — study_program","title":"Case-study programs — study_program","text":"Data frame 6-digit CIP codes custom program names Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Used case study developed vignettes.","code":""},{"path":"/reference/study_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study programs — study_program","text":"","code":"study_program"},{"path":"/reference/study_program.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study programs — study_program","text":"data.table 12 rows 2 columns keyed 6-digit CIP code. variables : cip6 Character, 6-digit code program. program Character, program name assigned grouping   summarizing display graphs tables.","code":""},{"path":"/reference/study_program.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study programs — study_program","text":"Program names shortened convenience creating graphs tables.","code":""},{"path":"/reference/study_stickiness.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness results — study_stickiness","title":"Case-study stickiness results — study_stickiness","text":"Longitudinal stickiness results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results keyed program, race/ethnicity, sex. Used case study developed vignettes.","code":""},{"path":"/reference/study_stickiness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness results — study_stickiness","text":"","code":"study_stickiness"},{"path":"/reference/study_stickiness.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness results — study_stickiness","text":"data.table 55 rows 6 columns keyed program, race/ethnicity, sex. program Character, program name assigned grouping   summarizing display graphs tables. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student, values  Female, Male, Unknown. ever Numerical, number students ever enrolled program,  subsetting data sufficiency small populations. grad Numerical, number students completing program  subsetting data sufficiency accounting timely completion. stick Numerical, program stickiness, ratio number  students completing program number students ever enrolled  program.","code":""},{"path":"/reference/study_stickiness.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study stickiness results — study_stickiness","text":"Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data. Data subset satisfy data sufficiency criterion graduates reclassified non-completers satisfy timely completion criterion.","code":""},{"path":"/reference/study_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study students — study_student","title":"Case-study students — study_student","text":"Data frame student attributes Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. data subset data sufficiency can used starting point different persistence metrics stickiness graduation rate.","code":""},{"path":"/reference/study_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study students — study_student","text":"","code":"study_student"},{"path":"/reference/study_student.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study students — study_student","text":"data.table 8219 rows 8 columns keyed student ID. variables : mcid Character, de-identified student ID. institution Character, anonymized institution name, e.g.,   Institution , Institution B, etc. cip6 Character, 6-digit code program student   enrolled. program Character, program name assigned grouping   summarizing display graphs tables. race Character, race/ethnicity self-reported student,   e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student, values   Female, Male, Unknown. timely_term Character, last academic term program   completion considered timely given student,   format YYYYT. data_sufficiency Logical, indicating whether available data   include sufficient range years justify including student   analysis. data sufficiency criterion already   evaluated, values TRUE.","code":""},{"path":"/reference/toy_course.html","id":null,"dir":"Reference","previous_headings":"","what":"Course data for examples — toy_course","title":"Course data for examples — toy_course","text":"small subset row column MIDFIELD course table use package examples.","code":""},{"path":"/reference/toy_course.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Course data for examples — toy_course","text":"","code":"toy_course"},{"path":"/reference/toy_course.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Course data for examples — toy_course","text":"data.table 4616 rows 6 columns keyed student ID. mcid Character, anonymized student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. abbrev Character, course alphabetical identifier, e.g. ENGR, MATH,  ENGL. number Character, course numeric identifier, e.g. 101, 3429. grade Character, course grade, e.g., +, , -, B+, , NG, etc.","code":""},{"path":"/reference/toy_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree data for examples — toy_degree","title":"Degree data for examples — toy_degree","text":"small subset row column MIDFIELD degree table use package examples.","code":""},{"path":"/reference/toy_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree data for examples — toy_degree","text":"","code":"toy_degree"},{"path":"/reference/toy_degree.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Degree data for examples — toy_degree","text":"data.table 64 rows 5 columns keyed student ID. mcid Character, anonymized student ID. institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term  student completes program, format YYYYT. cip6 Character, 6-digit CIP code program student  earns degree. degree Character, type degree awarded, e.g., Bachelor's  Degree, Bachelor Arts, Bachelor Science, etc.","code":""},{"path":"/reference/toy_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data for examples — toy_student","title":"Student data for examples — toy_student","text":"small subset row column MIDFIELD student table use package examples.","code":""},{"path":"/reference/toy_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data for examples — toy_student","text":"","code":"toy_student"},{"path":"/reference/toy_student.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data for examples — toy_student","text":"data.table 100 rows 6 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,   Institution , Institution B, etc. transfer Character, stating whether student First-Time  College students First-Time Transfer student. hours_transfer Numeric, transfer hours accepted  institution. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Hispanic/LatinX, etc. sex character, sex self-reported student, possible  values Female, Male, Unknown.","code":""},{"path":"/reference/toy_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Term data for examples — toy_term","title":"Term data for examples — toy_term","text":"small subset row column MIDFIELD term table use package examples.","code":""},{"path":"/reference/toy_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term data for examples — toy_term","text":"","code":"toy_term"},{"path":"/reference/toy_term.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Term data for examples — toy_term","text":"data.table 169 rows 6 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. cip6 Character, 6-digit CIP code program student  enrolled term. level Character, 01 Freshman, 02 Sophomore, etc. hours_term Numeric, credit hours earned term.","code":""},{"path":"/news/index.html","id":"midfieldr-1009020--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9020 / 2021-07","title":"midfieldr 1.0.0.9020 / 2021-07","text":"Significant changes earlier versions, backwards compatibility, prompting version number change 1.0.0 Change names practice data tables match names research data Edit practice data values consistency research data values Revise built-data sets use vignettes Rd examples Switch wrapr coalesce %?% assigning default arguments Initial round runtime assertions unit tests complete Make function names arguments internally consistent Edit functions depend data.table functionality Make MIDFIELD data arguments explicit functions Remove dependency dplyr related packages Replace Travis CI GitHub Actions CI Use package checkmate runtime assertions Remove dependency installing midfielddata Switch package tinytest unit testing Separate case study detailed vignettes Completely overhaul midfieldr functions Update README midfielddata README Revise vignettes use new functions","code":""},{"path":"/news/index.html","id":"midfieldr-010--2018-06","dir":"Changelog","previous_headings":"","what":"midfieldr 0.1.0 / 2018-06","title":"midfieldr 0.1.0 / 2018-06","text":"Development version public GitHub","code":""}]
