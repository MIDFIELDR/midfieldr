[{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Getting started","text":"student-level data Data “student-level” refers information individual students including, example, demographics, programs, academic standing, courses, grades, degrees. Also called Student Unit Records (SURs). MIDFIELD, student-level data compiled institution anonymized curated MIDFIELD data steward.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Getting started","text":"vignette: Overview dataset Summary variables typically encountered using midfieldr functions Closer look: one student, records datasets Introduce helper functions select_required() same_content() Notes syntax.   use data.table data manipulation. users may prefer base R dplyr. system strengths—users welcome translate examples preferred syntax. Reminder.   data midfielddata practice data, suitable learning work student-level data generally drawing inferences program attributes student experiences. MIDFIELD data research; midfielddata practice.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Getting started","text":"Start.   writing script follow along, use packages vignette: Load data tables.   Data tables can loaded individually collectively needed.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load one table as needed data(student)  # Or load multiple tables data(course, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"student","dir":"Articles","previous_headings":"","what":"student","title":"Getting started","text":"Run ?student view help page data dictionary. Contains one observation per student. Data assumed current time student admitted institution. Student IDs institution names anonymized remove identifiable information. Race/ethnicity sex often used grouping variables. Counts category.","code":"student #>                  mcid   institution              transfer hours_transfer #>     1: MCID3111142225 Institution B   First-Time Transfer             NA #>     2: MCID3111142283 Institution J   First-Time Transfer             NA #>     3: MCID3111142290 Institution J   First-Time Transfer             NA #>     4: MCID3111142294 Institution J   First-Time Transfer             NA #>     5: MCID3111142299 Institution J   First-Time Transfer             NA #>    ---                                                                   #> 97551: MCID3112898886 Institution B First-Time in College             NA #> 97552: MCID3112898890 Institution B First-Time in College             NA #> 97553: MCID3112898894 Institution B First-Time in College             NA #> 97554: MCID3112898895 Institution B First-Time in College             NA #> 97555: MCID3112898940 Institution B First-Time in College             NA #>                 race    sex age_desc us_citizen home_zip high_school sat_math #>     1:         Asian   Male Under 25        Yes     <NA>        <NA>       NA #>     2:         Asian Female Under 25        Yes    22020        <NA>      560 #>     3:         Asian   Male Under 25        Yes    23233      471872      510 #>     4:         Asian   Male Under 25        Yes    20853        <NA>      640 #>     5:         Asian   Male Under 25        Yes    22003      470080      600 #>    ---                                                                        #> 97551:         White Female Under 25        Yes    53711      501165      530 #> 97552:         White Female Under 25        Yes    54956      501275      570 #> 97553:         White Female Under 25        Yes    53716      501160      510 #> 97554:         White Female Under 25        Yes    53029      500853      420 #> 97555: Other/Unknown   Male Under 25        Yes    20016      090073      470 #>        sat_verbal act_comp #>     1:         NA       NA #>     2:        230       NA #>     3:        380       NA #>     4:        460       NA #>     5:        500       NA #>    ---                     #> 97551:        560       29 #> 97552:        580       25 #> 97553:        590       24 #> 97554:        590       32 #> 97555:        540       32 # Anonymized IDs sample(student$mcid, 8) #> [1] \"MCID3112351863\" \"MCID3112169507\" \"MCID3112413326\" \"MCID3112015263\" #> [5] \"MCID3112846537\" \"MCID3111668457\" \"MCID3112604228\" \"MCID3111363486\"  # Anonymized institutions sort(unique(student$institution)) #> [1] \"Institution B\" \"Institution C\" \"Institution J\" # Possible values sort(unique(student$race)) #> [1] \"Asian\"           \"Black\"           \"International\"   \"Latine\"          #> [5] \"Native American\" \"Other/Unknown\"   \"White\"  # Possible values sort(unique(student$sex)) #> [1] \"Female\"  \"Male\"    \"Unknown\" # N by institution student[order(institution), .N, by = \"institution\"] #>      institution     N #> 1: Institution B 45660 #> 2: Institution C 26712 #> 3: Institution J 25183  # N by race student[order(race), .N, by = \"race\"] #>               race     N #> 1:           Asian  4193 #> 2:           Black  1860 #> 3:   International  7354 #> 4:          Latine  5386 #> 5: Native American   403 #> 6:   Other/Unknown  4509 #> 7:           White 73850  # N by sex student[order(sex), .N, by = \"sex\"] #>        sex     N #> 1:  Female 46403 #> 2:    Male 51151 #> 3: Unknown     1"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"course","dir":"Articles","previous_headings":"","what":"course","title":"Getting started","text":"Run ?course view help page data dictionary. Contains one observation per student per course. abbrev, number, discipline_midfield columns NA values, might useful one filtering specific course types. course column, hand, high number NA values.","code":"course #>                    mcid   institution term_course #>       1: MCID3111142225 Institution B       19881 #>       2: MCID3111142225 Institution B       19881 #>       3: MCID3111142225 Institution B       19881 #>       4: MCID3111142283 Institution J       19881 #>       5: MCID3111142283 Institution J       19881 #>      ---                                          #> 3289528: MCID3112898895 Institution B       20181 #> 3289529: MCID3112898940 Institution B       20181 #> 3289530: MCID3112898940 Institution B       20181 #> 3289531: MCID3112898940 Institution B       20181 #> 3289532: MCID3112898940 Institution B       20181 #>                                                          course abbrev number #>       1:                                     Microprocessor Lab   ECEN   2230 #>       2:                                         Neural Signals   ECEN   4811 #>       3:                                    Engineering Economy   MCEN   4147 #>       4:                                                   <NA>   ACCT   2004 #>       5:                                                   <NA>     HR   1104 #>      ---                                                                      #> 3289528:                   Introduction To Comparative Politics   PSCI   2012 #> 3289529: Gateway To Modern Asia: Exploring Regional Connections   ASIA   2000 #> 3289530:                                   Beginning Japanese 1   JPNS   1010 #> 3289531:                                Precalculus Mathematics   MATH   1150 #> 3289532:                               Deviance In U S  Society   SOCY   1004 #>          section         type faculty_rank hours_course grade #>       1:     005         <NA>         <NA>            1     C #>       2:     001         <NA>         <NA>            3     C #>       3:     001         <NA>         <NA>            3    B+ #>       4:    <NA>         <NA>         <NA>            0    CR #>       5:    <NA>         <NA>         <NA>            0    CR #>      ---                                                      #> 3289528:     100 Face-to-Face    Professor            3     C #> 3289529:     001 Face-to-Face   Instructor            3    C+ #> 3289530:     009 Face-to-Face     Lecturer            5     C #> 3289531:     012 Face-to-Face     Lecturer            4    C- #> 3289532:     100 Face-to-Face   Instructor            3     B #>                           discipline_midfield #>       1: Engineering: Electrical and Computer #>       2: Engineering: Electrical and Computer #>       3:              Engineering: Mechanical #>       4:                 Business: Accounting #>       5:            Business: Human Resources #>      ---                                      #> 3289528:   Social Sciences: Political Science #> 3289529:                   Area Studies: Asia #> 3289530:    Language and Literature: Japanese #> 3289531:                          Mathematics #> 3289532:           Social Sciences: Sociology # Many NA values in this column sum(is.na(course$course)) #> [1] 1003976  # No NA values in these columns. sum(is.na(course$abbrev)) #> [1] 0 sum(is.na(course$number)) #> [1] 0 sum(is.na(course$discipline_midfield)) #> [1] 0"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"term","dir":"Articles","previous_headings":"","what":"term","title":"Getting started","text":"Run ?term view help page data dictionary. Contains one observation per student per term. Terms encoded YYYYT, YYYY year start academic year, T encodes semester quarter—Fall (1), Winter (2), Spring (3), Summer (4, 5, 6)—within academic year example, academic year 1995–96, 19951 encodes Fall 95–96 19953 encodes Spring 95–96 19954 encodes Summer 95–96 (first session) Different institutions supply data different time spans. Programs encoded cip6 variable, 6-digit character based 2010 Classification Instructional Programs (CIP) (NCES, 2010). CIP codes explored detail vignette(\"midfieldr\"). Student level used determining timely completion terms transfer students.","code":"term #>                   mcid   institution  term   cip6          level #>      1: MCID3111142225 Institution B 19881 140901  01 First-year #>      2: MCID3111142283 Institution J 19881 240102  01 First-year #>      3: MCID3111142283 Institution J 19883 240102  01 First-year #>      4: MCID3111142283 Institution J 19885 190601  01 First-year #>      5: MCID3111142283 Institution J 19891 190601 02 Second-year #>     ---                                                          #> 639911: MCID3112898886 Institution B 20181 500501  01 First-year #> 639912: MCID3112898890 Institution B 20181 451101  01 First-year #> 639913: MCID3112898894 Institution B 20181 451001  01 First-year #> 639914: MCID3112898895 Institution B 20181 302001  01 First-year #> 639915: MCID3112898940 Institution B 20181 050103  01 First-year #>                   standing coop hours_term hours_term_attempt hours_cumul #>      1:      Good Standing   No          7                  7           7 #>      2: Academic Probation   No          6                  6           6 #>      3: Academic Probation   No         12                 12          18 #>      4: Academic Probation   No          6                  6          24 #>      5: Academic Probation   No          6                  6          30 #>     ---                                                                   #> 639911:      Good Standing   No         17                 17          17 #> 639912:      Good Standing   No         13                 13          13 #> 639913:      Good Standing   No         13                 13          13 #> 639914:      Good Standing   No         18                 18          18 #> 639915:      Good Standing   No         15                 15          15 #>         hours_cumul_attempt gpa_term gpa_cumul #>      1:                   7     2.56      2.56 #>      2:                   6     1.85      1.85 #>      3:                  18     1.93      1.90 #>      4:                  24     2.15      1.96 #>      5:                  30     1.85      1.94 #>     ---                                        #> 639911:                  17     4.00      4.00 #> 639912:                  13     3.93      3.93 #> 639913:                  13     3.52      3.52 #> 639914:                  18     3.50      3.50 #> 639915:                  15     2.18      2.18 # Range of data by institution term[, .(min_term = min(term), max_term = max(term)), by = \"institution\"] #>      institution min_term max_term #> 1: Institution B    19881    20181 #> 2: Institution J    19881    20096 #> 3: Institution C    19901    20154 # A sample of cip6 values sort(unique(sample(term$cip6, 8))) #> [1] \"090101\" \"420101\" \"451101\" \"512306\" \"520201\" \"540101\" # Possible values sort(unique(term$level)) #> [1] \"01 First-year\"      \"02 Second-year\"     \"03 Third-year\"      #> [4] \"04 Fourth-year\"     \"05 Fifth-year Plus\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"degree","dir":"Articles","previous_headings":"","what":"degree","title":"Getting started","text":"Run ?degree view help page data dictionary. dataset contains records graduates , thus number unique students degree (49,543) less number students three datasets (97,555). Contains one observation per student per degree. term_degree cip6 variables indicate program student graduates. Number degrees earned per student.","code":"degree #>                  mcid   institution term_degree   cip6 #>     1: MCID3111142225 Institution B       19881 141001 #>     2: MCID3111142290 Institution J       19921 141001 #>     3: MCID3111142294 Institution J       19903 141001 #>     4: MCID3111142299 Institution J       19921 141001 #>     5: MCID3111142689 Institution B       19913 090401 #>    ---                                                 #> 49661: MCID3112829602 Institution B       20173 451001 #> 49662: MCID3112831015 Institution B       20181 450701 #> 49663: MCID3112839623 Institution B       20181 160102 #> 49664: MCID3112845220 Institution B       20181 270101 #> 49665: MCID3112845673 Institution B       20174 090101 #>                                                          degree #>     1:            Bachelor of Science in Electrical Engineering #>     2:            Bachelor of Science in Electrical Engineering #>     3:            Bachelor of Science in Electrical Engineering #>     4:            Bachelor of Science in Electrical Engineering #>     5:                           Bachelor of Arts in Journalism #>    ---                                                          #> 49661:     Bachelor of Arts in Political Science and Government #> 49662:                            Bachelor of Arts in Geography #> 49663:                       Bachelor of Science in Linguistics #> 49664:                       Bachelor of Science in Mathematics #> 49665: Bachelor of Science in Speech Communication and Rhetoric # Count students by number of degrees by_id <- degree[, .(degree_count = .N), by = \"mcid\"] by_id[, .(N_students = .N), by = \"degree_count\"] #>    degree_count N_students #> 1:            1      49421 #> 2:            2        122"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"closer-look","dir":"Articles","previous_headings":"","what":"Closer look","title":"Getting started","text":"display records one specific student, using ID subset dataset. Student.   expected, student yields one row per student. Course.   student, records span 47 rows, one row per course. Term.   , records span 10 rows, one row per term. Degree.   example, records span 2 rows, one row per degree. degrees earned term, Spring 2009. students one degree earn term. example, next student earned degree 1996 second degree 1999. analyses, first baccalaureate degree used.","code":"# One student ID id_we_want <- \"MCID3112192438\" # Observations for a selected ID student[mcid == id_we_want] #>              mcid   institution              transfer hours_transfer  race #> 1: MCID3112192438 Institution C First-Time in College             NA White #>       sex age_desc us_citizen home_zip high_school sat_math sat_verbal act_comp #> 1: Female Under 25        Yes    80521        <NA>      580        390       27 # Observations for a selected ID course[mcid == id_we_want] #>               mcid   institution term_course                         course #>  1: MCID3112192438 Institution C       20051 Key Academic Community Seminar #>  2: MCID3112192438 Institution C       20051       Humans and Other Animals #>  3: MCID3112192438 Institution C       20051            Health and Wellness #>  4: MCID3112192438 Institution C       20051            College Composition #>  5: MCID3112192438 Institution C       20051      Moral and Social Problems #> ---                                                                         #> 43: MCID3112192438 Institution C       20093              Independent Study #> 44: MCID3112192438 Institution C       20093          Leadership for Greeks #> 45: MCID3112192438 Institution C       20093            Health and the Mind #> 46: MCID3112192438 Institution C       20093   Social Psychology Laboratory #> 47: MCID3112192438 Institution C       20093                    Group Study #>     abbrev number section         type              faculty_rank hours_course #>  1:     KA    192     009         <NA>                Instructor            3 #>  2:   BZCC    101     002         <NA>       Assistant Professor            3 #>  3:   EXCC    145     004         <NA> Non-Academic Professional            3 #>  4:   COCC    150     120         <NA>                Instructor            3 #>  5:   PLCC    103     033         <NA>                Instructor            3 #> ---                                                                           #> 43:     WS    495     002 Face-to-Face     Academic Professional            1 #> 44:     IU    273     001 Face-to-Face        Graduate Assistant            2 #> 45:    PSY    121     001 Face-to-Face Non-Academic Professional            1 #> 46:    PSY    317     L02 Face-to-Face        Graduate Assistant            2 #> 47:    PSY    496     004 Face-to-Face                Instructor            3 #>     grade                        discipline_midfield #>  1:     A                           Academic Support #>  2:     B Biological and Biomedical Sciences: Botany #>  3:     A           Education: Physical and Coaching #>  4:     A           Language and Literature: English #>  5:     A                                 Philosophy #> ---                                                  #> 43:     A             Area Studies: Women and Gender #> 44:     A                  Interdisciplinary Studies #> 45:    A+                                 Psychology #> 46:     A                                 Psychology #> 47:    A+                                 Psychology # Observations for a selected ID term[mcid == id_we_want] #>               mcid   institution  term   cip6              level      standing #>  1: MCID3112192438 Institution C 20051 451101      01 First-year Good Standing #>  2: MCID3112192438 Institution C 20053 190701      01 First-year Good Standing #>  3: MCID3112192438 Institution C 20061 451101     02 Second-year Good Standing #>  4: MCID3112192438 Institution C 20063 451101     02 Second-year Good Standing #>  5: MCID3112192438 Institution C 20071 451101      03 Third-year Good Standing #>  6: MCID3112192438 Institution C 20073 451101      03 Third-year Good Standing #>  7: MCID3112192438 Institution C 20081 451101      03 Third-year Good Standing #>  8: MCID3112192438 Institution C 20083 451101     04 Fourth-year Good Standing #>  9: MCID3112192438 Institution C 20091 451101     04 Fourth-year Good Standing #> 10: MCID3112192438 Institution C 20093 451101 05 Fifth-year Plus Good Standing #>     coop hours_term hours_term_attempt hours_cumul hours_cumul_attempt gpa_term #>  1:   No         15                 15          15                  15     3.80 #>  2:   No         11                 11          26                  26     3.40 #>  3:   No         16                 16          42                  42     3.25 #>  4:   No          8                  8          50                  50     3.81 #>  5:   No         12                 12          62                  62     3.75 #>  6:   No         13                 13          75                  75     3.38 #>  7:  Yes         14                 14          89                  89     3.79 #>  8:   No         16                 16         105                 105     3.75 #>  9:   No         13                 13         118                 118     4.00 #> 10:   No         12                 12         130                 130     4.00 #>     gpa_cumul #>  1:      3.80 #>  2:      3.63 #>  3:      3.49 #>  4:      3.54 #>  5:      3.58 #>  6:      3.54 #>  7:      3.58 #>  8:      3.61 #>  9:      3.65 #> 10:      3.68 # Observations for a selected ID degree[mcid == id_we_want] #>              mcid   institution term_degree   cip6 #> 1: MCID3112192438 Institution C       20093 420101 #> 2: MCID3112192438 Institution C       20093 451101 #>                               degree #> 1: Bachelor of Science in Psychology #> 2:     Bachelor of Arts in Sociology # Observations for a different ID degree[mcid == \"MCID3111315508\"] #>              mcid   institution term_degree   cip6 #> 1: MCID3111315508 Institution C       19961 260101 #> 2: MCID3111315508 Institution C       19994 260701 #>                                        degree #> 1: Bachelor of Science in Biological Sciences #> 2:      Bachelor of Science in Animal Biology"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"select_required","dir":"Articles","previous_headings":"","what":"select_required()","title":"Getting started","text":"midfieldr convenience function reduce number columns MIDFIELD data table loading. Using function optional. select_required() selects columns typically required midfieldr functions. Operates data frame retain columns names match partially match search terms. Rows unaffected. primary benefit reducing screen clutter viewing data frames interactive session. disadvantage deleted columns unavailable unless first set aside copy source file reload using data() need . Arguments. midfield_x   MIDFIELD data frame, typically student, term, degree. select_add   Optional character vector search terms add default vector given c(\"mcid\", \"institution\", \"race\", \"sex\", \"^term\", \"cip6\", \"level\"). Argument, used, must used name. .   original source file.   output retains variables required midfieldr functions. Equivalent usage.   following implementations yield identical results","code":"# Create a copy of the source file source_term <- copy(term) source_term[] #>                   mcid   institution  term   cip6          level #>      1: MCID3111142225 Institution B 19881 140901  01 First-year #>      2: MCID3111142283 Institution J 19881 240102  01 First-year #>      3: MCID3111142283 Institution J 19883 240102  01 First-year #>      4: MCID3111142283 Institution J 19885 190601  01 First-year #>      5: MCID3111142283 Institution J 19891 190601 02 Second-year #>     ---                                                          #> 639911: MCID3112898886 Institution B 20181 500501  01 First-year #> 639912: MCID3112898890 Institution B 20181 451101  01 First-year #> 639913: MCID3112898894 Institution B 20181 451001  01 First-year #> 639914: MCID3112898895 Institution B 20181 302001  01 First-year #> 639915: MCID3112898940 Institution B 20181 050103  01 First-year #>                   standing coop hours_term hours_term_attempt hours_cumul #>      1:      Good Standing   No          7                  7           7 #>      2: Academic Probation   No          6                  6           6 #>      3: Academic Probation   No         12                 12          18 #>      4: Academic Probation   No          6                  6          24 #>      5: Academic Probation   No          6                  6          30 #>     ---                                                                   #> 639911:      Good Standing   No         17                 17          17 #> 639912:      Good Standing   No         13                 13          13 #> 639913:      Good Standing   No         13                 13          13 #> 639914:      Good Standing   No         18                 18          18 #> 639915:      Good Standing   No         15                 15          15 #>         hours_cumul_attempt gpa_term gpa_cumul #>      1:                   7     2.56      2.56 #>      2:                   6     1.85      1.85 #>      3:                  18     1.93      1.90 #>      4:                  24     2.15      1.96 #>      5:                  30     1.85      1.94 #>     ---                                        #> 639911:                  17     4.00      4.00 #> 639912:                  13     3.93      3.93 #> 639913:                  13     3.52      3.52 #> 639914:                  18     3.50      3.50 #> 639915:                  15     2.18      2.18 # Select variables required by midfieldr functions term <- select_required(source_term) term[] #>                   mcid   institution  term   cip6          level #>      1: MCID3111142225 Institution B 19881 140901  01 First-year #>      2: MCID3111142283 Institution J 19881 240102  01 First-year #>      3: MCID3111142283 Institution J 19883 240102  01 First-year #>      4: MCID3111142283 Institution J 19885 190601  01 First-year #>      5: MCID3111142283 Institution J 19891 190601 02 Second-year #>     ---                                                          #> 639911: MCID3112898886 Institution B 20181 500501  01 First-year #> 639912: MCID3112898890 Institution B 20181 451101  01 First-year #> 639913: MCID3112898894 Institution B 20181 451001  01 First-year #> 639914: MCID3112898895 Institution B 20181 302001  01 First-year #> 639915: MCID3112898940 Institution B 20181 050103  01 First-year # Required argument explicitly named x <- select_required(midfield_x = term)  # Required argument not named y <- select_required(term)  # Optional argument, if used, must be named. NULL yields the default columns. z <- select_required(term, select_add = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"same_content","dir":"Articles","previous_headings":"","what":"same_content()","title":"Getting started","text":"code chunk just , claim three results equivalent. verify three data tables content, use same_content(), midfieldr function wraps .equal() data.table objects ignores row order, column order, keys (). Arguments. x, y   Two data frames data.tables compare. Example.   Demonstrate equivalence data tables previous section. Demonstrate row column order ignored. two data tables content, printout indicates types differences.","code":"# Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Two columns from student, use key to order rows x <- student[, .(mcid, institution)] setkey(x, mcid) x[] #>                  mcid   institution #>     1: MCID3111142225 Institution B #>     2: MCID3111142283 Institution J #>     3: MCID3111142290 Institution J #>     4: MCID3111142294 Institution J #>     5: MCID3111142299 Institution J #>    ---                              #> 97551: MCID3112898886 Institution B #> 97552: MCID3112898890 Institution B #> 97553: MCID3112898894 Institution B #> 97554: MCID3112898895 Institution B #> 97555: MCID3112898940 Institution B  # Same information with different row order, column order, and key y <- student[, .(institution, mcid)] setkey(y, institution) y[] #>          institution           mcid #>     1: Institution B MCID3111142225 #>     2: Institution B MCID3111142689 #>     3: Institution B MCID3111142729 #>     4: Institution B MCID3111142819 #>     5: Institution B MCID3111142820 #>    ---                              #> 97551: Institution J MCID3112447745 #> 97552: Institution J MCID3112447746 #> 97553: Institution J MCID3112447751 #> 97554: Institution J MCID3112447753 #> 97555: Institution J MCID3112447754  # Demonstrate equivalence same_content(x, y) #> [1] TRUE # Demonstrate non-equivalence same_content(student, degree) #> [1] \"Different number of rows\"    \"Different number of columns\" #> [3] \"Different column names\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Getting started","text":"Preparation.   immediate prerequisites “intake” required reusable code chunk source data tables. Initial data processing.   summary code chunk ready reference.","code":"# Load source data data(student, term, degree) # Optional. Copy of source files with all variables source_student <- copy(student) source_term    <- copy(term) source_degree  <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term    <- select_required(source_term) degree  <- select_required(source_degree)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Case study: Goals","text":"student-level data Data “student-level” refers information individual students including, example, demographics, programs, academic standing, courses, grades, degrees. Also called Student Unit Records (SURs). MIDFIELD, student-level data compiled institution anonymized curated MIDFIELD data steward. program stickiness ratio number students graduating program number students ever enrolled program. Stickiness -inclusive alternative graduation rate measure program’s success attracting, keeping, graduating undergraduates. students excluded conventional definition graduation rate included stickiness metric: part-time, transfers, admitted term, migrators (Ohland et al., 2012).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"goals","dir":"Articles","previous_headings":"","what":"Goals","title":"Case study: Goals","text":"technical goal case study compare program stickiness Civil, Electrical, Industrial, Mechanical Engineering programs students grouped race/ethnicity sex. meta-goal case study illustrate typical procedure working SUR data.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"what-the-case-study-does","dir":"Articles","previous_headings":"","what":"What the case study does","title":"Case study: Goals","text":"focus procedures underlying rationale working SURs. reproducibility, provide necessary code. use data.table package instead base R dplyr package speed, memory efficiency, concise transforms via []-indexing operator. use ggplot2 package instead base R lattice (R packages) : ggplot2’s layered approach allows plots evolve (devolve) minimal changes code; easily-invoked facets legends simplify multivariate exploration; popularity yields extensive online help.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"what-the-case-study-does-not-do","dir":"Articles","previous_headings":"","what":"What the case study does not do","title":"Case study: Goals","text":"keep case study brief possible, explain details package syntax functions except selected instances. One can always use R help system read data set function. Additional online resources available, : midfieldr vignettes details syntax, functions, arguments. midfielddata home page data.table home page ggplot2 home page","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Case study: Data","text":"data processing goal reduce source data tables specific observations needed compute metrics. data processing tasks include filtering observations (rows), creating, renaming, recoding variables (columns), joining data frames. analysis organized produce two data frames—students ever enrolled programs students graduating programs—joined written file starting point Case study: Results. Caveat.   data ‘midfielddata’ practice data, suitable learning work Student Unit Records (SURs) generally. Unlike MIDFIELD research database, data tables ‘midfielddata’ research data; suitable drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"load-practice-data","dir":"Articles","previous_headings":"","what":"Load practice data","title":"Case study: Data","text":"Start script. writing script follow along, use packages vignette: Load source data. MIDFIELD practice data tables described Getting started.","code":"# Case study: Data # midfieldr vignette  # Packages library(midfieldr) library(midfielddata) library(data.table)  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # Load practice data sets data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Case study: Data","text":"Optional. Reduce dimensions MIDFIELD data tables. convenience function reduce dimensions MIDFIELD data table start session selecting columns typically required midfieldr functions. Copying. Prevents operations DT affecting term reference (Dowle & Srinivasan, 2022). result 639,915 observations. usually note number observations change. Filtering. study, two variables term data needed start: student ID mcid program code cip6. drop unnecessary columns remove duplicate rows unique combinations student ID program CIP. result 159,139 observations 97,555 unique students. number unique students smaller number observations students change programs course study. one row per unique combination student (mcid) program code (cip6).","code":"# Work with required midfieldr variables only student <- select_required(student) term <- select_required(term) degree <- select_required(degree) # Working data frame DT <- copy(term)  # Display result DT[] #>                   mcid   institution   term   cip6          level #>                 <char>        <char> <char> <char>         <char> #>      1: MCID3111142225 Institution B  19881 140901  01 First-year #>      2: MCID3111142283 Institution J  19881 240102  01 First-year #>      3: MCID3111142283 Institution J  19883 240102  01 First-year #>      4: MCID3111142283 Institution J  19885 190601  01 First-year #>      5: MCID3111142283 Institution J  19891 190601 02 Second-year #>     ---                                                           #> 639911: MCID3112898886 Institution B  20181 500501  01 First-year #> 639912: MCID3112898890 Institution B  20181 451101  01 First-year #> 639913: MCID3112898894 Institution B  20181 451001  01 First-year #> 639914: MCID3112898895 Institution B  20181 302001  01 First-year #> 639915: MCID3112898940 Institution B  20181 050103  01 First-year # Minimize the dimensions of the data DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # Display the result DT[] #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142225 140901 #>      2: MCID3111142283 240102 #>      3: MCID3111142283 190601 #>      4: MCID3111142283 450601 #>      5: MCID3111142290 140102 #>     ---                       #> 159135: MCID3112898886 500501 #> 159136: MCID3112898890 451101 #> 159137: MCID3112898894 451001 #> 159138: MCID3112898895 302001 #> 159139: MCID3112898940 050103  # Count unique IDs length(unique(DT$mcid)) #> [1] 97555"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Filter for data sufficiency","title":"Case study: Data","text":"student records near lower upper terms bound available data must excluded prevent false summaries involving timely degree completion. apply filter, determine timely completion term data sufficiency. Creating variables. Using information term, add timely_term variable well supporting variables used construction. Creating variables. Using information term, add data_sufficiency variable well supporting variables used construction. Filtering. filter retain observations data sufficient drop unnecessary columns. result 127,349 observations 76,875 unique students.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, term)  # Display the result DT[] #>                   mcid   cip6 term_i       level_i adj_span timely_term #>                 <char> <char> <char>        <char>    <num>      <char> #>      1: MCID3111142225 140901  19881 01 First-year        6       19933 #>      2: MCID3111142283 190601  19881 01 First-year        6       19933 #>      3: MCID3111142283 240102  19881 01 First-year        6       19933 #>      4: MCID3111142283 450601  19881 01 First-year        6       19933 #>      5: MCID3111142290 140102  19881 01 First-year        6       19933 #>     ---                                                                 #> 159135: MCID3112898886 500501  20181 01 First-year        6       20233 #> 159136: MCID3112898890 451101  20181 01 First-year        6       20233 #> 159137: MCID3112898894 451001  20181 01 First-year        6       20233 #> 159138: MCID3112898895 302001  20181 01 First-year        6       20233 #> 159139: MCID3112898940 050103  20181 01 First-year        6       20233 # Determine data sufficiency for every student DT <- add_data_sufficiency(DT, term)  # Display the result DT[] #>                   mcid   cip6       level_i adj_span timely_term term_i #>                 <char> <char>        <char>    <num>      <char> <char> #>      1: MCID3111142225 140901 01 First-year        6       19933  19881 #>      2: MCID3111142283 190601 01 First-year        6       19933  19881 #>      3: MCID3111142283 240102 01 First-year        6       19933  19881 #>      4: MCID3111142283 450601 01 First-year        6       19933  19881 #>      5: MCID3111142290 140102 01 First-year        6       19933  19881 #>     ---                                                                 #> 159135: MCID3112898886 500501 01 First-year        6       20233  20181 #> 159136: MCID3112898890 451101 01 First-year        6       20233  20181 #> 159137: MCID3112898894 451001 01 First-year        6       20233  20181 #> 159138: MCID3112898895 302001 01 First-year        6       20233  20181 #> 159139: MCID3112898940 050103 01 First-year        6       20233  20181 #>         lower_limit upper_limit data_sufficiency #>              <char>      <char>           <char> #>      1:       19881       20181    exclude-lower #>      2:       19881       20096    exclude-lower #>      3:       19881       20096    exclude-lower #>      4:       19881       20096    exclude-lower #>      5:       19881       20096    exclude-lower #>     ---                                          #> 159135:       19881       20181    exclude-upper #> 159136:       19881       20181    exclude-upper #> 159137:       19881       20181    exclude-upper #> 159138:       19881       20181    exclude-upper #> 159139:       19881       20181    exclude-upper # Retain observations having sufficient data DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid, cip6)]  # Display the result DT[] #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142881 450601 #>      4: MCID3111142884 260406 #>      5: MCID3111142893 400801 #>     ---                       #> 127345: MCID3112785480 240102 #> 127346: MCID3112785480 261201 #> 127347: MCID3112800920 240102 #> 127348: MCID3112800920 240199 #> 127349: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-degree-seeking","dir":"Articles","previous_headings":"","what":"Filter for degree-seeking","title":"Case study: Data","text":"studying stickiness, exclude non-degree-seeking students. filter students using student data contains degree seeking students. Filtering. inner join student returns rows matching IDs data frames, selected columns. result 127,349 observations. (change expected example students midfielddata practice data degree-seeking.)","code":"# Inner join that filters DT DT <- student[DT, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Display the result DT[] #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142881 450601 #>      4: MCID3111142884 260406 #>      5: MCID3111142893 400801 #>     ---                       #> 127345: MCID3112785480 240102 #> 127346: MCID3112785480 261201 #> 127347: MCID3112800920 240102 #> 127348: MCID3112800920 240199 #> 127349: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"identify-programs","dir":"Articles","previous_headings":"","what":"Identify programs","title":"Case study: Data","text":"cip6 variable data identifies program student enrolled given term, based US Classification Instructional Programs (CIP) codes. CIP codes names included midfieldr cip data set. searched information obtain CIP codes four programs case study: Civil Engineering CIPs start 1408, Electrical Engineering 1410, Mechanical Engineering 1419, Industrial/Systems Engineering 1427, 1435, 1436, 1437. Filtering Gather 6-digit CIP codes programs case study. Drop unnecessary variables. keep cip4name , engineering least, 4-digit name tends disciplinary departmental name. Creating variables. Add variable label 15 programs one four conventional program abbreviations use comparing metrics, .e., Civil (CE), Electrical (EE), Mechanical (), Industrial/Systems Engineering (ISE). checked new abbreviations correctly represent programs, can finalize data frame program CIPs names.","code":"# Gather program CIP codes case_programs <- filter_cip(cip, keep_text = c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) case_programs <- case_programs[, .(cip6, cip4name)]  # Display the result case_programs[] #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 142701                                    Systems Engineering #> 13: 143501                                 Industrial Engineering #> 14: 143601                              Manufacturing Engineering #> 15: 143701                                    Operations Research # Assign four program names by CIP code case_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )]  # Confirm that abbreviations match the longer program names case_programs[, .(cip4name, program)] #>                                                   cip4name program #>                                                     <char>  <char> #>  1:                                      Civil Engineering      CE #>  2:                                      Civil Engineering      CE #>  3:                                      Civil Engineering      CE #>  4:                                      Civil Engineering      CE #>  5:                                      Civil Engineering      CE #>  6:                                      Civil Engineering      CE #>  7: Electrical, Electronics and Communications Engineering      EE #>  8: Electrical, Electronics and Communications Engineering      EE #>  9: Electrical, Electronics and Communications Engineering      EE #> 10: Electrical, Electronics and Communications Engineering      EE #> 11:                                 Mechanical Engineering      ME #> 12:                                    Systems Engineering     ISE #> 13:                                 Industrial Engineering     ISE #> 14:                              Manufacturing Engineering     ISE #> 15:                                    Operations Research     ISE # Case study CIPs and program names case_programs[, cip4name := NULL]  # Display the result case_programs[] #>       cip6 program #>     <char>  <char> #>  1: 140801      CE #>  2: 140802      CE #>  3: 140803      CE #>  4: 140804      CE #>  5: 140805      CE #>  6: 140899      CE #>  7: 141001      EE #>  8: 141003      EE #>  9: 141004      EE #> 10: 141099      EE #> 11: 141901      ME #> 12: 142701     ISE #> 13: 143501     ISE #> 14: 143601     ISE #> 15: 143701     ISE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-ever-enrolled","dir":"Articles","previous_headings":"","what":"Gather ever enrolled","title":"Case study: Data","text":"Joining. join program names case_programs working data frame using left-outer join return selected rows. Filtering. instances NA programs dropped. result 5657 observations 5427 unique students. Filtering. program label can associated multiple CIP codes. drop code filter remove duplicates ensure unique combinations ID program. result 5653 observations 5427 unique students. Creating variables. Add variable label group “ever” enrolled distinguish group graduates created next. Copy data frame new name save later.","code":"# Left-outer join to DT DT <- case_programs[DT, .(mcid, cip6, program), on = c(\"cip6\")]  # Display the result DT[] #>                   mcid   cip6 program #>                 <char> <char>  <char> #>      1: MCID3111142689 090401    <NA> #>      2: MCID3111142782 260101    <NA> #>      3: MCID3111142881 450601    <NA> #>      4: MCID3111142884 260406    <NA> #>      5: MCID3111142893 400801    <NA> #>     ---                               #> 127345: MCID3112785480 240102    <NA> #> 127346: MCID3112785480 261201    <NA> #> 127347: MCID3112800920 240102    <NA> #> 127348: MCID3112800920 240199    <NA> #> 127349: MCID3112870009 240102    <NA> # Retain observations in our four programs DT <- DT[!is.na(program)]  # Display the result DT[] #>                 mcid   cip6 program #>               <char> <char>  <char> #>    1: MCID3111142965 141001      EE #>    2: MCID3111145102 141001      EE #>    3: MCID3111146537 141001      EE #>    4: MCID3111146674 141001      EE #>    5: MCID3111150194 143501     ISE #>   ---                               #> 5653: MCID3112619484 141001      EE #> 5654: MCID3112619666 141901      ME #> 5655: MCID3112641399 141901      ME #> 5656: MCID3112641535 141901      ME #> 5657: MCID3112698681 141901      ME # Drop duplicate rows DT[, cip6 := NULL] DT <- unique(DT)  # Display the result DT[] #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>    4: MCID3111146674      EE #>    5: MCID3111150194     ISE #>   ---                        #> 5649: MCID3112619484      EE #> 5650: MCID3112619666      ME #> 5651: MCID3112641399      ME #> 5652: MCID3112641535      ME #> 5653: MCID3112698681      ME # Conclude development of the ever-enrolled observations ever <- copy(DT) ever[, group := \"ever\"]  # Display the result ever[] #>                 mcid program  group #>               <char>  <char> <char> #>    1: MCID3111142965      EE   ever #>    2: MCID3111145102      EE   ever #>    3: MCID3111146537      EE   ever #>    4: MCID3111146674      EE   ever #>    5: MCID3111150194     ISE   ever #>   ---                               #> 5649: MCID3112619484      EE   ever #> 5650: MCID3112619666      ME   ever #> 5651: MCID3112641399      ME   ever #> 5652: MCID3112641535      ME   ever #> 5653: MCID3112698681      ME   ever"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"subset-for-graduates","dir":"Articles","previous_headings":"","what":"Subset for graduates","title":"Case study: Data","text":"Filtering. Students potentially counted graduates must subset ever enrolled population. re-initialize working data frame, retaining unique IDs . Filtering. inner join degree returns rows matching IDs data frames, selected columns. result 4198 observations 4182 unique students. IDs already filtered data sufficiency degree-seeking.","code":"# Unique IDs of students ever enrolled in the study programs DT <- DT[, .(mcid)] DT <- unique(DT)  # Display the result DT[] #>                 mcid #>               <char> #>    1: MCID3111142965 #>    2: MCID3111145102 #>    3: MCID3111146537 #>    4: MCID3111146674 #>    5: MCID3111150194 #>   ---                #> 5423: MCID3112619484 #> 5424: MCID3112619666 #> 5425: MCID3112641399 #> 5426: MCID3112641535 #> 5427: MCID3112698681 # Inner join that filters DT DT <- DT[degree, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Display the result DT[] #>                 mcid   cip6 #>               <char> <char> #>    1: MCID3111142965 141001 #>    2: MCID3111145102 141001 #>    3: MCID3111146537 141001 #>    4: MCID3111146674 141001 #>    5: MCID3111150194 143501 #>   ---                       #> 4194: MCID3112618976 141901 #> 4195: MCID3112619484 141001 #> 4196: MCID3112641399 270301 #> 4197: MCID3112641535 141901 #> 4198: MCID3112698681 110701"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-graduates-by-completion-status","dir":"Articles","previous_headings":"","what":"Filter graduates by completion status","title":"Case study: Data","text":"counted graduate stickiness metric, student must complete program timely manner (default 6 years admission, reduced spans transfer students). Add variables. Completion status requires timely completion term variable. Creating variables. Using information degree, add completion_status variable well supporting variables used construction. Filtering. Retain records “positive” completion status (.e. completion 6 years less) drop unnecessary variables. result 3916 unique observations.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, term)  # Display the result DT[] #>                 mcid   cip6 term_i        level_i adj_span timely_term #>               <char> <char> <char>         <char>    <num>      <char> #>    1: MCID3111142965 141001  19883  01 First-year        6       19941 #>    2: MCID3111145102 141001  19883  01 First-year        6       19941 #>    3: MCID3111146537 141001  19883 02 Second-year        5       19931 #>    4: MCID3111146674 141001  19883  01 First-year        6       19941 #>    5: MCID3111150194 143501  19883  01 First-year        6       19941 #>   ---                                                                  #> 4194: MCID3112618976 141901  20123  01 First-year        6       20181 #> 4195: MCID3112619484 141001  20123  01 First-year        6       20181 #> 4196: MCID3112641399 270301  20123  01 First-year        6       20181 #> 4197: MCID3112641535 141901  20121  01 First-year        6       20173 #> 4198: MCID3112698681 110701  20113  01 First-year        6       20171 # Determine completion status for every student DT <- add_completion_status(DT, degree)  # Display the result DT[] #>                 mcid   cip6 term_i        level_i adj_span timely_term #>               <char> <char> <char>         <char>    <num>      <char> #>    1: MCID3111142965 141001  19883  01 First-year        6       19941 #>    2: MCID3111145102 141001  19883  01 First-year        6       19941 #>    3: MCID3111146537 141001  19883 02 Second-year        5       19931 #>    4: MCID3111146674 141001  19883  01 First-year        6       19941 #>    5: MCID3111150194 143501  19883  01 First-year        6       19941 #>   ---                                                                  #> 4194: MCID3112618976 141901  20123  01 First-year        6       20181 #> 4195: MCID3112619484 141001  20123  01 First-year        6       20181 #> 4196: MCID3112641399 270301  20123  01 First-year        6       20181 #> 4197: MCID3112641535 141901  20121  01 First-year        6       20173 #> 4198: MCID3112698681 110701  20113  01 First-year        6       20171 #>       term_degree completion_status #>            <char>            <char> #>    1:       19901            timely #>    2:       19893            timely #>    3:       19913            timely #>    4:       19921            timely #>    5:       19923            timely #>   ---                               #> 4194:       20153            timely #> 4195:       20133            timely #> 4196:       20163            timely #> 4197:       20143            timely #> 4198:       20181              late # Retain timely completers DT <- DT[completion_status == \"timely\"] DT <- DT[, .(mcid, cip6)]  # Display the result DT[] #>                 mcid   cip6 #>               <char> <char> #>    1: MCID3111142965 141001 #>    2: MCID3111145102 141001 #>    3: MCID3111146537 141001 #>    4: MCID3111146674 141001 #>    5: MCID3111150194 143501 #>   ---                       #> 3912: MCID3112618574 141901 #> 3913: MCID3112618976 141901 #> 3914: MCID3112619484 141001 #> 3915: MCID3112641399 270301 #> 3916: MCID3112641535 141901"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-graduates-by-program","dir":"Articles","previous_headings":"","what":"Filter graduates by program","title":"Case study: Data","text":"join program names working data frame using left-outer join return selected rows. filter retain program names NA. result 3253 unique observations. Creating variables. Add variable label group “grad” distinguish group ever enrolled students created earlier.","code":"# Left-outer join to DT DT <- case_programs[DT, .(mcid, program), on = c(\"cip6\")] DT <- DT[!is.na(program)]  # Unique observations DT <- unique(DT)  # Display the result DT[] #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>    4: MCID3111146674      EE #>    5: MCID3111150194     ISE #>   ---                        #> 3249: MCID3112618553      ME #> 3250: MCID3112618574      ME #> 3251: MCID3112618976      ME #> 3252: MCID3112619484      EE #> 3253: MCID3112641535      ME # Conclude development of the graduate observations grad <- copy(DT) grad[, group := \"grad\"]  # Display the result grad[] #>                 mcid program  group #>               <char>  <char> <char> #>    1: MCID3111142965      EE   grad #>    2: MCID3111145102      EE   grad #>    3: MCID3111146537      EE   grad #>    4: MCID3111146674      EE   grad #>    5: MCID3111150194     ISE   grad #>   ---                               #> 3249: MCID3112618553      ME   grad #> 3250: MCID3112618574      ME   grad #> 3251: MCID3112618976      ME   grad #> 3252: MCID3112619484      EE   grad #> 3253: MCID3112641535      ME   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"combine-ever-and-grad","dir":"Articles","previous_headings":"","what":"Combine ever and grad","title":"Case study: Data","text":"Binding. Combine two data frames matching column names.","code":"# Combine two data frames DT <- rbindlist(list(ever, grad), use.names = TRUE)  # Display the result DT[] #>                 mcid program  group #>               <char>  <char> <char> #>    1: MCID3111142965      EE   ever #>    2: MCID3111145102      EE   ever #>    3: MCID3111146537      EE   ever #>    4: MCID3111146674      EE   ever #>    5: MCID3111150194     ISE   ever #>   ---                               #> 8902: MCID3112618553      ME   grad #> 8903: MCID3112618574      ME   grad #> 8904: MCID3112618976      ME   grad #> 8905: MCID3112619484      EE   grad #> 8906: MCID3112641535      ME   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"add-demographics","dir":"Articles","previous_headings":"","what":"Add demographics","title":"Case study: Data","text":"Creating variables. Using columns student, add variables race/ethnicity sex using left-outer join. rows columns DT returned two columns added student. result 8906 observations 5427 unique students. IDs labeled “grad” subset labeled “ever”. Verify built-data. avoid deriving data frame time needed vignettes, information provided study_observations data frame included midfieldr. verify two data frames identical.","code":"# Selecting columns from student student_cols <- student[, .(mcid, race, sex)]  # Add them to DT with a left join DT <- student_cols[DT, on = c(\"mcid\")]  # Display the result DT[] #>                 mcid          race    sex program  group #>               <char>        <char> <char>  <char> <char> #>    1: MCID3111142965 International   Male      EE   ever #>    2: MCID3111145102         White   Male      EE   ever #>    3: MCID3111146537         Asian Female      EE   ever #>    4: MCID3111146674         Asian   Male      EE   ever #>    5: MCID3111150194         Black   Male     ISE   ever #>   ---                                                    #> 8902: MCID3112618553 International   Male      ME   grad #> 8903: MCID3112618574 International   Male      ME   grad #> 8904: MCID3112618976         White   Male      ME   grad #> 8905: MCID3112619484         White   Male      EE   grad #> 8906: MCID3112641535         White   Male      ME   grad # Demonstrate equivalence same_content(DT, study_observations) #> [1] \"Different number of rows\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"review","dir":"Articles","previous_headings":"","what":"Review","title":"Case study: Data","text":"better grasp structure data, can review selected sets observations ID. first example, ID produces one observation . student enrolled Civil Engineering completion, , timely. next example, ID produces two observations indicating student enrolled Civil Engineering timely graduate program. next example, ID produces two observations indicating student enrolled Electrical Engineering Mechanical Engineering timely graduate neither program. next example, ID produces three observations indicating student enrolled Electrical Engineering Civil Engineering timely graduate Civil.","code":"# Display one student by ID DT[mcid == \"MID26694225\"] #> Empty data.table (0 rows and 5 cols): mcid,race,sex,program,group # Display one student by ID DT[mcid == \"MID25786154\"] #> Empty data.table (0 rows and 5 cols): mcid,race,sex,program,group # Display one student by ID DT[mcid == \"MID25868925\"] #> Empty data.table (0 rows and 5 cols): mcid,race,sex,program,group # Display one student by ID DT[mcid == \"MID26526757\"] #> Empty data.table (0 rows and 5 cols): mcid,race,sex,program,group"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Case study: Data","text":"Starting student, term, degree data tables, filtered data data sufficiency, degree seeking, program, timely completion four programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) processed data obtain observations needed determine stickiness.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Case study: Results","text":"goal segment group summarize observations saved previously, calculate stickiness metric, display results. Caveat.   data ‘midfielddata’ practice data, suitable learning work Student Unit Records (SURs) generally. Unlike MIDFIELD research database, data tables ‘midfielddata’ research data; suitable drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"load-practice-data","dir":"Articles","previous_headings":"","what":"Load practice data","title":"Case study: Results","text":"Start script. writing script follow along, use packages vignette: Prepared data. study_observations, included midfieldr, contains post-processed observations students ever enrolled , students graduating , case study programs developed Case study: Data.","code":"# Case study: Results # midfieldr vignette  # Packages library(midfieldr) library(data.table) library(ggplot2)  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # View prepared data study_observations #>               mcid   race    sex program  group #>             <char> <char> <char>  <char> <char> #>     1: MID25783178  Black   Male     ISE   ever #>     2: MID25783441  White   Male      CE   ever #>     3: MID25783491  White   Male      EE   ever #>     4: MID25783912  White   Male     ISE   ever #>     5: MID25784025  Black   Male      ME   ever #>    ---                                          #> 11208: MID26696738  White   Male      ME   grad #> 11209: MID26696771  White Female      EE   grad #> 11210: MID26696967  White   Male      ME   grad #> 11211: MID26697163 Latine   Male      ME   grad #> 11212: MID26697447  Asian   Male      EE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"group-and-summarize","dir":"Articles","previous_headings":"","what":"Group and summarize","title":"Case study: Results","text":"Copying. Prevents operations DT affecting study_observations reference (Dowle & Srinivasan, 2022). calculate stickiness, want count number students ever enrolled programs number students graduating programs, grouped race/ethnicity sex. grouping variables columns data set (race, sex, program, group)—structure designed support specific analytical goal. can now group summarize one line code.","code":"# Working data frame DT <- copy(study_observations)  # Display the result DT[] #>               mcid   race    sex program  group #>             <char> <char> <char>  <char> <char> #>     1: MID25783178  Black   Male     ISE   ever #>     2: MID25783441  White   Male      CE   ever #>     3: MID25783491  White   Male      EE   ever #>     4: MID25783912  White   Male     ISE   ever #>     5: MID25784025  Black   Male      ME   ever #>    ---                                          #> 11208: MID26696738  White   Male      ME   grad #> 11209: MID26696771  White Female      EE   grad #> 11210: MID26696967  White   Male      ME   grad #> 11211: MID26697163 Latine   Male      ME   grad #> 11212: MID26697447  Asian   Male      EE   grad # Group and summarize DT <- DT[, .N, by = c(\"group\", \"program\", \"race\", \"sex\")]  # Display the result DT[] #>       group program            race    sex     N #>      <char>  <char>          <char> <char> <int> #>   1:   ever     ISE           Black   Male   103 #>   2:   ever      CE           White   Male  1043 #>   3:   ever      EE           White   Male  1227 #>   4:   ever     ISE           White   Male   494 #>   5:   ever      ME           Black   Male   202 #>  ---                                             #> 101:   grad     ISE   International Female     3 #> 102:   grad     ISE   Other/Unknown Female     1 #> 103:   grad      EE Native American   Male     1 #> 104:   grad      ME Native American Female     1 #> 105:   grad      CE Native American   Male     1"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"compute-metric","dir":"Articles","previous_headings":"","what":"Compute metric","title":"Case study: Results","text":"Stickiness ratio number graduates number students ever enrolled program. able divide grad / ever like two values row. dcast() function accomplishes us. operation essentially transformation block records row records—process known number different names, e.g., pivot, crosstab, unstack, spread, widen (Mount & Zumel, 2019). step leaves graphing variables (program, race/ethnicity, sex) place. calculate percent stickiness. Verify built-data. avoid deriving data frame time needed vignettes, information provided study_results data frame included midfieldr. verify two data frames identical.","code":"# Transform to row-record form DT <- dcast(DT, program + sex + race ~ group, value.var = \"N\", fill = 0)  # Display the result DT[] #>     program    sex            race  ever  grad #>      <char> <char>          <char> <int> <int> #>  1:      CE Female           Asian    16     9 #>  2:      CE Female           Black    49    15 #>  3:      CE Female   International     1     0 #>  4:      CE Female          Latine    10     5 #>  5:      CE Female   Other/Unknown     6     2 #> ---                                            #> 51:      ME   Male   International    36    16 #> 52:      ME   Male          Latine    76    29 #> 53:      ME   Male Native American    14     4 #> 54:      ME   Male   Other/Unknown    43    20 #> 55:      ME   Male           White  1776   918 # Compute the metric DT[, stick := round(100 * grad / ever, 1)] setkey(DT, NULL)  # Display the result DT[] #>     program    sex            race  ever  grad stick #>      <char> <char>          <char> <int> <int> <num> #>  1:      CE Female           Asian    16     9  56.2 #>  2:      CE Female           Black    49    15  30.6 #>  3:      CE Female   International     1     0   0.0 #>  4:      CE Female          Latine    10     5  50.0 #>  5:      CE Female   Other/Unknown     6     2  33.3 #> ---                                                  #> 51:      ME   Male   International    36    16  44.4 #> 52:      ME   Male          Latine    76    29  38.2 #> 53:      ME   Male Native American    14     4  28.6 #> 54:      ME   Male   Other/Unknown    43    20  46.5 #> 55:      ME   Male           White  1776   918  51.7 # Demonstrate equivalence same_content(DT, study_results) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Case study: Results","text":"take several additional steps prepare data dissemination tables charts. Filtering. preserve anonymity people involved, remove observations 10 fewer graduates. Filtering. Let us assume study focuses “domestic” students known race/ethnicity. case, omit observations labeled “International” /Unknown”. Creating variables. found useful report data variable combines race/ethnicity sex. Recoding values. Readers can readily interpret charts tables programs unabbreviated. one quantitative variable (stickiness) every combination levels two categorical variables (program race/ethnicity/sex), data multiway data (Cleveland, 1993). one orders categorical variables critical visualizing effects. Conditioning. Convert two categorical variables ordered factors support ordering rows panels chart. use midfieldr order_multiway() function. column program_stick determines order programs chart; people_stick determines order race/ethnicity/sex groupings; values stick quantitative values graphed.","code":"# Preserve anonymity DT <- DT[grad >= 10]  # Display the result DT[] #>     program    sex          race  ever  grad stick #>      <char> <char>        <char> <int> <int> <num> #>  1:      CE Female         Black    49    15  30.6 #>  2:      CE Female         White   304   156  51.3 #>  3:      CE   Male         Asian    34    17  50.0 #>  4:      CE   Male         Black    90    25  27.8 #>  5:      CE   Male        Latine    53    22  41.5 #> ---                                                #> 27:      ME   Male         Black   202    65  32.2 #> 28:      ME   Male International    36    16  44.4 #> 29:      ME   Male        Latine    76    29  38.2 #> 30:      ME   Male Other/Unknown    43    20  46.5 #> 31:      ME   Male         White  1776   918  51.7 # Filter by study design DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")]  # Display the result DT[] #>     program    sex   race  ever  grad stick #>      <char> <char> <char> <int> <int> <num> #>  1:      CE Female  Black    49    15  30.6 #>  2:      CE Female  White   304   156  51.3 #>  3:      CE   Male  Asian    34    17  50.0 #>  4:      CE   Male  Black    90    25  27.8 #>  5:      CE   Male Latine    53    22  41.5 #> ---                                         #> 23:      ME Female  White   261   109  41.8 #> 24:      ME   Male  Asian   118    58  49.2 #> 25:      ME   Male  Black   202    65  32.2 #> 26:      ME   Male Latine    76    29  38.2 #> 27:      ME   Male  White  1776   918  51.7 # Create a variable DT[, people := paste(race, sex)] DT[, c(\"race\", \"sex\") := NULL] setcolorder(DT, c(\"program\", \"people\"))  # Display the result DT[] #>     program       people  ever  grad stick #>      <char>       <char> <int> <int> <num> #>  1:      CE Black Female    49    15  30.6 #>  2:      CE White Female   304   156  51.3 #>  3:      CE   Asian Male    34    17  50.0 #>  4:      CE   Black Male    90    25  27.8 #>  5:      CE  Latine Male    53    22  41.5 #> ---                                        #> 23:      ME White Female   261   109  41.8 #> 24:      ME   Asian Male   118    58  49.2 #> 25:      ME   Black Male   202    65  32.2 #> 26:      ME  Latine Male    76    29  38.2 #> 27:      ME   White Male  1776   918  51.7 # Recode values for charts and tables DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )]  # Display the result DT[] #>        program       people  ever  grad stick #>         <char>       <char> <int> <int> <num> #>  1:      Civil Black Female    49    15  30.6 #>  2:      Civil White Female   304   156  51.3 #>  3:      Civil   Asian Male    34    17  50.0 #>  4:      Civil   Black Male    90    25  27.8 #>  5:      Civil  Latine Male    53    22  41.5 #> ---                                           #> 23: Mechanical White Female   261   109  41.8 #> 24: Mechanical   Asian Male   118    58  49.2 #> 25: Mechanical   Black Male   202    65  32.2 #> 26: Mechanical  Latine Male    76    29  38.2 #> 27: Mechanical   White Male  1776   918  51.7 # Convert categorical variables to factors DT <- order_multiway(DT,   quantity = \"stick\",   categories = c(\"program\", \"people\"),   method = \"percent\",   ratio_of = c(\"grad\", \"ever\") )  # Display the result DT[] #>        program       people  grad  ever stick program_stick people_stick #>         <fctr>       <fctr> <num> <num> <num>         <num>        <num> #>  1:      Civil Black Female    15    49  30.6          50.4         38.4 #>  2:      Civil White Female   156   304  51.3          50.4         45.9 #>  3:      Civil   Asian Male    17    34  50.0          50.4         48.0 #>  4:      Civil   Black Male    25    90  27.8          50.4         34.2 #>  5:      Civil  Latine Male    22    53  41.5          50.4         41.5 #> ---                                                                      #> 23: Mechanical White Female   109   261  41.8          48.0         45.9 #> 24: Mechanical   Asian Male    58   118  49.2          48.0         48.0 #> 25: Mechanical   Black Male    65   202  32.2          48.0         34.2 #> 26: Mechanical  Latine Male    29    76  38.2          48.0         41.5 #> 27: Mechanical   White Male   918  1776  51.7          48.0         49.5"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"charts","dir":"Articles","previous_headings":"","what":"Charts","title":"Case study: Results","text":"first multiway chart, rows programs panels people, facilitating comparisons different program single group. Rows panels ordered bottom top order increasing stickiness.  Alternatively, can consider dual chart, swapping roles panels rows. rows people panels programs, facilitating comparisons different people within program. many years publishing research using MIDFIELD data, placing people rows multiway chart perhaps frequently used design.  chart illustrates importance ordering rows panels. conclude Industrial/Systems Engineering stickiest program four, followed Civil, Mechanical, Electrical descending order. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. example, Asian Female students asymmetrically higher Mechanical Engineering asymmetrically lower Industrial/Systems Engineering.","code":"ggplot(DT, aes(x = stick, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\") ggplot(DT, aes(x = stick, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"Case study: Results","text":"Data tables often needed publication. example, format data conventional row-record form groups people first column labeling rows program names labeling remaining columns. Groups numbers reporting threshold denoted NA omitted. Table 1: Program stickiness (%)","code":"# Select the columns I want for the table tbl <- DT[, .(program, people, stick)]  # Change factors to characters so rows/columns can be alphabetized tbl[, people := as.character(people)] tbl[, program := as.character(program)]  # Transform from block records to row records tbl <- dcast(tbl, people ~ program, value.var = \"stick\")  # Edit one column header setnames(tbl, old = \"people\", new = \"People\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Case study: Results","text":"Starting prepared data (case study observations), compute longitudinal stickiness four programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) grouped program, race/ethnicity, sex. Pre-dissemination results written file possible later use. filter selected records create data table charts dissemination.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Planning","text":"Working MIDFIELD data iterative—intermediate results often cause us revisit earlier assumption select different bloc student attributes work . Nevertheless, completed analysis usually comprises following steps roughly sequence given . Accented entries indicate topics open vignette. Records Programs Metrics, blocs, groupings Data sufficiency Degree seeking Identify programs Ever-enrolled FYE proxies Starters Graduates Program labels Demographics variables Graduation rate Stickiness Multiway charts Tables","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Planning","text":"student-level data Data “student-level” refers information individual students including, example, demographics, programs, academic standing, courses, grades, degrees. Also called Student Unit Records (SURs). MIDFIELD, student-level data compiled institution anonymized curated MIDFIELD data steward. program US academic field study. Can used indicate specialty within field collection fields within Department, College, University. Programs denoted Classification Instructional Programs (CIP), taxonomy academic programs curated US Department Education (NCES, 2010). metric quantitative measure derived student-level data. Includes statistical measures counts program starters graduates well comparative ratios graduation rate stickiness. Typically involves comparisons specific blocs students programs. bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. grouping variables Detailed information student-level data characterize bloc records, typically used create bloc subsets comparison, example, program, race/ethnicity, sex, age, grade level, grades, etc.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-records","dir":"Articles","previous_headings":"","what":"Which records?","title":"Planning","text":"currently two points access MIDFIELD data: MIDFIELD database anonymized student-level records approximately 1.7M undergraduates nineteen US institutions 1987–2018, midfielddata provides sample. research database currently accessible MIDFIELD partner institutions . midfielddata R data package supplies anonymized student-level records 98,000 undergraduates three US institutions 1988–2018. sample MIDFIELD database, midfielddata provides practice data tools methods midfieldr package. Records collections organized four tables—student, course, term, degree—keyed student ID. Details Getting started. maintain confidentiality, practice data include fewer variables research data, variable names values generally subset research data. Thus researcher transitioning working practice data research data find practice scripts work research data minor modifications (). Reminder.   data midfielddata practice data, suitable learning work student-level data generally drawing inferences program attributes student experiences. MIDFIELD data research; midfielddata practice.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"load-data","dir":"Articles","previous_headings":"Which records?","what":"Load data","title":"Planning","text":"Practice data.   Load midfielddata package. Research data.   Assuming one MIDFIELD access, import data via user’s preferred file read function, e.g.,","code":"# Load practice data data(student, course, term, degree) # Not run student <- fread(\"path_to_student_research_data\") course  <- fread(\"path_to_course_research_data\") term    <- fread(\"path_to_term_research_data\") degree  <- fread(\"path_to_degree_research_data\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-programs","dir":"Articles","previous_headings":"","what":"Which programs?","title":"Planning","text":"Identify programs general terms, example, Engineering Engineering, Business, Social Sciences, Arts Humanities Electrical Engineering Computer Engineering shown Programs, use filter_cip() acting cip data set determine set CIP codes relevant study. majority vignette examples involve engineering programs. However, MIDFIELD research limited Engineering. MIDFIELD research data contain SURs undergraduates programs institution time span given. practice data, sample research data, similar attributes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-metrics-blocs-and-groupings","dir":"Articles","previous_headings":"","what":"Which metrics, blocs, and groupings?","title":"Planning","text":"data processing starts, decide metrics want compare among blocs students grouped variables. Metrics can include bloc counts comparative ratios, example: Blocs, e.g., counts starters, graduates, migrators, etc. Four-year persistence Six-year graduation rate Six-year stickiness metric determines blocs gather, example: Graduation rate requires bloc starters subset graduate starting program. Stickiness requires bloc ever enrolled program subset graduate program. research study design determines grouping variables, example, Completion status critical variable whenever graduation (program completion) involved. Programs, race/ethnicity sex important grouping variables many studies. student-level variables institution, GPA, grade level, etc., can also used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Data sufficiency","text":"data range overall span academic terms student unit record data provided institution. particularly interested lower upper limits continuous range. timely completion term last term student’s degree completion considered timely. many cases timely completion (TC) term 6 years admission. TC term can adjusted account transfer credits. (Currently, mechanism extending TC term co-ops migrators.) data sufficiency criterion Student records limited available data sufficient assess timely completion without biased counts completers non-completers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"upper-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Upper-limit data sufficiency","title":"Data sufficiency","text":"students admitted near upper limit institution’s data range, available data cover insufficient number years know completion timely. illustrate, figure compare two students admitted different terms representative time spans shown timely completion. scenario, assume institution data available 1986 1996.  Figure 1: Upper limit data sufficiency Student Student enters 1988 timely completion (TC) term 1994. following cases, data sufficiency criterion satisfied records included study. -1: First time college (FTIC), know first term entry term (.e., continuing student) can determine TC term. -2: Transfer student, know first term MIDFIELD institution. knowledge much time spent accumulating pre-MIDFIELD credit hours, can estimate TC term respect MIDFIELD entry level. Student B Student B enters 1993 TC term 1998, two years beyond range data. several possible cases, B-1: data limit, student completes program (timely known) B-2: data limit, student leaves data base (untimely known) B-3: data limit, student completes TC term (timely unknown) B-4: data limit, student completes TC term fails complete (untimely unknown) unknown outcomes cases B-3 B-4, including case B-1 B-2 invariably produces miscount completers non-completers. Thus criterion satisfied student B records excluded study.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"lower-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Lower-limit data sufficiency","title":"Data sufficiency","text":"determine data sufficiency record exclusions lower limit data range, compare student’s first term (non-summer) first term data range (also non-summer). two terms identical, complete unit record excluded. illustrate three scenarios described .  Figure 2: Lower limit data sufficiency Student C Student C makes first appearance database term following data lower limit. conditions student C (FTIC transfer) identical student , thus student C included study. Student D Student D enters institution lower limit data range (“continuing” student) enter institution lower limit precisely. D-1: student D continuing, regardless status (FTIC transfer), making estimate TC term invariably leads false counts knowledge much time spent accumulating credit hours MIDFIELD institution lower data limit. Including D-1 also produces false counts student E (discussed ). D-2: student D continuing, , first time entry MIDFIELD institution lower data limit (, 1986), include study . Unfortunately, distinguish continuing students. exclude D-1 inherently excludes D-2 well. Student E Student E enters institution time continuing student D leaves database data lower limit term. E-1: Student E timely-complete program. case, include student D count non-completers low (E-1 cases missing), resulting inflated ratio completers non-completers. E-2: Student E timely-complete program. , include student D count completers low (E-2 cases missing), resulting diminished ratio completers non-completers. balance two effects unknowable. Since student E possibly included, Student D must also excluded.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Data sufficiency","text":"Specific student unit records upper lower limits institution’s data range must excluded prevent false counts due insufficient data. Based discussion , two specific filters implemented: Lower limit. IDs extant non-summer lower limit institution’s data range labeled possible exclusion. Upper limit. IDs timely completion term exceeds upper limit institution’s data range labeled possible exclusion. Reminder.   data midfielddata practice data, suitable learning work student-level data generally drawing inferences program attributes student experiences. MIDFIELD data research; midfielddata practice.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Data sufficiency","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load data data(term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Data sufficiency","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Select.   Start ID column . Filter.   unique IDs.","code":"# Optional. Copy of source files with all variables source_term <- copy(term)  # Optional. Select variables required by midfieldr functions term <- select_required(source_term) # Working data frame DT <- copy(term) DT[] #>                   mcid   institution  term   cip6          level #>      1: MCID3111142225 Institution B 19881 140901  01 First-year #>      2: MCID3111142283 Institution J 19881 240102  01 First-year #>      3: MCID3111142283 Institution J 19883 240102  01 First-year #>      4: MCID3111142283 Institution J 19885 190601  01 First-year #>      5: MCID3111142283 Institution J 19891 190601 02 Second-year #>     ---                                                          #> 639911: MCID3112898886 Institution B 20181 500501  01 First-year #> 639912: MCID3112898890 Institution B 20181 451101  01 First-year #> 639913: MCID3112898894 Institution B 20181 451001  01 First-year #> 639914: MCID3112898895 Institution B 20181 302001  01 First-year #> 639915: MCID3112898940 Institution B 20181 050103  01 First-year # Retain the minimum number of columns DT <- DT[, .(mcid)] # Filter for unique IDs DT <- unique(DT) DT[] #>                  mcid #>     1: MCID3111142225 #>     2: MCID3111142283 #>     3: MCID3111142290 #>     4: MCID3111142294 #>     5: MCID3111142299 #>    ---                #> 97551: MCID3112898886 #> 97552: MCID3112898890 #> 97553: MCID3112898894 #> 97554: MCID3112898895 #> 97555: MCID3112898940"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"add_timely_term","dir":"Articles","previous_headings":"","what":"add_timely_term()","title":"Data sufficiency","text":"Add column data frame Student Unit Record (SUR) observations indicates latest term degree completion considered timely every student. Arguments. dframe   Data frame student unit record (SUR) observations keyed student ID. Required variable (column) mcid. midfield_term   Data frame SUR term observations keyed student ID. Default term. Required variables (columns) mcid, term, level. span   Optional integer scalar, number years define timely completion. Commonly used values 100%, 150%, 200% sched_span. Default 6 years. Argument used name. sched_span   Optional integer scalar, number years institution officially schedules completing program. Default 4 years. Argument used name. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_i   Student initial term, encoded YYYYT. level_i   Student level (01 Freshman, 02 Sophomore, etc.) initial term. adj_span   Integer span years timely completion, adjusted student’s initial level timely_term   Latest term degree completion considered timely. Encoded YYYYT.","code":"# Required arguments in order and explicitly named x <- add_timely_term(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_timely_term(DT, term)  # Using the implicit default for the midfield_term argument z <- add_timely_term(DT)  # Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Add timely term column and supporting variables DT <- add_timely_term(DT, term) DT[] #>                  mcid term_i       level_i adj_span timely_term #>     1: MCID3111142225  19881 01 First-year        6       19933 #>     2: MCID3111142283  19881 01 First-year        6       19933 #>     3: MCID3111142290  19881 01 First-year        6       19933 #>     4: MCID3111142294  19881 01 First-year        6       19933 #>     5: MCID3111142299  19881 01 First-year        6       19933 #>    ---                                                          #> 97551: MCID3112898886  20181 01 First-year        6       20233 #> 97552: MCID3112898890  20181 01 First-year        6       20233 #> 97553: MCID3112898894  20181 01 First-year        6       20233 #> 97554: MCID3112898895  20181 01 First-year        6       20233 #> 97555: MCID3112898940  20181 01 First-year        6       20233"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"closer-look","dir":"Articles","previous_headings":"add_timely_term()","what":"Closer look","title":"Data sufficiency","text":"Examining records selected students detail. Example 1.   student’s initial term Fall 1991 (encoded 19911) initial level 01 Freshman. number years timely completion 6 years, , academic years 1991–92, 92–93, 93–94, 94–95, 95–96, 96–97. Thus timely completion term Spring 1997 (encoded 19963). Example 2.   student’s initial term Spring 2017 (encoded 20163) initial level 04 Senior infer completed three years program, yielding adjusted span 3 years. three years encompass terms 20163–20171, 20173–20181, 20183–20191, yielding timely completion term Fall 2019 (encoded 20191).","code":"# Display one student by ID DT[mcid == \"MID25783135\"] #> Empty data.table (0 rows and 5 cols): mcid,term_i,level_i,adj_span,timely_term # Display one student by ID DT[mcid == \"MID26697689\"] #> Empty data.table (0 rows and 5 cols): mcid,term_i,level_i,adj_span,timely_term"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"alternate-source-names","dir":"Articles","previous_headings":"add_timely_term()","what":"Alternate source names","title":"Data sufficiency","text":"Arguments midfieldr functions accept alternate names, source-data file names workspace named something student, term, etc. example, working “toy” (exercise) data sets included midfieldr, might write something like ,","code":"# A toy set of IDs toy_mcid <- toy_student[, .(mcid)]  # Source data table names that differ from the defaults toy_DT <- add_timely_term(dframe = toy_mcid, midfield_term = toy_term)  # Equivalently toy_DT <- add_timely_term(toy_mcid, toy_term) toy_DT[] #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #> ---                                                      #> 95: MID26622664  20081    03 Junior        4       20113 #> 96: MID26624815  20061  01 Freshman        6       20113 #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"silent-overwriting","dir":"Articles","previous_headings":"add_timely_term()","what":"Silent overwriting","title":"Data sufficiency","text":"Existing columns names one added columns deleted replaced. Using toy data illustrate, drop columns added timely term except adj_span. Reapplying function, adj_span column silently deleted replaced.","code":"# Drop three columns toy_DT <- toy_DT[, c(\"term_i\", \"level_i\", \"timely_term\") := NULL] toy_DT[] #>            mcid adj_span #>  1: MID25784187        6 #>  2: MID25784974        5 #>  3: MID25816209        5 #>  4: MID25819358        5 #>  5: MID25828870        6 #> ---                      #> 95: MID26622664        4 #> 96: MID26624815        6 #> 97: MID26691066        6 #> 98: MID26692025        3 #> 99: MID26692254        5 # Demonstrate overwriting toy_DT <- add_timely_term(toy_DT, toy_term) toy_DT[] #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #> ---                                                      #> 95: MID26622664  20081    03 Junior        4       20113 #> 96: MID26624815  20061  01 Freshman        6       20113 #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"add_data_sufficiency","dir":"Articles","previous_headings":"","what":"add_data_sufficiency()","title":"Data sufficiency","text":"Add column data frame Student Unit Record (SUR) observations labels row inclusion exclusion based data sufficiency near upper lower bounds institution’s data range. Arguments. dframe   Data frame student unit record (SUR) observations keyed student ID. Required variables mcid timely_term. midfield_term   Data frame SUR term observations keyed student ID. Default term. Required variables mcid, institution, term. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_i   Student initial term, encoded YYYYT. lower_limit   Initial term institution’s data range, encoded YYYYT. upper_limit   Final term institution’s data range, encoded YYYYT. data_sufficiency   Label observation inclusion exclusion based data sufficiency: “include”, indicating available data sufficient estimating timely degree completion; “exclude-upper”, indicating data insufficient upper limit data range; “exclude-lower”, indicating data insufficient lower limit. Similar details described previous section, add_data_sufficiency() accepts Alternate source names uses Silent overwriting existing columns name one added columns.","code":"# Required arguments in order and explicitly named x <- add_data_sufficiency(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_data_sufficiency(DT, term)  # Using the implicit default for the midfield_term argument z <- add_data_sufficiency(DT)  # Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Retain required variables only DT <- DT[, .(mcid, timely_term)]  # Add data sufficiency column and supporting variables DT <- add_data_sufficiency(DT, term) DT[] #>                  mcid timely_term term_i lower_limit upper_limit #>     1: MCID3111142225       19933  19881       19881       20181 #>     2: MCID3111142283       19933  19881       19881       20096 #>     3: MCID3111142290       19933  19881       19881       20096 #>     4: MCID3111142294       19933  19881       19881       20096 #>     5: MCID3111142299       19933  19881       19881       20096 #>    ---                                                           #> 97551: MCID3112898886       20233  20181       19881       20181 #> 97552: MCID3112898890       20233  20181       19881       20181 #> 97553: MCID3112898894       20233  20181       19881       20181 #> 97554: MCID3112898895       20233  20181       19881       20181 #> 97555: MCID3112898940       20233  20181       19881       20181 #>        data_sufficiency #>     1:    exclude-lower #>     2:    exclude-lower #>     3:    exclude-lower #>     4:    exclude-lower #>     5:    exclude-lower #>    ---                  #> 97551:    exclude-upper #> 97552:    exclude-upper #> 97553:    exclude-upper #> 97554:    exclude-upper #> 97555:    exclude-upper"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"closer-look-1","dir":"Articles","previous_headings":"add_data_sufficiency()","what":"Closer look","title":"Data sufficiency","text":"Examining records selected students detail. excerpts, data range institution Fall 1987 Summer 2003. Example 3.   student’s initial term Fall 1991 1987 lower-limit exclusion apply; student’s timely completion term Spring 1996, 2003 upper-limit exclusion apply. record satisfies data sufficiency criterion. Exemplifies “Student ” Figure 1 “Student C” Figure 2. Example 4.   student’s initial term Fall 2001 1987 lower-limit exclusion apply; student’s timely completion term Spring 2006, 2003 upper-limit exclusion apply .Exemplifies “Student B” Figure 1. Example 5.   student’s initial term Fall 1987 1987 lower-limit exclusion applies. Exemplifies “Student D” Figure 2.","code":"# Display one student by ID DT[mcid == \"MID25783135\"] #> Empty data.table (0 rows and 6 cols): mcid,timely_term,term_i,lower_limit,upper_limit,data_sufficiency # Display one student by ID DT[mcid == \"MID25783156\"] #> Empty data.table (0 rows and 6 cols): mcid,timely_term,term_i,lower_limit,upper_limit,data_sufficiency # Display one student by ID DT[mcid == \"MID25783197\"] #> Empty data.table (0 rows and 6 cols): mcid,timely_term,term_i,lower_limit,upper_limit,data_sufficiency"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"reusable-code-data-sufficiency","dir":"Articles","previous_headings":"","what":"Reusable code: Data sufficiency","title":"Data sufficiency","text":"Preparation.   term data table intake section. Data sufficiency.   summary code chunk ready reference.","code":"DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Degree seeking","text":"design, student data table contains records degree-seeking students . use inner join student filter working data frame degree-seeking students. Filter source SURs data sufficiency. Filter degree seeking. Reminder.   data midfielddata practice data, suitable learning work student-level data generally drawing inferences program attributes student experiences. MIDFIELD data research; midfielddata practice.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Degree seeking","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load data data(student, term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Degree seeking","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"inner-joins","dir":"Articles","previous_headings":"","what":"Inner joins","title":"Degree seeking","text":"inner join merge operation returns observations (rows) two data frames match specified conditions . Using data.table syntax, two approaches: merge(X, Y, ) (similar base R) Y[X, j, ] (native data.table).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"using-mergex-y-by","dir":"Articles","previous_headings":"Inner joins","what":"Using merge(X, Y, by)","title":"Degree seeking","text":"general form inner join X data frame, matching rows returned Y data frame, matching rows returned vector shared column names merge = FALSE ensures inner join example, Y data frame student, extract ID column joining. Otherwise, columns data frames returned.","code":"merge(X, Y, by, all = FALSE) # Select columns in Y cols_we_want <- student[, .(mcid)]  # merge(X, Y) inner join merge(DT, cols_we_want, by = c(\"mcid\"), all = FALSE) #>                  mcid #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>     4: MCID3111142884 #>     5: MCID3111142893 #>    ---                #> 76871: MCID3112727985 #> 76872: MCID3112730841 #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"using-yx-j-on","dir":"Articles","previous_headings":"Inner joins","what":"Using Y[X, j, on]","title":"Degree seeking","text":"second approach—native data.table computationally efficient—form X data frame, matching rows returned Y data frame, matching rows returned j selects columns joined data frame retain (default columns) vector shared column names merge nomatch = NULL ensures inner join Demonstrate equivalence.   Showing two approaches produce result , inner joins, X Y interchangeable.","code":"Y[X, j, on, nomatch = NULL] # Y[X] inner join DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] #>                  mcid #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>     4: MCID3111142884 #>     5: MCID3111142893 #>    ---                #> 76871: MCID3112727985 #> 76872: MCID3112730841 #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # merge(X, Y) w <- merge(DT, cols_we_want, by = c(\"mcid\"), all = FALSE) # merge(Y, X) x <- merge(cols_we_want, DT, by = c(\"mcid\"), all = FALSE) # X[Y] y <- DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] # Y[X] z <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL]  # Demonstrate equivalence same_content(w, x) #> [1] TRUE same_content(w, y) #> [1] TRUE same_content(w, z) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"selecting-columns","dir":"Articles","previous_headings":"Inner joins","what":"Selecting columns","title":"Degree seeking","text":"either method, can select columns data frames. Using merge() select columns explicitly subsetting two data frames. X[Y, j] syntax, however, can list columns returned data frames j list, , .(var1, var2, etc.), without subsetting original two data frames. Demonstrate equivalence.   Showing two approaches produce result.","code":"# Selecting columns from both data frames, merge() inner join x <- merge(DT[, .(mcid)], student[, .(mcid, institution)], by = c(\"mcid\"), all = FALSE) setkey(x, NULL) x[] #>                  mcid   institution #>     1: MCID3111142689 Institution B #>     2: MCID3111142782 Institution J #>     3: MCID3111142881 Institution B #>     4: MCID3111142884 Institution B #>     5: MCID3111142893 Institution B #>    ---                              #> 76871: MCID3112727985 Institution B #> 76872: MCID3112730841 Institution B #> 76873: MCID3112785480 Institution C #> 76874: MCID3112800920 Institution B #> 76875: MCID3112870009 Institution B # Selecting columns from both data frames, X[Y] inner join y <- DT[student, .(mcid, institution), on = c(\"mcid\"), nomatch = NULL] y[] #>                  mcid   institution #>     1: MCID3111142689 Institution B #>     2: MCID3111142782 Institution J #>     3: MCID3111142881 Institution B #>     4: MCID3111142884 Institution B #>     5: MCID3111142893 Institution B #>    ---                              #> 76871: MCID3112727985 Institution B #> 76872: MCID3112730841 Institution B #> 76873: MCID3112785480 Institution C #> 76874: MCID3112800920 Institution B #> 76875: MCID3112870009 Institution B # Demonstrate equivalence same_content(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"degree-seeking","dir":"Articles","previous_headings":"","what":"Degree seeking","title":"Degree seeking","text":"Work.   baseline data frame preserved earlier intake section. Filter. Use inner join student filter DT retain degree-seeking students. Filter.   Filter ensure IDs unique.","code":"# Reusable starting state DT <- copy(baseline) DT[] #>                  mcid #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>     4: MCID3111142884 #>     5: MCID3111142893 #>    ---                #> 76871: MCID3112727985 #> 76872: MCID3112730841 #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Inner join for degree seeking DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] # One observation per ID DT <- unique(DT) DT[] #>                  mcid #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>     4: MCID3111142884 #>     5: MCID3111142893 #>    ---                #> 76871: MCID3112727985 #> 76872: MCID3112730841 #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"reusable-code-degree-seeking","dir":"Articles","previous_headings":"","what":"Reusable code: Degree seeking","title":"Degree seeking","text":"Preparation.   baseline data frame preserved earlier intake section. Degree seeking.   summary code chunk ready reference.","code":"DT <- copy(baseline) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Programs","text":"program US academic field study. Can used indicate specialty within field collection fields within Department, College, University. Programs denoted Classification Instructional Programs (CIP), taxonomy academic programs curated US Department Education (NCES, 2010). CIP Classification Instructional Programs, taxonomy academic programs curated US Department Education (NCES, 2010). 2010 codes included midfieldr data set cip. cip6 Character variable term degree data tables program observations. Values 6-digit CIP codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Programs","text":"search cip data set included midfieldr using variety techniques obtain set 6-digit CIP codes programs study. assign custom program names codes groups codes. Reminder.   data midfielddata practice data, suitable learning work student-level data generally drawing inferences program attributes student experiences. MIDFIELD data research; midfielddata practice.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"taxonomy","dir":"Articles","previous_headings":"","what":"Taxonomy","title":"Programs","text":"Academic programs three levels codes names: 6-digit code, specific program 4-digit code, group 6-digit programs comparable content 2-digit code, grouping 4-digit groups related content Specialties within discipline encoded 6-digit level, discipline represented one 4-digit codes (roughly corresponding academic department), collection disciplines represented one 2-digit codes (roughly corresponding academic college). example, Geotechnical Engineering (140802) specialty Civil Engineering (1408) department college Engineering (14). illustrate taxonomy little detail, show table programs assigned 2-digit code 41, “Science Technologies, Technicians”. 2-digit grouping subdivided 5 groups 4-digit level (codes 4100–4199) subdivided 9 programs 6-digit level (codes 410000–419999). Table 1: CIP taxonomy 2-digit program can include anywhere four 4-digit programs (e.g., code 24 Liberal Arts Sciences, General Studies Humanities) 238 4-digit programs (e.g., code 51 Health Professions Related Clinical Sciences). 4-digit programs include anywhere one 6-digit program (e.g., code 4100 ) 37 6-digit programs (e.g., code 1313 Education). Unfortunately, disciplines can comprise one 4-digit code. example, programs comprise broad discipline Industrial Systems Engineering encompass four distinct 4-digit codes: 1427 Systems Engineering, 1435 Industrial Engineering, 1436 Manufacturing Engineering, 1437 Operations Research. Hence importance able search CIP data programs interest.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Programs","text":"Open.   writing script follow along, use packages vignette: Loads midfieldr. cip adapted (NCES, 2010)","code":"library(midfieldr) library(data.table)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"inspect-the-cip-data","dir":"Articles","previous_headings":"","what":"Inspect the cip data","title":"Programs","text":"First glance. variables cip character strings, protects leading zeros CIP codes. number unique programs. sample program names uses random number generator, result differ shown).","code":"# Loads with midfieldr cip #>       cip2                                                  cip2name cip4 #>    1:   01 Agriculture, Agricultural Operations and Related Sciences 0100 #>    2:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>    3:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>    4:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>    5:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>   ---                                                                     #> 1578:   54                                                   History 5401 #> 1579:   54                                                   History 5401 #> 1580:   54                                                   History 5401 #> 1581:   54                                                   History 5401 #> 1582:   99                         NonIPEDS - Undecided, Unspecified 9999 #>                                   cip4name   cip6 #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>    4: Agricultural Business and Management 010103 #>    5: Agricultural Business and Management 010104 #>   ---                                             #> 1578:                              History 540106 #> 1579:                              History 540107 #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>    4:                         Agricultural Economics #>    5:                Farm, Farm and Ranch Management #>   ---                                                #> 1578:                                  Asian History #> 1579:                               Canadian History #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified # Names and class of the CIP variables cip[, lapply(.SD, class)] #>         cip2  cip2name      cip4  cip4name      cip6  cip6name #> 1: character character character character character character # 2-digit level sort(unique(cip$cip2)) #>  [1] \"01\" \"03\" \"04\" \"05\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"19\" \"22\" \"23\" #> [16] \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" #> [31] \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"54\" #> [46] \"99\"  # 4-digit level length(unique(cip$cip4)) #> [1] 394  # 6-digit level length(unique(cip$cip6)) #> [1] 1582 # 2-digit name sample sample(cip[, cip2name], 10) #>  [1] \"Education\"                                                    #>  [2] \"Foreign Languages, Literatures and Linguistics\"               #>  [3] \"Business, Management, Marketing and Related Support Services\" #>  [4] \"Engineering\"                                                  #>  [5] \"Family and Consumer Sciences, Human Sciences\"                 #>  [6] \"Engineering Technology\"                                       #>  [7] \"Health Professions and Related Clinical Sciences\"             #>  [8] \"Business, Management, Marketing and Related Support Services\" #>  [9] \"Health Professions and Related Clinical Sciences\"             #> [10] \"Physical Sciences\"  # 4-digit name sample sample(cip[, cip4name], 10) #>  [1] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [2] \"Applied Horticulture, Horticultural Business Services\"                  #>  [3] \"Ophthalmic and Optometric Support Services and Allied Professions\"      #>  [4] \"Specialized Sales, Merchandising and Marketing Operations\"              #>  [5] \"Engineering-Related Fields\"                                             #>  [6] \"Teacher Education and Professional Development, Specific Subject Areas\" #>  [7] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [8] \"Leatherworking and Upholstery\"                                          #>  [9] \"Health, Medical Preparatory Programs\"                                   #> [10] \"Research and Experimental Psychology\"  # 6-digit name sample sample(cip[, cip6name], 10) #>  [1] \"Soil Sciences, Other\"                                  #>  [2] \"Health, Medical Physics\"                               #>  [3] \"Adult Literacy Tutor, Instructor\"                      #>  [4] \"Environmental Design, Architecture\"                    #>  [5] \"Advanced, Graduate Dentistry and Oral Sciences, Other\" #>  [6] \"Dental Materials (MS, PhD)\"                            #>  [7] \"Drafting and Design Technology, Technician, General\"   #>  [8] \"Chemical Engineering Technology, Technician\"           #>  [9] \"Social Science Teacher Education\"                      #> [10] \"Sports and Exercise\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"filter_cip","dir":"Articles","previous_headings":"","what":"filter_cip()","title":"Programs","text":"Subset cip data frame, retaining rows match partially match vector character strings. general text search function, filter_cip() applied data frames cip. Within midfieldr, however, ’s role search CIP content (hence name). Arguments. dframe   Data frame subset, default cip. keep_text   Character vector search text retaining rows, case-sensitive. drop_text   Optional character vector search text dropping rows. Argument used name. select   Optional character vector column names search return, default columns. Argument used name. Equivalent usage.   following implementations yield identical results, deviation conventional R usage, function designed permit usage filter_cip(character_vector) position first two arguments ignored first argument unnamed character vector. case, character vector assigned keep_text argument cip data set included midfieldr assigned dframe argument. Output.   Subset dframe rows matching elements keep_text. Additional subsetting optional arguments specified. Examples follow.","code":"# First two arguments in order and explicitly named w <- filter_cip(dframe = cip, keep_text = c(\"engineering\"))  # First two arguments in order, but not named x <- filter_cip(cip, c(\"engineering\"))  # Dropping vector notation when one element only y <- filter_cip(cip, \"engineering\")  # Demonstrate equivalence same_content(w, x) #> [1] TRUE same_content(w, y) #> [1] TRUE # Special case z <- filter_cip(\"engineering\")  # Demonstrate equivalence same_content(w, z) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-keyword-search","dir":"Articles","previous_headings":"","what":"Using a keyword search","title":"Programs","text":"Filtering CIP data programs containing word “engineering” yields 119 observations. optional drop_text select arguments named explicitly. Columns select subset filtering keep_text drop_text Suppose want find CIP codes names programs Civil Engineering. search insensitive case, start following code chunk. Table 2. Search results. search returns programs Civilization names well Engineering Technology. wanted Civil Engineering , can use sequence function calls, outcome one operation assigned first argument next operation. following code chunk read , “Start cip data frame, keep rows ‘civil’ detected, keep rows ‘engineering’ detected, drop rows ‘technology’ detected.” first pass operates cip, successive passes . Table 3. Search results. Equivalent usage.   Seeing Civil Engineering programs cip4name, used keep_text = c(\"civil engineering\") narrow search rows match full phrase. following implementations yield identical results,","code":"# Filter basics filter_cip(\"engineering\") #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>   4:   14                                      Engineering 1403 #>   5:   14                                      Engineering 1404 #>  ---                                                            #> 115:   15                           Engineering Technology 1516 #> 116:   15                           Engineering Technology 1599 #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                     cip4name   cip6 #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering # Optional arguments drop_text and select filter_cip(\"engineering\",   drop_text = c(\"related\", \"technology\", \"technologies\"),   select = c(\"cip6\", \"cip6name\") ) #>       cip6                                                     cip6name #>  1: 140101                                         Engineering, General #>  2: 140102                                              Pre-Engineering #>  3: 140201 Aerospace, Aeronautical and Astronautical, Space Engineering #>  4: 140301      Agricultural, Biological Engineering and Bioengineering #>  5: 140401                                    Architectural Engineering #> ---                                                                     #> 50: 144201            Mechatronics, Robotics and Automation Engineering #> 51: 144301                                      Biochemical Engineering #> 52: 144401                                        Engineering Chemistry #> 53: 144501                           Biological, Biosystems Engineering #> 54: 149999                                           Engineering, Other # Example 1 filter using keywords filter_cip(\"civil\") # First search first_pass <- filter_cip(cip, keep_text = \"civil\")  # Refine the search second_pass <- filter_cip(first_pass, keep_text = \"engineering\")  # Refine further third_pass <- filter_cip(second_pass, drop_text = \"technology\") # Three passes x <- filter_cip(\"civil\") x <- filter_cip(x, \"engineering\") x <- filter_cip(x, drop_text = \"technology\")  # Combined search y <- filter_cip(\"civil engineering\", drop_text = \"technology\")  # Demonstrate equivalence same_content(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"exercises","dir":"Articles","previous_headings":"Using a keyword search","what":"Exercises","title":"Programs","text":"Determine set 6-digit CIP codes expect used College Business. social sciences 2-digit CIP necessarily include possible social science programs. Let anthropology, economics, geography, linguistics, political science, jurisprudence, psychology, sociology defined social sciences. Determine set 6-digit codes collect study programs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-numerical-code-search","dir":"Articles","previous_headings":"","what":"Using a numerical code search","title":"Programs","text":"Suppose want study programs relating German culture, language, literature. Using “german” keep_text value yields Table 4. Search results. 6-digit program names find two interest, German Studies (050125) German Language Literature (160501). use character vector assign two codes keep_text argument. Table 5. Search results. 6-digit codes entered integers, produce error.","code":"# Search on text filter_cip(\"german\") # Search on codes filter_cip(c(\"050125\", \"160501\")) # Search that produces an error filter_cip(cip, c(050125, 160501)) #> Error in filter_cip(cip, c(50125, 160501)): Assertion on 'keep_text' failed. Must be of class 'string', not 'double'."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"exercise","dir":"Articles","previous_headings":"Using a numerical code search","what":"Exercise","title":"Programs","text":"Social sciences exercise previous section, searching “jurisprudence” produced two codes: “220203” “220204.” Search cip two codes determine 2-digit program belong. initial search term, “history.” results, Identify 2-digit CIP history. Use numerical search programs start 2-digit CIP. Subset 6-digit CIPs 6-digit CIP names. Assign result object name exercise_cip. Answer given check work.","code":"#>      cip6                                            cip6name #> 1: 540101                                    History, General #> 2: 540102                    American History (United States) #> 3: 540103                                    European History #> 4: 540104    History and Philosophy of Science and Technology #> 5: 540105 Public, Applied History and Archival Administration #> 6: 540106                                       Asian History #> 7: 540107                                    Canadian History #> 8: 540108                                    Military History #> 9: 540199                                      History, Other"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-regular-expression-search","dir":"Articles","previous_headings":"","what":"Using a regular expression search","title":"Programs","text":"Specifying 4-digit codes yields data frame 6-digit programs containing 4-digit string. use regular expression notation ^ match start strings. Table 6. Search results. 2-digit series represent general groupings related programs. , result includes History programs. Table 7. Search results. series argument can include combination 2, 4, 6-digit codes. can also passed function character vector. Table 8. Search results.","code":"# example 3 filter using regular expressions filter_cip(c(\"^1410\", \"^1419\")) # Search on 2-digit code filter_cip(\"^54\") # Search on vector of codes codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_cip(codes_we_want)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"when-search-terms-cannot-be-found","dir":"Articles","previous_headings":"","what":"When search terms cannot be found","title":"Programs","text":"keep_text argument includes terms found CIP data frame, unsuccessful terms identified message successful terms produce usual output. example, following keep_text argument includes three search terms present CIP data (“111111”, “^55”, “Bogus”) two (“050125” “160501”). However, seen earlier, none search terms found, error occurs.","code":"# Unsuccessful terms produce a message sub_cip <- filter_cip(c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) #> Can't find these terms: 111111, Bogus, ^55  # But the successful terms are returned sub_cip #>    cip2                                            cip2name cip4 #> 1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #> 2:   16      Foreign Languages, Literatures and Linguistics 1605 #>                                       cip4name   cip6 #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #> 1:                 German Studies #> 2: German Language and Literature # When none of the search terms are found filter_cip(c(\"111111\", \"Bogus\", \"^55\")) #> Error: The search result is empty. Possible causes are: #>  * 'dframe' contained no matches to terms in 'keep_text'. #>  * 'drop_text' eliminated all remaining rows."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"cip-data-from-another-source","dir":"Articles","previous_headings":"","what":"CIP data from another source","title":"Programs","text":"use CIP data set another source, must structure cip: six character columns named follows,","code":"# Name and class of variables (columns) in cip unlist(lapply(cip, FUN = class)) #>        cip2    cip2name        cip4    cip4name        cip6    cip6name  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"assigning-program-names","dir":"Articles","previous_headings":"","what":"Assigning program names","title":"Programs","text":"Programs MIDFIELD data sets encoded 6-digit CIP codes. ’ve shown, multiple 6-digit codes can considered specialties within larger program 4-digit code even set distinct 4-digit codes. Thus program names cip generally inadequate grouping summarizing. User-defined program names nearly always required. studies require deliberate assignment user-defined program names CIP codes groups CIP codes. demonstrate creation data frame 6-digit CIP codes study plus user-defined names. searching cip, can find 4-digit codes four engineering programs : Civil (1408), Electrical (1410), Mechanical (1419), Industrial/Systems (1427, 1435, 1436, 1437). obtain 6-digit CIP codes. 4-digit names appropriate . task create variable custom program names. make assignments clear, approach assign new program column NA values, edit new column values.","code":"# Changing the number of rows to print options(datatable.print.nrows = 15)  # Four engineering programs four_programs <- filter_cip(c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\"))  # Retain the needed columns four_programs <- four_programs[, .(cip6, cip4name)] four_programs[] #>       cip6                                               cip4name #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 142701                                    Systems Engineering #> 13: 143501                                 Industrial Engineering #> 14: 143601                              Manufacturing Engineering #> 15: 143701                                    Operations Research # Assign a new column four_programs[, program := NA_character_] four_programs[] #>       cip6                                               cip4name program #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering    <NA> #>  8: 141003 Electrical, Electronics and Communications Engineering    <NA> #>  9: 141004 Electrical, Electronics and Communications Engineering    <NA> #> 10: 141099 Electrical, Electronics and Communications Engineering    <NA> #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-cip4name-ilike-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"1. Use cip4name %ilike% to recode one value","title":"Programs","text":"%like% function essentially wrapper function around base R grepl() function. %ilike% version case-insensitive. can view help page running (back-ticks facilitate help search terms starting symbol): approach, search one distinctive term . ’re using abbreviations compact output.","code":"# Run in Console ? `%like%` # Recode program using the 4-digit name four_programs[cip4name %ilike% \"electrical\", program := \"EE\"] four_programs[] #>       cip6                                               cip4name program #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-cip6-like-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"2. Use cip6 %like% to recode one value","title":"Programs","text":"second approach, use %like% function , apply CIP code. use regular expression ^1408 meaning “starts 1408.”","code":"# Recode program using the 4-digit code four_programs[cip6 %like% \"^1408\", program := \"CE\"] four_programs[] #>       cip6                                               cip4name program #>  1: 140801                                      Civil Engineering      CE #>  2: 140802                                      Civil Engineering      CE #>  3: 140803                                      Civil Engineering      CE #>  4: 140804                                      Civil Engineering      CE #>  5: 140805                                      Civil Engineering      CE #>  6: 140899                                      Civil Engineering      CE #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-program-fcase-to-edit-all-values","dir":"Articles","previous_headings":"Assigning program names","what":"3. Use program := fcase() to edit all values","title":"Programs","text":"approach, use data.table function fcase(), implementation SQL CASE statement. data.table function %chin% like %%, character vectors.","code":"# Recode all program values four_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] four_programs[] #>       cip6                                               cip4name program #>  1: 140801                                      Civil Engineering      CE #>  2: 140802                                      Civil Engineering      CE #>  3: 140803                                      Civil Engineering      CE #>  4: 140804                                      Civil Engineering      CE #>  5: 140805                                      Civil Engineering      CE #>  6: 140899                                      Civil Engineering      CE #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering      ME #> 12: 142701                                    Systems Engineering     ISE #> 13: 143501                                 Industrial Engineering     ISE #> 14: 143601                              Manufacturing Engineering     ISE #> 15: 143701                                    Operations Research     ISE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"exercises-1","dir":"Articles","previous_headings":"Assigning program names","what":"Exercises","title":"Programs","text":"Obtain 9 programs 2-digit program 54 History. Add program column NA values. Rename “General” “” “General History” Shorten “History Philosophy…” “Sci/Tech History” Shorten “American History …” “US History” Shorten “Public Applied …” “Public/Applied History” Others retain 6-digit name Delete cip6name column. Answer given check work.","code":"#>      cip6                program #> 1: 540101        General History #> 2: 540102             US History #> 3: 540103       European History #> 4: 540104       Sci/Tech History #> 5: 540105 Public/Applied History #> 6: 540106          Asian History #> 7: 540107       Canadian History #> 8: 540108       Military History #> 9: 540199        General History"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"reusable-code-programs","dir":"Articles","previous_headings":"","what":"Reusable code: Programs","title":"Programs","text":"Preparation.   provide working example, select four engineering programs case study used throughout vignettes (Civil, Electrical, Industrial/Systems, Mechanical Engineering). assume prior search cip yielded relevant codes used . Requires editing reuse different programs. Programs.   summary code chunk ready reference. Requires editing reuse different programs. Verify built-data.   study_programs, included midfieldr, contains case study information developed . verify two data frames content.","code":"# Edit as required for different programs case_study_programs <- filter_cip(c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) # Recode program labels case_study_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] case_study_programs <- case_study_programs[, .(cip6, program)] # Demonstrate equivalence same_content(case_study_programs, study_programs) #> [1] TRUE"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Blocs","text":"bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. ever-enrolled Bloc students whose term records include specified program least one term. migrators Bloc students leave one program enroll another. Also called switchers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Blocs","text":"use left joins add variables working data frame filter students ever-enrolled case study programs. Migrators () yield one observation (program) ID. Filter source SURs data sufficiency degree-seeking. Gather ever-enrolled Filter program. Reminder.   data midfielddata practice data, suitable learning work student-level data generally drawing inferences program attributes student experiences. MIDFIELD data research; midfielddata practice.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Blocs","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs).","code":"library(midfieldr) library(midfielddata) library(data.table) # Load practice data data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Blocs","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. Degree seeking.   Filter retain degree seeking students via inner join student. Code reproduced Degree seeking. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT) baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"left-joins","dir":"Articles","previous_headings":"","what":"Left joins","title":"Blocs","text":"left join merge operation two data frames returns observations (rows) “left” data frame X matching rows “right” data frame Y. Using data.table syntax, two approaches: merge(X, Y, ) (similar base R) Y[X, j, ] (native data.table).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"using-mergex-y-by","dir":"Articles","previous_headings":"Left joins","what":"Using merge(X, Y, by)","title":"Blocs","text":"general form left join X “left” data frame, rows returned Y “right” data frame, matching rows returned vector shared column names merge .x = TRUE ensures left join example, Y data frame term, extract ID CIP columns join. Alternatively, one can select Y columns within merge operation.","code":"merge(X, Y, by, all.x = TRUE) # Subset of term data frame to join cols_we_want <- term[, .(mcid, cip6)]  # merge(X, Y, by) left join merge(DT, cols_we_want, by = c(\"mcid\"), all.x = TRUE) #>                   mcid   cip6 #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142782 260101 #>      4: MCID3111142782 260101 #>      5: MCID3111142782 260101 #>     ---                       #> 531415: MCID3112800920 240199 #> 531416: MCID3112870009 240102 #> 531417: MCID3112870009 240102 #> 531418: MCID3112870009 240102 #> 531419: MCID3112870009 240102 # merge(X, Y, by) left join merge(DT, term[, .(mcid, cip6)], by = c(\"mcid\"), all.x = TRUE) #>                   mcid   cip6 #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142782 260101 #>      4: MCID3111142782 260101 #>      5: MCID3111142782 260101 #>     ---                       #> 531415: MCID3112800920 240199 #> 531416: MCID3112870009 240102 #> 531417: MCID3112870009 240102 #> 531418: MCID3112870009 240102 #> 531419: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"using-yx-j-on","dir":"Articles","previous_headings":"Left joins","what":"Using Y[X, j, on]","title":"Blocs","text":"second approach—native data.table computationally efficient—form X “left” data frame, rows returned Y “right” data frame, matching rows returned j selects columns joined data frame retain vector shared column names merge Demonstrate equivalence. Showing two approaches produce result.","code":"Y[X, j, on] # Y[X, j, on] left join (data.table native syntax) term[DT, .(mcid, cip6), on = c(\"mcid\")] #>                   mcid   cip6 #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142782 260101 #>      4: MCID3111142782 260101 #>      5: MCID3111142782 260101 #>     ---                       #> 531415: MCID3112800920 240199 #> 531416: MCID3112870009 240102 #> 531417: MCID3112870009 240102 #> 531418: MCID3112870009 240102 #> 531419: MCID3112870009 240102 # merge(X, Y, by) left join x <- merge(DT, term[, .(mcid, cip6)], by = c(\"mcid\"), all.x = TRUE) setkey(x, NULL)  # Y[X, j, on] left join y <- term[DT, .(mcid, cip6), on = c(\"mcid\")]  # Demonstrate equivalence same_content(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"left-join-matching-rules","dir":"Articles","previous_headings":"Left joins","what":"Left join matching rules","title":"Blocs","text":"Rows X match Y   NA values columns normally filled Y values. example, students DT earn degree. left join (degree DT), rows DT returned. IDs DT match degree NA term_degree column (variable degree source table). result 76,875 unique IDs 43,903 degrees. Rows X multiple matches Y   yields new row X every matching row Y. example, students DT enrolled multiple terms. left join (term DT), rows DT returned. IDs DT multiple matches term multiple rows result, differentiated values term column (variable term source table). result 76,875 unique IDs distributed 531,419 observations. “Left” “right” matter.   left joins (unlike inner joins), X[Y] Y[X] return different results: Y[X, j, ] returns rows X X[Y, j, ] returns rows Y","code":"x <- degree[DT, .(mcid, term_degree), on = c(\"mcid\")] setkeyv(x, c(\"mcid\")) x[] #>                  mcid term_degree #>     1: MCID3111142689       19913 #>     2: MCID3111142782       19903 #>     3: MCID3111142881       19894 #>     4: MCID3111142884        <NA> #>     5: MCID3111142893        <NA> #>    ---                            #> 76988: MCID3112727985        <NA> #> 76989: MCID3112730841       20164 #> 76990: MCID3112785480        <NA> #> 76991: MCID3112800920        <NA> #> 76992: MCID3112870009        <NA> x <- term[DT, .(mcid, term), on = c(\"mcid\")] setkeyv(x, c(\"mcid\", \"term\")) x[] #>                   mcid  term #>      1: MCID3111142689 19883 #>      2: MCID3111142782 19883 #>      3: MCID3111142782 19885 #>      4: MCID3111142782 19893 #>      5: MCID3111142782 19895 #>     ---                      #> 531415: MCID3112800920 20163 #> 531416: MCID3112870009 19951 #> 531417: MCID3112870009 19953 #> 531418: MCID3112870009 19954 #> 531419: MCID3112870009 19983 # What we want x <- degree[DT, .(mcid, term_degree), on = c(\"mcid\")]  # Not what we want y <- DT[degree, .(mcid, term_degree), on = c(\"mcid\")]  # Same content? same_content(x, y) #> [1] \"Different number of rows\"  # Compare N rows nrow(x) #> [1] 76992 nrow(y) #> [1] 49665"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"ever-enrolled","dir":"Articles","previous_headings":"","what":"Ever-enrolled","title":"Blocs","text":"Work.   baseline data frame preserved earlier intake section. Add variable.   Use left join term DT add CIP variable. Filter.   Filter retain unique combinations ID CIP code.","code":"# Reusable starting state DT <- copy(baseline) DT[] #>                  mcid #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Left-outer join from term to DT DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] # One observation per ID-CIP combination DT <- unique(DT) DT[] #>                   mcid   cip6 #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142881 450601 #>     ---                       #> 127347: MCID3112800920 240102 #> 127348: MCID3112800920 240199 #> 127349: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Blocs","text":"Filter.   “ever-enrolled” usually means “ever-enrolled specific programs,” bloc concludes filter program. Code reproduced Groupings.","code":"# Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT[] #>       program           mcid #>    1:      EE MCID3111142965 #>    2:      EE MCID3111145102 #>    3:      EE MCID3111146537 #>   ---                        #> 5651:      ME MCID3112641399 #> 5652:      ME MCID3112641535 #> 5653:      ME MCID3112698681"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"reusable-code-blocs","dir":"Articles","previous_headings":"","what":"Reusable code: Blocs","title":"Blocs","text":"Preparation.   baseline data frame preserved earlier intake section. Ever-enrolled.   summary code chunk ready reference. Requires editing study_programs reuse different programs. Verify built-data.   study_ever, included midfieldr, contains case study information developed . verify two data frames content.","code":"DT <- copy(baseline) # Ever-enrolled bloc DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] DT <- unique(DT)  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) # Demonstrate equivalence same_content(DT, study_ever) #> [1] \"Different number of rows\""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Layton. Author, copyright holder, maintainer. Russell Long. Author, copyright holder, data manager. Matthew Ohland. Author, copyright holder. Marisa Orr. Author, copyright holder. Susan Lord. Author, copyright holder. US National Science Foundation. Funder.","code":""},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Layton R, Long R, Ohland M, Orr M, Lord S (2022). midfieldr: Tools Methods Working MIDFIELD Data 'R'. R package version 1.0.0.9029, https://midfieldr.github.io/midfieldr/.","code":"@Manual{,   title = {midfieldr: Tools and Methods for Working with MIDFIELD Data in 'R'},   author = {Richard Layton and Russell Long and Matthew Ohland and Marisa Orr and Susan Lord},   year = {2022},   note = {R package version 1.0.0.9029},   url = {https://midfieldr.github.io/midfieldr/}, }"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"Provides tools demonstrates methods working individual undergraduate student-level records (registrar’s data) ‘R’. Tools include filters program codes, data sufficiency, timely completion. Methods include gathering blocs records, computing quantitative metrics graduation rate, creating charts visualize comparisons. ‘midfieldr’ designed work data MIDFIELD research database, sample available ‘midfielddata’ data package. midfieldr provides functions processing student-level data: add_completion_status() Determine completion status every student add_data_sufficiency() Determine data sufficiency every student add_timely_term() Calculate timely completion term every student filter_cip() Filter CIP data match search strings prep_fye_mice() Prepare FYE data multiple imputation select_required() Select required midfieldr variables Additional functions processing intermediate results: order_multiway() Order categorical variables multiway data same_content() Test equal content two data tables Note syntax.   examples, use data.table data manipulation (Dowle & Srinivasan, 2022) ggplot2 charts (Wickham, 2016). users may prefer base R dplyr data (Wickham et al., 2022), latticefor charts (Sarkar, 2008). system strengths—users welcome translate examples preferred syntax.","code":"format(Sys.Date(), \"%Y-%m-%d\") # Today's date #> [1] \"2022-12-11\" packageVersion(\"midfieldr\")    # Tools and methods #> [1] '1.0.0.9029' packageVersion(\"midfielddata\") # Practice data  #> [1] '0.2.0'"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"example, gather students ever enrolled Engineering summarize graduation status (major), grouping race/ethnicity sex. writing script follow along, use packages vignette: Load practice data. Reduce initial dimensions data tables using select_required(). Filter data sufficiency using add_timely_term() add_data_sufficiency(). Filter degree-seeking students ever enrolled Engineering. Determine completion status using add_completion_status(). Aggregate observations groupings. Reshape display results. Table 1: Completion status engineering undergraduates practice data “Timely completion” count graduates completing programs 6 years; “Late completion” count graduating 6 years; “complete” count non-graduates.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load the practice data data(student, term, degree)  # Reduce dimensions of source data tables student <- select_required(student) term <- select_required(term) degree <- select_required(degree)  # View example result term #>                   mcid   institution  term   cip6          level #>      1: MCID3111142225 Institution B 19881 140901  01 First-year #>      2: MCID3111142283 Institution J 19881 240102  01 First-year #>      3: MCID3111142283 Institution J 19883 240102  01 First-year #>      4: MCID3111142283 Institution J 19885 190601  01 First-year #>      5: MCID3111142283 Institution J 19891 190601 02 Second-year #>     ---                                                          #> 639911: MCID3112898886 Institution B 20181 500501  01 First-year #> 639912: MCID3112898890 Institution B 20181 451101  01 First-year #> 639913: MCID3112898894 Institution B 20181 451001  01 First-year #> 639914: MCID3112898895 Institution B 20181 302001  01 First-year #> 639915: MCID3112898940 Institution B 20181 050103  01 First-year # Initialize the working data frame DT <- term[, .(mcid, cip6)]  # Filter observations for data sufficiency DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"]  # View result DT #>                   mcid   cip6       level_i adj_span timely_term term_i #>      1: MCID3111142689 090401 01 First-year        6       19941  19883 #>      2: MCID3111142782 260101 01 First-year        6       19941  19883 #>      3: MCID3111142782 260101 01 First-year        6       19941  19883 #>      4: MCID3111142782 260101 01 First-year        6       19941  19883 #>      5: MCID3111142782 260101 01 First-year        6       19941  19883 #>     ---                                                                 #> 531415: MCID3112800920 240199 01 First-year        6       20153  20101 #> 531416: MCID3112870009 240102 01 First-year        6       20003  19951 #> 531417: MCID3112870009 240102 01 First-year        6       20003  19951 #> 531418: MCID3112870009 240102 01 First-year        6       20003  19951 #> 531419: MCID3112870009 240102 01 First-year        6       20003  19951 #>         lower_limit upper_limit data_sufficiency #>      1:       19881       20181          include #>      2:       19881       20096          include #>      3:       19881       20096          include #>      4:       19881       20096          include #>      5:       19881       20096          include #>     ---                                          #> 531415:       19881       20181          include #> 531416:       19881       20181          include #> 531417:       19881       20181          include #> 531418:       19881       20181          include #> 531419:       19881       20181          include # Inner join to filter observations for degree-seeking cols_we_want <- student[, .(mcid)] DT <- cols_we_want[DT, on = c(\"mcid\"), nomatch = NULL]  # Filter observations for engineering programs DT <- DT[cip6 %like% \"^14\"]  # Filter observations for unique students (first instance) DT <- DT[, .SD[1], by = c(\"mcid\")]  # View result DT #>                  mcid   cip6        level_i adj_span timely_term term_i #>     1: MCID3111142965 140102  01 First-year        6       19941  19883 #>     2: MCID3111145102 140102  01 First-year        6       19941  19883 #>     3: MCID3111146537 141001 02 Second-year        5       19931  19883 #>     4: MCID3111146674 141001  01 First-year        6       19941  19883 #>     5: MCID3111150194 140102  01 First-year        6       19941  19883 #>    ---                                                                  #> 10397: MCID3112619484 141001  01 First-year        6       20181  20123 #> 10398: MCID3112619666 141901  01 First-year        6       20181  20123 #> 10399: MCID3112641399 141901  01 First-year        6       20181  20123 #> 10400: MCID3112641535 141901  01 First-year        6       20173  20121 #> 10401: MCID3112698681 141901  01 First-year        6       20171  20113 #>        lower_limit upper_limit data_sufficiency #>     1:       19881       20096          include #>     2:       19881       20096          include #>     3:       19881       20096          include #>     4:       19881       20096          include #>     5:       19881       20096          include #>    ---                                          #> 10397:       19881       20181          include #> 10398:       19881       20181          include #> 10399:       19881       20181          include #> 10400:       19881       20181          include #> 10401:       19881       20181          include # Add completion status variable DT <- add_completion_status(DT, degree)  # View result DT #>                  mcid   cip6        level_i adj_span timely_term term_i #>     1: MCID3111142965 140102  01 First-year        6       19941  19883 #>     2: MCID3111145102 140102  01 First-year        6       19941  19883 #>     3: MCID3111146537 141001 02 Second-year        5       19931  19883 #>     4: MCID3111146674 141001  01 First-year        6       19941  19883 #>     5: MCID3111150194 140102  01 First-year        6       19941  19883 #>    ---                                                                  #> 10397: MCID3112619484 141001  01 First-year        6       20181  20123 #> 10398: MCID3112619666 141901  01 First-year        6       20181  20123 #> 10399: MCID3112641399 141901  01 First-year        6       20181  20123 #> 10400: MCID3112641535 141901  01 First-year        6       20173  20121 #> 10401: MCID3112698681 141901  01 First-year        6       20171  20113 #>        lower_limit upper_limit data_sufficiency term_degree completion_status #>     1:       19881       20096          include       19901            timely #>     2:       19881       20096          include       19893            timely #>     3:       19881       20096          include       19913            timely #>     4:       19881       20096          include       19921            timely #>     5:       19881       20096          include       19923            timely #>    ---                                                                        #> 10397:       19881       20181          include       20133            timely #> 10398:       19881       20181          include        <NA>              <NA> #> 10399:       19881       20181          include       20163            timely #> 10400:       19881       20181          include       20143            timely #> 10401:       19881       20181          include       20181              late # Left join to add race/ethnicity and sex variables (omit unknowns) cols_we_want <- student[, .(mcid, race, sex)] DT <- student[DT, on = c(\"mcid\")] DT <- DT[!(race %ilike% \"unknown\" | sex %ilike% \"unknown\")]  # Create a variable combining race/ethnicity and sex DT[, people := paste(race, sex)]  # Aggregate observations by groupings DT_display <- DT[, .N, by = c(\"completion_status\", \"people\")]  # View result setorderv(DT_display, c(\"completion_status\", \"people\")) DT_display #>     completion_status                 people    N #>  1:              <NA>           Asian Female   43 #>  2:              <NA>             Asian Male  163 #>  3:              <NA>           Black Female   39 #>  4:              <NA>             Black Male   84 #>  5:              <NA>   International Female   51 #> ---                                               #> 31:            timely            Latine Male  181 #> 32:            timely Native American Female    2 #> 33:            timely   Native American Male   13 #> 34:            timely           White Female  985 #> 35:            timely             White Male 4100 # Transform to row-record form DT_display <- dcast(DT_display, people ~ completion_status, value.var = \"N\", fill = 0)  # Prepare the table for display setcolorder(DT_display, c(\"people\", \"timely\", \"late\")) setkeyv(DT_display, c(\"people\")) setnames(DT_display,   old = c(\"people\", \"timely\", \"late\", \"NA\"),   new = c(\"People\", \"Timely completion\", \"Late completion\", \"Did not complete\") )"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"Install : Alternatively, can install development version MIDFIELD GitHub repository: Link installation instructions midfielddata .","code":"install.packages(\"midfieldr\",   repos = \"https://MIDFIELDR.github.io/drat/\",   type = \"source\" ) install.packages(\"pak\") pak::pkg_install(\"MIDFIELDR/midfieldr\")"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"more-information","dir":"","previous_headings":"","what":"More information","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"MIDFIELD database anonymized student-level records approximately 1.7M undergraduates nineteen US institutions 1987–2018, midfielddata provides sample. research database currently accessible MIDFIELD partner institutions . midfielddata R data package supplies anonymized student-level records 98,000 undergraduates three US institutions 1988–2018. sample MIDFIELD database, midfielddata provides practice data tools methods midfieldr package. MIDFIELD Institute Materials 2022 workshop, including introduction R beginners, chart basics ggplot2, data basics data.table.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 midfieldr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine completion status for every student — add_completion_status","title":"Determine completion status for every student — add_completion_status","text":"Add columns data frame Student Unit Record (SUR) observations indicate whether student completed degree, , whether completion timely.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine completion status for every student — add_completion_status","text":"","code":"add_completion_status(dframe, midfield_degree = degree)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine completion status for every student — add_completion_status","text":"dframe Data frame student unit record (SUR) observations keyed student ID. Required variables mcid timely_term. midfield_degree Data frame SUR degree observations keyed student ID. Default degree. Required variables mcid term_degree.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine completion status for every student — add_completion_status","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column name one added columns silently overwritten. columns modified. Columns added: term_degree Character. Term first degree(s) completed. Encoded YYYYT. Joined midfield_degree data table. completion_status Character. Label observation indicate completion status. Possible values : \"timely\", indicating completion later timely completion term; \"late\", indicating completion timely completion term; \"NA\" indicating non-completion.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine completion status for every student — add_completion_status","text":"\"completion\" mean undergraduate earning first baccalaureate degree (degrees, students earning one degree term). Additional degrees, , earned later term first degree ignored. many studies, students must complete degree specified time span, example 4-, 6-, 8-years admission. , completion timely; , completion late grouped non-completers computing metric graduation rate. Completion status \"timely\" students completing degree later timely completion terms. See also add_timely_term().","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine completion status for every student — add_completion_status","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add completion status column dframe <- add_timely_term(dframe, toy_term)  # Add completion status column add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree #>  1: MID25784187  19885  01 Freshman        6       19943       19946 #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993       19963 #>  5: MID25828870  19881  01 Freshman        6       19933       19923 #>  6: MID25829749  19995    03 Junior        4       20033        <NA> #>  7: MID25841418  19981    03 Junior        4       20013       19993 #>  8: MID25845197  19905    03 Junior        4       19943       19921 #>  9: MID25846316  19911  01 Freshman        6       19963       19951 #> 10: MID25847220  19891  01 Freshman        6       19943       19933 #>     completion_status #>  1:              late #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely  # Existing completion_status column, if any, is overwritten dframe[, completion_status := NA_character_] #>            mcid term_i      level_i adj_span timely_term completion_status #>  1: MID25784187  19885  01 Freshman        6       19943              <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931              <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923              <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993              <NA> #>  5: MID25828870  19881  01 Freshman        6       19933              <NA> #>  6: MID25829749  19995    03 Junior        4       20033              <NA> #>  7: MID25841418  19981    03 Junior        4       20013              <NA> #>  8: MID25845197  19905    03 Junior        4       19943              <NA> #>  9: MID25846316  19911  01 Freshman        6       19963              <NA> #> 10: MID25847220  19891  01 Freshman        6       19943              <NA> add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree #>  1: MID25784187  19885  01 Freshman        6       19943       19946 #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993       19963 #>  5: MID25828870  19881  01 Freshman        6       19933       19923 #>  6: MID25829749  19995    03 Junior        4       20033        <NA> #>  7: MID25841418  19981    03 Junior        4       20013       19993 #>  8: MID25845197  19905    03 Junior        4       19943       19921 #>  9: MID25846316  19911  01 Freshman        6       19963       19951 #> 10: MID25847220  19891  01 Freshman        6       19943       19933 #>     completion_status #>  1:              late #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine data sufficiency for every student — add_data_sufficiency","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"Add column data frame Student Unit Record (SUR) observations labels row inclusion exclusion based data sufficiency near upper lower bounds institution's data range.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"add_data_sufficiency(dframe, midfield_term = term)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"dframe Data frame student unit record (SUR) observations keyed student ID. Required variables mcid timely_term. See also add_timely_term(). midfield_term Data frame SUR term observations keyed student ID. Default term. Required variables mcid, institution, term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column name one added columns silently overwritten. columns modified. Columns added: term_i Character. Initial term student's longitudinal record, encoded YYYYT. overwritten present dframe. lower_limit Character. Initial term institution's data range, encoded YYYYT upper_limit Character. Final term institution's data range, encoded YYYYT data_sufficiency Character. Label observation inclusion exclusion based data sufficiency. Possible values : include, indicating available data sufficient estimating timely completion; exclude-upper, indicating data insufficient upper limit data range; exclude-lower, indicating data insufficient lower limit.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"time span MIDFIELD term data varies institution, lower upper bounds. student records, near bounds creates unavoidable ambiguity trying assess degree completion. records must identified cases excluded prevent false summary counts.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add data sufficiency column dframe <- add_timely_term(dframe, midfield_term = toy_term)  # Add data sufficiency column add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include  # Existing data_sufficiency column, if any, is overwritten dframe[, data_sufficiency := NA_character_] #>            mcid term_i      level_i adj_span timely_term data_sufficiency #>  1: MID25784187  19885  01 Freshman        6       19943             <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931             <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923             <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993             <NA> #>  5: MID25828870  19881  01 Freshman        6       19933             <NA> #>  6: MID25829749  19995    03 Junior        4       20033             <NA> #>  7: MID25841418  19981    03 Junior        4       20013             <NA> #>  8: MID25845197  19905    03 Junior        4       19943             <NA> #>  9: MID25846316  19911  01 Freshman        6       19963             <NA> #> 10: MID25847220  19891  01 Freshman        6       19943             <NA> add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a timely completion term for every student — add_timely_term","title":"Calculate a timely completion term for every student — add_timely_term","text":"Add column data frame Student Unit Record (SUR) observations indicates latest term degree completion  considered timely every student.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"add_timely_term(   dframe,   midfield_term = term,   ...,   span = NULL,   sched_span = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a timely completion term for every student — add_timely_term","text":"dframe Data frame student unit record (SUR) observations keyed student ID. Required variable mcid. midfield_term Data frame SUR term observations keyed student ID. Default term. Required variables mcid, term, level. ... used, forces later arguments used name. span Optional integer scalar, number years define timely completion. Commonly used values 100\\ sched_span. Default 6 years. sched_span Optional integer scalar, number years institution officially schedules completing program. Default 4 years.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a timely completion term for every student — add_timely_term","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column name one added columns silently overwritten. columns modified. Columns added: term_i Character. Initial term student's longitudinal record, encoded YYYYT level_i Character. Student level (01 Freshman, 02 Sophomore, etc.) initial term adj_span Numeric. Integer span years timely completion adjusted student's initial level. timely_term Character. Latest term program completion considered timely every student. Encoded YYYYT.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a timely completion term for every student — add_timely_term","text":"\"completion\" mean undergraduate earning first baccalaureate degree (degrees, students earning one degree term). many studies, students must complete programs specified time span, example 4-, 6-, 8-years admission. , completion timely; , completion late grouped non-completers computing metric graduation rate. heuristic assigns span number years (default 6 years) every student. students admitted second-year level higher, span reduced one year full year student assumed completed. example, student admitted second-year level assumed completed one year program, span reduced one year. adjusted span added initial term create timely completion term timely_term column.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Add timely completion term column add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943  # Define timely completion as 200% of scheduled span (8 years) add_timely_term(dframe, midfield_term = toy_term, span = 8) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        8       19963 #>  2: MID25784974  19883 02 Sophomore        7       19951 #>  3: MID25816209  19881 02 Sophomore        7       19943 #>  4: MID25819358  19946 02 Sophomore        7       20013 #>  5: MID25828870  19881  01 Freshman        8       19953 #>  6: MID25829749  19995    03 Junior        6       20053 #>  7: MID25841418  19981    03 Junior        6       20033 #>  8: MID25845197  19905    03 Junior        6       19963 #>  9: MID25846316  19911  01 Freshman        8       19983 #> 10: MID25847220  19891  01 Freshman        8       19963  # Existing timely_term column, if any, is overwritten dframe[, timely_term := NA_character_] #>            mcid timely_term #>  1: MID25784187        <NA> #>  2: MID25784974        <NA> #>  3: MID25816209        <NA> #>  4: MID25819358        <NA> #>  5: MID25828870        <NA> #>  6: MID25829749        <NA> #>  7: MID25841418        <NA> #>  8: MID25845197        <NA> #>  9: MID25846316        <NA> #> 10: MID25847220        <NA> add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of academic programs — cip","title":"Table of academic programs — cip","text":"data table based US National Center Education Statistics (NCES), Integrated Postsecondary Education Data System (IPEDS), 2010 CIP, http://nces.ed.gov/ipeds/cipcode/. data codes names 1582 instructional programs organized three levels: 2-digit series, 4-digit series, 6-digit series.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of academic programs — cip","text":"","code":"cip"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of academic programs — cip","text":"data.table 1582 rows 6 columns keyed 6-digit CIP code: cip6 Character 6-digit code representing \"specific instructional programs\" (US National Center Education Statistics). cip6name Character program name 6-digit level cip4 Character 4-digit code (first 4 digits cip6) representing \"intermediate groupings programs comparable content objectives.\" cip4name Character program name 4-digit level. cip2 Character 2-digit code (first 2 digits cip6) representing \"general groupings related programs.\" cip2name Character program name 2-digit level.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of academic programs — cip","text":"midfielddata taxonomy includes one non-IPEDS code (999999) Undecided Unspecified, instances institutions reported program information students enrolled program.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_cip","title":"Subset rows that include matches to search strings — filter_cip","text":"Subset data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_cip","text":"","code":"filter_cip(   dframe = cip,   keep_text = NULL,   ...,   drop_text = NULL,   select = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows that include matches to search strings — filter_cip","text":"dframe Data frame searched. Default cip. keep_text Optional character vector search text retaining rows, default NULL. ... used, force later arguments used name. drop_text Optional character vector search text dropping rows, default NULL. select Optional character vector column names return, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_cip","text":"data.table following properties: Rows matching elements keep_text excluding rows matching elements drop_text. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_cip","text":"function designed permit usage filter_cip(character_vector) position first two arguments ignored first argument unnamed character vector. case, character vector assigned keep_text argument cip data set included midfieldr assigned (default) dframe argument. Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows that include matches to search strings — filter_cip","text":"","code":"# Subset using keywords filter_cip(cip, keep_text = \"engineering\") #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>   4:   14                                      Engineering 1403 #>   5:   14                                      Engineering 1404 #>  ---                                                            #> 115:   15                           Engineering Technology 1516 #> 116:   15                           Engineering Technology 1599 #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                     cip4name   cip6 #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering   # drop_text argument, when used, must be named filter_cip(cip, \"civil engineering\", drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other   # Subset using numerical codes filter_cip(cip, keep_text = c(\"050125\", \"160501\")) #>    cip2                                            cip2name cip4 #> 1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #> 2:   16      Foreign Languages, Literatures and Linguistics 1605 #>                                       cip4name   cip6 #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #> 1:                 German Studies #> 2: German Language and Literature   # Subset using regular expressions filter_cip(cip, keep_text = \"^54\") #>    cip2 cip2name cip4 cip4name   cip6 #> 1:   54  History 5401  History 540101 #> 2:   54  History 5401  History 540102 #> 3:   54  History 5401  History 540103 #> 4:   54  History 5401  History 540104 #> 5:   54  History 5401  History 540105 #> 6:   54  History 5401  History 540106 #> 7:   54  History 5401  History 540107 #> 8:   54  History 5401  History 540108 #> 9:   54  History 5401  History 540199 #>                                               cip6name #> 1:                                    History, General #> 2:                    American History (United States) #> 3:                                    European History #> 4:    History and Philosophy of Science and Technology #> 5: Public, Applied History and Archival Administration #> 6:                                       Asian History #> 7:                                    Canadian History #> 8:                                    Military History #> 9:                                      History, Other filter_cip(cip, keep_text = c(\"^1407\", \"^1408\")) #>    cip2    cip2name cip4             cip4name   cip6 #> 1:   14 Engineering 1407 Chemical Engineering 140701 #> 2:   14 Engineering 1407 Chemical Engineering 140702 #> 3:   14 Engineering 1407 Chemical Engineering 140799 #> 4:   14 Engineering 1408    Civil Engineering 140801 #> 5:   14 Engineering 1408    Civil Engineering 140802 #> 6:   14 Engineering 1408    Civil Engineering 140803 #> 7:   14 Engineering 1408    Civil Engineering 140804 #> 8:   14 Engineering 1408    Civil Engineering 140805 #> 9:   14 Engineering 1408    Civil Engineering 140899 #>                                  cip6name #> 1:                   Chemical Engineering #> 2:  Chemical and Biomolecular Engineering #> 3:            Chemical Engineering, Other #> 4:             Civil Engineering, General #> 5:               Geotechnical Engineering #> 6:                 Structural Engineering #> 7: Transportation and Highway Engineering #> 8:            Water Resources Engineering #> 9:               Civil Engineering, Other   # Select columns filter_cip(cip,   keep_text = \"^54\",   select = c(\"cip6\", \"cip4name\") ) #>      cip6 cip4name #> 1: 540101  History #> 2: 540102  History #> 3: 540103  History #> 4: 540104  History #> 5: 540105  History #> 6: 540106  History #> 7: 540107  History #> 8: 540108  History #> 9: 540199  History   # Multiple passes to narrow the results first_pass <- filter_cip(cip, \"civil\") second_pass <- filter_cip(first_pass, \"engineering\") filter_cip(second_pass, drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting program proxies for FYE students — fye_proxy","title":"Starting program proxies for FYE students — fye_proxy","text":"Proxies degree-granting engineering programs estimate First-Year Engineering (FYE) students declared required enroll FYE. Keyed student ID. Proxies provided students midfielddata practice data enroll FYE first term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting program proxies for FYE students — fye_proxy","text":"","code":"fye_proxy"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting program proxies for FYE students — fye_proxy","text":"data.table 3738 rows 2 columns keyed student ID. variables : mcid Character, de-identified student ID. proxy Character, 6-digit CIP code estimated proxy program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting program proxies for FYE students — fye_proxy","text":"proxy variable contains 6-digit CIP codes degree-granting engineering programs, e.g., Electrical Engineering, Mechanical Engineering, etc., substituted FYE CIP code analysis requires degree-granting starting programs. common application graduation rate calculation. estimation based students' first post-FYE programs multiple imputation suitable categorical variables using mice package. predictor variables institution, race, sex. estimated variable 6-digit CIP code degree-granting engineering program institution. fye_proxy holds practice data midfielddata---values commingled MIDFIELD research database.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools and Methods for Working with MIDFIELD Data in 'R' — midfieldr-package","title":"Tools and Methods for Working with MIDFIELD Data in 'R' — midfieldr-package","text":"Provides tools demonstrates methods working individual undergraduate student-level records (registrar's data) 'R'. Tools include filters program codes, data sufficiency, timely completion. Methods include gathering blocs records, computing quantitative metrics graduation rate, creating charts visualize comparisons. 'midfieldr' designed work data MIDFIELD research database, sample available 'midfielddata' data package.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tools and Methods for Working with MIDFIELD Data in 'R' — midfieldr-package","text":"Data provided MIDFIELD: https://midfield.online/.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools and Methods for Working with MIDFIELD Data in 'R' — midfieldr-package","text":"MIDFIELD database anonymized student-level records approximately 1.7M undergraduates nineteen US institutions 1987--2018, midfielddata  provides sample. research database currently accessible MIDFIELD partner institutions . midfielddata R data package supplies anonymized student-level records 98,000 undergraduates three US institutions 1988--2018. sample MIDFIELD database, midfielddata provides practice data tools methods midfieldr package. work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Order categorical variables of multiway data — order_multiway","title":"Order categorical variables of multiway data — order_multiway","text":"Transform data frame two independent categorical variables factors levels ordered display multiway dot plot. Multiway data comprise single quantitative value (response) every combination levels two categorical variables. ordering rows panels crucial perception effects (Cleveland, 1993).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order categorical variables of multiway data — order_multiway","text":"","code":"order_multiway(   dframe,   quantity,   categories,   ...,   method = NULL,   ratio_of = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order categorical variables of multiway data — order_multiway","text":"dframe Data frame one numeric variable two categorical variables class character factor. Two additional numeric columns required using \"percent\" ordering method. quantity Character, name (quotes) single multiway quantitative variable categories Character, vector names (quotes) two multiway categorical variables ... used, forces later arguments used name. method Character, “median” (default) “percent”, method ordering levels categories. median method computes medians quantitative column grouped category. percent method computes percentages based ratio underlying quantitative percentage variable except grouped category. ratio_of Character vector names (quotes) numerator denominator columns produced quantitative variable, required method \"percent\". Names can order; algorithm assumes parameter larger column sum denominator ratio.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order categorical variables of multiway data — order_multiway","text":"data.table  following properties: Rows modified. Grouping structures preserved. columns specified categories converted factors ordered. columns modified. Two columns added. Caution! existing column name one added columns silently overwritten. names added columns incorporate names multiway variables. Columns added: CATEGORY_median columns (ordering method \"median\") Numeric. Two columns medians quantitative variable grouped categorical variables. CATEGORY placeholder column name replaced category name categories argument. example, suppose categories = c(\"program\", \"people\") method = \"median\". two new column names program_median people_median. CATEGORY_QUANTITY columns (ordering method \"percent\") Numeric. Two columns percentages based ratio produces quantitative variable except grouped categorical variables. CATEGORY placeholder column name replaced category name categories argument; QUANTITY placeholder replaced quantitative variable name quantity argument. example, suppose categories = c(\"program\", \"people\"), quantity = \"grad_rate\", method = \"percent\". two new column names  program_grad_rate people_grad_rate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Order categorical variables of multiway data — order_multiway","text":"context, \"multiway\" refers data structure graph design defined Cleveland (1993), methods analysis described Kroonenberg (2008). Multiway data comprise three variables: categorical variable m levels; second independent categorical variable n levels; quantitative variable (response) length mn cross-classifies categories, , value response combination levels two categorical variables. multiway dot plot, one category encoded panels, second category encoded rows panel, quantitative variable encoded along identical horizontal scales.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Order categorical variables of multiway data — order_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley, Hoboken, NJ.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order categorical variables of multiway data — order_multiway","text":"","code":"# Subset of built-in data set dframe <- study_results[program == \"EE\" | program == \"ME\"] dframe[, people := paste(race, sex)] #>     program    sex            race ever grad stick                 people #>  1:      EE Female           Asian   36   14  38.9           Asian Female #>  2:      EE Female           Black  145   58  40.0           Black Female #>  3:      EE Female   International    8    3  37.5   International Female #>  4:      EE Female          Latine   14    6  42.9          Latine Female #>  5:      EE Female Native American    3    0   0.0 Native American Female #>  6:      EE Female   Other/Unknown    8    3  37.5   Other/Unknown Female #>  7:      EE Female           White  173   55  31.8           White Female #>  8:      EE   Male           Asian  189   86  45.5             Asian Male #>  9:      EE   Male           Black  287   97  33.8             Black Male #> 10:      EE   Male   International   70   35  50.0     International Male #> 11:      EE   Male          Latine   63   22  34.9            Latine Male #> 12:      EE   Male Native American    8    1  12.5   Native American Male #> 13:      EE   Male   Other/Unknown   27    9  33.3     Other/Unknown Male #> 14:      EE   Male           White 1227  509  41.5             White Male #> 15:      ME Female           Asian   22   13  59.1           Asian Female #> 16:      ME Female           Black   75   23  30.7           Black Female #> 17:      ME Female   International    3    1  33.3   International Female #> 18:      ME Female          Latine   10    4  40.0          Latine Female #> 19:      ME Female Native American    5    1  20.0 Native American Female #> 20:      ME Female   Other/Unknown    8    4  50.0   Other/Unknown Female #> 21:      ME Female           White  261  109  41.8           White Female #> 22:      ME   Male           Asian  118   58  49.2             Asian Male #> 23:      ME   Male           Black  202   65  32.2             Black Male #> 24:      ME   Male   International   36   16  44.4     International Male #> 25:      ME   Male          Latine   76   29  38.2            Latine Male #> 26:      ME   Male Native American   14    4  28.6   Native American Male #> 27:      ME   Male   Other/Unknown   43   20  46.5     Other/Unknown Male #> 28:      ME   Male           White 1776  918  51.7             White Male #>     program    sex            race ever grad stick                 people dframe[, c(\"race\", \"sex\") := NULL] #>     program ever grad stick                 people #>  1:      EE   36   14  38.9           Asian Female #>  2:      EE  145   58  40.0           Black Female #>  3:      EE    8    3  37.5   International Female #>  4:      EE   14    6  42.9          Latine Female #>  5:      EE    3    0   0.0 Native American Female #>  6:      EE    8    3  37.5   Other/Unknown Female #>  7:      EE  173   55  31.8           White Female #>  8:      EE  189   86  45.5             Asian Male #>  9:      EE  287   97  33.8             Black Male #> 10:      EE   70   35  50.0     International Male #> 11:      EE   63   22  34.9            Latine Male #> 12:      EE    8    1  12.5   Native American Male #> 13:      EE   27    9  33.3     Other/Unknown Male #> 14:      EE 1227  509  41.5             White Male #> 15:      ME   22   13  59.1           Asian Female #> 16:      ME   75   23  30.7           Black Female #> 17:      ME    3    1  33.3   International Female #> 18:      ME   10    4  40.0          Latine Female #> 19:      ME    5    1  20.0 Native American Female #> 20:      ME    8    4  50.0   Other/Unknown Female #> 21:      ME  261  109  41.8           White Female #> 22:      ME  118   58  49.2             Asian Male #> 23:      ME  202   65  32.2             Black Male #> 24:      ME   36   16  44.4     International Male #> 25:      ME   76   29  38.2            Latine Male #> 26:      ME   14    4  28.6   Native American Male #> 27:      ME   43   20  46.5     Other/Unknown Male #> 28:      ME 1776  918  51.7             White Male #>     program ever grad stick                 people data.table::setcolorder(dframe, c(\"program\", \"people\"))  # Class before ordering class(dframe$program) #> [1] \"character\" class(dframe$people) #> [1] \"character\"  # Class and levels after ordering mw1 <- order_multiway(dframe,                        quantity = \"stick\",                        categories = c(\"program\", \"people\")) class(mw1$program) #> [1] \"factor\" levels(mw1$program) #> [1] \"EE\" \"ME\" class(mw1$people) #> [1] \"factor\" levels(mw1$people) #>  [1] \"Native American Female\" \"Native American Male\"   \"Black Male\"             #>  [4] \"Black Female\"           \"International Female\"   \"Latine Male\"            #>  [7] \"White Female\"           \"Other/Unknown Male\"     \"Latine Female\"          #> [10] \"Other/Unknown Female\"   \"White Male\"             \"International Male\"     #> [13] \"Asian Male\"             \"Asian Female\"            # Display category medians  mw1 #>     program                 people stick ever grad program_median people_median #>  1:      EE           Asian Female  38.9   36   14           37.5         49.00 #>  2:      EE           Black Female  40.0  145   58           37.5         35.35 #>  3:      EE   International Female  37.5    8    3           37.5         35.40 #>  4:      EE          Latine Female  42.9   14    6           37.5         41.45 #>  5:      EE Native American Female   0.0    3    0           37.5         10.00 #>  6:      EE   Other/Unknown Female  37.5    8    3           37.5         43.75 #>  7:      EE           White Female  31.8  173   55           37.5         36.80 #>  8:      EE             Asian Male  45.5  189   86           37.5         47.35 #>  9:      EE             Black Male  33.8  287   97           37.5         33.00 #> 10:      EE     International Male  50.0   70   35           37.5         47.20 #> 11:      EE            Latine Male  34.9   63   22           37.5         36.55 #> 12:      EE   Native American Male  12.5    8    1           37.5         20.55 #> 13:      EE     Other/Unknown Male  33.3   27    9           37.5         39.90 #> 14:      EE             White Male  41.5 1227  509           37.5         46.60 #> 15:      ME           Asian Female  59.1   22   13           40.9         49.00 #> 16:      ME           Black Female  30.7   75   23           40.9         35.35 #> 17:      ME   International Female  33.3    3    1           40.9         35.40 #> 18:      ME          Latine Female  40.0   10    4           40.9         41.45 #> 19:      ME Native American Female  20.0    5    1           40.9         10.00 #> 20:      ME   Other/Unknown Female  50.0    8    4           40.9         43.75 #> 21:      ME           White Female  41.8  261  109           40.9         36.80 #> 22:      ME             Asian Male  49.2  118   58           40.9         47.35 #> 23:      ME             Black Male  32.2  202   65           40.9         33.00 #> 24:      ME     International Male  44.4   36   16           40.9         47.20 #> 25:      ME            Latine Male  38.2   76   29           40.9         36.55 #> 26:      ME   Native American Male  28.6   14    4           40.9         20.55 #> 27:      ME     Other/Unknown Male  46.5   43   20           40.9         39.90 #> 28:      ME             White Male  51.7 1776  918           40.9         46.60 #>     program                 people stick ever grad program_median people_median  # Existing factors (if any) are re-ordered mw2 <- dframe mw2$program <- factor(mw2$program, levels = c(\"ME\", \"EE\"))  # Levels before conditioning levels(mw2$program)  #> [1] \"ME\" \"EE\"  # Levels after conditioning mw2 <- order_multiway(dframe,                        quantity = \"stick\",                        categories = c(\"program\", \"people\")) levels(mw2$program)  #> [1] \"EE\" \"ME\"  # Ordering using percent method order_multiway(dframe,                 quantity = \"stick\",                 categories = c(\"program\", \"people\"),                 method = \"percent\",                 ratio_of = c(\"grad\", \"ever\")) #>     program                 people grad ever stick program_stick people_stick #>  1:      EE           Asian Female   14   36  38.9          39.8         46.6 #>  2:      EE           Black Female   58  145  40.0          39.8         36.8 #>  3:      EE   International Female    3    8  37.5          39.8         36.4 #>  4:      EE          Latine Female    6   14  42.9          39.8         41.7 #>  5:      EE Native American Female    0    3   0.0          39.8         12.5 #>  6:      EE   Other/Unknown Female    3    8  37.5          39.8         43.8 #>  7:      EE           White Female   55  173  31.8          39.8         37.8 #>  8:      EE             Asian Male   86  189  45.5          39.8         46.9 #>  9:      EE             Black Male   97  287  33.8          39.8         33.1 #> 10:      EE     International Male   35   70  50.0          39.8         48.1 #> 11:      EE            Latine Male   22   63  34.9          39.8         36.7 #> 12:      EE   Native American Male    1    8  12.5          39.8         22.7 #> 13:      EE     Other/Unknown Male    9   27  33.3          39.8         41.4 #> 14:      EE             White Male  509 1227  41.5          39.8         47.5 #> 15:      ME           Asian Female   13   22  59.1          47.8         46.6 #> 16:      ME           Black Female   23   75  30.7          47.8         36.8 #> 17:      ME   International Female    1    3  33.3          47.8         36.4 #> 18:      ME          Latine Female    4   10  40.0          47.8         41.7 #> 19:      ME Native American Female    1    5  20.0          47.8         12.5 #> 20:      ME   Other/Unknown Female    4    8  50.0          47.8         43.8 #> 21:      ME           White Female  109  261  41.8          47.8         37.8 #> 22:      ME             Asian Male   58  118  49.2          47.8         46.9 #> 23:      ME             Black Male   65  202  32.2          47.8         33.1 #> 24:      ME     International Male   16   36  44.4          47.8         48.1 #> 25:      ME            Latine Male   29   76  38.2          47.8         36.7 #> 26:      ME   Native American Male    4   14  28.6          47.8         22.7 #> 27:      ME     Other/Unknown Male   20   43  46.5          47.8         41.4 #> 28:      ME             White Male  918 1776  51.7          47.8         47.5 #>     program                 people grad ever stick program_stick people_stick"},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare FYE data for multiple imputation — prep_fye_mice","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"Constructs data frame Student Unit Records (SURs) First-Year Engineering (FYE) programs conditions data later use input mice R package multiple imputation. Sets three variables predictors (institution, race/ethnicity, sex) one variable estimated (program CIP code).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"","code":"prep_fye_mice(   midfield_student = student,   midfield_term = term,   ...,   fye_codes = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"midfield_student Data frame Student Unit Record (SUR) student observations, keyed student ID. Default student. Required variables mcid, race, sex. midfield_term Data frame SUR term observations keyed student ID. Default term. Required variables mcid, institution, term, cip6. ... used, forces later arguments used name. fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default \"140102\". Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes---start 14---produce error.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"data.table conditioned later use input mice R package multiple imputation. data following properties: One row every FYE student, first-term migrator. Grouping structures preserved. Columns returned: mcid Character, anonymized student identifier. Returned -. race Factor, race/ethnicity self-reported student. imputation predictor variable. sex Factor, sex self-reported student. imputation predictor variable. institution Factor, anonymized institution name. imputation predictor variable. proxy Factor, 6-digit CIP code student's known, post-FYE engineering program NA representing missing values imputed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"US institutions, engineering students required complete First-Year Engineering (FYE) program prerequisite declaring engineering major. Administratively, degree-granting engineering programs Electrical Engineering Mechanical Engineering treat incoming post-FYE students \"starting\" cohorts.  However, computing metric requires count starters---graduation rate, example---FYE records must treated special care avoid miscount. illustrate potential miscounting starters, suppose wish calculate Mechanical Engineering () graduation rate. Students starting constitute starting pool fraction pool graduating graduation rate. FYE institutions, program typically define starting pool post-FYE cohort entering program. may best information available, invariably undercounts starters failing account FYE students transition (post-FYE) degree-granting engineering programs---students may left institution switched non-engineering majors. either case, absence FYE requirement, students starters. neglecting students, count starters artificially low resulting graduation rate artificially high. true every degree-granting engineering discipline FYE institution. Therefore, avoid miscounting starters FYE institutions, estimate \"FYE proxy\", , 6-digit CIP codes degree-granting engineering programs FYE students declared required enroll FYE. purpose prep_fye_mice() prepare data making estimation. running prep_fye_mice() running mice(), one can edit variables add variables create custom set predictors. mice package expects predictors proxy variables factors. delete institution variable ensures student's imputed program available institution. addition, ensure missing values proxy column. variables expected complete (NA values). value \"unknown\" predictor column, e.g., race/ethnicity sex, acceptable value, missing data. Observations missing unknown values ID institution columns () removed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"function extracts terms FYE students, including migrate enter Engineering first term, identifies first post-FYE program enroll, . treatment yields two possible outcomes values returned proxy column: student completes FYE enrolls engineering major. outcome, know student's first opportunity, enrolled engineering program choosing. CIP code program returned student's FYE proxy. student enroll post-FYE engineering major. students records database switched Engineering another program. outcome, data provide information regarding engineering program student declared originally institution required enroll FYE. students proxy value NA returned. data treated missing values imputed mice(). cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. resulting data frame ready use input mice package, variables except mcid returned factors.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"","code":"# Using toy data prep_fye_mice(toy_student, toy_term) #>            mcid   race    sex   institution  proxy #>  1: MID26060301  Asian Female Institution C   <NA> #>  2: MID25995980 Latine Female Institution C   <NA> #>  3: MID25997636 Latine Female Institution C   <NA> #>  4: MID26086310 Latine Female Institution C   <NA> #>  5: MID26000057  White Female Institution C   <NA> #>  6: MID26614720  Asian   Male Institution J   <NA> #>  7: MID26593796  White   Male Institution J   <NA> #>  8: MID25848589  White   Male Institution M 143501 #>  9: MID25846316  White   Male Institution M 143501 #> 10: MID25847220  White   Male Institution M 143501 #> 11: MID25828870  White   Male Institution M 149999  # Other columns, if any, are dropped colnames(toy_student) #> [1] \"mcid\"        \"institution\" \"race\"        \"sex\"         colnames(prep_fye_mice(toy_student, toy_term)) #> [1] \"mcid\"        \"race\"        \"sex\"         \"institution\" \"proxy\"        # Optional argument permits multiple CIP codes for FYE prep_fye_mice(midfield_student = toy_student,                midfield_term =toy_term,                fye_codes = c(\"140101\", \"140102\")) #>            mcid   race    sex   institution  proxy #>  1: MID25977316  White   Male Institution B   <NA> #>  2: MID26060301  Asian Female Institution C   <NA> #>  3: MID25995980 Latine Female Institution C   <NA> #>  4: MID25997636 Latine Female Institution C   <NA> #>  5: MID26086310 Latine Female Institution C   <NA> #>  6: MID26000057  White Female Institution C   <NA> #>  7: MID26614720  Asian   Male Institution J   <NA> #>  8: MID26593796  White   Male Institution J   <NA> #>  9: MID25848589  White   Male Institution M 143501 #> 10: MID25846316  White   Male Institution M 143501 #> 11: MID25847220  White   Male Institution M 143501 #> 12: MID25828870  White   Male Institution M 149999"},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for equal content between two data tables — same_content","title":"Test for equal content between two data tables — same_content","text":"Test data equality data.table objects. Convenience function used vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for equal content between two data tables — same_content","text":"","code":"same_content(x, y)"},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for equal content between two data tables — same_content","text":"x Data frame compared. target argument .equal() y Data frame compared. current argument .equal()","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for equal content between two data tables — same_content","text":"Either TRUE description differences x y.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for equal content between two data tables — same_content","text":"Wrapper around .equal() class data.table ignores row order, column order, data.table keys. inputs must date frames. Equivalent : .equal(target, current, ignore.row.order = TRUE, ignore.col.order = TRUE)","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for equal content between two data tables — same_content","text":"","code":"# Same information and ignore row order, column order x <- toy_student[order(mcid), .(mcid, institution)] y <- toy_student[order(institution), .(institution, mcid)] same_content(x, y) #> [1] TRUE  # Different number of rows x <- toy_student[1:10] y <- toy_student[1:11] same_content(x, y) #> [1] \"Different number of rows\"  # Different column names x <- toy_student[, .(mcid)] y <- toy_student[, .(institution)] same_content(x, y) #> [1] \"Different column names\"  # Different number of columns and column names x <- toy_student[, .(mcid)] y <- toy_student[, .(mcid, institution)] same_content(x, y) #> [1] \"Different number of columns\" \"Different column names\"       # Different number of rows, number of columns, and column names x <- toy_student y <- toy_term same_content(x, y) #> [1] \"Different number of rows\"    \"Different number of columns\" #> [3] \"Different column names\"       # Different row content x <- toy_student[1:10] y <- toy_student[2:11] same_content(x, y) #> [1] \"Dataset 'current' has rows not present in 'target'\""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":null,"dir":"Reference","previous_headings":"","what":"Select required midfieldr variables — select_required","title":"Select required midfieldr variables — select_required","text":"Subset data frame, selecting columns matching partially matching vector character strings. convenience function reduce dimensions MIDFIELD data table start session selecting columns typically required midfieldr functions. Particularly useful interactive sessions viewing data tables various stages analysis.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select required midfieldr variables — select_required","text":"","code":"select_required(midfield_x, ..., select_add = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select required midfieldr variables — select_required","text":"midfield_x Data frame columns selected, typically student, term, degree subsets. ... used, force later arguments used name. select_add Optional character vector search terms add default vector given c(\"mcid\", \"institution\", \"race\", \"sex\",         \"^term\", \"cip6\", \"level\").","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select required midfieldr variables — select_required","text":"data.table following properties: Rows modified. Columns names match partially match values select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select required midfieldr variables — select_required","text":"Several midfieldr functions designed operate one MIDFIELD data tables, usually student, term, degree. family functions requires small subset available variables, e.g., mcid, cip6, term. required columns built function. select argument used add search strings default vector. column names midfield_x searched matches partial matches using grep(), thus search terms can include regular expressions. Variables names match partially match search terms returned; columns dropped. Rows unaffected. Search terms present silently ignored. One use function select columns non-MIDFIELD data frame, benefit user---conventional column selection syntax better suited task. , specialize column selection serve midfieldr functions.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select required midfieldr variables — select_required","text":"","code":"# Default character vector for selecting columns default_cols<- c(\"mcid\", \"institution\", \"race\", \"sex\", \"^term\", \"cip6\", \"level\")  # Create one string separated by OR search_pattern <- paste(default_cols, collapse = \"|\")  # Find names of columns matching or partially matching  x <- select_required(toy_student)  names(x) #> [1] \"mcid\"        \"institution\" \"race\"        \"sex\"         grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE  x <- select_required(toy_term)  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        \"cip6\"        \"level\"       grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE TRUE  x <- select_required(toy_degree)  names(x) #> [1] \"mcid\"        \"institution\" \"term_degree\" \"cip6\"        grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE  x <- select_required(toy_course)  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE  # Adding search terms x <- select_required(toy_course, select_add = c(\"abbrev\", \"number\", \"grade\"))  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        \"abbrev\"      \"number\"      #> [6] \"grade\""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_ever.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study ever enrolled — study_ever","title":"Case-study ever enrolled — study_ever","text":"Data table IDs students ever enrolled four programs study (Civil, Electrical, Industrial/Systems, Mechanical Engineering) filtering data sufficiency, degree seeking, program. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_ever.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study ever enrolled — study_ever","text":"","code":"study_ever"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_ever.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study ever enrolled — study_ever","text":"data.table 7660 rows 2 columns. mcid Character, anonymized student identifier program Character, abbreviated labels four engineering programs. Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\" (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study observations — study_observations","title":"Case-study observations — study_observations","text":"Data table post-processed observations students ever enrolled , students graduating , four programs case study. Keyed student ID. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study observations — study_observations","text":"","code":"study_observations"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study observations — study_observations","text":"data.table 11,212 rows 5 columns. mcid Character, anonymized student identifier race Character, self-reported race/ethnicity. sex Character, self-reported sex. program Character, academic program label. group Character, indicating grouping (ever grad) observation belongs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study observations — study_observations","text":"Starting case-study starting pool students ever enrolled four programs study (Civil, Electrical, Industrial/Systems, Mechanical Engineering), filtered data data sufficiency, degree seeking, program, timely completion. data frame \"ever enrolled\" data frame \"timely graduates\" bound using shared column names distinguished group variable.  data structure facilitates grouping summarizing race, sex, program, group.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study program labels and codes — study_programs","title":"Case-study program labels and codes — study_programs","text":"Data table program CIP codes labels four programs case study. Keyed 6-digit CIPs. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study program labels and codes — study_programs","text":"","code":"study_programs"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study program labels and codes — study_programs","text":"data.table 15 rows 2 columns. cip6 Character, 6-digit CIP program codes. program Character, abbreviated labels four engineering programs. Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\" (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study program labels and codes — study_programs","text":"Starting midfieldr cip data set, extracted CIPs four programs case study assigned custom label used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study results — study_results","title":"Case-study results — study_results","text":"Data table longitudinal stickiness keyed program, race/ethnicity, sex. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study results — study_results","text":"","code":"study_results"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study results — study_results","text":"data.table 55 rows 6 columns. program Character, academic program label. race Character, self-reported race/ethnicity. sex Character, self-reported sex. ever Numerical, number students ever enrolled program. grad Numerical, number students completing program. stick Numerical, program stickiness, ratio grad ever, percent.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study results — study_results","text":"Starting prepared data (case study stickiness observations), compute longitudinal stickiness four programs study (Civil, Electrical, Industrial/Systems, Mechanical Engineering) grouped program, race/ethnicity, sex. Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data. Results based data filtered data sufficiency, degree seeking, program, timely completion.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study starters — study_starters","title":"Case-study starters — study_starters","text":"Data table students considered starters one four engineering programs case study (Civil, Electrical, Industrial/Systems, Mechanical Engineering). Includes substitutions FYE proxies students required enroll FYE programs. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study starters — study_starters","text":"","code":"study_starters"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study starters — study_starters","text":"data.table 5790 rows 2 columns. mcid Character, anonymized student identifier program Character, abbreviated labels four engineering programs. Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\" (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study starters — study_starters","text":"student term source data filtered data sufficiency degree-seeking. filter student’s first term (ignoring terms CIP undecided/unspecified). identify program(s) student can considered starter, substituting FYE proxy starting program FYE. filter program. CIP variable renamed start distinguish midfieldr cip6 variables start contains estimated program codes cip6 variables contain actual student records.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":null,"dir":"Reference","previous_headings":"","what":"Course data for examples — toy_course","title":"Course data for examples — toy_course","text":"small subset course practice data use package vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Course data for examples — toy_course","text":"","code":"toy_course"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Course data for examples — toy_course","text":"data.table 4616 rows 6 columns keyed student ID. mcid Character, anonymized student ID. institution Character, de-identified institution name, e.g., Institution , Institution B, etc. term Character, academic year term, format YYYYT. abbrev Character, course alphabetical identifier, e.g. ENGR, MATH, ENGL. number Character, course numeric identifier, e.g. 101, 3429. grade Character, course grade, e.g., +, , -, B+, , NG, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree data for examples — toy_degree","title":"Degree data for examples — toy_degree","text":"small subset degree practice data use package vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree data for examples — toy_degree","text":"","code":"toy_degree"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Degree data for examples — toy_degree","text":"data.table 65 rows 4 columns keyed student ID. mcid Character, anonymized student ID. institution Character, anonymized institution name, e.g., Institution , Institution B, etc. term_degree Character, academic year term student completes program, format YYYYT. cip6 Character, 6-digit CIP code program student earns degree.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data for examples — toy_student","title":"Student data for examples — toy_student","text":"small subset student practice data use package vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data for examples — toy_student","text":"","code":"toy_student"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data for examples — toy_student","text":"data.table 99 rows 4 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g., Institution , Institution B, etc. race Character, race/ethnicity self-reported student, e.g., Asian, Black, Latine, etc. sex character, sex self-reported student, possible values Female, Male, Unknown.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Term data for examples — toy_term","title":"Term data for examples — toy_term","text":"small subset term practice data use package vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term data for examples — toy_term","text":"","code":"toy_term"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Term data for examples — toy_term","text":"data.table 150 rows 5 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g., Institution , Institution B, etc. term Character, academic year term, format YYYYT. cip6 Character, 6-digit CIP code program student enrolled term. level Character, 01 Freshman, 02 Sophomore, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009029--2022-12","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9029 / 2022-12","title":"midfieldr 1.0.0.9029 / 2022-12","text":"Revise accommodate new data sample ‘midfielddata’ Add man/rmd/ shared .Rmd fragments Revise README pkgdown settings","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009028--2022-11","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9028 / 2022-11","title":"midfieldr 1.0.0.9028 / 2022-11","text":"Rename filter_search() filter_cip() better capture purpose. Made cip default data frame search. Permits usage like filter_cip(\"engineering\") first argument can keep_text character vector search strings, yet unnamed. Edit vignettes consistent organization prose. Finished first complete draft “Graduation rate” vignette. Add same_content() convenience function. Add “Stickiness” vignette Add “Groupings” vignette.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009027--2022-10","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9027 / 2022-10","title":"midfieldr 1.0.0.9027 / 2022-10","text":"Separate vignettes FYE starters. starters, add case non-FYE institutions. Edit vignettes consistent organization prose. Add select_required(). Add planning blocs vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009026--2022-09","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9026 / 2022-09","title":"midfieldr 1.0.0.9026 / 2022-09","text":"Add FYE function vignette. Revise multiway function name. Add order_multiway() examples. Add initial graduation rate vignette. Add README tests directory. Consistent comments R code chunk commands.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009025--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9025 / 2021-07","title":"midfieldr 1.0.0.9025 / 2021-07","text":"Editing functions names data names descriptive. Change name built-fye_start data set fye_predicted_start. New order_multiway_categories() replace condition_multiway(). Revised argument names. New preprocess_fye() replace condition_fye().","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009024--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9024 / 2021-07","title":"midfieldr 1.0.0.9024 / 2021-07","text":"Revise add_completion_status(), changing three possible values “timely”, “late”, NA. Drop completion column (information available term_degree column). Revise vignettes consistent format.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009023--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9023 / 2021-07","title":"midfieldr 1.0.0.9023 / 2021-07","text":"Updated condition_multiway(), unit tests, multiway vignette.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009022--2021-06-29","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9022 / 2021-06-29","title":"midfieldr 1.0.0.9022 / 2021-06-29","text":"Revise add vignettes data sufficiency, degree seeking (inner joins), programs, completion, demographics (left outer joins). Correction condition_multiway() alphabetical ordering, revise unit tests. Remove dependency Rdpack.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009021--2021-06","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9021 / 2021-06","title":"midfieldr 1.0.0.9021 / 2021-06","text":"midfield_student argument, functions appears, assigned default value student instead NULL. argument can omitted unless intended data frame called something student. Similarly, midfield_course, midfield_term, midfield_degree arguments, occur, assigned default values course, term, degree. Reorganize logical flow data processing case study vignettes reflect latest thinking order filters applied. Functions return supporting variables, delete optional “details” arguments. Edit function names variable names, update unit tests. Temporarily remove vignettes updated. Make inner joins explicit, delete add_filter_match(). Revise data sufficiency include lower limit exclusions. Make left-outer joins explicit, delete add_race_sex().","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009020--2021-06","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9020 / 2021-06","title":"midfieldr 1.0.0.9020 / 2021-06","text":"Significant changes earlier versions, backwards compatibility, prompting version number change 1.0.0. Change names practice data tables match names research data Edit practice data values consistency research data values Revise built-data sets use vignettes Rd examples Switch wrapr coalesce %?% assigning default arguments Initial round runtime assertions unit tests complete Make function names arguments internally consistent Edit functions depend data.table functionality Make MIDFIELD data arguments explicit functions Remove dependency dplyr related packages Replace Travis CI GitHub Actions CI Use package checkmate runtime assertions Remove dependency installing midfielddata Switch package tinytest unit testing Separate case study detailed vignettes Completely overhaul midfieldr functions Update README midfielddata README Revise vignettes use new functions","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-010--2018-06","dir":"Changelog","previous_headings":"","what":"midfieldr 0.1.0 / 2018-06","title":"midfieldr 0.1.0 / 2018-06","text":"Initial development version public GitHub","code":""}]
