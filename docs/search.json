[{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"beginning survey student unit record (SUR) data, check necessary prerequisites met: Requirements Install midfieldr Install midfielddata vignette, Load practice data midfielddata Inspect four data tables Preview midfieldr functions","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"student-unit-record-data","dir":"Articles","previous_headings":"","what":"Student unit record data","title":"Getting started","text":"MIDFIELD Student Unit Record (SUR) data de-identified undergraduate student-level information covering admission characteristics, demographics, programs, courses, instructors, grades, degrees. data organized four tables—student, course, term, degree—keyed student ID. vignette, examine contents practice data midfielddata, R data package longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016:","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"load-practice-data","dir":"Articles","previous_headings":"","what":"Load practice data","title":"Getting started","text":"writing script follow along, start packages: Use data() load midfielddata data tables memory use. example, loading package library(\"midfielddata\") , can run ls() see environment contains zero objects, load student data midfielddata memory, run Checking environment , look RStudio Environment pane, see student listed. typically load data sets need top script just loading midfielddata package. need load session. Checking environment ,","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # optional code to control data.table printing options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE ) # the names of objects in the environment ls() #> character(0) # loading a data set  data(student) # the names of objects in the environment ls() #> [1] \"student\" # load remaining data used in this vignette data(course) data(term) data(degree) # the names of objects in the environment ls() #> [1] \"course\"  \"degree\"  \"student\" \"term\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-student-data","dir":"Articles","previous_headings":"","what":"Inspect the student data","title":"Getting started","text":"student table 13 student-related variables students sample, collected time admitted institutions degree-seeking undergraduates. data dictionary, can view help page running observation unique student keyed student ID. Student IDs institution names de-identified consistent across four data sets. see data structure, run student 97,640 observations occupies approximately 19 MB memory. can confirm student IDs unique running, Summarize quantitative variables. Examine categorical variables values.","code":"# Run in Console to view help page ? student # view the structure of the data set str(student) #> Classes 'data.table' and 'data.frame':   97640 obs. of  13 variables: #>  $ mcid          : chr  \"MID25783135\" \"MID25783147\" \"MID25783156\" \"MID25783162\" ... #>  $ institution   : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ transfer      : chr  \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" ... #>  $ hours_transfer: num  NA NA NA NA NA NA NA NA NA NA ... #>  $ race          : chr  \"White\" \"White\" \"White\" \"White\" ... #>  $ sex           : chr  \"Male\" \"Female\" \"Female\" \"Male\" ... #>  $ age           : num  17 17 18 17 18 18 17 18 18 18 ... #>  $ us_citizen    : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ home_zip      : chr  \"29485\" \"29072\" \"43026\" \"29572\" ... #>  $ high_school   : chr  \"411900\" \"410825\" \"210568\" \"411465\" ... #>  $ sat_math      : num  580 470 750 560 670 620 642 590 492 620 ... #>  $ sat_verbal    : num  505 530 627 395 530 500 486 620 594 456 ... #>  $ act_comp      : num  21 19 29 18 26 22 24 25 21 21 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) length(unique(student$mcid)) #> [1] 97640 summary(student$sat_math) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   200.0   520.0   580.0   578.1   640.0   800.0   31705  summary(student$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   16.00   18.00   18.00   18.47   18.00   75.00   22916 sort(unique(student$sex)) #> [1] \"Female\"  \"Male\"    \"Unknown\"  sort(unique(student$race)) #> [1] \"Asian\"           \"Black\"           \"Hispanic/Latinx\" \"International\"   #> [5] \"Native American\" \"Other/Unknown\"   \"White\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises","dir":"Articles","previous_headings":"Inspect the student data","what":"Exercises","title":"Getting started","text":"Determine possible values institution column. Determine possible values transfer column. Determine median sat_verbal score.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-course-data","dir":"Articles","previous_headings":"","what":"Inspect the course data","title":"Getting started","text":"course table 12 course-related variables students sample. data dictionary, can view help page running observation one course one term one student keyed student ID combination course, abbreviation, number, section. see data structure, run four practice data sets midfielddata, course far largest, 3,439,936 observations occupying 349 MB memory. Depending machine, loading course can cause noticeable delay execution time (13 seconds machine), probably want load needed. number unique students. Summarize quantitative variable. Examine categorical variable values.","code":"# Run in Console to view help page ? course # view the structure of the data set str(course) #> Classes 'data.table' and 'data.frame':   3439936 obs. of  12 variables: #>  $ mcid        : chr  \"MID25783135\" \"MID25783135\" \"MID25783135\" \"MID25783135\" ... #>  $ institution : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term        : chr  \"19911\" \"19911\" \"19911\" \"19911\" ... #>  $ course      : chr  \"\" \"\" \"\" \"\" ... #>  $ abbrev      : chr  \"SPCH\" \"CH\" \"ED\" \"ENGL\" ... #>  $ number      : chr  \"363\" \"101\" \"103\" \"101\" ... #>  $ section     : chr  \"001\" \"005\" \"002\" \"050\" ... #>  $ type        : chr  \"Lecture\" \"Lecture\" \"Lecture\" \"Lecture\" ... #>  $ faculty_rank: chr  \"\" \"\" \"\" \"\" ... #>  $ hours_course: num  3 4 1 3 5 3 3 3 3 4 ... #>  $ pass_fail   : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ grade       : chr  \"A\" \"C\" \"A\" \"B\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(course$mcid)) #> [1] 95633 summary(course$hours_course) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    3.00    3.00    2.71    3.00   99.50   60742 # type of courses sort(unique(course$type)) #>  [1] \"\"                         \"Academic Redemption\"      #>  [3] \"Blended\"                  \"Directed Study\"           #>  [5] \"Duplicate Credit\"         \"Exemption Credit\"         #>  [7] \"Grade History\"            \"Honors\"                   #>  [9] \"Individual Study\"         \"Ineigible to Repeat\"      #> [11] \"Internship/Practicum\"     \"Laboratory\"               #> [13] \"Lecture\"                  \"Lecture/Supervised Lab\"   #> [15] \"Lecture/Unsupervised Lab\" \"Living Community\"         #> [17] \"Make-Up\"                  \"Online\"                   #> [19] \"Problem Session\"          \"Research\"                 #> [21] \"Seminar\"                  \"Special Exam\"             #> [23] \"Special Topics\"           \"Supervised Laboratory\"    #> [25] \"Synchronized\"             \"Test\"                     #> [27] \"Thesis/Dissertation\"      \"Unsupervised Laboratory\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-1","dir":"Articles","previous_headings":"Inspect the course data","what":"Exercises","title":"Getting started","text":"Determine possible values faculty_rank column. Determine range terms term column. Determine possible values grade column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-term-data","dir":"Articles","previous_headings":"","what":"Inspect the term data","title":"Getting started","text":"term table 13 term-related variables students sample. data dictionary, can view help page running observation one term one student keyed student ID term. see data structure, run term 710,841 observations occupies approximately 82 MB memory. number unique students found , number unique students student term . recorded student, students must degree-seeking. recorded term, students must complete term. data can include degree-seekers fail complete term well term-completers seeking degree—hence difference numbers Summarize quantitative variables. Examine categorical variables values.","code":"# Run in Console to view help page ? term str(term) #> Classes 'data.table' and 'data.frame':   710841 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783156\" \"MID25783156\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20011\" \"20013\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"040201\" \"040201\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 14 16 16 17 18 18 17 9 ... #>  $ hours_term_attempt : num  19 14 14 16 16 17 18 18 17 13 ... #>  $ hours_cumul        : num  19 33 14 30 46 63 81 99 17 26 ... #>  $ hours_cumul_attempt: num  19 33 14 30 46 63 81 99 17 30 ... #>  $ gpa_term           : num  2.47 3.21 3.07 3.62 3.13 3.82 4 3.5 2.53 1.61 ... #>  $ gpa_cumul          : num  2.47 2.79 3.07 3.36 3.28 3.42 3.55 3.54 2.53 2.13 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # number of unique IDs length(unique(term$mcid)) #> [1] 94028 summary(term$hours_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    9.00   12.00   11.45   15.00   46.00  summary(term$gpa_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   2.400   3.000   2.857   3.540   9.300     267 sort(unique(term$level)) #> [1] \"01 Freshman\"  \"02 Sophomore\" \"03 Junior\"    \"04 Senior\"  sort(unique(term$standing)) #> [1] \"Academic Probation\"               \"Academic Suspension\"              #> [3] \"Academic Suspension - Reinstated\" \"Academic Warning\"                 #> [5] \"Good Standing\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-2","dir":"Articles","previous_headings":"Inspect the term data","what":"Exercises","title":"Getting started","text":"Determine possible values coop column. Determine range terms term column. Determine median value gpa_cumul column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-degree-data","dir":"Articles","previous_headings":"","what":"Inspect the degree data","title":"Getting started","text":"degree table 5 degree-related variables students sample. data dictionary, can view help page running observation unique student keyed student ID. see data structure, run degree 47,499 observations occupies approximately 10 MB memory. number unique students found Thus 47,499 graduates (degree) 97,640 students admitted (student). Examine categorical variables values. Checking degrees recorded NA results empty table, thus students degree graduates.","code":"# Run in Console to view help page ? degree str(degree) #> Classes 'data.table' and 'data.frame':   47499 obs. of  5 variables: #>  $ mcid       : chr  \"MID25783162\" \"MID25783178\" \"MID25783188\" \"MID25783195\" ... #>  $ institution: chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term_degree: chr  \"19963\" \"20001\" \"20023\" \"19966\" ... #>  $ cip6       : chr  \"521401\" \"143501\" \"230101\" \"521401\" ... #>  $ degree     : chr  \"Bachelor of Science\" \"Bachelor of Science\" \"Bachelor of Arts\" \"Bachelor of Science\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(degree$mcid)) #> [1] 47499 sort(unique(degree$institution)) #>  [1] \"Institution A\" \"Institution B\" \"Institution C\" \"Institution D\" #>  [5] \"Institution E\" \"Institution F\" \"Institution G\" \"Institution H\" #>  [9] \"Institution J\" \"Institution K\" \"Institution L\" \"Institution M\"  sort(unique(degree$degree)) #>  [1] \"Bachelor's Degree\"                   \"Bachelor of Architecture\"            #>  [3] \"Bachelor of Arts\"                    \"Bachelor of Arts and Sciences\"       #>  [5] \"Bachelor of Arts in Letters\"         \"Bachelor of Business Administration\" #>  [7] \"Bachelor of Fine Arts\"               \"Bachelor of Interior Design\"         #>  [9] \"Bachelor of Music\"                   \"Bachelor of Science\" degree[is.na(degree)] #> Empty data.table (0 rows and 5 cols): mcid,institution,term_degree,cip6,degree"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-3","dir":"Articles","previous_headings":"Inspect the degree data","what":"Exercises","title":"Getting started","text":"packages functions specialized data frame summaries. Try one—may find useful future data explorations. Install skimr package, load library(\"skimr\"), run skim(x), x one data tables, example, skim(student), skim(degree), etc.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"review-the-midfieldr-functions","dir":"Articles","previous_headings":"","what":"Review the midfieldr functions","title":"Getting started","text":"outline midfieldr functions. discussed greater detail vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-4","dir":"Articles","previous_headings":"Review the midfieldr functions","what":"Exercises","title":"Getting started","text":"View help pages functions add_timely_term() add_completion_status(). Summarize difference(s) two functions. Describe manner one depends .","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Getting started","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # loading data data(student) data(course) data(term) data(degree)  # student str(student) length(unique(student$mcid)) summary(student$sat_math) summary(student$age) sort(unique(student$sex)) sort(unique(student$race))  # course str(course) length(unique(course$mcid)) summary(course$hours_course) sort(unique(course$type))  # term str(term) length(unique(term$mcid)) summary(term$hours_term) summary(term$gpa_term) sort(unique(term$level)) sort(unique(term$standing))  # degree str(degree) length(unique(degree$mcid)) sort(unique(degree$institution)) sort(unique(degree$degree)) degree[is.na(degree)]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Case study: Goals","text":"present study three parts: Goals. Describing study parameters. Data. Transforming data yield observations interest. Results. Calculating summary statistics metrics displaying results.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"goals","dir":"Articles","previous_headings":"","what":"Goals","title":"Case study: Goals","text":"goal case study compare “stickiness” Civil, Electrical, Industrial, Mechanical Engineering programs students grouped race/ethnicity sex. Program stickiness ratio number students graduating program number students ever enrolled program—measure program’s success attracting, keeping, graduating undergraduates.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Case study: Data","text":"data processing goal reduce source data tables specific observations needed compute metrics. data processing tasks include combination filtering observations (rows), creating, renaming, recoding variables (columns), joining data frames. analysis organized produce two data frames—students ever enrolled programs students graduating programs—joined written file starting point next section case study. writing script follow along, start packages:","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE )"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"Case study: Data","text":"MIDFIELD data block-record form, , every row observation (keyed student ID) every column variable. Data structure explored greater detail Getting started vignette. Importing. Load three midfielddata data tables.","code":"# Load three data sets from midfielddata data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-ever-enrolled","dir":"Articles","previous_headings":"","what":"Gather ever enrolled","title":"Case study: Data","text":"Copying. Copy term data set create working data frame (DT), leaving term unaltered later use. result 710,841 observations. usually note number observations change. Filtering. study, two variables term data needed start: student ID mcid program code cip6. drop unnecessary columns remove duplicate rows unique combinations student ID program CIP. result 161,696 observations 94,028 unique students. number unique students smaller number observations students change programs course study. one row per unique combination student (mcid) program code (cip6). form, data bundled midfieldr study_pool data set. can view help page running","code":"# Create a working data frame DT <- copy(term) str(DT) #> Classes 'data.table' and 'data.frame':   710841 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783156\" \"MID25783156\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20011\" \"20013\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"040201\" \"040201\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 14 16 16 17 18 18 17 9 ... #>  $ hours_term_attempt : num  19 14 14 16 16 17 18 18 17 13 ... #>  $ hours_cumul        : num  19 33 14 30 46 63 81 99 17 26 ... #>  $ hours_cumul_attempt: num  19 33 14 30 46 63 81 99 17 30 ... #>  $ gpa_term           : num  2.47 3.21 3.07 3.62 3.13 3.82 4 3.5 2.53 1.61 ... #>  $ gpa_cumul          : num  2.47 2.79 3.07 3.36 3.28 3.42 3.55 3.54 2.53 2.13 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # Minimize the dimensions of the data DT <- DT[, .(mcid, cip6)] DT <- unique(DT) DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783156 040201 #>      3: MID25783162 140102 #>      4: MID25783162 520301 #>      5: MID25783162 521401 #>     ---                    #> 161692: MID26697682 240101 #> 161693: MID26697685 300000 #> 161694: MID26697685 521201 #> 161695: MID26697689 240101 #> 161696: MID26697702 240101 # Count unique IDs length(unique(DT$mcid)) #> [1] 94028 # Run in Console to view help page ? study_pool"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Filter for data sufficiency","title":"Case study: Data","text":"student records near lower upper terms bound available data must excluded prevent false summaries involving timely program completion. apply filter, determine timely completion term data sufficiency. Creating variables. Using information term, add timely_term variable well supporting variables used construction. may view function’s help page running Creating variables. Using information term, add data_sufficiency variable well supporting variables used construction. may view function’s help page running Filtering. filter retain observations data sufficient drop unnecessary columns. result 111,932 observations 63,952 unique students.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, term) DT[] #>                mcid   cip6 term_i     level_i adj_span timely_term #>              <char> <char> <char>      <char>    <num>      <char> #>      1: MID25783135 520101  19911 01 Freshman        6       19963 #>      2: MID25783156 040201  20011 01 Freshman        6       20063 #>      3: MID25783162 140102  19921 01 Freshman        6       19973 #>      4: MID25783162 520301  19921 01 Freshman        6       19973 #>      5: MID25783162 521401  19921 01 Freshman        6       19973 #>     ---                                                            #> 161692: MID26697682 240101  20163 01 Freshman        6       20221 #> 161693: MID26697685 300000  20151 01 Freshman        6       20203 #> 161694: MID26697685 521201  20151 01 Freshman        6       20203 #> 161695: MID26697689 240101  20163   04 Senior        3       20191 #> 161696: MID26697702 240101  20161 01 Freshman        6       20213 ? add_timely_term # Determine data sufficiency for every student DT <- add_data_sufficiency(DT, term) DT[] #>                mcid   cip6     level_i adj_span timely_term term_i lower_limit #>              <char> <char>      <char>    <num>      <char> <char>      <char> #>      1: MID25783135 520101 01 Freshman        6       19963  19911       19871 #>      2: MID25783156 040201 01 Freshman        6       20063  20011       19871 #>      3: MID25783162 140102 01 Freshman        6       19973  19921       19871 #>      4: MID25783162 520301 01 Freshman        6       19973  19921       19871 #>      5: MID25783162 521401 01 Freshman        6       19973  19921       19871 #>     ---                                                                        #> 161692: MID26697682 240101 01 Freshman        6       20221  20163       20021 #> 161693: MID26697685 300000 01 Freshman        6       20203  20151       20021 #> 161694: MID26697685 521201 01 Freshman        6       20203  20151       20021 #> 161695: MID26697689 240101   04 Senior        3       20191  20163       20021 #> 161696: MID26697702 240101 01 Freshman        6       20213  20161       20021 #>         upper_limit data_sufficiency #>              <char>           <char> #>      1:       20036          include #>      2:       20036    exclude-upper #>      3:       20036          include #>      4:       20036          include #>      5:       20036          include #>     ---                              #> 161692:       20164    exclude-upper #> 161693:       20164    exclude-upper #> 161694:       20164    exclude-upper #> 161695:       20164    exclude-upper #> 161696:       20164    exclude-upper ? add_data_sufficiency # Retain observations having sufficient data DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid, cip6)] DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>      4: MID25783162 521401 #>      5: MID25783178 140102 #>     ---                    #> 111928: MID26697576 521401 #> 111929: MID26697599 110401 #> 111930: MID26697599 521201 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-degree-seeking","dir":"Articles","previous_headings":"","what":"Filter for degree-seeking","title":"Case study: Data","text":"studying stickiness, exclude non-degree-seeking students. filter students using student data contains degree seeking students. Filtering. inner join student returns rows matching IDs data frames, selected columns. result 111,932 observations. (change expected example students midfielddata practice data degree-seeking.)","code":"# Inner join that filters DT DT <- DT[student, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>      4: MID25783162 521401 #>      5: MID25783178 140102 #>     ---                    #> 111928: MID26697576 521401 #> 111929: MID26697599 110401 #> 111930: MID26697599 521201 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Case study: Data","text":"filter program, construct data frame labels four engineering programs keyed US Classification Instructional Programs (CIP) codes. codes bundled midfieldr cip data set. cip6 variable data 6-digit code programs students enrolled given term. already searched cip data set programs, report results: Civil Engineering CIPs start 1408, Electrical Engineering 1410, Mechanical Engineering 1419, Industrial/Systems Engineering 1427, 1435, 1436, 1437. Filtering Gather 6-digit CIP codes programs case study. Drop unnecessary variables. keep cip4name , engineering least, 4-digit name tends disciplinary departmental name. may view function’s help page running Creating variables. Add variable label 15 programs one four conventional program abbreviations use comparing metrics, .e., Civil (CE), Electrical (EE), Mechanical (), Industrial/Systems Engineering (ISE). Joining. checked new abbreviations correctly represent programs, join program names working data frame using left-outer join return selected rows. Filtering. instances NA programs dropped. result 7661 observations 7133 unique students. Filtering. program label can associated multiple CIP codes. drop code filter remove duplicates ensure unique combinations ID program. result 7660 observations 7133 unique students. Creating variables. Add variable label group “ever” enrolled distinguish group graduates created next. Copy data frame new name save later.","code":"# Gather program CIP codes study_program <- filter_search(cip, keep_text = c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) study_program <- study_program[, .(cip6, cip4name)] study_program[] #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 142701                                    Systems Engineering #> 13: 143501                                 Industrial Engineering #> 14: 143601                              Manufacturing Engineering #> 15: 143701                                    Operations Research ? filter_search # Assign four program names by CIP code study_program[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )]  # Confirm that abbreviations match the longer program names print(study_program[, .(cip4name, program)]) #>                                                   cip4name program #>                                                     <char>  <char> #>  1:                                      Civil Engineering      CE #>  2:                                      Civil Engineering      CE #>  3:                                      Civil Engineering      CE #>  4:                                      Civil Engineering      CE #>  5:                                      Civil Engineering      CE #>  6:                                      Civil Engineering      CE #>  7: Electrical, Electronics and Communications Engineering      EE #>  8: Electrical, Electronics and Communications Engineering      EE #>  9: Electrical, Electronics and Communications Engineering      EE #> 10: Electrical, Electronics and Communications Engineering      EE #> 11:                                 Mechanical Engineering      ME #> 12:                                    Systems Engineering     ISE #> 13:                                 Industrial Engineering     ISE #> 14:                              Manufacturing Engineering     ISE #> 15:                                    Operations Research     ISE # Left-outer join to DT DT <- study_program[DT, .(mcid, cip6, program), on = c(\"cip6\")] DT[] #>                mcid   cip6 program #>              <char> <char>  <char> #>      1: MID25783135 520101    <NA> #>      2: MID25783162 140102    <NA> #>      3: MID25783162 520301    <NA> #>      4: MID25783162 521401    <NA> #>      5: MID25783178 140102    <NA> #>     ---                            #> 111928: MID26697576 521401    <NA> #> 111929: MID26697599 110401    <NA> #> 111930: MID26697599 521201    <NA> #> 111931: MID26697615 500901    <NA> #> 111932: MID26697623 451001    <NA> # Retain observations in our four programs DT <- DT[!is.na(program)] DT[] #>              mcid   cip6 program #>            <char> <char>  <char> #>    1: MID25783178 143501     ISE #>    2: MID25783441 140801      CE #>    3: MID25783491 141001      EE #>    4: MID25783912 143501     ISE #>    5: MID25784025 141901      ME #>   ---                            #> 7657: MID26696958 141901      ME #> 7658: MID26696967 141901      ME #> 7659: MID26697163 141901      ME #> 7660: MID26697444 141901      ME #> 7661: MID26697447 141001      EE # Drop duplicate rows DT[, cip6 := NULL] DT <- unique(DT) DT[] #>              mcid program #>            <char>  <char> #>    1: MID25783178     ISE #>    2: MID25783441      CE #>    3: MID25783491      EE #>    4: MID25783912     ISE #>    5: MID25784025      ME #>   ---                     #> 7656: MID26696958      ME #> 7657: MID26696967      ME #> 7658: MID26697163      ME #> 7659: MID26697444      ME #> 7660: MID26697447      EE # Conclude development of the ever-enrolled observations ever <- copy(DT) ever[, group := \"ever\"] ever[] #>              mcid program  group #>            <char>  <char> <char> #>    1: MID25783178     ISE   ever #>    2: MID25783441      CE   ever #>    3: MID25783491      EE   ever #>    4: MID25783912     ISE   ever #>    5: MID25784025      ME   ever #>   ---                            #> 7656: MID26696958      ME   ever #> 7657: MID26696967      ME   ever #> 7658: MID26697163      ME   ever #> 7659: MID26697444      ME   ever #> 7660: MID26697447      EE   ever"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-graduate-subset","dir":"Articles","previous_headings":"","what":"Gather graduate subset","title":"Case study: Data","text":"Filtering. Students potentially counted graduates must subset ever enrolled population. re-initialize working data frame, retaining unique IDs . Filtering. inner join degree returns rows matching IDs data frames, selected columns. result 5390 observations 5390 unique students. IDs already filtered data sufficiency degree-seeking.","code":"# Unique IDs of students ever enrolled in the study programs DT <- DT[, .(mcid)] DT <- unique(DT) DT[] #>              mcid #>            <char> #>    1: MID25783178 #>    2: MID25783441 #>    3: MID25783491 #>    4: MID25783912 #>    5: MID25784025 #>   ---             #> 7129: MID26696958 #> 7130: MID26696967 #> 7131: MID26697163 #> 7132: MID26697444 #> 7133: MID26697447 # Inner join that filters DT DT <- DT[degree, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] DT[] #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783441 140801 #>    3: MID25783491 141001 #>    4: MID25783912 143501 #>    5: MID25784489 140801 #>   ---                    #> 5386: MID26696771 141001 #> 5387: MID26696967 141901 #> 5388: MID26697163 141901 #> 5389: MID26697444 240199 #> 5390: MID26697447 141001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-by-completion-status","dir":"Articles","previous_headings":"","what":"Filter by completion status","title":"Case study: Data","text":"counted graduate stickiness metric, student must complete program timely manner (default 6 years admission, reduced spans transfer students). Add variables. Completion status requires timely completion term variable. Creating variables. Using information degree, add completion_status variable well supporting variables used construction. may view function’s help page running Filtering. Retain records “positive” completion status (.e. completion 6 years less) drop unnecessary variables. result 4614 unique observations.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, term) DT[] #>              mcid   cip6 term_i      level_i adj_span timely_term #>            <char> <char> <char>       <char>    <num>      <char> #>    1: MID25783178 143501  19946  01 Freshman        6       20003 #>    2: MID25783441 140801  19921  01 Freshman        6       19973 #>    3: MID25783491 141001  19961  01 Freshman        6       20013 #>    4: MID25783912 143501  19971  01 Freshman        6       20023 #>    5: MID25784489 140801  19891  01 Freshman        6       19943 #>   ---                                                             #> 5386: MID26696771 141001  20101 02 Sophomore        5       20143 #> 5387: MID26696967 141901  20101  01 Freshman        6       20153 #> 5388: MID26697163 141901  20101 02 Sophomore        5       20143 #> 5389: MID26697444 240199  20101  01 Freshman        6       20153 #> 5390: MID26697447 141001  20111  01 Freshman        6       20163 # Determine program completion status for every student DT <- add_completion_status(DT, degree) DT[] #>              mcid   cip6 term_i      level_i adj_span timely_term term_degree #>            <char> <char> <char>       <char>    <num>      <char>      <char> #>    1: MID25783178 143501  19946  01 Freshman        6       20003       20001 #>    2: MID25783441 140801  19921  01 Freshman        6       19973       19963 #>    3: MID25783491 141001  19961  01 Freshman        6       20013       20001 #>    4: MID25783912 143501  19971  01 Freshman        6       20023       20001 #>    5: MID25784489 140801  19891  01 Freshman        6       19943       19931 #>   ---                                                                         #> 5386: MID26696771 141001  20101 02 Sophomore        5       20143       20143 #> 5387: MID26696967 141901  20101  01 Freshman        6       20153       20141 #> 5388: MID26697163 141901  20101 02 Sophomore        5       20143       20133 #> 5389: MID26697444 240199  20101  01 Freshman        6       20153       20151 #> 5390: MID26697447 141001  20111  01 Freshman        6       20163       20154 #>       completion completion_status #>           <lgcl>            <char> #>    1:       TRUE            timely #>    2:       TRUE            timely #>    3:       TRUE            timely #>    4:       TRUE            timely #>    5:       TRUE            timely #>   ---                              #> 5386:       TRUE            timely #> 5387:       TRUE            timely #> 5388:       TRUE            timely #> 5389:       TRUE            timely #> 5390:       TRUE            timely ? add_completion_status # Retain timely completers DT <- DT[completion_status == \"timely\"] DT <- DT[, .(mcid, cip6)] DT[] #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783441 140801 #>    3: MID25783491 141001 #>    4: MID25783912 143501 #>    5: MID25784489 140801 #>   ---                    #> 4610: MID26696771 141001 #> 4611: MID26696967 141901 #> 4612: MID26697163 141901 #> 4613: MID26697444 240199 #> 4614: MID26697447 141001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-by-program-1","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Case study: Data","text":"join program names working data frame using left-outer join return selected rows. filter retain program names NA. result 3552 unique observations. Creating variables. Add variable label group “grad” distinguish group ever enrolled students created earlier.","code":"# Left-outer join to DT DT <- study_program[DT, .(mcid, program), on = c(\"cip6\")] DT <- DT[!is.na(program)]  # Unique observations DT <- unique(DT) DT[] #>              mcid program #>            <char>  <char> #>    1: MID25783178     ISE #>    2: MID25783441      CE #>    3: MID25783491      EE #>    4: MID25783912     ISE #>    5: MID25784489      CE #>   ---                     #> 3548: MID26696738      ME #> 3549: MID26696771      EE #> 3550: MID26696967      ME #> 3551: MID26697163      ME #> 3552: MID26697447      EE # Conclude development of the graduate observations grad <- copy(DT) grad[, group := \"grad\"] grad[] #>              mcid program  group #>            <char>  <char> <char> #>    1: MID25783178     ISE   grad #>    2: MID25783441      CE   grad #>    3: MID25783491      EE   grad #>    4: MID25783912     ISE   grad #>    5: MID25784489      CE   grad #>   ---                            #> 3548: MID26696738      ME   grad #> 3549: MID26696771      EE   grad #> 3550: MID26696967      ME   grad #> 3551: MID26697163      ME   grad #> 3552: MID26697447      EE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"combine-ever-and-grad","dir":"Articles","previous_headings":"","what":"Combine ever and grad","title":"Case study: Data","text":"Binding. Combine two data frames matching column names.","code":"# Combine two data frames DT <- rbindlist(list(ever, grad), use.names = TRUE) DT[] #>               mcid program  group #>             <char>  <char> <char> #>     1: MID25783178     ISE   ever #>     2: MID25783441      CE   ever #>     3: MID25783491      EE   ever #>     4: MID25783912     ISE   ever #>     5: MID25784025      ME   ever #>    ---                            #> 11208: MID26696738      ME   grad #> 11209: MID26696771      EE   grad #> 11210: MID26696967      ME   grad #> 11211: MID26697163      ME   grad #> 11212: MID26697447      EE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"add-demographics","dir":"Articles","previous_headings":"","what":"Add demographics","title":"Case study: Data","text":"Creating variables. Using columns student, add variables race/ethnicity sex using left-outer join. rows columns DT returned two columns added student. result 11,212 observations 7133 unique students. IDs labeled “grad” subset labeled “ever”.","code":"# Selecting columns from student student_cols <- student[, .(mcid, race, sex)]  # Add them to DT with a left outer join DT <- student_cols[DT, on = c(\"mcid\")] DT[] #>               mcid            race    sex program  group #>             <char>          <char> <char>  <char> <char> #>     1: MID25783178           Black   Male     ISE   ever #>     2: MID25783441           White   Male      CE   ever #>     3: MID25783491           White   Male      EE   ever #>     4: MID25783912           White   Male     ISE   ever #>     5: MID25784025           Black   Male      ME   ever #>    ---                                                   #> 11208: MID26696738           White   Male      ME   grad #> 11209: MID26696771           White Female      EE   grad #> 11210: MID26696967           White   Male      ME   grad #> 11211: MID26697163 Hispanic/Latinx   Male      ME   grad #> 11212: MID26697447           Asian   Male      EE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"review","dir":"Articles","previous_headings":"","what":"Review","title":"Case study: Data","text":"better grasp structure data, can review selected sets observations ID. first example, ID produces one observation . student enrolled Civil Engineering completion, , timely. next example, ID produces two observations indicating student enrolled Civil Engineering timely graduate program. next example, ID produces two observations indicating student enrolled Electrical Engineering Mechanical Engineering timely graduate neither program. next example, ID produces three observations indicating student enrolled Electrical Engineering Civil Engineering timely graduate Civil.","code":"DT[mcid == \"MID26694225\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID26694225  White   Male      CE   ever DT[mcid == \"MID25786154\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID25786154  White Female      CE   ever #> 2: MID25786154  White Female      CE   grad DT[mcid == \"MID25868925\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID25868925  Asian Female      EE   ever #> 2: MID25868925  Asian Female      ME   ever DT[mcid == \"MID26526757\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID26526757  Asian Female      CE   ever #> 2: MID26526757  Asian Female      EE   ever #> 3: MID26526757  Asian Female      CE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Case study: Data","text":"Starting student, term, degree data tables, filtered data data sufficiency, degree seeking, program, timely completion four programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) processed data obtain observations needed determine stickiness. Write file. Results like , used inputs calculating summary statistics metrics, often written file intermediate result. case, data frame bundled midfieldr study_observations. may view help page running","code":"? study_observations"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Case study: Data","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Import data data(student, term, degree)  # Gather ever enrolled DT <- copy(term) DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # Filter for data sufficiency DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid, cip6)]  # Filter for degree-seeking DT <- DT[student, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Filter by program study_program <- filter_search(cip, keep_text = c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) study_program <- study_program[, .(cip6, cip6name)] study_program[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] DT <- study_program[DT, .(mcid, cip6, program), on = c(\"cip6\")] DT <- DT[!is.na(program)] DT[, cip6 := NULL] DT <- unique(DT) ever <- copy(DT) ever[, group := \"ever\"]  # Gather graduate subset DT <- DT[, .(mcid)] DT <- unique(DT) DT <- DT[degree, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Filter by completion status DT <- add_timely_term(DT, midfield_term = term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"positive\"] DT <- DT[, .(mcid, cip6)]  # Filter by program DT <- study_program[DT, .(mcid, program), on = c(\"cip6\")] DT <- DT[!is.na(program)] DT <- unique(DT) grad <- copy(DT) grad[, group := \"grad\"]  # Combine two data frames and match the column names DT <- rbindlist(list(ever, grad), use.names = TRUE)  # Add demographics student_cols <- student[, .(mcid, race, sex)] DT <- student_cols[DT, on = c(\"mcid\")]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Case study: Results","text":"goal segment group summarize observations saved previously, calculate stickiness metric, display results. writing script follow along, start packages:","code":"# Packages library(\"midfieldr\") suppressPackageStartupMessages(library(\"data.table\")) suppressPackageStartupMessages(library(\"ggplot2\"))  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE )"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"Case study: Results","text":"Copying. Copy data file study_observations containing final set case study “ever” “grad” observations developed previous segment. data bundled midfieldr. View data set help page running","code":"# Copy the case study observations DT <- copy(study_observations) DT[] #>               mcid            race    sex program  group #>             <char>          <char> <char>  <char> <char> #>     1: MID25783178           Black   Male     ISE   ever #>     2: MID25783441           White   Male      CE   ever #>     3: MID25783491           White   Male      EE   ever #>     4: MID25783912           White   Male     ISE   ever #>     5: MID25784025           Black   Male      ME   ever #>    ---                                                   #> 11208: MID26696738           White   Male      ME   grad #> 11209: MID26696771           White Female      EE   grad #> 11210: MID26696967           White   Male      ME   grad #> 11211: MID26697163 Hispanic/Latinx   Male      ME   grad #> 11212: MID26697447           Asian   Male      EE   grad # Run in Console to view help page ? study_observations"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"group-and-summarize","dir":"Articles","previous_headings":"","what":"Group and summarize","title":"Case study: Results","text":"calculate stickiness, want count number students ever enrolled programs number students graduating programs, grouped race/ethnicity sex. grouping variables columns data set (race, sex, program, group)—structure designed support specific analytical goal. can now group summarize one line code.","code":"# Group and summarize DT <- DT[, .N, by = c(\"group\", \"program\", \"race\", \"sex\")] DT[] #>       group program            race    sex     N #>      <char>  <char>          <char> <char> <int> #>   1:   ever     ISE           Black   Male   103 #>   2:   ever      CE           White   Male  1043 #>   3:   ever      EE           White   Male  1227 #>   4:   ever     ISE           White   Male   494 #>   5:   ever      ME           Black   Male   202 #>  ---                                             #> 101:   grad     ISE   International Female     3 #> 102:   grad     ISE   Other/Unknown Female     1 #> 103:   grad      EE Native American   Male     1 #> 104:   grad      ME Native American Female     1 #> 105:   grad      CE Native American   Male     1"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"compute-metric","dir":"Articles","previous_headings":"","what":"Compute metric","title":"Case study: Results","text":"Stickiness ratio number graduates number students ever enrolled program. able divide grad / ever like two values row. dcast() function accomplishes us. operation essentially transformation block records row records—process known number different names, e.g., pivot, crosstab, unstack, spread, widen (Mount & Zumel, 2019). step leaves graphing variables (program, race/ethnicity, sex) place. calculate percent stickiness. form, data bundled midfieldr study_results data set. can view help page running","code":"# Transform to row-record form DT <- dcast(DT, program + sex + race ~ group, value.var = \"N\", fill = 0) DT[] #>     program    sex            race  ever  grad #>      <char> <char>          <char> <int> <int> #>  1:      CE Female           Asian    16     9 #>  2:      CE Female           Black    49    15 #>  3:      CE Female Hispanic/Latinx    10     5 #>  4:      CE Female   International     1     0 #>  5:      CE Female   Other/Unknown     6     2 #> ---                                            #> 51:      ME   Male Hispanic/Latinx    76    29 #> 52:      ME   Male   International    36    16 #> 53:      ME   Male Native American    14     4 #> 54:      ME   Male   Other/Unknown    43    20 #> 55:      ME   Male           White  1776   918 DT[, stick := round(100 * grad / ever, 1)] DT[] #>     program    sex            race  ever  grad stick #>      <char> <char>          <char> <int> <int> <num> #>  1:      CE Female           Asian    16     9  56.2 #>  2:      CE Female           Black    49    15  30.6 #>  3:      CE Female Hispanic/Latinx    10     5  50.0 #>  4:      CE Female   International     1     0   0.0 #>  5:      CE Female   Other/Unknown     6     2  33.3 #> ---                                                  #> 51:      ME   Male Hispanic/Latinx    76    29  38.2 #> 52:      ME   Male   International    36    16  44.4 #> 53:      ME   Male Native American    14     4  28.6 #> 54:      ME   Male   Other/Unknown    43    20  46.5 #> 55:      ME   Male           White  1776   918  51.7 ? study_results"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Case study: Results","text":"take several additional steps prepare data dissemination tables charts. Filtering. preserve anonymity people involved, remove observations 10 fewer graduates. Filtering. Let us assume study focuses “domestic” students known race/ethnicity. case, omit observations labeled “International” /Unknown”. Creating variables. found useful report data variable combines race/ethnicity sex. Recoding values. Readers can readily interpret charts tables programs un-abbreviated. one quantitative variable (stickiness) every combination levels two categorical variables (program race/ethnicity/sex), data multiway data (Cleveland, 1993). one orders categorical variables critical visualizing effects. Conditioning. Convert two categorical variables ordered factors support ordering rows panels chart. may view function’s help page running column program_stick determines order programs chart; race_sex_stick determines order race/ethnicity/sex groupings; values stick quantitative values graphed.","code":"# Preserve anonymity DT <- DT[grad >= 10] DT[] #>     program    sex            race  ever  grad stick #>      <char> <char>          <char> <int> <int> <num> #>  1:      CE Female           Black    49    15  30.6 #>  2:      CE Female           White   304   156  51.3 #>  3:      CE   Male           Asian    34    17  50.0 #>  4:      CE   Male           Black    90    25  27.8 #>  5:      CE   Male Hispanic/Latinx    53    22  41.5 #> ---                                                  #> 27:      ME   Male           Black   202    65  32.2 #> 28:      ME   Male Hispanic/Latinx    76    29  38.2 #> 29:      ME   Male   International    36    16  44.4 #> 30:      ME   Male   Other/Unknown    43    20  46.5 #> 31:      ME   Male           White  1776   918  51.7 # Filter by study design DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")] DT[] #>     program    sex            race  ever  grad stick #>      <char> <char>          <char> <int> <int> <num> #>  1:      CE Female           Black    49    15  30.6 #>  2:      CE Female           White   304   156  51.3 #>  3:      CE   Male           Asian    34    17  50.0 #>  4:      CE   Male           Black    90    25  27.8 #>  5:      CE   Male Hispanic/Latinx    53    22  41.5 #> ---                                                  #> 23:      ME Female           White   261   109  41.8 #> 24:      ME   Male           Asian   118    58  49.2 #> 25:      ME   Male           Black   202    65  32.2 #> 26:      ME   Male Hispanic/Latinx    76    29  38.2 #> 27:      ME   Male           White  1776   918  51.7 DT[, race_sex := paste(race, sex)] DT[, c(\"race\", \"sex\") := NULL] setcolorder(DT, c(\"program\", \"race_sex\")) DT[] #>     program             race_sex  ever  grad stick #>      <char>               <char> <int> <int> <num> #>  1:      CE         Black Female    49    15  30.6 #>  2:      CE         White Female   304   156  51.3 #>  3:      CE           Asian Male    34    17  50.0 #>  4:      CE           Black Male    90    25  27.8 #>  5:      CE Hispanic/Latinx Male    53    22  41.5 #> ---                                                #> 23:      ME         White Female   261   109  41.8 #> 24:      ME           Asian Male   118    58  49.2 #> 25:      ME           Black Male   202    65  32.2 #> 26:      ME Hispanic/Latinx Male    76    29  38.2 #> 27:      ME           White Male  1776   918  51.7 DT[, program := fcase(   program %like% \"CE\", \"Civil Engineering\",   program %like% \"EE\", \"Electrical Engineering\",   program %like% \"ME\", \"Mechanical Engineering\",   program %like% \"ISE\", \"Industrial/Systems Engineering\" )] DT[] #>                    program             race_sex  ever  grad stick #>                     <char>               <char> <int> <int> <num> #>  1:      Civil Engineering         Black Female    49    15  30.6 #>  2:      Civil Engineering         White Female   304   156  51.3 #>  3:      Civil Engineering           Asian Male    34    17  50.0 #>  4:      Civil Engineering           Black Male    90    25  27.8 #>  5:      Civil Engineering Hispanic/Latinx Male    53    22  41.5 #> ---                                                               #> 23: Mechanical Engineering         White Female   261   109  41.8 #> 24: Mechanical Engineering           Asian Male   118    58  49.2 #> 25: Mechanical Engineering           Black Male   202    65  32.2 #> 26: Mechanical Engineering Hispanic/Latinx Male    76    29  38.2 #> 27: Mechanical Engineering           White Male  1776   918  51.7 # Convert categorical variables to factors DT <- condition_multiway(DT,   x = \"stick\",   yy = c(\"program\", \"race_sex\"),   order_by = \"percent\",   param_col = c(\"grad\", \"ever\") ) DT[] #>                    program             race_sex  grad  ever stick program_grad #>                     <fctr>               <fctr> <num> <num> <num>        <num> #>  1:      Civil Engineering         Black Female    15    49  30.6          793 #>  2:      Civil Engineering         White Female   156   304  51.3          793 #>  3:      Civil Engineering           Asian Male    17    34  50.0          793 #>  4:      Civil Engineering           Black Male    25    90  27.8          793 #>  5:      Civil Engineering Hispanic/Latinx Male    22    53  41.5          793 #> ---                                                                            #> 23: Mechanical Engineering         White Female   109   261  41.8         1215 #> 24: Mechanical Engineering           Asian Male    58   118  49.2         1215 #> 25: Mechanical Engineering           Black Male    65   202  32.2         1215 #> 26: Mechanical Engineering Hispanic/Latinx Male    29    76  38.2         1215 #> 27: Mechanical Engineering           White Male   918  1776  51.7         1215 #>     program_ever race_sex_grad race_sex_ever program_stick race_sex_stick #>            <num>         <num>         <num>         <num>          <num> #>  1:         1573           139           362          50.4           38.4 #>  2:         1573           446           972          50.4           45.9 #>  3:         1573           195           406          50.4           48.0 #>  4:         1573           233           682          50.4           34.2 #>  5:         1573            93           224          50.4           41.5 #> ---                                                                       #> 23:         2530           446           972          48.0           45.9 #> 24:         2530           195           406          48.0           48.0 #> 25:         2530           233           682          48.0           34.2 #> 26:         2530            93           224          48.0           41.5 #> 27:         2530          2248          4540          48.0           49.5 ? condition_multiway"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"charts","dir":"Articles","previous_headings":"","what":"Charts","title":"Case study: Results","text":"first multiway chart, rows programs panels people, facilitating comparisons different program single group. Rows panels ordered bottom top order increasing stickiness.  Alternatively, can consider dual chart, swapping roles panels rows. rows people panels programs, facilitating comparisons different people within program. many years publishing research using MIDFIELD data, placing people rows multiway chart perhaps frequently used design.  Reminder. practice data, research data—suitable learning student-record analysis, drawing inferences program attributes student experiences. chart illustrates importance ordering rows panels. conclude Industrial/Systems Engineering stickiest program four, followed Civil, Mechanical, Electrical descending order. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. example, Asian Female students asymmetrically higher Mechanical Engineering asymmetrically lower Industrial/Systems Engineering.","code":"ggplot(DT, aes(x = stick, y = program)) +   facet_wrap(vars(race_sex), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\") ggplot(DT, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"Case study: Results","text":"Data tables often needed publication. example, format data conventional row-record form groups people first column labeling rows program names labeling remaining columns. Program stickiness percent ratio (grad/ever) parentheses, .e., number program graduates number students ever enrolled program. Groups numbers reporting threshold denoted NA omitted.","code":"# Select the columns I want for the table tbl <- DT[, .(program, race_sex, grad, ever, stick)]  # Shorten the names that will appear in the header row tbl[, program := fcase(   program %like% \"Civil Engineering\", \"Civil\",   program %like% \"Electrical Engineering\", \"Electrical\",   program %like% \"Mechanical Engineering\", \"Mechanical\",   program %like% \"Industrial/Systems Engineering\", \"Industrial/Sys\" )]  # Combine three columns into one character column tbl[, results := paste0(\"(\", grad, \"/\", ever, \") \", format(stick, nsmall = 1))]  # Transform from block records to row records tbl <- dcast(tbl, race_sex ~ program, value.var = \"results\")  # Change factor to character so the rows can b alphabetized tbl[, race_sex := as.character(race_sex)] tbl <- tbl[order(race_sex)]  # Edit one column header setnames(tbl, old = \"race_sex\", new = \"Group\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Case study: Results","text":"Starting prepared data (case study observations), compute longitudinal stickiness four programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) grouped program, race/ethnicity, sex. create data table charts disseminate results. Write file. Results like just prior dissemination preparation step often written file intermediate result. case, pre-dissemination data frame bundled midfieldr study_results.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Case study: Results","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# Packages library(\"midfieldr\") suppressPackageStartupMessages(library(\"data.table\")) suppressPackageStartupMessages(library(\"ggplot2\"))  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # Copy the case study observations DT <- copy(study_observations)  # Group and summarize DT <- DT[, .N, by = c(\"group\", \"program\", \"race\", \"sex\")]  # Compute the metric DT <- dcast(DT, program + sex + race ~ group, value.var = \"N\", fill = 0) DT[, stick := round(100 * grad / ever, 1)]  # Prepare for dissemination DT <- DT[grad >= 10] DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")] DT[, race_sex := paste(race, sex)] DT[, c(\"race\", \"sex\") := NULL] setcolorder(DT, c(\"program\", \"race_sex\")) DT[, program := fcase(   program %like% \"CE\", \"Civil Engineering\",   program %like% \"EE\", \"Electrical Engineering\",   program %like% \"ME\", \"Mechanical Engineering\",   program %like% \"ISE\", \"Industrial/Systems Engineering\" )]  # Convert categorical variables to factors DT <- condition_multiway(DT,   x = \"stick\",   yy = c(\"program\", \"race_sex\"),   order_by = \"percent\",   param_col = c(\"grad\", \"ever\") )  # Chart 1 ggplot(DT, aes(x = stick, y = program)) +   facet_wrap(vars(race_sex), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")  # Chart 2 ggplot(DT, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")  # Table tbl <- DT[, .(program, race_sex, grad, ever, stick)] tbl[, program := fcase(   program %like% \"Civil Engineering\", \"Civil\",   program %like% \"Electrical Engineering\", \"Electrical\",   program %like% \"Mechanical Engineering\", \"Mechanical\",   program %like% \"Industrial/Systems Engineering\", \"Industrial/Sys\" )] tbl[, results := paste0(\"(\", grad, \"/\", ever, \") \", format(stick, nsmall = 1))] tbl <- dcast(tbl, race_sex ~ program, value.var = \"results\") tbl[, race_sex := as.character(race_sex)] tbl <- tbl[order(race_sex)] setnames(tbl, old = \"race_sex\", new = \"Group\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Data sufficiency","text":"data range overall span academic terms student unit record data provided institution. particularly interested lower upper limits continuous range. timely completion term last term student’s program completion considered timely. many cases timely completion (TC) term 6 years admission. TC term can adjusted account transfer credits. (Currently, include adjustment co-ops.) data sufficiency criterion Student records limited available data sufficient assess timely completion without biased counts completers non-completers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"upper-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Upper-limit data sufficiency","title":"Data sufficiency","text":"students admitted near upper limit institution’s data range, available data cover insufficient number years know completion timely. illustrate, figure compare two students admitted different terms representative time spans shown timely completion. scenario, assume institution data available 1986 1996.    Student Student enters 1988 timely completion (TC) term 1994. following cases, data sufficiency criterion satisfied records included study. -1: First time college (FTIC), know first term entry term (.e., continuing student) can determine TC term. -2: Transfer student, know first term MIDFIELD institution. knowledge much time spent accumulating pre-MIDFIELD credit hours, can estimate TC term respect MIDFIELD entry level. Student B Student B enters 1993 TC term 1998, two years beyond range data. several possible cases, B-1: data limit, student completes program (timely known) B-2: data limit, student leaves data base (untimely known) B-3: data limit, student completes TC term (timely unknown) B-4: data limit, student completes TC term fails complete (untimely unknown) unknown outcomes cases B-3 B-4, including case B-1 B-2 invariably produces miscount completers non-completers. Thus criterion satisfied student B records excluded study.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"lower-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Lower-limit data sufficiency","title":"Data sufficiency","text":"determine data sufficiency record exclusions lower limit data range, compare student’s first term (non-summer) first term data range (also non-summer). two terms identical, complete unit record excluded. illustrate three scenarios described .    Student C Student C makes first appearance database term following data lower limit. conditions student C (FTIC transfer) identical student , thus student C included study. Student D Student D enters institution lower limit data range (“continuing” student) enter institution lower limit precisely. D-1: student D continuing, regardless status (FTIC transfer), making estimate TC term invariably leads false counts knowledge much time spent accumulating credit hours MIDFIELD institution lower data limit. Including D-1 also produces false counts student E (discussed ). D-2: student D continuing, , first time entry MIDFIELD institution lower data limit (, 1986), include study . Unfortunately, distinguish continuing students. exclude D-1 inherently excludes D-2 well. Student E Student E enters institution time continuing student D leaves database data lower limit term. E-1: Student E timely-complete program. case, include student D count non-completers low (E-1 cases missing), resulting inflated ratio completers non-completers. E-2: Student E timely-complete program. , include student D count completers low (E-2 cases missing), resulting diminished ratio completers non-completers. balance two effects unknowable. Since student E possibly included, Student D must also excluded.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Data sufficiency","text":"data sufficiency criterion applied metric requires counting number students complete programs timely fashion. Specific student unit records upper lower limits institution’s data range must excluded prevent false counts due insufficient data. method applying data sufficiency criterion exclude observations present non-summer lower limit institution data range timely completion term exceeds upper limit data range method implemented add_data_sufficiency().","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Data sufficiency","text":"four MIDFIELD data tables, course term inclusive, observations students enrolled course term. Since term smaller two, generally start analysis term data frame. writing script follow along, start packages: Importing. Load midfielddata data table. Copy term data set create working data frame (DT), leaving term unaltered later use. result 710,841 observations. usually note number observations change. apply data sufficiency criterion, two variables required: student’s ID timely completion term. Filtering. illustrating functions, need start ID column . form, data frame duplicate rows multiple terms student enrolled program. filter unique IDs. result 94,028 unique observations.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # Load data set from midfielddata data(term)  # Create a working data frame DT <- copy(term) str(DT) #> Classes 'data.table' and 'data.frame':   710841 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783156\" \"MID25783156\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20011\" \"20013\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"040201\" \"040201\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 14 16 16 17 18 18 17 9 ... #>  $ hours_term_attempt : num  19 14 14 16 16 17 18 18 17 13 ... #>  $ hours_cumul        : num  19 33 14 30 46 63 81 99 17 26 ... #>  $ hours_cumul_attempt: num  19 33 14 30 46 63 81 99 17 30 ... #>  $ gpa_term           : num  2.47 3.21 3.07 3.62 3.13 3.82 4 3.5 2.53 1.61 ... #>  $ gpa_cumul          : num  2.47 2.79 3.07 3.36 3.28 3.42 3.55 3.54 2.53 2.13 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # Retain the minimum number of columns DT <- DT[, .(mcid)] DT <- unique(DT) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783156 #>     3: MID25783162 #>     4: MID25783178 #>     5: MID25783188 #>    ---             #> 94024: MID26697680 #> 94025: MID26697682 #> 94026: MID26697685 #> 94027: MID26697689 #> 94028: MID26697702 # Count unique IDs length(unique(DT$mcid)) #> [1] 94028"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"add_timely_term","dir":"Articles","previous_headings":"","what":"add_timely_term()","title":"Data sufficiency","text":"Starting data frame Student Unit Record (SUR) observations (like DT ) includes ID variable, add timely completion term column using add_timely_term(). can view function help page running, arguments : dframe Data frame student unit record (SUR) observations keyed student ID. Required variable (column) mcid. midfield_term Data frame SUR term observations keyed student ID. Default term. Required variables (columns) mcid, term, level. span Optional integer scalar, number years define timely completion. Commonly used values 100%, 150%, 200% sched_span. Default 6 years. sched_span Optional integer scalar, number years institution officially schedules completing program. Default 4 years. function adds four columns SUR data frame: timely_term result plus three supporting variables: term_i initial term student’s longitudinal record, encoded YYYYT level_i student level (01 Freshman, 02 Sophomore, etc.) initial term adj_span integer span years timely completion adjusted student’s initial level Closer look. Let’s examine two specific observations illustrate. student’s initial term Fall 1991 (encoded 19911) initial level 01 Freshman. number years timely completion 6 years, , academic years 1991–92, 92–93, 93–94, 94–95, 95–96, 96–97. Thus timely completion term Spring 1997 (encoded 19963). student’s initial term Spring 2017 (encoded 20163) initial level 04 Senior infer completed three years program, yielding adjusted span 3 years. three years encompass terms 20163–20171, 20173–20181, 20183–20191, yielding timely completion term Fall 2019 (encoded 20191). Usage. following implementations yield identical results, vignettes, typically write required arguments without names remind us midfielddata table used, e.g., term data set can named something term. example, working “toy” (exercise) data sets bundled midfieldr, write something like , Caution! Silent overwriting! Existing columns names one added columns deleted replaced. Using toy data illustrate, ’ll drop columns added timely term except adj_span. Reapplying function, adj_span column silently deleted replaced.","code":"# Run in Console to view help page ? add_timely_term # Display timely term and supporting variables DT <- add_timely_term(DT, term) DT[] #>               mcid term_i     level_i adj_span timely_term #>             <char> <char>      <char>    <num>      <char> #>     1: MID25783135  19911 01 Freshman        6       19963 #>     2: MID25783156  20011 01 Freshman        6       20063 #>     3: MID25783162  19921 01 Freshman        6       19973 #>     4: MID25783178  19946 01 Freshman        6       20003 #>     5: MID25783188  19991 01 Freshman        6       20043 #>    ---                                                     #> 94024: MID26697680  20163 01 Freshman        6       20221 #> 94025: MID26697682  20163 01 Freshman        6       20221 #> 94026: MID26697685  20151 01 Freshman        6       20203 #> 94027: MID26697689  20163   04 Senior        3       20191 #> 94028: MID26697702  20161 01 Freshman        6       20213 DT[mcid == \"MID25783135\"] #>           mcid term_i     level_i adj_span timely_term #>         <char> <char>      <char>    <num>      <char> #> 1: MID25783135  19911 01 Freshman        6       19963 DT[mcid == \"MID26697689\"] #>           mcid term_i   level_i adj_span timely_term #>         <char> <char>    <char>    <num>      <char> #> 1: MID26697689  20163 04 Senior        3       20191 # Required arguments in order and explicitly named x <- add_timely_term(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_timely_term(DT, term)  # Using the implicit default for the midfield_term argument z <- add_timely_term(DT)  # Equality test between the data tables all.equal(x, y) #> [1] TRUE all.equal(x, z) #> [1] TRUE add_timely_term(DT, term) # Using term data named something else toy_DT <- toy_student[, .(mcid)] toy_DT <- add_timely_term(toy_DT, toy_term) toy_DT[] #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #> ---                                                      #> 95: MID26622664  20081    03 Junior        4       20113 #> 96: MID26624815  20061  01 Freshman        6       20113 #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191 # Drop three columns toy_DT <- toy_DT[, c(\"term_i\", \"level_i\", \"timely_term\") := NULL] toy_DT[] #>            mcid adj_span #>          <char>    <num> #>  1: MID25784187        6 #>  2: MID25784974        5 #>  3: MID25816209        5 #>  4: MID25819358        5 #>  5: MID25828870        6 #> ---                      #> 95: MID26622664        4 #> 96: MID26624815        6 #> 97: MID26691066        6 #> 98: MID26692025        3 #> 99: MID26692254        5 toy_DT <- add_timely_term(toy_DT, toy_term) toy_DT[] #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #> ---                                                      #> 95: MID26622664  20081    03 Junior        4       20113 #> 96: MID26624815  20061  01 Freshman        6       20113 #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"add_data_sufficiency","dir":"Articles","previous_headings":"","what":"add_data_sufficiency()","title":"Data sufficiency","text":"Continuing data frame SUR observations, add data sufficiency column using add_data_sufficiency(). can view function help page running, arguments : dframe Data frame student unit record (SUR) observations keyed student ID. Required variables mcid timely_term. midfield_term Data frame SUR term observations keyed student ID. Default term. Required variables mcid, institution, term. function adds four columns SUR data frame: data_sufficiency result plus three supporting variables: term_i Character. Initial term student’s longitudinal record, encoded YYYYT. overwritten present dframe. lower_limit Character. Initial term institution’s data range, encoded YYYYT upper_limit Character. Final term institution’s data range, encoded YYYYT data sufficiency column labels observation inclusion exclusion. Possible values : “include”, indicating available data sufficient estimating timely program completion “exclude-upper”, indicating data insufficient upper limit data range “exclude-lower”, indicating data insufficient lower limit. Closer look. Let’s examine three specific observations illustrate. excerpts, data range institution Fall 1987 Summer 2003. student’s initial term Fall 1991 lower-limit exclusion apply; student’s timely completion term Spring 1996, upper-limit exclusion apply. record satisfies data sufficiency criterion. student’s initial term Fall 2001 lower-limit exclusion apply; student’s timely completion term Spring 2006, upper-limit exclusion apply. student’s initial term Fall 1987 lower-limit exclusion applies. Usage. following implementations yield identical results, , term data set can named something term. example, using “toy” data sets , Caution! Silent overwriting! case, existing columns name one added columns deleted replaced except term_i. Using toy data illustrate, ’ll drop columns added data sufficiency except upper_limit. Reapplying function, term_i column silently overwritten three columns added . Filtering. cases, retain observations data sufficient. result 63,952 unique observations.","code":"? add_data_sufficiency() # Drop unnecessary columns DT <- DT[, .(mcid, timely_term)]  # Display data sufficiency and supporting variables DT <- add_data_sufficiency(DT, term) DT[] #>               mcid timely_term term_i lower_limit upper_limit data_sufficiency #>             <char>      <char> <char>      <char>      <char>           <char> #>     1: MID25783135       19963  19911       19871       20036          include #>     2: MID25783156       20063  20011       19871       20036    exclude-upper #>     3: MID25783162       19973  19921       19871       20036          include #>     4: MID25783178       20003  19946       19871       20036          include #>     5: MID25783188       20043  19991       19871       20036    exclude-upper #>    ---                                                                         #> 94024: MID26697680       20221  20163       20021       20164    exclude-upper #> 94025: MID26697682       20221  20163       20021       20164    exclude-upper #> 94026: MID26697685       20203  20151       20021       20164    exclude-upper #> 94027: MID26697689       20191  20163       20021       20164    exclude-upper #> 94028: MID26697702       20213  20161       20021       20164    exclude-upper # Student A DT[mcid == \"MID25783135\"] #>           mcid timely_term term_i lower_limit upper_limit data_sufficiency #>         <char>      <char> <char>      <char>      <char>           <char> #> 1: MID25783135       19963  19911       19871       20036          include # Student B DT[mcid == \"MID25783156\"] #>           mcid timely_term term_i lower_limit upper_limit data_sufficiency #>         <char>      <char> <char>      <char>      <char>           <char> #> 1: MID25783156       20063  20011       19871       20036    exclude-upper # Student D DT[mcid == \"MID25783197\"] #>           mcid timely_term term_i lower_limit upper_limit data_sufficiency #>         <char>      <char> <char>      <char>      <char>           <char> #> 1: MID25783197       19923  19871       19871       20036    exclude-lower # Required arguments in order and explicitly named x <- add_data_sufficiency(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_data_sufficiency(DT, term)  # Using the implicit default for the midfield_term argument z <- add_data_sufficiency(DT)  # Equality test between the data tables all.equal(x, y) #> [1] TRUE all.equal(x, z) #> [1] TRUE # Using term data named something else toy_DT <- toy_DT[, .(mcid, timely_term)] toy_DT <- add_data_sufficiency(toy_DT, toy_term) toy_DT[] #>            mcid timely_term term_i lower_limit upper_limit data_sufficiency #>          <char>      <char> <char>      <char>      <char>           <char> #>  1: MID25784187       19943  19885       19881       19995          include #>  2: MID25784974       19931  19883       19881       19995          include #>  3: MID25816209       19923  19881       19881       19995    exclude-lower #>  4: MID25819358       19993  19946       19881       19995          include #>  5: MID25828870       19933  19881       19881       19995    exclude-lower #> ---                                                                         #> 95: MID26622664       20113  20081       19881       20081    exclude-upper #> 96: MID26624815       20113  20061       19881       20081    exclude-upper #> 97: MID26691066       20161  20103       20103       20143    exclude-lower #> 98: MID26692025       20153  20131       20103       20143    exclude-upper #> 99: MID26692254       20191  20143       20103       20143    exclude-upper # Drop three columns toy_DT <- toy_DT[, c(\"lower_limit\", \"data_sufficiency\") := NULL] toy_DT[] #>            mcid timely_term term_i upper_limit #>          <char>      <char> <char>      <char> #>  1: MID25784187       19943  19885       19995 #>  2: MID25784974       19931  19883       19995 #>  3: MID25816209       19923  19881       19995 #>  4: MID25819358       19993  19946       19995 #>  5: MID25828870       19933  19881       19995 #> ---                                            #> 95: MID26622664       20113  20081       20081 #> 96: MID26624815       20113  20061       20081 #> 97: MID26691066       20161  20103       20143 #> 98: MID26692025       20153  20131       20143 #> 99: MID26692254       20191  20143       20143 toy_DT <- add_data_sufficiency(toy_DT, toy_term) toy_DT[] #>            mcid timely_term term_i lower_limit upper_limit data_sufficiency #>          <char>      <char> <char>      <char>      <char>           <char> #>  1: MID25784187       19943  19885       19881       19995          include #>  2: MID25784974       19931  19883       19881       19995          include #>  3: MID25816209       19923  19881       19881       19995    exclude-lower #>  4: MID25819358       19993  19946       19881       19995          include #>  5: MID25828870       19933  19881       19881       19995    exclude-lower #> ---                                                                         #> 95: MID26622664       20113  20081       19881       20081    exclude-upper #> 96: MID26624815       20113  20061       19881       20081    exclude-upper #> 97: MID26691066       20161  20103       20103       20143    exclude-lower #> 98: MID26692025       20153  20131       20103       20143    exclude-upper #> 99: MID26692254       20191  20143       20103       20143    exclude-upper # Apply the data sufficiency criterion DT <- DT[data_sufficiency == \"include\"] DT[] #>               mcid timely_term term_i lower_limit upper_limit data_sufficiency #>             <char>      <char> <char>      <char>      <char>           <char> #>     1: MID25783135       19963  19911       19871       20036          include #>     2: MID25783162       19973  19921       19871       20036          include #>     3: MID25783178       20003  19946       19871       20036          include #>     4: MID25783195       19983  19931       19871       20036          include #>     5: MID25783220       20023  19971       19871       20036          include #>    ---                                                                         #> 63948: MID26697574       20113  20091       20021       20164          include #> 63949: MID26697576       20153  20101       20021       20164          include #> 63950: MID26697599       20153  20101       20021       20164          include #> 63951: MID26697615       20153  20101       20021       20164          include #> 63952: MID26697623       20153  20101       20021       20164          include"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Data sufficiency","text":"prepare applying data sufficiency criterion, first estimate students’ timely completion terms using add_timely_term(). label observations inclusion exclusion using add_data_sufficiency(). Subsetting population data sufficiency typically first filter applied SUR data.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-data-sufficiency.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Data sufficiency","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # Load data set from midfielddata data(term) DT <- copy(term) DT <- DT[, .(mcid)] DT <- unique(DT)  # Timely completion term DT <- add_timely_term(DT, term) DT[mcid == \"MID25783135\"] DT[mcid == \"MID26697689\"]  # Equivalent statements x <- add_timely_term(dframe = DT, midfield_term = term) y <- add_timely_term(DT, term) z <- add_timely_term(DT) all.equal(x, y) all.equal(x, z)  # Using term data named something else toy_DT <- toy_student[, .(mcid)] toy_DT <- add_timely_term(toy_DT, toy_term)  # Silent overwriting toy_DT <- toy_DT[, c(\"term_i\", \"level_i\", \"timely_term\") := NULL] toy_DT <- add_timely_term(toy_DT, toy_term)  # Data sufficiency DT <- DT[, .(mcid, timely_term)] DT <- add_data_sufficiency(DT, term) DT[mcid == \"MID25783135\"] DT[mcid == \"MID25783156\"] DT[mcid == \"MID25783197\"]  # Equivalent statements x <- add_data_sufficiency(dframe = DT, midfield_term = term) y <- add_data_sufficiency(DT, term) z <- add_data_sufficiency(DT) all.equal(x, y) all.equal(x, z)  # Using term data named something else toy_DT <- toy_DT[, .(mcid, timely_term)] toy_DT <- add_data_sufficiency(toy_DT, toy_term)  # Silent overwriting toy_DT <- toy_DT[, c(\"lower_limit\", \"data_sufficiency\") := NULL] toy_DT <- add_data_sufficiency(toy_DT, toy_term)  # Apply the data sufficiency criterion DT <- DT[data_sufficiency == \"include\"]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-degree-seeking.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Degree seeking (inner joins)","text":"filter observations retain degree-seeking students using inner join student data table. works student (unlike term) contains degree-seeking SURs .","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-degree-seeking.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Degree seeking (inner joins)","text":"writing script follow along, start packages: Importing. Load midfielddata data tables. Data sufficiency. set filtering degree-seeking, start term data filter data sufficiency described Data sufficiency vignette. steps reproduced condensed form without details. result 111,932 observations 63,952 unique IDs. number unique students smaller number observations students change programs course study. one row per unique combination student (mcid) program code (cip6). Retaining CIP variable strictly necessary degree-seeking filtering. retain assist inner-join examples.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # Load data sets from midfielddata data(student, term) # Filter for data sufficiency DT <- copy(term) DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"]  # Drop unnecessary variables DT <- DT[, .(mcid, cip6)] DT <- unique(DT) DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>      4: MID25783162 521401 #>      5: MID25783178 140102 #>     ---                    #> 111928: MID26697576 521401 #> 111929: MID26697599 521201 #> 111930: MID26697599 110401 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-degree-seeking.html","id":"inner-joins","dir":"Articles","previous_headings":"","what":"Inner joins","title":"Degree seeking (inner joins)","text":"inner join merge operation two data frame returns records match selected variables two data frames. use inner joins regularly subset observations working data frames shared columns another data frame. illustrate, filter DT data IDs “toy” (exercise) data sets bundled midfieldr. Using data.table syntax, two approaches: merge() X[Y, j] syntax. Using merge(). Using data.table merge() syntax, = FALSE argument creates inner join. first isolate ID column toy_student. Otherwise, columns data frames returned. result 135 observations 74 unique IDs. Alternatively, one can include ID selection within merge operation. Using X[Y, j]. second approach—computationally efficient—uses data.table X[Y, j] syntax. nomatch = NULL argument makes merge inner join, argument defines shared column use matching, j argument,.(mcid, cip6), defines columns data frames return. way read code loud : “Take DT, retain rows toy_student$mcid == DT$mcid, select columns mcid cip6.” inner joins, X[Y, j] Y[X, j] produce result. Confirm results. nullify key automatically assigned merge() compare equality results. Selecting columns. either method, can select columns data frames. difference merge() select columns explicitly subsetting two data frames. X[Y, j] syntax, however, can list columns returned data frames j list, , .(var1, var2, etc.), without subsetting original two data frames.","code":"# Isolate the IDs of the second data frame toy_select <- toy_student[, .(mcid)]  # Inner join to filter the observations of the first data frame merge(DT, toy_select, by = c(\"mcid\"), all = FALSE) #>             mcid   cip6 #>           <char> <char> #>   1: MID25784187 010901 #>   2: MID25784187 520801 #>   3: MID25819358 511103 #>   4: MID25819358 260502 #>   5: MID25828870 140102 #>  ---                    #> 131: MID26692025 500702 #> 132: MID26692025 131202 #> 133: MID26692254 520201 #> 134: MID26692254 400404 #> 135: MID26692254 450701 # Isolating the IDs inside the merge function merge(DT, toy_student[, .(mcid)], by = c(\"mcid\"), all = FALSE) #>             mcid   cip6 #>           <char> <char> #>   1: MID25784187 010901 #>   2: MID25784187 520801 #>   3: MID25819358 511103 #>   4: MID25819358 260502 #>   5: MID25828870 140102 #>  ---                    #> 131: MID26692025 500702 #> 132: MID26692025 131202 #> 133: MID26692254 520201 #> 134: MID26692254 400404 #> 135: MID26692254 450701 # A more computationally efficient approach DT[toy_student, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] #>             mcid   cip6 #>           <char> <char> #>   1: MID25784187 010901 #>   2: MID25784187 520801 #>   3: MID25819358 511103 #>   4: MID25819358 260502 #>   5: MID25828870 140102 #>  ---                    #> 131: MID26692025 500702 #> 132: MID26692025 131202 #> 133: MID26692254 520201 #> 134: MID26692254 400404 #> 135: MID26692254 450701 # Swap the roles of the two data frames toy_student[DT, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] #>             mcid   cip6 #>           <char> <char> #>   1: MID25784187 010901 #>   2: MID25784187 520801 #>   3: MID25819358 511103 #>   4: MID25819358 260502 #>   5: MID25828870 140102 #>  ---                    #> 131: MID26692025 500702 #> 132: MID26692025 131202 #> 133: MID26692254 520201 #> 134: MID26692254 400404 #> 135: MID26692254 450701 # Three equivalent inner joins x <- merge(DT, toy_student[, .(mcid)], by = c(\"mcid\"), all = FALSE) setkey(x, NULL) y <- DT[toy_student, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] z <- toy_student[DT, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Check equality all.equal(x, y) #> [1] TRUE all.equal(x, z) #> [1] TRUE # Selecting columns from both data frames using merge() x <- merge(DT[, .(mcid)], toy_student[, .(mcid, institution)], by = c(\"mcid\"), all = FALSE) setkey(x, NULL) x[] #>             mcid   institution #>           <char>        <char> #>   1: MID25784187 Institution M #>   2: MID25784187 Institution M #>   3: MID25819358 Institution M #>   4: MID25819358 Institution M #>   5: MID25828870 Institution M #>  ---                           #> 131: MID26692025 Institution L #> 132: MID26692025 Institution L #> 133: MID26692254 Institution L #> 134: MID26692254 Institution L #> 135: MID26692254 Institution L # Repeat using X[Y, j] syntax y <- DT[toy_student, .(mcid, institution), on = c(\"mcid\"), nomatch = NULL]  # Check equality all.equal(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-degree-seeking.html","id":"degree-seeking","dir":"Articles","previous_headings":"","what":"Degree seeking","title":"Degree seeking (inner joins)","text":"Returning original context, require IDs data sufficient data frame. now filter degree seeking using student data table. number observations doesn’t change practice data sets midfielddata degree-seeking. true research data available MIDFIELD partners.","code":"# Unique IDs that are data sufficient DT <- DT[, .(mcid)] DT <- unique(DT) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>     4: MID25783195 #>     5: MID25783220 #>    ---             #> 63948: MID26697574 #> 63949: MID26697576 #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 DT <- DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>     4: MID25783195 #>     5: MID25783220 #>    ---             #> 63948: MID26697574 #> 63949: MID26697576 #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-degree-seeking.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Degree seeking (inner joins)","text":"Using data.table syntax, demonstrate inner joins add columns midfielddata tables working data frame filter matching rows. Filtering degree seeking typical MIDFIELD research non-degree-seeking students little interest studies.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-degree-seeking.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Degree seeking (inner joins)","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # Load data sets from midfielddata data(student, term)  # Filter for data sufficiency DT <- copy(term) DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # Three equivalent inner joins x <- merge(DT, toy_student[, .(mcid)], by = c(\"mcid\"), all = FALSE) setkey(x, NULL) y <- DT[toy_student, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] z <- toy_student[DT, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] all.equal(x, y) all.equal(x, z)  # Selecting columns x <- merge(DT[, .(mcid)], toy_student[, .(mcid, institution)], by = c(\"mcid\"), all = FALSE) setkey(x, NULL) y <- DT[toy_student, .(mcid, institution), on = c(\"mcid\"), nomatch = NULL] all.equal(x, y)  # Degree seeking DT <- DT[, .(mcid)] DT <- unique(DT) DT <- DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Programs","text":"US, instructional programs encoded “CIP” codes. CIP acronym Classification Instructional Programs, taxonomy academic programs curated US Department Education (NCES, 2010). 2010 CIP codes included midfieldr data set cip. IPEDS standard encoding format two-digit number followed period, followed four-digit number, example, 14.0102 (NCES, 2020). MIDFIELD uses numerals, omits period, .e., 140102, stores variable character string.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Programs","text":"practice strategies searching cip data set programs grouping programs user-assigned program names.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"taxonomy","dir":"Articles","previous_headings":"","what":"Taxonomy","title":"Programs","text":"Academic programs three levels codes names: 6-digit code, specific program 4-digit code, group 6-digit programs comparable content 2-digit code, grouping 4-digit groups related content Specialties within discipline encoded 6-digit level, discipline represented one 4-digit codes (roughly corresponding academic department), collection disciplines represented one 2-digit codes (roughly corresponding academic college). example, Geotechnical Engineering (140802) specialty Civil Engineering (1408) department college Engineering (14). illustrate taxonomy little detail, show table programs assigned 2-digit code 41, “Science Technologies, Technicians”. 2-digit grouping subdivided 5 groups 4-digit level (codes 4100–4199) subdivided 9 programs 6-digit level (codes 410000–419999). 2-digit program can include anywhere four 4-digit programs (e.g., code 24 Liberal Arts Sciences, General Studies Humanities) 238 4-digit programs (e.g., code 51 Health Professions Related Clinical Sciences). 4-digit programs include anywhere one 6-digit program (e.g., code 4100 ) 37 6-digit programs (e.g., code 1313 Education). Unfortunately, disciplines can comprise one 4-digit code. example, programs comprise broad discipline Industrial Systems Engineering encompass four distinct 4-digit codes: 1427 Systems Engineering, 1435 Industrial Engineering, 1436 Manufacturing Engineering, 1437 Operations Research. Hence importance able search CIP data programs interest.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"introduction-to-cip","dir":"Articles","previous_headings":"","what":"Introduction to cip","title":"Programs","text":"writing script follow along, start packages: CIP data bundled midfieldr. variables cip character strings, protects leading zeros CIP codes. View data set help page running number unique programs. sample program names (sample() uses random number generator, result differ shown).","code":"# Packages library(\"midfieldr\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 3,   datatable.print.class = TRUE ) # Names of the CIP variables names(cip) #> [1] \"cip2\"     \"cip2name\" \"cip4\"     \"cip4name\" \"cip6\"     \"cip6name\" # View cip cip #>         cip2                                                  cip2name   cip4 #>       <char>                                                    <char> <char> #>    1:     01 Agriculture, Agricultural Operations and Related Sciences   0100 #>    2:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    3:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>   ---                                                                         #> 1580:     54                                                   History   5401 #> 1581:     54                                                   History   5401 #> 1582:     99                         NonIPEDS - Undecided, Unspecified   9999 #>                                   cip4name   cip6 #>                                     <char> <char> #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>   ---                                             #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>                                               <char> #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>   ---                                                #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified # Run in Console to view help page ? cip # 2-digit level sort(unique(cip$cip2)) #>  [1] \"01\" \"03\" \"04\" \"05\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"19\" \"22\" \"23\" #> [16] \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" #> [31] \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"54\" #> [46] \"99\"  # 4-digit level length(unique(cip$cip4)) #> [1] 394  # 6-digit level length(unique(cip$cip6)) #> [1] 1582 # 2-digit name sample sample(cip[, cip2name], 10) #>  [1] \"Education\"                                                    #>  [2] \"Foreign Languages, Literatures and Linguistics\"               #>  [3] \"Business, Management, Marketing and Related Support Services\" #>  [4] \"Engineering\"                                                  #>  [5] \"Family and Consumer Sciences, Human Sciences\"                 #>  [6] \"Engineering Technology\"                                       #>  [7] \"Health Professions and Related Clinical Sciences\"             #>  [8] \"Business, Management, Marketing and Related Support Services\" #>  [9] \"Health Professions and Related Clinical Sciences\"             #> [10] \"Physical Sciences\"  # 4-digit name sample sample(cip[, cip4name], 10) #>  [1] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [2] \"Applied Horticulture, Horticultural Business Services\"                  #>  [3] \"Ophthalmic and Optometric Support Services and Allied Professions\"      #>  [4] \"Specialized Sales, Merchandising and Marketing Operations\"              #>  [5] \"Engineering-Related Fields\"                                             #>  [6] \"Teacher Education and Professional Development, Specific Subject Areas\" #>  [7] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [8] \"Leatherworking and Upholstery\"                                          #>  [9] \"Health, Medical Preparatory Programs\"                                   #> [10] \"Research and Experimental Psychology\"  # 6-digit name sample sample(cip[, cip6name], 10) #>  [1] \"Soil Sciences, Other\"                                  #>  [2] \"Health, Medical Physics\"                               #>  [3] \"Adult Literacy Tutor, Instructor\"                      #>  [4] \"Environmental Design, Architecture\"                    #>  [5] \"Advanced, Graduate Dentistry and Oral Sciences, Other\" #>  [6] \"Dental Materials (MS, PhD)\"                            #>  [7] \"Drafting and Design Technology, Technician, General\"   #>  [8] \"Chemical Engineering Technology, Technician\"           #>  [9] \"Social Science Teacher Education\"                      #> [10] \"Sports and Exercise\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"using-a-keyword-search","dir":"Articles","previous_headings":"","what":"Using a keyword search","title":"Programs","text":"filter_search() midfieldr function searching cip data set. View help page running variables cip characters filter_search() subsets data frame using character search terms. arguments : dframe data frame subset keep_text character vector search text retaining rows, case-sensitive drop_text (optional) character vector search text dropping rows select (optional) character vector column names search return, default columns example, filtering CIP data programs containing word “engineering” yields 119 observations. first two arguments filter_search() named explicitly, optional drop_text select arguments . Columns select subset filtering keep_text drop_text Suppose want find CIP codes names programs Civil Engineering. search insensitive case, start following code chunk. search returns programs Civilization names well Engineering Technology. wanted Civil Engineering , can use sequence function calls, outcome one operation assigned first argument next operation. following code chunk read , “Start cip data frame, keep rows ‘civil’ detected, keep rows ‘engineering’ detected, drop rows ‘technology’ detected.” Seeing Civil Engineering programs cip4name, used keep_text = c(\"civil engineering\") narrow search rows match full phrase. example, produces result reported table .","code":"? filter_search() # Filter basics filter_search(dframe = cip, keep_text = \"engineering\") #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>  ---                                                                #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                   cip4name   cip6 #>                                                     <char> <char> #>   1:                                  Engineering, General 140101 #>   2:                                  Engineering, General 140102 #>   3: Aerospace, Aeronautical and Astronautical Engineering 140201 #>  ---                                                              #> 117:                             Military Applied Sciences 290301 #> 118:                             Military Applied Sciences 290303 #> 119:            Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>  ---                                                                  #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering # Optional arguments drop_text and select filter_search(cip,   \"engineering\",   drop_text = c(\"related\", \"technology\", \"technologies\"),   select = c(\"cip6\", \"cip6name\") ) #>       cip6                                                      cip6name #>     <char>                                                        <char> #>  1: 140101                                          Engineering, General #>  2: 140102                                               Pre-Engineering #>  3: 140201  Aerospace, Aeronautical and Astronautical, Space Engineering #>  4: 140301       Agricultural, Biological Engineering and Bioengineering #>  5: 140401                                     Architectural Engineering #>  6: 140501                               Biomedical, Medical Engineering #>  7: 140601                              Ceramic Sciences and Engineering #>  8: 140701                                          Chemical Engineering #>  9: 140702                         Chemical and Biomolecular Engineering #> 10: 140799                                   Chemical Engineering, Other #> 11: 140801                                    Civil Engineering, General #> 12: 140802                                      Geotechnical Engineering #> 13: 140803                                        Structural Engineering #> 14: 140804                        Transportation and Highway Engineering #> 15: 140805                                   Water Resources Engineering #> 16: 140899                                      Civil Engineering, Other #> 17: 140901                                 Computer Engineering, General #> 18: 140902                                 Computer Hardware Engineering #> 19: 140903                                 Computer Software Engineering #> 20: 140999                                   Computer Engineering, Other #> 21: 141001        Electrical, Electronics and Communications Engineering #> 22: 141003                                 Laser and Optical Engineering #> 23: 141004                                Telecommunications Engineering #> 24: 141099 Electrical, Electronics and Communications Engineering, Other #> 25: 141101                                         Engineering Mechanics #> 26: 141201                                           Engineering Physics #> 27: 141301                                           Engineering Science #> 28: 141401               Environmental, Environmental Health Engineering #> 29: 141801                                         Materials Engineering #> 30: 141901                                        Mechanical Engineering #> 31: 142001                                     Metallurgical Engineering #> 32: 142101                                Mining and Mineral Engineering #> 33: 142201                     Naval Architecture and Marine Engineering #> 34: 142301                                           Nuclear Engineering #> 35: 142401                                             Ocean Engineering #> 36: 142501                                         Petroleum Engineering #> 37: 142701                                           Systems Engineering #> 38: 142801                              Textile Sciences and Engineering #> 39: 143101                                             Materials Science #> 40: 143201                                 Polymer, Plastics Engineering #> 41: 143301                                      Construction Engineering #> 42: 143401                                            Forest Engineering #> 43: 143501                                        Industrial Engineering #> 44: 143601                                     Manufacturing Engineering #> 45: 143701                                           Operations Research #> 46: 143801                                         Surveying Engineering #> 47: 143901                           Geological, Geophysical Engineering #> 48: 144001                                 Paper Science and Engineering #> 49: 144101                                 Electromechanical Engineering #> 50: 144201             Mechatronics, Robotics and Automation Engineering #> 51: 144301                                       Biochemical Engineering #> 52: 144401                                         Engineering Chemistry #> 53: 144501                            Biological, Biosystems Engineering #> 54: 149999                                            Engineering, Other #>       cip6                                                      cip6name # Example 1 filter using keywords filter_search(cip, \"civil\") # First search first_pass <- filter_search(cip, \"civil\")  # Refine the search second_pass <- filter_search(first_pass, \"engineering\")  # Refine further third_pass <- filter_search(second_pass, drop_text = \"technology\") filter_search(cip, \"civil engineering\", drop_text = \"technology\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"exercises","dir":"Articles","previous_headings":"Using a keyword search","what":"Exercises","title":"Programs","text":"Determine set 6-digit CIP codes expect used College Business. social sciences 2-digit CIP necessarily include possible social science programs. Let anthropology, economics, geography, linguistics, political science, jurisprudence, psychology, sociology defined social sciences. Determine set 6-digit codes collect study programs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"using-a-numerical-code-search","dir":"Articles","previous_headings":"","what":"Using a numerical code search","title":"Programs","text":"Suppose want study programs relating German culture, language, literature. Using “german” keep_text value yields 6-digit program names find two interest, German Studies (050125) German Language Literature (160501). use character vector assign two codes keep_text argument. 6-digit codes entered integers, produce error.","code":"# Search on text filter_search(cip, \"german\") # Search on codes filter_search(cip, c(\"050125\", \"160501\")) # Search that produces an error filter_search(cip, c(050125, 160501)) #> Error in filter_search(cip, c(50125, 160501)): Assertion on 'keep_text' failed. Must be of class 'string', not 'double'."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"exercise","dir":"Articles","previous_headings":"Using a numerical code search","what":"Exercise","title":"Programs","text":"Social sciences exercise previous section, searching “jurisprudence” produced two codes: “220203” “220204.” Search cip two codes determine 2-digit program belong. initial search term, “history.” results, Identify 2-digit CIP history. Use numerical search programs start 2-digit CIP. Subset 6-digit CIPs 6-digit CIP names. Assign result object name exercise_cip. Answer given check work.","code":"#>      cip6                                            cip6name #>    <char>                                              <char> #> 1: 540101                                    History, General #> 2: 540102                    American History (United States) #> 3: 540103                                    European History #> 4: 540104    History and Philosophy of Science and Technology #> 5: 540105 Public, Applied History and Archival Administration #> 6: 540106                                       Asian History #> 7: 540107                                    Canadian History #> 8: 540108                                    Military History #> 9: 540199                                      History, Other"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"using-a-regular-expression-search","dir":"Articles","previous_headings":"","what":"Using a regular expression search","title":"Programs","text":"Specifying 4-digit codes yields data frame 6-digit programs containing 4-digit string. use regular expression notation ^ match start strings. 2-digit series represent general groupings related programs. , result includes History programs. series argument can include combination 2, 4, 6-digit codes. can also passed function character vector.","code":"# example 3 filter using regular expressions filter_search(cip, c(\"^1410\", \"^1419\")) # Search on 2-digit code filter_search(cip, \"^54\") # Search on vector of codes codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_search(cip, codes_we_want)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"when-search-terms-cannot-be-found","dir":"Articles","previous_headings":"","what":"When search terms cannot be found","title":"Programs","text":"keep_text argument includes terms found CIP data frame, unsuccessful terms identified message successful terms produce usual output. example, following keep_text argument includes three search terms present CIP data (“111111”, “^55”, “Bogus”) two (“050125” “160501”). However, seen earlier, none search terms found, error occurs.","code":"# Unsuccessful terms produce a message sub_cip <- filter_search(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) #> Can't find these terms: 111111, Bogus, ^55  # But the successful terms are returned sub_cip #>      cip2                                            cip2name   cip4 #>    <char>                                              <char> <char> #> 1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #> 2:     16      Foreign Languages, Literatures and Linguistics   1605 #>                                       cip4name   cip6 #>                                         <char> <char> #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #>                            <char> #> 1:                 German Studies #> 2: German Language and Literature # When none of the search terms are found filter_search(cip, c(\"111111\", \"Bogus\", \"^55\")) #> Error: The search result is empty. Possible causes are: #>  * 'dframe' contained no matches to terms in 'keep_text'. #>  * 'drop_text' eliminated all remaining rows."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"cip-data-from-another-source","dir":"Articles","previous_headings":"","what":"CIP data from another source","title":"Programs","text":"use CIP data set another source, must structure cip: six character columns named follows,","code":"# Name and class of variables (columns) in cip unlist(lapply(cip, FUN = class)) #>        cip2    cip2name        cip4    cip4name        cip6    cip6name  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"assigning-program-names","dir":"Articles","previous_headings":"","what":"Assigning program names","title":"Programs","text":"Programs MIDFIELD data sets encoded 6-digit CIP codes. ’ve shown, multiple 6-digit codes can considered specialties within larger program 4-digit code even set distinct 4-digit codes. nearly always necessary therefore assign program labels groups 6-digit codes include observations relevant meet needs study. emphasize point: grouping summarizing MIDFIELD data, usually necessary group one’s set program names instead CIP codes names directly. use case study group four engineering programs illustrate several methods adding program column CIP data frame. searching cip, can find 4-digit codes four engineering programs : Civil (1408), Electrical (1410), Mechanical (1419), Industrial/Systems (1427, 1435, 1436, 1437). obtain 6-digit CIP codes. 4-digit names appropriate . task create variable custom program names. make assignments clear, approach assign new program column NA values, edit new column values.","code":"# Changing the number of rows to print options(datatable.print.nrows = 15)  # Four engineering programs study_program <- filter_search(cip, c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\"))  # Retain the needed columns study_program <- study_program[, .(cip6, cip4name)]  # Examine the result study_program[] #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 142701                                    Systems Engineering #> 13: 143501                                 Industrial Engineering #> 14: 143601                              Manufacturing Engineering #> 15: 143701                                    Operations Research # Assign a new column study_program[, program := NA_character_]  # Examine the result study_program[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering    <NA> #>  8: 141003 Electrical, Electronics and Communications Engineering    <NA> #>  9: 141004 Electrical, Electronics and Communications Engineering    <NA> #> 10: 141099 Electrical, Electronics and Communications Engineering    <NA> #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"use-cip4name-ilike-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"1. Use cip4name %ilike% to recode one value","title":"Programs","text":"%like% function essentially wrapper function around base R grepl() function. %ilike% version case-insensitive. See help page running (back-ticks facilitate help search terms starting symbol): approach, search one distinctive term . ’re using abbreviations compact output.","code":"? `%like%` # Recode program using the 4-digit name study_program[cip4name %ilike% \"electrical\", program := \"EE\"]  # Examine the result study_program[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"use-cip6-like-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"2. Use cip6 %like% to recode one value","title":"Programs","text":"second approach, use %like% function , apply CIP code. use regular expression ^1408 meaning “starts 1408.”","code":"# Recode program using the 4-digit code study_program[cip6 %like% \"^1408\", program := \"CE\"]  # Examine the result study_program[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering      CE #>  2: 140802                                      Civil Engineering      CE #>  3: 140803                                      Civil Engineering      CE #>  4: 140804                                      Civil Engineering      CE #>  5: 140805                                      Civil Engineering      CE #>  6: 140899                                      Civil Engineering      CE #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"use-program-fcase-to-edit-all-values","dir":"Articles","previous_headings":"Assigning program names","what":"3. Use program := fcase() to edit all values","title":"Programs","text":"approach, use data.table function fcase(), implementation SQL CASE statement. data.table function %chin% like %%, character vectors. completed labeling programs, can remove original verbose cip4nme column.","code":"# Recode all program values study_program[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )]  # Examine the result study_program[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering      CE #>  2: 140802                                      Civil Engineering      CE #>  3: 140803                                      Civil Engineering      CE #>  4: 140804                                      Civil Engineering      CE #>  5: 140805                                      Civil Engineering      CE #>  6: 140899                                      Civil Engineering      CE #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering      ME #> 12: 142701                                    Systems Engineering     ISE #> 13: 143501                                 Industrial Engineering     ISE #> 14: 143601                              Manufacturing Engineering     ISE #> 15: 143701                                    Operations Research     ISE # Delete a column study_program[, cip4name := NULL]  # Examine the result study_program[] #>       cip6 program #>     <char>  <char> #>  1: 140801      CE #>  2: 140802      CE #>  3: 140803      CE #>  4: 140804      CE #>  5: 140805      CE #>  6: 140899      CE #>  7: 141001      EE #>  8: 141003      EE #>  9: 141004      EE #> 10: 141099      EE #> 11: 141901      ME #> 12: 142701     ISE #> 13: 143501     ISE #> 14: 143601     ISE #> 15: 143701     ISE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"exercises-1","dir":"Articles","previous_headings":"Assigning program names","what":"Exercises","title":"Programs","text":"Obtain 9 programs 2-digit program 54 History. Add program column NA values. Rename “General” “” “General History” Shorten “History Philosophy…” “Sci/Tech History” Shorten “American History …” “US History” Shorten “Public Applied …” “Public/Applied History” Others retain 6-digit name Delete cip6name column. Answer given check work.","code":"#>      cip6                program #>    <char>                 <char> #> 1: 540101        General History #> 2: 540102             US History #> 3: 540103       European History #> 4: 540104       Sci/Tech History #> 5: 540105 Public/Applied History #> 6: 540106          Asian History #> 7: 540107       Canadian History #> 8: 540108       Military History #> 9: 540199        General History"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Programs","text":"introduced taxonomy academic programs established US Department Education implementation midfieldr data set cip. outlined several search strategies identifying programs interest methods assigning custom program labels typically used grouping summarizing SUR observations.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-programs.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Programs","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# Packages library(\"midfieldr\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 3,   datatable.print.class = TRUE )  # Introduction to cip names(cip) sort(unique(cip$cip2)) length(unique(cip$cip4)) length(unique(cip$cip6)) sample(cip[, cip2name], 10) sample(cip[, cip4name], 10) sample(cip[, cip6name], 10)  # Using a keyword search filter_search(dframe = cip, keep_text = \"engineering\") filter_search(cip,   \"engineering\",   drop_text = c(\"related\", \"technology\", \"technologies\"),   select = c(\"cip6\", \"cip6name\") ) filter_search(cip, \"civil\") first_pass <- filter_search(cip, \"civil\") second_pass <- filter_search(first_pass, \"engineering\") third_pass <- filter_search(second_pass, drop_text = \"technology\") filter_search(cip, \"civil engineering\", drop_text = \"technology\")  # Using a numerical code search filter_search(cip, \"german\") filter_search(cip, c(\"050125\", \"160501\"))  # Using a regular expression search filter_search(cip, c(\"^1410\", \"^1419\")) filter_search(cip, \"^54\") codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_search(cip, codes_we_want)  # When search terms cannot be found # filter_search(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) # filter_search(cip, c(\"111111\", \"Bogus\", \"^55\"))  # CIP data from another source unlist(lapply(cip, FUN = class))  # Assigning program names options(datatable.print.nrows = 15) study_program <- filter_search(cip, c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) study_program <- study_program[, .(cip6, cip4name)] study_program[, program := NA_character_] study_program[cip4name %ilike% \"electrical\", program := \"EE\"] study_program[cip6 %like% \"^1408\", program := \"CE\"] study_program[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] study_program[, cip4name := NULL]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Completion status","text":"program completion Graduating baccalaureate program timely completion criterion Completing program specified span years, many cases, within 6 years admission, possibly less transfer students.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Completion status","text":"method labeling completion status : Completion TRUE degree recorded degree data table FALSE otherwise. Completion status “timely” degree term later timely term; “untimely” later; “NA” non-completion.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Completion status","text":"writing script follow along, start packages: Importing. Load midfielddata data tables. Filtering. steps previous vignettes (Data sufficiency Degree seeking reproduced condensed form yield IDs students practice data satisfying data sufficiency degree seeking. data frame adequate demonstration purposes.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # Load data sets from midfielddata data(student, term, degree) # Filter for data sufficiency DT <- copy(term) DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"]  # Filter for degree seeking DT <- DT[, .(mcid)] DT <- unique(DT) DT <- DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>     4: MID25783195 #>     5: MID25783220 #>    ---             #> 63948: MID26697574 #> 63949: MID26697576 #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"add_completion_status","dir":"Articles","previous_headings":"","what":"add_completion_status()","title":"Completion status","text":"can view function help page running, arguments : dframe Data frame student unit record (SUR) observations keyed student ID. Required variables mcid timely_term. midfield_degree Data frame SUR degree observations keyed student ID. Default degree. Required variables mcid term_degree. function adds three columns SUR data frame: completion_status result plus two supporting variables: term_degree Character. Term program completed. Encoded YYYYT. completion Logical. TRUE denotes program completion; FALSE denotes non-completion. possible values completion status : “timely”, program completion later timely_term “untimely”, program completion timely_term NA, non-completion. Add variables. demonstrating add_completion_status(), working data frame must columns ID timely completion term. use add_timely_term() , though alternatively retained timely_term variable earlier code chunks. Closer look. Let’s examine three specific observations illustrate sense results. student degree term, Spring 1997 (encoded 19963), completion TRUE. degree term exceed timely completion term, Spring 1998 (encoded 19973), completion status “timely”. student degree term, Spring 2017 (encoded 20163), completion TRUE. degree term exceeds timely completion term, Spring 2016 (encoded 20153), completion status “untimely”. student’s degree term NA indicating graduate. Completion therefore FALSE completion status also NA. Usage. following implementations yield identical results, vignettes, typically write required arguments without names remind us midfielddata table used, e.g., degree data set can named something degree. example, working “toy” (exercise) data sets bundled midfieldr, write something like , Caution! Silent overwriting! case, existing columns name one added columns deleted replaced except. Using toy data illustrate, ’ll drop columns added timely term except completion Reapplying function, completion column silently deleted replaced.","code":"? add_completion_status() # Add completion status DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree)  # Drop unnecessary columns DT[, c(\"term_i\", \"level_i\", \"adj_span\") := NULL] DT[] #>               mcid timely_term term_degree completion completion_status #>             <char>      <char>      <char>     <lgcl>            <char> #>     1: MID25783135       19963        <NA>      FALSE              <NA> #>     2: MID25783162       19973       19963       TRUE            timely #>     3: MID25783178       20003       20001       TRUE            timely #>     4: MID25783195       19983       19966       TRUE            timely #>     5: MID25783220       20023        <NA>      FALSE              <NA> #>    ---                                                                  #> 63948: MID26697574       20113       20113       TRUE            timely #> 63949: MID26697576       20153       20134       TRUE            timely #> 63950: MID26697599       20153       20143       TRUE            timely #> 63951: MID26697615       20153        <NA>      FALSE              <NA> #> 63952: MID26697623       20153       20153       TRUE            timely # Student F DT[mcid == \"MID25783162\"] #>           mcid timely_term term_degree completion completion_status #>         <char>      <char>      <char>     <lgcl>            <char> #> 1: MID25783162       19973       19963       TRUE            timely # Student G DT[mcid == \"MID26696871\"] #>           mcid timely_term term_degree completion completion_status #>         <char>      <char>      <char>     <lgcl>            <char> #> 1: MID26696871       20153       20163       TRUE          untimely # Student H DT[mcid == \"MID26697615\"] #>           mcid timely_term term_degree completion completion_status #>         <char>      <char>      <char>     <lgcl>            <char> #> 1: MID26697615       20153        <NA>      FALSE              <NA> # Required arguments in order and explicitly named x <- add_completion_status(dframe = DT, midfield_degree = degree)  # Required arguments in order, but not named y <- add_completion_status(DT, degree)  # Using the implicit default for the midfield_term argument z <- add_completion_status(DT)  # Equality test between the data tables all.equal(x, y) #> [1] TRUE all.equal(x, z) #> [1] TRUE add_timely_term(DT, term) # Using degree data named something else toy_DT <- toy_student[, .(mcid)] toy_DT <- add_timely_term(toy_DT, toy_term) toy_DT <- add_completion_status(toy_DT, toy_degree) toy_DT[, c(\"term_i\", \"level_i\", \"adj_span\") := NULL] toy_DT[] #>            mcid timely_term term_degree completion completion_status #>          <char>      <char>      <char>     <lgcl>            <char> #>  1: MID25784187       19943       19946       TRUE          untimely #>  2: MID25784974       19931        <NA>      FALSE              <NA> #>  3: MID25816209       19923        <NA>      FALSE              <NA> #>  4: MID25819358       19993       19963       TRUE            timely #>  5: MID25828870       19933       19923       TRUE            timely #> ---                                                                  #> 95: MID26622664       20113       20093       TRUE            timely #> 96: MID26624815       20113       20073       TRUE            timely #> 97: MID26691066       20161       20141       TRUE            timely #> 98: MID26692025       20153       20141       TRUE            timely #> 99: MID26692254       20191       20143       TRUE            timely # Drop two columns toy_DT <- toy_DT[, c(\"term_degree\", \"completion_status\") := NULL] toy_DT[] #>            mcid timely_term completion #>          <char>      <char>     <lgcl> #>  1: MID25784187       19943       TRUE #>  2: MID25784974       19931      FALSE #>  3: MID25816209       19923      FALSE #>  4: MID25819358       19993       TRUE #>  5: MID25828870       19933       TRUE #> ---                                    #> 95: MID26622664       20113       TRUE #> 96: MID26624815       20113       TRUE #> 97: MID26691066       20161       TRUE #> 98: MID26692025       20153       TRUE #> 99: MID26692254       20191       TRUE # Reapply the function toy_DT <- add_completion_status(toy_DT, toy_degree) toy_DT[] #>            mcid timely_term term_degree completion completion_status #>          <char>      <char>      <char>     <lgcl>            <char> #>  1: MID25784187       19943       19946       TRUE          untimely #>  2: MID25784974       19931        <NA>      FALSE              <NA> #>  3: MID25816209       19923        <NA>      FALSE              <NA> #>  4: MID25819358       19993       19963       TRUE            timely #>  5: MID25828870       19933       19923       TRUE            timely #> ---                                                                  #> 95: MID26622664       20113       20093       TRUE            timely #> 96: MID26624815       20113       20073       TRUE            timely #> 97: MID26691066       20161       20141       TRUE            timely #> 98: MID26692025       20153       20141       TRUE            timely #> 99: MID26692254       20191       20143       TRUE            timely"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"completion-summaries","dir":"Articles","previous_headings":"","what":"Completion summaries","title":"Completion status","text":"research question requires us count frequency observations completion status, can retain observations group summarize. might add second grouping variable.","code":"DT[, .N, by = c(\"completion_status\")] #>    completion_status     N #>               <char> <int> #> 1:              <NA> 23173 #> 2:            timely 37047 #> 3:          untimely  3732 x <- DT[student, .(mcid, sex, completion_status), on = c(\"mcid\"), nomatch = NULL] x <- x[, .N, by = c(\"sex\", \"completion_status\")] setkeyv(x, c(\"completion_status\", \"sex\")) x[] #>       sex completion_status     N #>    <char>            <char> <int> #> 1: Female              <NA> 10566 #> 2:   Male              <NA> 12607 #> 3: Female            timely 18842 #> 4:   Male            timely 18205 #> 5: Female          untimely  1437 #> 6:   Male          untimely  2295"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"completion-filter","dir":"Articles","previous_headings":"","what":"Completion filter","title":"Completion status","text":"research question requires us extract timely graduates , can use completion status filter.","code":"x <- DT[completion_status == \"timely\"] x[] #>               mcid timely_term term_degree completion completion_status #>             <char>      <char>      <char>     <lgcl>            <char> #>     1: MID25783162       19973       19963       TRUE            timely #>     2: MID25783178       20003       20001       TRUE            timely #>     3: MID25783195       19983       19966       TRUE            timely #>     4: MID25783259       19941       19933       TRUE            timely #>     5: MID25783324       19973       19963       TRUE            timely #>    ---                                                                  #> 37043: MID26697553       20153       20133       TRUE            timely #> 37044: MID26697574       20113       20113       TRUE            timely #> 37045: MID26697576       20153       20134       TRUE            timely #> 37046: MID26697599       20153       20143       TRUE            timely #> 37047: MID26697623       20153       20153       TRUE            timely"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"completion-programs","dir":"Articles","previous_headings":"","what":"Completion programs","title":"Completion status","text":"research question require programs graduates completed, can use inner join degree retain selected columns. particular set programs developed case study vignettes, can join program names another inner join. First, case study program names codes loaded midfieldr. View data help page running case study program CIP codes names : Inner-join program names retain graduating selected programs. , quick summary program timely graduates.","code":"DT <- DT[completion_status == \"timely\"] DT <- DT[degree, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] DT[] #>               mcid   cip6 #>             <char> <char> #>     1: MID25783162 521401 #>     2: MID25783178 143501 #>     3: MID25783195 521401 #>     4: MID25783259 011103 #>     5: MID25783324 260202 #>    ---                    #> 37043: MID26697553 451001 #> 37044: MID26697574 300000 #> 37045: MID26697576 521401 #> 37046: MID26697599 110401 #> 37047: MID26697623 520301 ? study_program_cips study_program_cips[] #>       cip6 program #>     <char>  <char> #>  1: 140801      CE #>  2: 140802      CE #>  3: 140803      CE #>  4: 140804      CE #>  5: 140805      CE #>  6: 140899      CE #>  7: 141001      EE #>  8: 141003      EE #>  9: 141004      EE #> 10: 141099      EE #> 11: 141901      ME #> 12: 142701     ISE #> 13: 143501     ISE #> 14: 143601     ISE #> 15: 143701     ISE DT <- DT[study_program_cips, .(mcid, program), on = c(\"cip6\"), nomatch = NULL] DT[] #>              mcid program #>            <char>  <char> #>    1: MID25783441      CE #>    2: MID25784334      CE #>    3: MID25784418      CE #>    4: MID25784489      CE #>    5: MID25784709      CE #>   ---                     #> 3618: MID26689274     ISE #> 3619: MID26692926     ISE #> 3620: MID26695626     ISE #> 3621: MID26696116     ISE #> 3622: MID26696429     ISE DT[, .N, by = c(\"program\")] #>    program     N #>     <char> <int> #> 1:      CE   836 #> 2:      EE   914 #> 3:      ME  1289 #> 4:     ISE   583"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Completion status","text":"Starting student, term, degree data tables, filtered data data sufficiency degree seeking. explored features add_completion_status() function examined result might used.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-completion.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Completion status","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 55,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # Load data sets from midfielddata data(student, term, degree)  # Filter for data sufficiency DT <- copy(term) DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"]  # Filter for degree seeking DT <- DT[, .(mcid)] DT <- unique(DT) DT <- DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL]  # Add completion status DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree) DT[, c(\"term_i\", \"level_i\", \"adj_span\") := NULL]  # Closer look DT[mcid == \"MID25783162\"] DT[mcid == \"MID26696871\"] DT[mcid == \"MID26697615\"]  # Equivalent statements x <- add_completion_status(dframe = DT, midfield_degree = degree) y <- add_completion_status(DT, degree) z <- add_completion_status(DT) all.equal(x, y) all.equal(x, z)  # Using degree data named something else toy_DT <- toy_student[, .(mcid)] toy_DT <- add_timely_term(toy_DT, toy_term) toy_DT <- add_completion_status(toy_DT, toy_degree) toy_DT[, c(\"term_i\", \"level_i\", \"adj_span\") := NULL]  # Caution. Overwriting. toy_DT <- toy_DT[, c(\"term_degree\", \"completion_status\") := NULL] toy_DT <- add_completion_status(toy_DT, toy_degree)  # Completion summaries DT[, .N, by = c(\"completion_status\")] x <- DT[student, .(mcid, sex, completion_status), on = c(\"mcid\"), nomatch = NULL] x <- x[, .N, by = c(\"sex\", \"completion_status\")] setkeyv(x, c(\"completion_status\", \"sex\"))  # Completion filter x <- DT[completion_status == \"timely\"]  # Completion programs DT <- DT[completion_status == \"timely\"] DT <- DT[degree, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL] DT <- DT[study_program_cips, .(mcid, program), on = c(\"cip6\"), nomatch = NULL] DT[, .N, by = c(\"program\")]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Demographics (left outer joins)","text":"add columns midfielddata tables working data frame using left-outer join. usual shared column name merge mcid. One common joins student demographics (race sex) student table.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Demographics (left outer joins)","text":"writing script follow along, start packages: Importing. Load midfielddata data tables. Start student IDs case study vignettes. View help page running, data IDs students ever enrolled four engineering programs: Civil, Electrical, Industrial/Systems, Mechanical Engineering.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # Load data sets from midfielddata data(student, term, degree) ? study_mcid # A convenient set of IDs DT <- copy(study_mcid) DT[] #>              mcid #>            <char> #>    1: MID25783178 #>    2: MID25783441 #>    3: MID25783491 #>    4: MID25783912 #>    5: MID25784025 #>   ---             #> 7129: MID26696958 #> 7130: MID26696967 #> 7131: MID26697163 #> 7132: MID26697444 #> 7133: MID26697447"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"left-outer-joins","dir":"Articles","previous_headings":"","what":"Left outer joins","title":"Demographics (left outer joins)","text":"left outer join merge operation two data frame returns observations (rows) “left” data frame matching rows “right” data frame, specified variables used matching. Using data.table syntax, two approaches: merge() Y[X, j] syntax. Using merge(). Using data.table merge() syntax, .x = TRUE argument creates left-outer join. join race sex student, extract columns join. Alternatively, one can include columns selection within merge operation. Using Y[X, j]. second approach—computationally efficient—uses data.table Y[X, j] syntax X “left” data (rows returned) Y “right” (matching rows returned). argument defines shared column use matching. j argument, .(mcid, race, sex), defines columns data frames return. Y[X, j, ] configuration, rows X returned plus matching rows Y NA columns Y match. Demonstrate equivalence. Showing two approaches produce result. Order matters. Degree seeking (inner joins) vignette, show inner joins X[Y, j] Y[X, j] return result. outer joins. left-outer joins, Y[X, j] returns rows X X[Y, j] returns rows Y.","code":"# Subset of student data frame to join cols_to_join <- student[, .(mcid, race, sex)] merge(DT, cols_to_join, by = c(\"mcid\"), all.x = TRUE) #>              mcid            race    sex #>            <char>          <char> <char> #>    1: MID25783178           Black   Male #>    2: MID25783441           White   Male #>    3: MID25783491           White   Male #>    4: MID25783912           White   Male #>    5: MID25784025           Black   Male #>   ---                                    #> 7129: MID26696958           White   Male #> 7130: MID26696967           White   Male #> 7131: MID26697163 Hispanic/Latinx   Male #> 7132: MID26697444           White   Male #> 7133: MID26697447           Asian   Male merge(DT, student[, .(mcid, race, sex)], by = c(\"mcid\"), all.x = TRUE) #>              mcid            race    sex #>            <char>          <char> <char> #>    1: MID25783178           Black   Male #>    2: MID25783441           White   Male #>    3: MID25783491           White   Male #>    4: MID25783912           White   Male #>    5: MID25784025           Black   Male #>   ---                                    #> 7129: MID26696958           White   Male #> 7130: MID26696967           White   Male #> 7131: MID26697163 Hispanic/Latinx   Male #> 7132: MID26697444           White   Male #> 7133: MID26697447           Asian   Male # Fresh start DT <- copy(study_mcid)  # Left-outer join student to DT DT <- student[DT, .(mcid, race, sex), on = c(\"mcid\")] DT[] #>              mcid            race    sex #>            <char>          <char> <char> #>    1: MID25783178           Black   Male #>    2: MID25783441           White   Male #>    3: MID25783491           White   Male #>    4: MID25783912           White   Male #>    5: MID25784025           Black   Male #>   ---                                    #> 7129: MID26696958           White   Male #> 7130: MID26696967           White   Male #> 7131: MID26697163 Hispanic/Latinx   Male #> 7132: MID26697444           White   Male #> 7133: MID26697447           Asian   Male # Fresh start DT <- copy(study_mcid) x <- merge(DT, student[, .(mcid, race, sex)], by = c(\"mcid\"), all.x = TRUE) setkey(x, NULL) y <- student[DT, .(mcid, race, sex), on = c(\"mcid\")] all.equal(x, y) #> [1] TRUE # What we want x <- student[DT, .(mcid, race, sex), on = c(\"mcid\")]  # Not what we want y <- DT[student, .(mcid, race, sex), on = c(\"mcid\")]  # Equal?   all.equal(x, y) #> [1] \"Different number of rows\"  # Compare N rows nrow(x) #> [1] 7133  nrow(y) #> [1] 97640"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"columns-from-student","dir":"Articles","previous_headings":"","what":"Columns from student","title":"Demographics (left outer joins)","text":"added race sex columns student working data frame. Depending goals study, columns added well. variables available student : Adding transfer status transfer credit hours. Adding SAT scores.","code":"# Variables in the practice data set names(student) #>  [1] \"mcid\"           \"institution\"    \"transfer\"       \"hours_transfer\" #>  [5] \"race\"           \"sex\"            \"age\"            \"us_citizen\"     #>  [9] \"home_zip\"       \"high_school\"    \"sat_math\"       \"sat_verbal\"     #> [13] \"act_comp\" # Fresh start DT <- copy(study_mcid)  # Add variables from student to DT student[DT, .(mcid, transfer, hours_transfer), on = c(\"mcid\")] #>              mcid              transfer hours_transfer #>            <char>                <char>          <num> #>    1: MID25783178 First-Time in College             NA #>    2: MID25783441 First-Time in College             NA #>    3: MID25783491 First-Time in College             NA #>    4: MID25783912 First-Time in College             NA #>    5: MID25784025 First-Time in College             NA #>   ---                                                  #> 7129: MID26696958 First-Time in College             NA #> 7130: MID26696967 First-Time in College             NA #> 7131: MID26697163 First-Time in College             NA #> 7132: MID26697444 First-Time in College             NA #> 7133: MID26697447 First-Time in College             NA # Add variables from student to DT student[DT, .(mcid, sat_math, sat_verbal), on = c(\"mcid\")] #>              mcid sat_math sat_verbal #>            <char>    <num>      <num> #>    1: MID25783178      642        486 #>    2: MID25783441      680        486 #>    3: MID25783491      540        555 #>    4: MID25783912      570        685 #>    5: MID25784025      490        544 #>   ---                                 #> 7129: MID26696958       NA         NA #> 7130: MID26696967       NA         NA #> 7131: MID26697163       NA         NA #> 7132: MID26697444       NA         NA #> 7133: MID26697447       NA         NA"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"columns-from-term","dir":"Articles","previous_headings":"","what":"Columns from term","title":"Demographics (left outer joins)","text":"Joining variables degree gives us opportunity show left-outer joins, rows X multiple matches Y, row X added every match Y. variables available term : Adding institution. term multiple rows per student (one row per term per ID), get row every instance term matching ID. Add unique() function remove duplicates. Add program. , removing duplicates, still rows started time students switch majors resulting one CIP code associated ID time span SURs.","code":"# Variables in the practice data set names(term) #>  [1] \"mcid\"                \"institution\"         \"term\"                #>  [4] \"cip6\"                \"level\"               \"standing\"            #>  [7] \"coop\"                \"hours_term\"          \"hours_term_attempt\"  #> [10] \"hours_cumul\"         \"hours_cumul_attempt\" \"gpa_term\"            #> [13] \"gpa_cumul\" # Fresh start DT <- copy(study_mcid)  # Add variables from term to DT x <- term[DT, .(mcid, institution), on = c(\"mcid\")] x[] #>               mcid   institution #>             <char>        <char> #>     1: MID25783178 Institution M #>     2: MID25783178 Institution M #>     3: MID25783178 Institution M #>     4: MID25783178 Institution M #>     5: MID25783178 Institution M #>    ---                           #> 74782: MID26697447 Institution L #> 74783: MID26697447 Institution L #> 74784: MID26697447 Institution L #> 74785: MID26697447 Institution L #> 74786: MID26697447 Institution L  # Remove duplicate rows unique(x) #>              mcid   institution #>            <char>        <char> #>    1: MID25783178 Institution M #>    2: MID25783441 Institution M #>    3: MID25783491 Institution M #>    4: MID25783912 Institution M #>    5: MID25784025 Institution M #>   ---                           #> 7129: MID26696958 Institution L #> 7130: MID26696967 Institution L #> 7131: MID26697163 Institution L #> 7132: MID26697444 Institution L #> 7133: MID26697447 Institution L # Add variables from term to DT x <- term[DT, .(mcid, cip6), on = c(\"mcid\")] unique(x) #>               mcid   cip6 #>             <char> <char> #>     1: MID25783178 140102 #>     2: MID25783178 140701 #>     3: MID25783178 143501 #>     4: MID25783441 140102 #>     5: MID25783441 140801 #>    ---                    #> 13769: MID26697444 260701 #> 13770: MID26697444 040201 #> 13771: MID26697444 240199 #> 13772: MID26697447 140701 #> 13773: MID26697447 141001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"columns-from-degree","dir":"Articles","previous_headings":"","what":"Columns from degree","title":"Demographics (left outer joins)","text":"Joining variables degree gives us opportunity show left-outer joins, rows X match Y, Y column values NA. variables available degree : Add degree term CIP. rows DT match degree, degree column values NA.","code":"# Variables in the practice data set names(degree) #> [1] \"mcid\"        \"institution\" \"term_degree\" \"cip6\"        \"degree\" # Add variables from degree to DT x <- degree[DT, .(mcid, term_degree, cip6), on = c(\"mcid\")] x[] #>              mcid term_degree   cip6 #>            <char>      <char> <char> #>    1: MID25783178       20001 143501 #>    2: MID25783441       19963 140801 #>    3: MID25783491       20001 141001 #>    4: MID25783912       20001 143501 #>    5: MID25784025        <NA>   <NA> #>   ---                                #> 7129: MID26696958        <NA>   <NA> #> 7130: MID26696967       20141 141901 #> 7131: MID26697163       20133 141901 #> 7132: MID26697444       20151 240199 #> 7133: MID26697447       20154 141001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Demographics (left outer joins)","text":"Using data.table syntax, demonstrate left outer joins adding columns midfielddata tables working data frame. Adding student demographic columns typical MIDFIELD research race/ethnicity sex often used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-demographics.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Demographics (left outer joins)","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # Load data sets from midfielddata data(student, term, degree)  # Using merge DT <- copy(study_mcid) cols_to_join <- student[, .(mcid, race, sex)] merge(DT, cols_to_join, by = c(\"mcid\"), all.x = TRUE) merge(DT, student[, .(mcid, race, sex)], by = c(\"mcid\"), all.x = TRUE)  # Using Y[X, j] DT <- copy(study_mcid) student[DT, .(mcid, race, sex), on = c(\"mcid\")]  # Compare x <- merge(DT, student[, .(mcid, race, sex)], by = c(\"mcid\"), all.x = TRUE) setkey(x, NULL) y <- student[DT, .(mcid, race, sex), on = c(\"mcid\")] all.equal(x, y)  # Order matters x <- student[DT, .(mcid, race, sex), on = c(\"mcid\")] y <- DT[student, .(mcid, race, sex), on = c(\"mcid\")] all.equal(x, y) nrow(x) nrow(y)  # Columns from student names(student) DT <- copy(study_mcid) student[DT, .(mcid, transfer, hours_transfer), on = c(\"mcid\")] student[DT, .(mcid, sat_math, sat_verbal), on = c(\"mcid\")]  # Columns from term names(term) DT <- copy(study_mcid) unique(term[DT, .(mcid, institution), on = c(\"mcid\")]) unique(term[DT, .(mcid, cip6), on = c(\"mcid\")])  # Columns from degree names(degree) degree[DT, .(mcid, term_degree, cip6), on = c(\"mcid\")]"},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Layton. Maintainer, author, copyright holder. Russell Long. Data manager, author, copyright holder. Matthew Ohland. Author, copyright holder. Marisa Orr. Author, copyright holder. Susan Lord. Author, copyright holder. US National Science Foundation. Funder.","code":""},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Layton R, Long R, Ohland M, Orr M, Lord S (2022). midfieldr: Tools Studying MIDFIELD Student Unit Record Data R. https://github.com/MIDFIELDR/midfieldr, https://midfield.online/.","code":"@Manual{,   title = {midfieldr: Tools for Studying MIDFIELD Student Unit Record Data in R},   author = {Richard Layton and Russell Long and Matthew Ohland and Marisa Orr and Susan Lord},   year = {2022},   note = {https://github.com/MIDFIELDR/midfieldr, https://midfield.online/}, }"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our pledge","title":"Contributor code of conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Contributor code of conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement responsibilities","title":"Contributor code of conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor code of conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor code of conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement midfield@purdue.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement guidelines","title":"Contributor code of conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement guidelines","what":"1. Correction","title":"Contributor code of conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement guidelines","what":"2. Warning","title":"Contributor code of conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement guidelines","what":"3. Temporary Ban","title":"Contributor code of conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement guidelines","what":"4. Permanent Ban","title":"Contributor code of conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor code of conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"midfieldr","dir":"","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Tools Studying MIDFIELD Student Unit Record Data R goal midfieldr provide tools guides working longitudinal data MIDFIELD database.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 21 US institutions (June 2022). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework major) institution time. midfieldr R package provides tools working MIDFIELD SURs. tools midfieldr work research data MIDFIELD database practice data midfielddata package. midfielddata R package provides practice data (proportionate stratified sample MIDFIELD) longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016 organized four data tables: four data tables keyed student ID. Tables student degree one observation (row) per student. Tables course term multiple observations per student students can enrolled one course term one term program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"outline typical workflow : Define study parameters Transform data yield observations interest Calculate summary statistics metrics Create tables charts display results Iterate brief usage example, goal tabulate counts engineering students race/ethnicity, sex, graduation status. Data processing performed using data.table syntax. midfielddata package, use data sets student, term, degree. midfieldr package, use functions: add_timely_term() add_data_sufficiency() add_completion_status() Tabulated results usage example. “Timely completion” count graduates completing programs 6 years; “Untimely completion” count graduating 6 years; “complete” count non-graduates.","code":"# Packages used library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Load the midfielddata practice data used here data(student, term, degree)  # Initialize the working data table DT <- copy(term)  # Timely completion term required for data sufficiency DT <- add_timely_term(DT, term)  # Filter for data sufficiency DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"]  # Filter observations for degree-seeking using an inner join DT <- DT[student, .(mcid, cip6, timely_term), on = c(\"mcid\"), nomatch = NULL]  # Filter observations for engineering programs DT <- DT[cip6 %like% \"^14\"]  # Filter observations for unique students (first instance) DT <- DT[, .SD[1], by = c(\"mcid\")]  # Add completion status DT <- add_completion_status(DT, degree)  # Add race and sex using a left outer join DT <- student[DT, .(completion_status, sex, race), on = c(\"mcid\")]  # Calculate summary statistics DT <- DT[, .N, by = c(\"completion_status\", \"sex\", \"race\")]  # Tabulate results DT[, race_sex := paste(race, sex)] DT_display <- dcast(DT, race_sex ~ completion_status, value.var = \"N\") setcolorder(DT_display, c(\"race_sex\", \"timely\", \"untimely\")) setnames(DT_display,   old = c(\"race_sex\", \"timely\", \"untimely\", \"NA\"),   new = c(\"Group\", \"Timely completion\", \"Untimely completion\", \"Did not complete\") )"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Articles. listing vignettes. Reference (midfieldr). listing midfieldr functions prepared data. Reference (midfielddata). listing four practice MIDFIELD data tables.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"R (>= 3.5.0) data.table (>= 1.9.8) ggplot2 recommended data graphics, required.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"install-midfieldr","dir":"","previous_headings":"","what":"Install midfieldr","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr yet available CRAN. install development version midfieldr drat repository, type Console: can confirm successful installation running following lines bring package help page Help window. midfieldr help page","code":"# Install midfieldr from drat repo install.packages(\"midfieldr\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") library(\"midfieldr\") help(\"midfieldr-package\")"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"install-midfielddata","dir":"","previous_headings":"","what":"Install midfielddata","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"size, installing practice data takes time; please patient wait prompt “>” reappear. Console, run: can confirm successful installation running following lines bring package help page Help window. midfielddata help page","code":"# Install midfielddata   install.packages(\"midfielddata\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") # be patient library(\"midfielddata\") help(\"midfielddata-package\")"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"contribute midfieldr, Please clone repo locally. Commit code separate branch. Use checkmate package include runtime argument checks functions. Use tinytest package write unit tests code. Save tests inst/tinytest/ directory. provide feedback report bug, Use GitHub Issues page. Please run package unit tests report results bug report. user can run package tests installing tinytest package running: Participation open source project subject Code Conduct.","code":"test_results <- tinytest::test_package(\"midfieldr\")     as.data.frame(test_results)"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr licensed GPL (>= 2.0) (full license) © 2018–2022 Richard Layton, Russell Long, Susan Lord, Matthew Ohland, Marisa Orr.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine program completion status for every student — add_completion_status","title":"Determine program completion status for every student — add_completion_status","text":"Add columns data frame Student Unit Record (SUR)  observations indicate whether student completed program,  , whether completion timely. Requires MIDFIELD  degree data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine program completion status for every student — add_completion_status","text":"","code":"add_completion_status(dframe, midfield_degree = degree)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine program completion status for every student — add_completion_status","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variables mcid  timely_term. midfield_degree Data frame SUR degree observations keyed  student ID. Default degree. Required variables  mcid term_degree.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine program completion status for every student — add_completion_status","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_degree Character. Term program completed.   Encoded YYYYT. completion Logical. TRUE denotes students completing   programs. completion_status Character. Label observation   indicate program completion status. Possible values :   \"timely\", indicating program completion later timely   completion term; \"untimely\", indicating program completion    timely completion term; \"NA\" indicating non-completion.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine program completion status for every student — add_completion_status","text":"\"program completion\" mean undergraduate earning  baccalaureate degree. many studies, students must complete  programs specified time span, example 4-, 6-, 8-years  admission. , completion timely; , completion  untimely grouped non-completers computing  metric graduation rate. Completion status \"timely\" students completing programs  later timely completion terms. See also  add_timely_term().","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine program completion status for every student — add_completion_status","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add completion status column dframe <- add_timely_term(dframe, toy_term)  # Add completion status column add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree completion #>  1: MID25784187  19885  01 Freshman        6       19943       19946       TRUE #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA>      FALSE #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA>      FALSE #>  4: MID25819358  19946 02 Sophomore        5       19993       19963       TRUE #>  5: MID25828870  19881  01 Freshman        6       19933       19923       TRUE #>  6: MID25829749  19995    03 Junior        4       20033        <NA>      FALSE #>  7: MID25841418  19981    03 Junior        4       20013       19993       TRUE #>  8: MID25845197  19905    03 Junior        4       19943       19921       TRUE #>  9: MID25846316  19911  01 Freshman        6       19963       19951       TRUE #> 10: MID25847220  19891  01 Freshman        6       19943       19933       TRUE #>     completion_status #>  1:          untimely #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely  # Existing completion_status column, if any, is overwritten dframe[, completion_status := NA_character_] #>            mcid term_i      level_i adj_span timely_term completion_status #>  1: MID25784187  19885  01 Freshman        6       19943              <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931              <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923              <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993              <NA> #>  5: MID25828870  19881  01 Freshman        6       19933              <NA> #>  6: MID25829749  19995    03 Junior        4       20033              <NA> #>  7: MID25841418  19981    03 Junior        4       20013              <NA> #>  8: MID25845197  19905    03 Junior        4       19943              <NA> #>  9: MID25846316  19911  01 Freshman        6       19963              <NA> #> 10: MID25847220  19891  01 Freshman        6       19943              <NA> add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree completion #>  1: MID25784187  19885  01 Freshman        6       19943       19946       TRUE #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA>      FALSE #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA>      FALSE #>  4: MID25819358  19946 02 Sophomore        5       19993       19963       TRUE #>  5: MID25828870  19881  01 Freshman        6       19933       19923       TRUE #>  6: MID25829749  19995    03 Junior        4       20033        <NA>      FALSE #>  7: MID25841418  19981    03 Junior        4       20013       19993       TRUE #>  8: MID25845197  19905    03 Junior        4       19943       19921       TRUE #>  9: MID25846316  19911  01 Freshman        6       19963       19951       TRUE #> 10: MID25847220  19891  01 Freshman        6       19943       19933       TRUE #>     completion_status #>  1:          untimely #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine data sufficiency for every student — add_data_sufficiency","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"Add column data frame Student Unit Record (SUR)  observations labels row inclusion exclusion based data  sufficiency near upper lower bounds institution's data range.  Requires MIDFIELD term data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"add_data_sufficiency(dframe, midfield_term = term)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variables mcid  timely_term. See also add_timely_term(). midfield_term Data frame SUR term observations keyed  student ID. Default term. Required variables  mcid, institution, term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_i Character. Initial term student's longitudinal   record, encoded YYYYT. overwritten present dframe. lower_limit Character. Initial term institution's data   range, encoded YYYYT upper_limit Character. Final term institution's data   range, encoded YYYYT data_sufficiency Character. Label observation   inclusion exclusion based data sufficiency. Possible values :   include, indicating available data sufficient   estimating timely program completion; exclude-upper, indicating   data insufficient upper limit data range;   exclude-lower, indicating data insufficient   lower limit.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"time span MIDFIELD term data varies institution,  lower upper bounds. student records,  near bounds creates unavoidable ambiguity trying assess  program completion. records must identified cases  excluded prevent false summary counts.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add data sufficiency column dframe <- add_timely_term(dframe, midfield_term = toy_term)  # Add data sufficiency column add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include  # Existing data_sufficiency column, if any, is overwritten dframe[, data_sufficiency := NA_character_] #>            mcid term_i      level_i adj_span timely_term data_sufficiency #>  1: MID25784187  19885  01 Freshman        6       19943             <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931             <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923             <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993             <NA> #>  5: MID25828870  19881  01 Freshman        6       19933             <NA> #>  6: MID25829749  19995    03 Junior        4       20033             <NA> #>  7: MID25841418  19981    03 Junior        4       20013             <NA> #>  8: MID25845197  19905    03 Junior        4       19943             <NA> #>  9: MID25846316  19911  01 Freshman        6       19963             <NA> #> 10: MID25847220  19891  01 Freshman        6       19943             <NA> add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns for student race/ethnicity and sex — add_race_sex","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"Add columns data frame Student Unit Record (SUR)  observations labels row student's race/ethnicity sex.  Requires MIDFIELD student data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"","code":"add_race_sex(dframe, midfield_student = student)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variable mcid. midfield_student Data frame SUR student observations keyed  student ID. Default student. Required variables  mcid, race, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: race Character, self-reported race/ethnicity, e.g.,   Asian, Black, Hispanic/LatinX, etc. sex Character, self-reported sex, values Female, Male,   Unknown","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"MIDFIELD student data includes variables race (race/ethnicity)  sex self-reported institution.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"","code":"# Start with an excerpt from the degree data set  dframe <- toy_degree[1:5, c(\"mcid\", \"cip6\")]  # Add columns for race/ethnicity and sex add_race_sex(dframe, midfield_student = toy_student) #>           mcid   cip6  race    sex #> 1: MID25784187 520801 White   Male #> 2: MID25819358 260502 White   Male #> 3: MID25828870 140801 White   Male #> 4: MID25841418 030506 White   Male #> 5: MID25845197 409999 White Female  # Repeat with an example from the term data set  dframe <- toy_term[21:26, c(\"mcid\", \"institution\", \"level\")] add_race_sex(dframe, midfield_student = toy_student) #>           mcid   institution        level  race  sex #> 1: MID25846316 Institution M  01 Freshman White Male #> 2: MID25846316 Institution M 02 Sophomore White Male #> 3: MID25846316 Institution M    03 Junior White Male #> 4: MID25846316 Institution M    03 Junior White Male #> 5: MID25846316 Institution M    04 Senior White Male #> 6: MID25846316 Institution M    04 Senior White Male  # Existing race and sex columns, if any, are overwritten dframe[, c(\"race\", \"sex\") := NA_character_] #>           mcid   institution        level race  sex #> 1: MID25846316 Institution M    04 Senior <NA> <NA> #> 2: MID25846316 Institution M  01 Freshman <NA> <NA> #> 3: MID25846316 Institution M    03 Junior <NA> <NA> #> 4: MID25846316 Institution M    03 Junior <NA> <NA> #> 5: MID25846316 Institution M    04 Senior <NA> <NA> #> 6: MID25846316 Institution M 02 Sophomore <NA> <NA> add_race_sex(dframe, midfield_student = toy_student) #>           mcid   institution        level  race  sex #> 1: MID25846316 Institution M  01 Freshman White Male #> 2: MID25846316 Institution M 02 Sophomore White Male #> 3: MID25846316 Institution M    03 Junior White Male #> 4: MID25846316 Institution M    03 Junior White Male #> 5: MID25846316 Institution M    04 Senior White Male #> 6: MID25846316 Institution M    04 Senior White Male"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a timely completion term for every student — add_timely_term","title":"Calculate a timely completion term for every student — add_timely_term","text":"Add column data frame Student Unit Record (SUR)  observations indicates latest term program completion  considered timely every student. Requires MIDFIELD  term data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"add_timely_term(   dframe,   midfield_term = term,   ...,   span = NULL,   sched_span = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a timely completion term for every student — add_timely_term","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variable mcid. midfield_term Data frame SUR term observations keyed  student ID. Default term. Required variables  mcid, term, level. ... used, forces later arguments used name. span Optional integer scalar, number years define timely completion. Commonly used values 100%, 150%, 200%   sched_span. Default 6 years. sched_span Optional integer scalar, number years institution officially schedules completing program. Default 4 years.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a timely completion term for every student — add_timely_term","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_i Character. Initial term student's longitudinal   record, encoded YYYYT level_i Character. Student level (01 Freshman, 02 Sophomore,   etc.) initial term adj_span Numeric. Integer span years timely completion   adjusted student's initial level. timely_term Character. Latest term program   completion considered timely every student. Encoded YYYYT.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a timely completion term for every student — add_timely_term","text":"\"program completion\" mean undergraduate earning  baccalaureate degree. many studies, students must complete  programs specified time span, example 4-, 6-, 8-years  admission. , completion timely; , completion  untimely grouped non-completers computing  metric graduation rate. heuristic assigns span number years (default 6 years)  every student. students admitted second-year level higher,  span reduced one year full year student assumed  completed. example, student admitted  second-year level assumed completed one year program,  span reduced one year. adjusted span added initial term create timely  completion term timely_term column.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Add timely completion term column add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943  # Define timely completion as 200% of scheduled span (8 years) add_timely_term(dframe, midfield_term = toy_term, span = 8) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        8       19963 #>  2: MID25784974  19883 02 Sophomore        7       19951 #>  3: MID25816209  19881 02 Sophomore        7       19943 #>  4: MID25819358  19946 02 Sophomore        7       20013 #>  5: MID25828870  19881  01 Freshman        8       19953 #>  6: MID25829749  19995    03 Junior        6       20053 #>  7: MID25841418  19981    03 Junior        6       20033 #>  8: MID25845197  19905    03 Junior        6       19963 #>  9: MID25846316  19911  01 Freshman        8       19983 #> 10: MID25847220  19891  01 Freshman        8       19963  # Existing timely_term column, if any, is overwritten dframe[, timely_term := NA_character_] #>            mcid timely_term #>  1: MID25784187        <NA> #>  2: MID25784974        <NA> #>  3: MID25816209        <NA> #>  4: MID25819358        <NA> #>  5: MID25828870        <NA> #>  6: MID25829749        <NA> #>  7: MID25841418        <NA> #>  8: MID25845197        <NA> #>  9: MID25846316        <NA> #> 10: MID25847220        <NA> add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of academic programs — cip","title":"Table of academic programs — cip","text":"data table based US National Center Education Statistics (NCES), Integrated Postsecondary Education Data System (IPEDS), 2010 CIP, http://nces.ed.gov/ipeds/cipcode/. data codes names 1582 instructional programs organized three levels: 2-digit series, 4-digit series, 6-digit series.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of academic programs — cip","text":"","code":"cip"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of academic programs — cip","text":"data.table 1582 rows 6 columns keyed 6-digit CIP code: cip6 Character 6-digit code representing \"specific   instructional programs\" (US National Center Education Statistics). cip6name Character program name 6-digit level cip4 Character 4-digit code (first 4 digits cip6)   representing \"intermediate groupings programs   comparable content objectives.\" cip4name Character program name 4-digit level. cip2 Character 2-digit code (first 2 digits cip6)   representing \"general groupings related programs.\" cip2name Character program name 2-digit level.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of academic programs — cip","text":"midfielddata taxonomy includes one non-IPEDS code (999999) Undecided Unspecified, instances institutions reported program information students enrolled program.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare FYE data for multiple imputation — condition_fye","title":"Prepare FYE data for multiple imputation — condition_fye","text":"Constructs data frame Student Unit Records (SURs) First-Year  Engineering (FYE) programs conditions data later use  input mice R package multiple imputation. Sets three  variables predictors (institution, race, sex) one variable  predicted (program CIP code) NA values imputed. Requires  MIDFIELD student term data frames environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare FYE data for multiple imputation — condition_fye","text":"","code":"condition_fye(midfield_student, midfield_term, ..., fye_codes = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare FYE data for multiple imputation — condition_fye","text":"midfield_student Data frame Student Unit Record (SUR) student observations,  keyed student ID. Required variables  mcid, race, sex. midfield_term Data frame SUR term observations keyed  student ID. Required variables  mcid, institution, term, cip6. ... used, forces later arguments used name. fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default 140102. Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes---start 14---ignored.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare FYE data for multiple imputation — condition_fye","text":"data.table conditioned later use input  mice R package multiple imputation. data following  properties: One row every FYE student. Grouping structures preserved. Columns returned: mcid Character, anonymized student identifier. Returned             -. race Factor, race/ethnicity self-reported             student. imputation predictor variable. sex Factor, sex self-reported             student. imputation predictor variable. institution Factor, anonymized institution name.             imputation predictor variable. cip6 Factor, 6-digit CIP code student's known,             post-FYE engineering program NA representing missing            values imputed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare FYE data for multiple imputation — condition_fye","text":"US institutions, First-Year Engineering (FYE) programs comprise  common first year curriculum prerequisite declaring   engineering major. longitudinal studies, FYE programs can problematic  combining observations non-FYE institutions.  example, suppose calculating graduation rate Mechanical  Engineering () programs. definitions, students starting  constitute pool; fraction pool graduates  rate. FYE starters, even graduate , excluded  count start . Therefore, include FYE students persistence metric requiring degree-granting \"starting\" program, predict engineering program (Electrical Engineering, Mechanical Engineering, etc.)  FYE student declared required enroll FYE. purpose condition_fye() prepare data  making prediction.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Prepare FYE data for multiple imputation — condition_fye","text":"method requires MIDFIELD-style student term data tables  contain minimum institutions studied also FYE  programs. function extracts terms FYE students sorts  two categories: Students complete FYE declare engineering major.     easy case--student's first opportunity,     enrolled engineering program choosing. use     program predicted  starting program. Students , FYE, declare engineering major.     complicated case---data provide information     regarding engineering program student declared     originally institution required enroll FYE.     students, treat starting program missing data     predicted using multiple imputation. cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. first () post-FYE program identified. program engineering, CIP retained predicted starting major. , CIP replaced NA treated missing data imputation. Lastly, predictor variables (institution, race, sex) predicted variable (6-digit CIP code) converted unordered factors.  resulting data frame ready use input mice package.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare FYE data for multiple imputation — condition_fye","text":"","code":"# # Using toy data # DT <- toy_student[, .(mcid, race, sex)] # condition_fye(dframe = DT, midfield_term = toy_term) #  #  # # Overwrites institution if present in dframe # DT <- toy_student[, .(mcid, institution, race, sex)] # condition_fye(dframe = DT, midfield_term = toy_term) #  #  # # Other columns, if any, are dropped # colnames(toy_student) # colnames(condition_fye(toy_student, toy_term)) #  #  # # Optional argument permits multiple CIP codes for FYE # condition_fye(DT, toy_term, fye_codes = c(\"140101\", \"140102\"))"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition multiway data for graphing — condition_multiway","title":"Condition multiway data for graphing — condition_multiway","text":"Transform data frame two categorical variables factors levels ordered display Cleveland \"multiway dot plot,\" ordering panels rows crucial perception effects. multiway data---defined Cleveland (1993)---single quantitative value (response) every combination levels two categorical variables. Typically quantitative column used order levels two categorical columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition multiway data for graphing — condition_multiway","text":"","code":"condition_multiway(dframe, x, yy, ..., order_by = NULL, param_col = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Condition multiway data for graphing — condition_multiway","text":"dframe Data frame least one numeric variable two  categorical variables (character factor). x Character scalar, quoted name numeric response variable. yy Character vector, quoted names two categorical  variables. ... used, forces later arguments used name. order_by Optional character scalar (quotes) assigning        method ordering levels categorical variables.        following values possible: \"median\" (default) Orders median values        quantitative column grouped category. order         recommended Cleveland quantitative variable         integer count frequency. \"mean\" Orders mean values quantitative        column grouped category. \"sum\" Orders sum values quantitative        column grouped category. Useful also quantitative variable        count frequency. \"percent\" Orders ratios computed category. Used        quantitative response variable ratio (percent) two        columns integer counts (frequencies). counts summed        category obtain grouped percentages used order levels        categorical variables. Requires two parameter columns        identified param_col assumes parameter        larger column sum denominator ratio. \"alphabet\" Orders levels categorical variables        alphabetically. Rarely useful perceiving effects, can        useful value look . param_col Optional character vector names (quotes) columns used parameters order_by method. Currently supports \"percent\" method ---expects two column names (order) integer count columns used construct percentage response column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition multiway data for graphing — condition_multiway","text":"data.table following properties: Rows modified. quantitative column modified. two categorical columns factors levels ordered         method selected. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition multiway data for graphing — condition_multiway","text":"multiway dot plot, panels, individual dot plots display, levels, rows panel. One category encoded panels; rows. panels quantitative scale x-axis organization category levels y-axis. Panels rows ordered ordering scheme increases \"graph order\", , increases left right bottom top. Note \"multiway\" context refers data structure graph design defined Cleveland, methods analysis described Kroonenberg (2008).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Condition multiway data for graphing — condition_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley, Hoboken, NJ.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows by matching values in shared key columns — filter_match","title":"Subset rows by matching values in shared key columns — filter_match","text":"Subset rows one data frame values key column match values similar key column second data frame. Columns subset unless selected optional argument.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"filter_match(dframe, match_to, by_col, ..., select = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows by matching values in shared key columns — filter_match","text":"dframe Data frame subset returned. Must contain key column named by_col. match_to Data frame key column values matched . column used required key column named by_col. by_col Character scalar, name key column. Values key column must character strings. ... used, force later arguments used name. select Optional character vector dframe column names retain, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows by matching values in shared key columns — filter_match","text":"data.table following properties: Rows matching values. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows by matching values in shared key columns — filter_match","text":"Two data frames input. match_to data frame subset retain key column .  result merged dframe inner-join, returning rows dframe values matching key values match_to. Column subsetting occurs inner join, key column included vector column names select.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"# Start with a toy sample of student (built-in data set) head(toy_student) #>           mcid   institution              transfer hours_transfer  race    sex #> 1: MID25784187 Institution M First-Time in College             NA White   Male #> 2: MID25784974 Institution M First-Time in College             NA White   Male #> 3: MID25816209 Institution M First-Time in College             NA White   Male #> 4: MID25819358 Institution M First-Time in College             NA White   Male #> 5: MID25828870 Institution M First-Time in College             NA White   Male #> 6: MID25829749 Institution M   First-Time Transfer             NA White Female nrow(toy_student) #> [1] 99   # Filter by matching IDs of graduates student_example <- filter_match(toy_student,   match_to = toy_degree,   by_col = \"mcid\" ) head(student_example) #>           mcid   institution              transfer hours_transfer  race    sex #> 1: MID25784187 Institution M First-Time in College             NA White   Male #> 2: MID25819358 Institution M First-Time in College             NA White   Male #> 3: MID25828870 Institution M First-Time in College             NA White   Male #> 4: MID25841418 Institution M First-Time in College             NA White   Male #> 5: MID25845197 Institution M First-Time in College             NA White Female #> 6: MID25846316 Institution M First-Time in College             NA White   Male # Note change in number of rows nrow(student_example) #> [1] 65   # Same filter and select 3 columns only student_example <- filter_match(toy_student,   match_to = toy_degree,   by_col = \"mcid\",   select = c(\"mcid\", \"race\", \"sex\") ) head(student_example) #>           mcid  race    sex #> 1: MID25784187 White   Male #> 2: MID25819358 White   Male #> 3: MID25828870 White   Male #> 4: MID25841418 White   Male #> 5: MID25845197 White Female #> 6: MID25846316 White   Male nrow(student_example) #> [1] 65   # Filter term data for engineering program codes (start with \"14\") term_example <- toy_term[grepl(\"^14\", cip6), ] head(term_example) #>           mcid   institution  term   cip6        level hours_term #> 1: MID25828870 Institution M 19923 140801    04 Senior         12 #> 2: MID25828870 Institution M 19891 140102 02 Sophomore         14 #> 3: MID25828870 Institution M 19903 140801    04 Senior         17 #> 4: MID25828870 Institution M 19881 140102  01 Freshman         17 #> 5: MID25828870 Institution M 19901 140801    03 Junior         14 #> 6: MID25828870 Institution M 19883 140102 02 Sophomore         14 nrow(term_example) #> [1] 61   # Filter student by matching IDs of engineering students student_example <- filter_match(toy_student,   match_to = term_example,   by_col = \"mcid\",   select = c(\"mcid\", \"institution\", \"transfer\", \"sex\") ) head(student_example) #>           mcid   institution              transfer    sex #> 1: MID25828870 Institution M First-Time in College   Male #> 2: MID25846316 Institution M First-Time in College   Male #> 3: MID25847220 Institution M First-Time in College   Male #> 4: MID25848589 Institution M First-Time in College   Male #> 5: MID25977316 Institution B First-Time in College   Male #> 6: MID25995980 Institution C First-Time in College Female nrow(student_example) #> [1] 22   # The 'by_col' column does not have to be included in the `select` columns student_example <- filter_match(toy_student,   match_to = term_example,   by_col = \"mcid\",   select = c(\"institution\", \"transfer\", \"sex\") ) head(student_example) #>      institution              transfer    sex #> 1: Institution M First-Time in College   Male #> 2: Institution M First-Time in College   Male #> 3: Institution M First-Time in College   Male #> 4: Institution M First-Time in College   Male #> 5: Institution B First-Time in College   Male #> 6: Institution C First-Time in College Female nrow(student_example) #> [1] 22"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_search","title":"Subset rows that include matches to search strings — filter_search","text":"Subset data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument. commonly used searching CIP data set.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"filter_search(dframe, keep_text = NULL, ..., drop_text = NULL, select = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows that include matches to search strings — filter_search","text":"dframe Data frame searched. keep_text Optional character vector search text retaining rows, default NULL. ... used, force later arguments used name. drop_text Optional character vector search text dropping rows, default NULL. select Optional character vector column names return, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_search","text":"data.table following properties: Rows matching elements keep_text excluding rows           matching elements drop_text. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_search","text":"Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"# Subset using keywords filter_search(cip, keep_text = \"engineering\") #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>   4:   14                                      Engineering 1403 #>   5:   14                                      Engineering 1404 #>  ---                                                            #> 115:   15                           Engineering Technology 1516 #> 116:   15                           Engineering Technology 1599 #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                     cip4name   cip6 #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering   # drop_text argument, when used, must be named filter_search(cip, \"civil engineering\", drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other   # Subset using numerical codes filter_search(cip, keep_text = c(\"050125\", \"160501\")) #>    cip2                                            cip2name cip4 #> 1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #> 2:   16      Foreign Languages, Literatures and Linguistics 1605 #>                                       cip4name   cip6 #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #> 1:                 German Studies #> 2: German Language and Literature   # subset using regular expressions filter_search(cip, keep_text = \"^54\") #>    cip2 cip2name cip4 cip4name   cip6 #> 1:   54  History 5401  History 540101 #> 2:   54  History 5401  History 540102 #> 3:   54  History 5401  History 540103 #> 4:   54  History 5401  History 540104 #> 5:   54  History 5401  History 540105 #> 6:   54  History 5401  History 540106 #> 7:   54  History 5401  History 540107 #> 8:   54  History 5401  History 540108 #> 9:   54  History 5401  History 540199 #>                                               cip6name #> 1:                                    History, General #> 2:                    American History (United States) #> 3:                                    European History #> 4:    History and Philosophy of Science and Technology #> 5: Public, Applied History and Archival Administration #> 6:                                       Asian History #> 7:                                    Canadian History #> 8:                                    Military History #> 9:                                      History, Other filter_search(cip, keep_text = c(\"^1407\", \"^1408\")) #>    cip2    cip2name cip4             cip4name   cip6 #> 1:   14 Engineering 1407 Chemical Engineering 140701 #> 2:   14 Engineering 1407 Chemical Engineering 140702 #> 3:   14 Engineering 1407 Chemical Engineering 140799 #> 4:   14 Engineering 1408    Civil Engineering 140801 #> 5:   14 Engineering 1408    Civil Engineering 140802 #> 6:   14 Engineering 1408    Civil Engineering 140803 #> 7:   14 Engineering 1408    Civil Engineering 140804 #> 8:   14 Engineering 1408    Civil Engineering 140805 #> 9:   14 Engineering 1408    Civil Engineering 140899 #>                                  cip6name #> 1:                   Chemical Engineering #> 2:  Chemical and Biomolecular Engineering #> 3:            Chemical Engineering, Other #> 4:             Civil Engineering, General #> 5:               Geotechnical Engineering #> 6:                 Structural Engineering #> 7: Transportation and Highway Engineering #> 8:            Water Resources Engineering #> 9:               Civil Engineering, Other   # Select columns filter_search(cip,   keep_text = \"^54\",   select = c(\"cip6\", \"cip4name\") ) #>      cip6 cip4name #> 1: 540101  History #> 2: 540102  History #> 3: 540103  History #> 4: 540104  History #> 5: 540105  History #> 6: 540106  History #> 7: 540107  History #> 8: 540108  History #> 9: 540199  History   # Multiple passes to narrow the results first_pass <- filter_search(cip, \"civil\") second_pass <- filter_search(first_pass, \"engineering\") filter_search(second_pass, drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting programs imputed for FYE students — fye_start","title":"Starting programs imputed for FYE students — fye_start","text":"Degree-granting, engineering CIP codes can substituted First-Year-Engineering (FYE) codes required persistence metric.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting programs imputed for FYE students — fye_start","text":"","code":"fye_start"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting programs imputed for FYE students — fye_start","text":"data.table 5033 rows 2 columns keyed student ID. variables : mcid Character, de-identified student ID. start Character, 6-digit CIP code predicted starting   program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting programs imputed for FYE students — fye_start","text":"FYE different non-degree-granting CIP designations \"undecided\" \"undeclared\". FYE students neither undecided undeclared---accepted institutions Engineering majors. Starting programs fye_start engineering programs predict students declared required enroll FYE. prediction based first post-FYE program imputation suitable multiple categorical variables using mice package. predictor variables institution, race, sex. predicted variable 6-digit CIP code degree-granting engineering program institution. fye_start holds practice data midfielddata---values commingled research database available MIDFIELD partners.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"goal midfieldr provide tools working MIDFIELD data, resource longitudinal, de-identified, individual student unit records.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 21 US institutions (June 2022). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework program) institution time. proportionate stratified sample data (practice) available midfielddata, R data package longitudinal student unit-records 98,000 undergraduates 12 institutions  1987--2016 organized four data tables: student course term degree tools midfieldr work equally well practice data midfielddata research data MIDFIELD. work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. wrapr stop_if_dot_args","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_mcid.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study IDs — study_mcid","title":"Case-study IDs — study_mcid","text":"intermediate result provided convenience vignette users.  IDs students ever enrolled four programs study  (Civil, Electrical, Industrial/Systems, Mechanical Engineering)  filtering data sufficiency, degree seeking, program, timely  completion.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_mcid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study IDs — study_mcid","text":"","code":"study_mcid"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_mcid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study IDs — study_mcid","text":"data.table 7133 rows 1 column. mcid Character, anonymized student identifier","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study observations — study_observations","title":"Case-study observations — study_observations","text":"intermediate result provided convenience vignette users.  Post-processed observations students ever enrolled well students  graduating four programs case study. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study observations — study_observations","text":"","code":"study_observations"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study observations — study_observations","text":"data.table 11,212 rows 5 columns. mcid Character, anonymized student identifier race Character, self-reported race/ethnicity. sex Character, self-reported sex. program Character, academic program label. group Character, indicating grouping (ever   grad) observation belongs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study observations — study_observations","text":"Starting case-study starting pool students ever enrolled  four programs study (Civil, Electrical, Industrial/Systems,  Mechanical Engineering), filtered data data sufficiency,  degree seeking, program, timely completion. data frame \"ever enrolled\" data frame \"timely graduates\"  bound using shared column names distinguished  group variable.  data structure facilitates grouping  summarizing race, sex, program, group.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study starting pool — study_pool","title":"Case-study starting pool — study_pool","text":"intermediate result provided convenience vignette users.  starting pool students term practice data. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study starting pool — study_pool","text":"","code":"study_pool"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study starting pool — study_pool","text":"data.table 161,696 rows 2 columns. mcid Character, anonymized student identifier cip6 Character, 6-digit CIP program codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study starting pool — study_pool","text":"Starting midfielddata term practice data set, extracted  every observation unique combinations ID program CIP code.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study program labels and CIP codes — study_program_cips","title":"Case-study program labels and CIP codes — study_program_cips","text":"intermediate result provided convenience vignette users.  Program CIP codes labels four programs case study.  Keyed 6-digit CIPs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study program labels and CIP codes — study_program_cips","text":"","code":"study_program_cips"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study program labels and CIP codes — study_program_cips","text":"data.table 15 rows 2 columns. cip6 Character, 6-digit CIP program codes. program Character, abbreviated labels four engineering programs.   Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\"   (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study program labels and CIP codes — study_program_cips","text":"Starting midfieldr cip data set, extracted CIPs  four programs case study assigned custom label  used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study results — study_results","title":"Case-study results — study_results","text":"intermediate result provided convenience vignette users.  Longitudinal stickiness keyed program, race/ethnicity, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study results — study_results","text":"","code":"study_results"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study results — study_results","text":"data.table 55 rows 6 columns. program Character, academic program label. race Character, self-reported race/ethnicity. sex Character, self-reported sex. ever Numerical, number students ever enrolled program. grad Numerical, number students completing program. stick Numerical, program stickiness, ratio grad   ever, percent.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study results — study_results","text":"Starting prepared data (case study stickiness observations),  compute longitudinal stickiness four programs study (Civil,  Electrical, Industrial/Systems, Mechanical Engineering) grouped  program, race/ethnicity, sex. Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data. Results based data  filtered data sufficiency, degree seeking, program, timely  completion.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starting_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study observations starting pool — study_starting_pool","title":"Case-study observations starting pool — study_starting_pool","text":"intermediate result provided convenience vignette users.  Data midfielddata package processed obtain observations  students ever enrolled case study programs Civil, Electrical,  Industrial/Systems, Mechanical Engineering without filtering  data sufficiency timely completion. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starting_pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study observations starting pool — study_starting_pool","text":"","code":"study_starting_pool"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starting_pool.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study observations starting pool — study_starting_pool","text":"data.table 161,696 rows 2 columns keyed ID. mcid Character, anonymized student identifier cip6 Character, 6-digit CIP codes programs students  ever enrolled.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness results — study_stickiness","title":"Case-study stickiness results — study_stickiness","text":"intermediate result provided convenience vignette users.  Longitudinal stickiness results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results keyed program, race/ethnicity, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness results — study_stickiness","text":"","code":"study_stickiness"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness results — study_stickiness","text":"data.table 33 rows 6 columns keyed program, race/ethnicity, sex. program Character, program name assigned grouping   summarizing display graphs tables. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student, values  Female, Male. ever Numerical, number students ever enrolled program,  accounting data sufficiency timely completion. grad Numerical, number students completing program,  accounting data sufficiency timely completion. stick Numerical, program stickiness, ratio number  students completing program number students ever enrolled  program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study stickiness results — study_stickiness","text":"Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness observations — study_stickiness_observ","title":"Case-study stickiness observations — study_stickiness_observ","text":"intermediate result provided convenience vignette users.  Data midfielddata package processed obtain observations students ever enrolled , graduating timely fashion , case study programs Civil, Electrical, Industrial/Systems,  Mechanical Engineering. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness observations — study_stickiness_observ","text":"","code":"study_stickiness_observ"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness observations — study_stickiness_observ","text":"data.table 11212 rows 5 columns keyed ID. mcid Character, anonymized student identifier race Character, race/ethnicity self-reported student,   e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student,   values Female, Male, Unknown program Character, abbreviation indicating program   student completed group Character, indicating grouping (ever   grad) student belongs.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":null,"dir":"Reference","previous_headings":"","what":"Course data for examples — toy_course","title":"Course data for examples — toy_course","text":"small subset row column MIDFIELD course table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Course data for examples — toy_course","text":"","code":"toy_course"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Course data for examples — toy_course","text":"data.table 4616 rows 6 columns keyed student ID. mcid Character, anonymized student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. abbrev Character, course alphabetical identifier, e.g. ENGR, MATH,  ENGL. number Character, course numeric identifier, e.g. 101, 3429. grade Character, course grade, e.g., +, , -, B+, , NG, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree data for examples — toy_degree","title":"Degree data for examples — toy_degree","text":"small subset row column MIDFIELD degree table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree data for examples — toy_degree","text":"","code":"toy_degree"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Degree data for examples — toy_degree","text":"data.table 64 rows 5 columns keyed student ID. mcid Character, anonymized student ID. institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. term_degree Character, academic year term  student completes program, format YYYYT. cip6 Character, 6-digit CIP code program student  earns degree. degree Character, type degree awarded, e.g., Bachelor's  Degree, Bachelor Arts, Bachelor Science, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data for examples — toy_student","title":"Student data for examples — toy_student","text":"small subset row column MIDFIELD student table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data for examples — toy_student","text":"","code":"toy_student"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data for examples — toy_student","text":"data.table 100 rows 6 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,   Institution , Institution B, etc. transfer Character, stating whether student First-Time  College students First-Time Transfer student. hours_transfer Numeric, transfer hours accepted  institution. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Hispanic/LatinX, etc. sex character, sex self-reported student, possible  values Female, Male, Unknown.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Term data for examples — toy_term","title":"Term data for examples — toy_term","text":"small subset row column MIDFIELD term table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term data for examples — toy_term","text":"","code":"toy_term"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Term data for examples — toy_term","text":"data.table 169 rows 6 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. cip6 Character, 6-digit CIP code program student  enrolled term. level Character, 01 Freshman, 02 Sophomore, etc. hours_term Numeric, credit hours earned term.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009022--2021-06-29","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9022 / 2021-06-29","title":"midfieldr 1.0.0.9022 / 2021-06-29","text":"Revise add vignettes data sufficiency, degree seeking (inner joins), programs, completion, demographics (left outer joins) Correction condition_multiway() alphabetical ordering, revise unit tests Remove dependency Rdpack","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009021--2021-06","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9021 / 2021-06","title":"midfieldr 1.0.0.9021 / 2021-06","text":"midfield_student argument, functions appears, assigned default value student instead NULL. argument can omitted unless intended data frame called something student. Similarly, midfield_course, midfield_term, midfield_degree arguments, occur, assigned default values course, term, degree. Reorganize logical flow data processing case study vignettes reflect latest thinking order filters applied Functions return supporting variables, delete optional “details” arguments Edit function names variable names, update unit tests Temporarily remove vignettes updated Make inner joins explicit, delete add_filter_match() Revise data sufficiency include lower limit exclusions Make left-outer joins explicit, delete add_race_sex()","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009020--2021-06","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9020 / 2021-06","title":"midfieldr 1.0.0.9020 / 2021-06","text":"Significant changes earlier versions, backwards compatibility, prompting version number change 1.0.0 Change names practice data tables match names research data Edit practice data values consistency research data values Revise built-data sets use vignettes Rd examples Switch wrapr coalesce %?% assigning default arguments Initial round runtime assertions unit tests complete Make function names arguments internally consistent Edit functions depend data.table functionality Make MIDFIELD data arguments explicit functions Remove dependency dplyr related packages Replace Travis CI GitHub Actions CI Use package checkmate runtime assertions Remove dependency installing midfielddata Switch package tinytest unit testing Separate case study detailed vignettes Completely overhaul midfieldr functions Update README midfielddata README Revise vignettes use new functions","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-010--2018-06","dir":"Changelog","previous_headings":"","what":"midfieldr 0.1.0 / 2018-06","title":"midfieldr 0.1.0 / 2018-06","text":"Initial development version public GitHub","code":""}]
