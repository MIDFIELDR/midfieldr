[{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"beginning survey student unit record (SUR) data, check necessary prerequisites met: Requirements Install midfieldr Install midfielddata vignette, Load practice data midfielddata Inspect four data tables Preview midfieldr functions","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"student-unit-record-data","dir":"Articles","previous_headings":"","what":"Student unit record data","title":"Getting started","text":"MIDFIELD Student Unit Record (SUR) data de-identified undergraduate student-level information covering admission characteristics, demographics, programs, courses, instructors, grades, degrees. data organized four tables—student, course, term, degree—keyed student ID. vignette, examine contents practice data midfielddata, R data package longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016:","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"load-practice-data","dir":"Articles","previous_headings":"","what":"Load practice data","title":"Getting started","text":"writing script follow along, start packages: Use data() load midfielddata data tables memory use. example, loading package library(\"midfielddata\") , can run ls() see environment contains zero objects, load student data midfielddata memory, run Checking environment , look RStudio Environment pane, see student listed. typically load data sets need top script just loading midfielddata package. need load session. Checking environment ,","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # optional code to control data.table printing options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE ) # the names of objects in the environment ls() #> character(0) # loading a data set  data(student) # the names of objects in the environment ls() #> [1] \"student\" # load remaining data used in this vignette data(course) data(term) data(degree) # the names of objects in the environment ls() #> [1] \"course\"  \"degree\"  \"student\" \"term\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-student-data","dir":"Articles","previous_headings":"","what":"Inspect the student data","title":"Getting started","text":"student table 13 student-related variables students sample, collected time admitted institutions degree-seeking undergraduates. data dictionary, can navigate midfielddata website student page view information help page running observation unique student keyed student ID. Student IDs institution names de-identified consistent across four data sets. see data structure, run student 97,640 observations occupies approximately 19 MB memory. can confirm student IDs unique running, Summarize quantitative variables. Examine categorical variables values.","code":"? student # view the structure of the data set str(student) #> Classes 'data.table' and 'data.frame':   97640 obs. of  13 variables: #>  $ mcid          : chr  \"MID25783135\" \"MID25783147\" \"MID25783156\" \"MID25783162\" ... #>  $ institution   : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ transfer      : chr  \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" ... #>  $ hours_transfer: num  NA NA NA NA NA NA NA NA NA NA ... #>  $ race          : chr  \"White\" \"White\" \"White\" \"White\" ... #>  $ sex           : chr  \"Male\" \"Female\" \"Female\" \"Male\" ... #>  $ age           : num  17 17 18 17 18 18 17 18 18 18 ... #>  $ us_citizen    : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ home_zip      : chr  \"29485\" \"29072\" \"43026\" \"29572\" ... #>  $ high_school   : chr  \"411900\" \"410825\" \"210568\" \"411465\" ... #>  $ sat_math      : num  580 470 750 560 670 620 642 590 492 620 ... #>  $ sat_verbal    : num  505 530 627 395 530 500 486 620 594 456 ... #>  $ act_comp      : num  21 19 29 18 26 22 24 25 21 21 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) length(unique(student$mcid)) #> [1] 97640 summary(student$sat_math) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   200.0   520.0   580.0   578.1   640.0   800.0   31705  summary(student$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   16.00   18.00   18.00   18.47   18.00   75.00   22916 sort(unique(student$sex)) #> [1] \"Female\"  \"Male\"    \"Unknown\"  sort(unique(student$race)) #> [1] \"Asian\"           \"Black\"           \"Hispanic/Latinx\" \"International\"   #> [5] \"Native American\" \"Other/Unknown\"   \"White\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises","dir":"Articles","previous_headings":"Inspect the student data","what":"Exercises","title":"Getting started","text":"Determine possible values institution column. Determine possible values transfer column. Determine median sat_verbal score.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-course-data","dir":"Articles","previous_headings":"","what":"Inspect the course data","title":"Getting started","text":"course table 12 course-related variables students sample. data dictionary, can navigate midfielddata website course page view information help page running observation one course one term one student keyed student ID combination course, abbreviation, number, section. see data structure, run four practice data sets midfielddata, course far largest, 3,439,936 observations occupying 349 MB memory. Depending machine, loading course can cause noticeable delay execution time (13 seconds machine), probably want load needed. number unique students. Summarize quantitative variable. Examine categorical variable values.","code":"? course # view the structure of the data set str(course) #> Classes 'data.table' and 'data.frame':   3439936 obs. of  12 variables: #>  $ mcid        : chr  \"MID25783135\" \"MID25783135\" \"MID25783135\" \"MID25783135\" ... #>  $ institution : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term        : chr  \"19911\" \"19911\" \"19911\" \"19911\" ... #>  $ course      : chr  \"\" \"\" \"\" \"\" ... #>  $ abbrev      : chr  \"SPCH\" \"CH\" \"ED\" \"ENGL\" ... #>  $ number      : chr  \"363\" \"101\" \"103\" \"101\" ... #>  $ section     : chr  \"001\" \"005\" \"002\" \"050\" ... #>  $ type        : chr  \"Lecture\" \"Lecture\" \"Lecture\" \"Lecture\" ... #>  $ faculty_rank: chr  \"\" \"\" \"\" \"\" ... #>  $ hours_course: num  3 4 1 3 5 3 3 3 3 4 ... #>  $ pass_fail   : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ grade       : chr  \"A\" \"C\" \"A\" \"B\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(course$mcid)) #> [1] 95633 summary(course$hours_course) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    3.00    3.00    2.71    3.00   99.50   60742 # type of courses sort(unique(course$type)) #>  [1] \"\"                         \"Academic Redemption\"      #>  [3] \"Blended\"                  \"Directed Study\"           #>  [5] \"Duplicate Credit\"         \"Exemption Credit\"         #>  [7] \"Grade History\"            \"Honors\"                   #>  [9] \"Individual Study\"         \"Ineigible to Repeat\"      #> [11] \"Internship/Practicum\"     \"Laboratory\"               #> [13] \"Lecture\"                  \"Lecture/Supervised Lab\"   #> [15] \"Lecture/Unsupervised Lab\" \"Living Community\"         #> [17] \"Make-Up\"                  \"Online\"                   #> [19] \"Problem Session\"          \"Research\"                 #> [21] \"Seminar\"                  \"Special Exam\"             #> [23] \"Special Topics\"           \"Supervised Laboratory\"    #> [25] \"Synchronized\"             \"Test\"                     #> [27] \"Thesis/Dissertation\"      \"Unsupervised Laboratory\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-1","dir":"Articles","previous_headings":"Inspect the course data","what":"Exercises","title":"Getting started","text":"Determine possible values faculty_rank column. Determine range terms term column. Determine possible values grade column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-term-data","dir":"Articles","previous_headings":"","what":"Inspect the term data","title":"Getting started","text":"term table 13 term-related variables students sample. data dictionary, can navigate midfielddata website term page view information help page running observation one term one student keyed student ID term. see data structure, run term 710,841 observations occupies approximately 82 MB memory. number unique students found , number unique students student term . recorded student, students must degree-seeking. recorded term, students must complete term. data can include degree-seekers fail complete term well term-completers seeking degree—hence difference numbers Summarize quantitative variables. Examine categorical variables values.","code":"? term str(term) #> Classes 'data.table' and 'data.frame':   710841 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783156\" \"MID25783156\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20011\" \"20013\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"040201\" \"040201\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 14 16 16 17 18 18 17 9 ... #>  $ hours_term_attempt : num  19 14 14 16 16 17 18 18 17 13 ... #>  $ hours_cumul        : num  19 33 14 30 46 63 81 99 17 26 ... #>  $ hours_cumul_attempt: num  19 33 14 30 46 63 81 99 17 30 ... #>  $ gpa_term           : num  2.47 3.21 3.07 3.62 3.13 3.82 4 3.5 2.53 1.61 ... #>  $ gpa_cumul          : num  2.47 2.79 3.07 3.36 3.28 3.42 3.55 3.54 2.53 2.13 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # number of unique IDs length(unique(term$mcid)) #> [1] 94028 summary(term$hours_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    9.00   12.00   11.45   15.00   46.00  summary(term$gpa_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   2.400   3.000   2.857   3.540   9.300     267 sort(unique(term$level)) #> [1] \"01 Freshman\"  \"02 Sophomore\" \"03 Junior\"    \"04 Senior\"  sort(unique(term$standing)) #> [1] \"Academic Probation\"               \"Academic Suspension\"              #> [3] \"Academic Suspension - Reinstated\" \"Academic Warning\"                 #> [5] \"Good Standing\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-2","dir":"Articles","previous_headings":"Inspect the term data","what":"Exercises","title":"Getting started","text":"Determine possible values coop column. Determine range terms term column. Determine median value gpa_cumul column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-degree-data","dir":"Articles","previous_headings":"","what":"Inspect the degree data","title":"Getting started","text":"degree table 5 degree-related variables students sample. data dictionary, can navigate midfielddata website degree page view information help page running observation unique student keyed student ID. see data structure, run degree 47,499 observations occupies approximately 10 MB memory. number unique students found Thus 47,499 graduates (degree) 97,640 students admitted (student). Examine categorical variables values. Checking degrees recorded NA results empty table, thus students degree graduates.","code":"? degree str(degree) #> Classes 'data.table' and 'data.frame':   47499 obs. of  5 variables: #>  $ mcid       : chr  \"MID25783162\" \"MID25783178\" \"MID25783188\" \"MID25783195\" ... #>  $ institution: chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term_degree: chr  \"19963\" \"20001\" \"20023\" \"19966\" ... #>  $ cip6       : chr  \"521401\" \"143501\" \"230101\" \"521401\" ... #>  $ degree     : chr  \"Bachelor of Science\" \"Bachelor of Science\" \"Bachelor of Arts\" \"Bachelor of Science\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(degree$mcid)) #> [1] 47499 sort(unique(degree$institution)) #>  [1] \"Institution A\" \"Institution B\" \"Institution C\" \"Institution D\" #>  [5] \"Institution E\" \"Institution F\" \"Institution G\" \"Institution H\" #>  [9] \"Institution J\" \"Institution K\" \"Institution L\" \"Institution M\"  sort(unique(degree$degree)) #>  [1] \"Bachelor's Degree\"                   \"Bachelor of Architecture\"            #>  [3] \"Bachelor of Arts\"                    \"Bachelor of Arts and Sciences\"       #>  [5] \"Bachelor of Arts in Letters\"         \"Bachelor of Business Administration\" #>  [7] \"Bachelor of Fine Arts\"               \"Bachelor of Interior Design\"         #>  [9] \"Bachelor of Music\"                   \"Bachelor of Science\" degree[is.na(degree)] #> Empty data.table (0 rows and 5 cols): mcid,institution,term_degree,cip6,degree"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-3","dir":"Articles","previous_headings":"Inspect the degree data","what":"Exercises","title":"Getting started","text":"packages functions specialized data frame summaries. Try one—may find useful future data explorations. Install skimr package, load library(\"skimr\"), run skim(x), x one data tables, example, skim(student), skim(degree), etc.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"review-the-midfieldr-functions","dir":"Articles","previous_headings":"","what":"Review the midfieldr functions","title":"Getting started","text":"midfieldr functions introduced detail subsequent vignettes, can introduce general organization .  add_* family functions takes working data frames input adds specific columns interest without subsetting rows.  filter_* family functions takes working data frames input subsets rows match conditions; selected columns subset specified.  condition_* family functions takes highly-structured data frames input produces output data frames conditioned particular tasks.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-4","dir":"Articles","previous_headings":"Review the midfieldr functions","what":"Exercises","title":"Getting started","text":"View help pages functions add_timely_term() add_completion_timely(). Summarize difference(s) two functions. Describe manner one depends . View help pages functions add_institution() add_race_sex(). List similarities two functions . List differences two functions .","code":""},{"path":[]},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Getting started","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") suppressMessages(library(\"data.table\"))  # loading data data(student) data(course) data(term) data(degree)  # student str(student) length(unique(student$mcid)) summary(student$sat_math) summary(student$age) sort(unique(student$sex)) sort(unique(student$race))  # course str(course) length(unique(course$mcid)) summary(course$hours_course) sort(unique(course$type))  # term str(term) length(unique(term$mcid)) summary(term$hours_term) summary(term$gpa_term) sort(unique(term$level)) sort(unique(term$standing))  # degree str(degree) length(unique(degree$mcid)) sort(unique(degree$institution)) sort(unique(degree$degree)) degree[is.na(degree)]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Case study: Goals","text":"present study four parts: Goals. Describing study parameters. Data. Transforming data yield observations interest. Metrics. Calculating summary statistics metrics. Displays. Creating tables charts display results.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"goals","dir":"Articles","previous_headings":"","what":"Goals","title":"Case study: Goals","text":"goal case study compare “stickiness” Civil, Electrical, Industrial, Mechanical Engineering programs students grouped race/ethnicity sex. Program stickiness ratio number students graduating program number students ever enrolled program—measure program’s success attracting, keeping, graduating undergraduates.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Case study: Data","text":"data processing goal reduce source data tables specific observations needed compute metrics. data processing tasks include combination filtering observations (rows), creating, renaming, recoding variables (columns), joining data frames. analysis organized produce two data frames—students ever enrolled programs students graduating programs—joined written file starting point next section case study. writing script follow along, start packages:","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE )"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"Case study: Data","text":"MIDFIELD data block-record form, , every row observation (keyed student ID) every column variable. Data structure explored greater detail Getting started vignette. Importing. Load three midfielddata data tables.","code":"# Load three data sets from midfielddata data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-ever-enrolled","dir":"Articles","previous_headings":"","what":"Gather ever enrolled","title":"Case study: Data","text":"Copying. Copy term data set create working data frame (DT), leaving term unaltered later use. result 710,841 observations. usually note number observations change. Filtering. study, two variables term data needed start: student ID mcid program code cip6. drop unnecessary columns remove duplicate rows unique combinations student ID program CIP. result 161,696 observations 94,028 unique students. number unique students smaller number observations students change programs course study. one row per unique combination student (mcid) program code (cip6).","code":"# Create a working data frame DT <- copy(term) str(DT) #> Classes 'data.table' and 'data.frame':   710841 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783156\" \"MID25783156\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20011\" \"20013\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"040201\" \"040201\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 14 16 16 17 18 18 17 9 ... #>  $ hours_term_attempt : num  19 14 14 16 16 17 18 18 17 13 ... #>  $ hours_cumul        : num  19 33 14 30 46 63 81 99 17 26 ... #>  $ hours_cumul_attempt: num  19 33 14 30 46 63 81 99 17 30 ... #>  $ gpa_term           : num  2.47 3.21 3.07 3.62 3.13 3.82 4 3.5 2.53 1.61 ... #>  $ gpa_cumul          : num  2.47 2.79 3.07 3.36 3.28 3.42 3.55 3.54 2.53 2.13 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # Minimize the dimensions of the data DT <- DT[, .(mcid, cip6)] DT <- unique(DT) DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783156 040201 #>      3: MID25783162 140102 #>      4: MID25783162 520301 #>      5: MID25783162 521401 #>     ---                    #> 161692: MID26697682 240101 #> 161693: MID26697685 300000 #> 161694: MID26697685 521201 #> 161695: MID26697689 240101 #> 161696: MID26697702 240101 # Count unique IDs length(unique(DT$mcid)) #> [1] 94028"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Filter for data sufficiency","title":"Case study: Data","text":"student records near lower upper terms bound available data must excluded prevent false summaries involving timely program completion. apply filter, determine timely completion term data sufficiency. Creating variables. Using information term, add timely_term variable well supporting variables used construction. Creating variables. Using information term, add data_sufficiency variable well supporting variables used construction. Filtering. filter retain observations data sufficient drop unnecessary columns. result 111,932 observations 63,952 unique students.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, midfield_term = term) DT[] #>                mcid   cip6 term_i     level_i adj_span timely_term #>              <char> <char> <char>      <char>    <num>      <char> #>      1: MID25783135 520101  19911 01 Freshman        6       19963 #>      2: MID25783156 040201  20011 01 Freshman        6       20063 #>      3: MID25783162 140102  19921 01 Freshman        6       19973 #>      4: MID25783162 520301  19921 01 Freshman        6       19973 #>      5: MID25783162 521401  19921 01 Freshman        6       19973 #>     ---                                                            #> 161692: MID26697682 240101  20163 01 Freshman        6       20221 #> 161693: MID26697685 300000  20151 01 Freshman        6       20203 #> 161694: MID26697685 521201  20151 01 Freshman        6       20203 #> 161695: MID26697689 240101  20163   04 Senior        3       20191 #> 161696: MID26697702 240101  20161 01 Freshman        6       20213 # Determine data sufficiency for every student DT <- add_data_sufficiency(DT, midfield_term = term) DT[] #>                mcid   cip6     level_i adj_span timely_term term_i lower_limit #>              <char> <char>      <char>    <num>      <char> <char>      <char> #>      1: MID25783135 520101 01 Freshman        6       19963  19911       19871 #>      2: MID25783156 040201 01 Freshman        6       20063  20011       19871 #>      3: MID25783162 140102 01 Freshman        6       19973  19921       19871 #>      4: MID25783162 520301 01 Freshman        6       19973  19921       19871 #>      5: MID25783162 521401 01 Freshman        6       19973  19921       19871 #>     ---                                                                        #> 161692: MID26697682 240101 01 Freshman        6       20221  20163       20021 #> 161693: MID26697685 300000 01 Freshman        6       20203  20151       20021 #> 161694: MID26697685 521201 01 Freshman        6       20203  20151       20021 #> 161695: MID26697689 240101   04 Senior        3       20191  20163       20021 #> 161696: MID26697702 240101 01 Freshman        6       20213  20161       20021 #>         upper_limit data_sufficiency #>              <char>           <char> #>      1:       20036          include #>      2:       20036    exclude-upper #>      3:       20036          include #>      4:       20036          include #>      5:       20036          include #>     ---                              #> 161692:       20164    exclude-upper #> 161693:       20164    exclude-upper #> 161694:       20164    exclude-upper #> 161695:       20164    exclude-upper #> 161696:       20164    exclude-upper # Retain observations having sufficient data  DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid, cip6)] DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>      4: MID25783162 521401 #>      5: MID25783178 140102 #>     ---                    #> 111928: MID26697576 521401 #> 111929: MID26697599 110401 #> 111930: MID26697599 521201 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-degree-seeking","dir":"Articles","previous_headings":"","what":"Filter for degree-seeking","title":"Case study: Data","text":"studying stickiness, exclude non-degree-seeking students. filter students using student data contains degree seeking students. Filtering. Retain degree-seeking students . result 111,932 observations. (change expected example students midfielddata practice data degree-seeking.)","code":"# Retain degree-seeking students DT <- filter_match(DT, match_to = student, by_col = \"mcid\") DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>      4: MID25783162 521401 #>      5: MID25783178 140102 #>     ---                    #> 111928: MID26697576 521401 #> 111929: MID26697599 110401 #> 111930: MID26697599 521201 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Case study: Data","text":"filter program, construct data frame labels four engineering programs keyed US Classification Instructional Programs (CIP) codes. codes bundled midfieldr cip data set. cip6 variable data 6-digit code programs students enrolled given term. already searched cip data set programs, report results: Civil Engineering CIPs start 1408, Electrical Engineering 1410, Mechanical Engineering 1419, Industrial/Systems Engineering 1427, 1435, 1436, 1437. Filtering Gather 6-digit CIP codes programs case study. Drop unnecessary variables. Creating variables. Add variable label 15 programs one four conventional program abbreviations use comparing metrics, .e., Civil (CE), Electrical (EE), Mechanical (), Industrial/Systems Engineering (ISE). Joining. checked new abbreviations correctly represent programs, drop cip6name variable join program names working data frame. Filtering. instances NA programs dropped. result 7661 observations 7133 unique students. Filtering. program label can associated multiple CIP codes. drop code filter remove duplicates ensure unique combinations ID program. result 7660 observations 7133 unique students. Creating variables. Add variable label group “ever” enrolled distinguish group graduates created next. Copy data frame new name save later.","code":"# Gather program CIP codes study_program <- filter_search(cip, keep_text = c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) study_program <- study_program[, .(cip6, cip6name)] study_program[] #>       cip6                                                      cip6name #>     <char>                                                        <char> #>  1: 140801                                    Civil Engineering, General #>  2: 140802                                      Geotechnical Engineering #>  3: 140803                                        Structural Engineering #>  4: 140804                        Transportation and Highway Engineering #>  5: 140805                                   Water Resources Engineering #>  6: 140899                                      Civil Engineering, Other #>  7: 141001        Electrical, Electronics and Communications Engineering #>  8: 141003                                 Laser and Optical Engineering #>  9: 141004                                Telecommunications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering, Other #> 11: 141901                                        Mechanical Engineering #> 12: 142701                                           Systems Engineering #> 13: 143501                                        Industrial Engineering #> 14: 143601                                     Manufacturing Engineering #> 15: 143701                                           Operations Research # Assign four program names by 6-digit CIP code study_program[, program := fcase(     cip6 %like% \"^1408\", \"CE\",      cip6 %like% \"^1410\", \"EE\",      cip6 %like% \"^1419\", \"ME\",      cip6 %between% c(\"142701\", \"143701\"), \"ISE\" )]  # Confirm that abbreviations match the longer program names print(study_program[, .(cip6name, program)]) #>                                                          cip6name program #>                                                            <char>  <char> #>  1:                                    Civil Engineering, General      CE #>  2:                                      Geotechnical Engineering      CE #>  3:                                        Structural Engineering      CE #>  4:                        Transportation and Highway Engineering      CE #>  5:                                   Water Resources Engineering      CE #>  6:                                      Civil Engineering, Other      CE #>  7:        Electrical, Electronics and Communications Engineering      EE #>  8:                                 Laser and Optical Engineering      EE #>  9:                                Telecommunications Engineering      EE #> 10: Electrical, Electronics and Communications Engineering, Other      EE #> 11:                                        Mechanical Engineering      ME #> 12:                                           Systems Engineering     ISE #> 13:                                        Industrial Engineering     ISE #> 14:                                     Manufacturing Engineering     ISE #> 15:                                           Operations Research     ISE # Join program names to working data  study_program[, cip6name := NULL] DT <- merge(DT, study_program, by = \"cip6\", all.x = TRUE) DT[] #>           cip6        mcid program #>         <char>      <char>  <char> #>      1: 010000 MID25787629    <NA> #>      2: 010000 MID25788554    <NA> #>      3: 010000 MID25788738    <NA> #>      4: 010000 MID25790164    <NA> #>      5: 010000 MID25793224    <NA> #>     ---                            #> 111928: 999999 MID26613031    <NA> #> 111929: 999999 MID26613035    <NA> #> 111930: 999999 MID26613108    <NA> #> 111931: 999999 MID26613476    <NA> #> 111932: 999999 MID26622821    <NA> # Retain observations in our four programs  DT <- DT[!is.na(program)] DT[] #>         cip6        mcid program #>       <char>      <char>  <char> #>    1: 140801 MID25783441      CE #>    2: 140801 MID25784209      CE #>    3: 140801 MID25784489      CE #>    4: 140801 MID25784709      CE #>    5: 140801 MID25784742      CE #>   ---                            #> 7657: 143501 MID26692926     ISE #> 7658: 143501 MID26693368     ISE #> 7659: 143501 MID26695626     ISE #> 7660: 143501 MID26696116     ISE #> 7661: 143501 MID26696429     ISE # Drop duplicate rows DT[, cip6 := NULL] DT <- unique(DT) DT[] #>              mcid program #>            <char>  <char> #>    1: MID25783441      CE #>    2: MID25784209      CE #>    3: MID25784489      CE #>    4: MID25784709      CE #>    5: MID25784742      CE #>   ---                     #> 7656: MID26692926     ISE #> 7657: MID26693368     ISE #> 7658: MID26695626     ISE #> 7659: MID26696116     ISE #> 7660: MID26696429     ISE # Conclude development of the ever-enrolled observations DT[, group := \"ever\"] ever <- copy(DT) ever[] #>              mcid program  group #>            <char>  <char> <char> #>    1: MID25783441      CE   ever #>    2: MID25784209      CE   ever #>    3: MID25784489      CE   ever #>    4: MID25784709      CE   ever #>    5: MID25784742      CE   ever #>   ---                            #> 7656: MID26692926     ISE   ever #> 7657: MID26693368     ISE   ever #> 7658: MID26695626     ISE   ever #> 7659: MID26696116     ISE   ever #> 7660: MID26696429     ISE   ever"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-graduate-subset","dir":"Articles","previous_headings":"","what":"Gather graduate subset","title":"Case study: Data","text":"Copying. Copy degree data set create new working data frame (DT), leaving degree unaltered later use. Filtering. Students potentially counted graduates must subset ever enrolled population. result 5390 observations 5390 unique students. IDs already filtered data sufficiency degree-seeking.","code":"# Begin development of the graduate observations DT <- copy(degree) str(DT) #> Classes 'data.table' and 'data.frame':   47499 obs. of  5 variables: #>  $ mcid       : chr  \"MID25783162\" \"MID25783178\" \"MID25783188\" \"MID25783195\" ... #>  $ institution: chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term_degree: chr  \"19963\" \"20001\" \"20023\" \"19966\" ... #>  $ cip6       : chr  \"521401\" \"143501\" \"230101\" \"521401\" ... #>  $ degree     : chr  \"Bachelor of Science\" \"Bachelor of Science\" \"Bachelor of Arts\" \"Bachelor of Science\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # Graduates must be a subset of ever-enrolled students DT <- filter_match(DT, match_to = ever, by_col = \"mcid\") DT[] #>              mcid   institution term_degree   cip6              degree #>            <char>        <char>      <char> <char>              <char> #>    1: MID25783178 Institution M       20001 143501 Bachelor of Science #>    2: MID25783441 Institution M       19963 140801 Bachelor of Science #>    3: MID25783491 Institution M       20001 141001 Bachelor of Science #>    4: MID25783912 Institution M       20001 143501 Bachelor of Science #>    5: MID25784489 Institution M       19931 140801 Bachelor of Science #>   ---                                                                  #> 5386: MID26696771 Institution L       20143 141001 Bachelor of Science #> 5387: MID26696967 Institution L       20141 141901 Bachelor of Science #> 5388: MID26697163 Institution L       20133 141901 Bachelor of Science #> 5389: MID26697444 Institution L       20151 240199 Bachelor of Science #> 5390: MID26697447 Institution L       20154 141001 Bachelor of Science"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-by-completion-status","dir":"Articles","previous_headings":"","what":"Filter by completion status","title":"Case study: Data","text":"counted graduate stickiness metric, student must complete program timely manner (default 6 years admission, reduced spans transfer students). Add variables. Completion status requires timely completion term variable. Creating variables. Using information degree, add completion_status variable well supporting variables used construction. Filtering. Retain records “positive” completion status (.e. completion 6 years less) drop unnecessary variables. result 4614 unique observations.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, midfield_term = term) DT[] #>              mcid   institution term_degree   cip6              degree term_i #>            <char>        <char>      <char> <char>              <char> <char> #>    1: MID25783178 Institution M       20001 143501 Bachelor of Science  19946 #>    2: MID25783441 Institution M       19963 140801 Bachelor of Science  19921 #>    3: MID25783491 Institution M       20001 141001 Bachelor of Science  19961 #>    4: MID25783912 Institution M       20001 143501 Bachelor of Science  19971 #>    5: MID25784489 Institution M       19931 140801 Bachelor of Science  19891 #>   ---                                                                         #> 5386: MID26696771 Institution L       20143 141001 Bachelor of Science  20101 #> 5387: MID26696967 Institution L       20141 141901 Bachelor of Science  20101 #> 5388: MID26697163 Institution L       20133 141901 Bachelor of Science  20101 #> 5389: MID26697444 Institution L       20151 240199 Bachelor of Science  20101 #> 5390: MID26697447 Institution L       20154 141001 Bachelor of Science  20111 #>            level_i adj_span timely_term #>             <char>    <num>      <char> #>    1:  01 Freshman        6       20003 #>    2:  01 Freshman        6       19973 #>    3:  01 Freshman        6       20013 #>    4:  01 Freshman        6       20023 #>    5:  01 Freshman        6       19943 #>   ---                                   #> 5386: 02 Sophomore        5       20143 #> 5387:  01 Freshman        6       20153 #> 5388: 02 Sophomore        5       20143 #> 5389:  01 Freshman        6       20153 #> 5390:  01 Freshman        6       20163 # Determine program completion status for every student DT <- add_completion_status(DT, midfield_degree = degree) DT[] #>              mcid   institution   cip6              degree term_i      level_i #>            <char>        <char> <char>              <char> <char>       <char> #>    1: MID25783178 Institution M 143501 Bachelor of Science  19946  01 Freshman #>    2: MID25783441 Institution M 140801 Bachelor of Science  19921  01 Freshman #>    3: MID25783491 Institution M 141001 Bachelor of Science  19961  01 Freshman #>    4: MID25783912 Institution M 143501 Bachelor of Science  19971  01 Freshman #>    5: MID25784489 Institution M 140801 Bachelor of Science  19891  01 Freshman #>   ---                                                                          #> 5386: MID26696771 Institution L 141001 Bachelor of Science  20101 02 Sophomore #> 5387: MID26696967 Institution L 141901 Bachelor of Science  20101  01 Freshman #> 5388: MID26697163 Institution L 141901 Bachelor of Science  20101 02 Sophomore #> 5389: MID26697444 Institution L 240199 Bachelor of Science  20101  01 Freshman #> 5390: MID26697447 Institution L 141001 Bachelor of Science  20111  01 Freshman #>       adj_span timely_term term_degree completion completion_status #>          <num>      <char>      <char>     <lgcl>            <char> #>    1:        6       20003       20001       TRUE          positive #>    2:        6       19973       19963       TRUE          positive #>    3:        6       20013       20001       TRUE          positive #>    4:        6       20023       20001       TRUE          positive #>    5:        6       19943       19931       TRUE          positive #>   ---                                                               #> 5386:        5       20143       20143       TRUE          positive #> 5387:        6       20153       20141       TRUE          positive #> 5388:        5       20143       20133       TRUE          positive #> 5389:        6       20153       20151       TRUE          positive #> 5390:        6       20163       20154       TRUE          positive # Retain timely completers DT <- DT[completion_status == \"positive\"] DT <- DT[, .(mcid, cip6)] DT[] #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783441 140801 #>    3: MID25783491 141001 #>    4: MID25783912 143501 #>    5: MID25784489 140801 #>   ---                    #> 4610: MID26696771 141001 #> 4611: MID26696967 141901 #> 4612: MID26697163 141901 #> 4613: MID26697444 240199 #> 4614: MID26697447 141001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-by-program-1","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Case study: Data","text":"result 3552 unique observations. Creating variables. Add variable label group “grad” distinguish group ever enrolled students created earlier.","code":"# Join program names to working data  DT <- merge(DT, study_program, by = \"cip6\", all.x = TRUE) DT <- DT[!is.na(program)]  # Unique observations DT <- DT[, .(mcid, program)] DT <- unique(DT) DT[] #>              mcid program #>            <char>  <char> #>    1: MID25783441      CE #>    2: MID25784489      CE #>    3: MID25784709      CE #>    4: MID25784742      CE #>    5: MID25784843      CE #>   ---                     #> 3548: MID26689274     ISE #> 3549: MID26692926     ISE #> 3550: MID26695626     ISE #> 3551: MID26696116     ISE #> 3552: MID26696429     ISE # Conclude development of the graduate observations DT[, group := \"grad\"] DT[] #>              mcid program  group #>            <char>  <char> <char> #>    1: MID25783441      CE   grad #>    2: MID25784489      CE   grad #>    3: MID25784709      CE   grad #>    4: MID25784742      CE   grad #>    5: MID25784843      CE   grad #>   ---                            #> 3548: MID26689274     ISE   grad #> 3549: MID26692926     ISE   grad #> 3550: MID26695626     ISE   grad #> 3551: MID26696116     ISE   grad #> 3552: MID26696429     ISE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"join-ever-and-grad","dir":"Articles","previous_headings":"","what":"Join ever and grad","title":"Case study: Data","text":"Joining. Combine data frames ever-enrolled graduates.","code":"# Join the two data frames  DT <- rbindlist(list(DT, ever)) DT[] #>               mcid program  group #>             <char>  <char> <char> #>     1: MID25783441      CE   grad #>     2: MID25784489      CE   grad #>     3: MID25784709      CE   grad #>     4: MID25784742      CE   grad #>     5: MID25784843      CE   grad #>    ---                            #> 11208: MID26692926     ISE   ever #> 11209: MID26693368     ISE   ever #> 11210: MID26695626     ISE   ever #> 11211: MID26696116     ISE   ever #> 11212: MID26696429     ISE   ever"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"add-demographics","dir":"Articles","previous_headings":"","what":"Add demographics","title":"Case study: Data","text":"Creating variables. Using information student, add variables race/ethnicity sex. result 11,212 observations 7133 unique students. IDs labeled “grad” subset labeled “ever”. Write file. Results like , used inputs calculating summary statistics metrics, often written file intermediate result. case, data frame bundled midfieldr study_stickiness_observ.","code":"# Add columns for student race/ethnicity and sex DT <- add_race_sex(DT, midfield_student = student) DT[] #>               mcid program  group            race    sex #>             <char>  <char> <char>          <char> <char> #>     1: MID25783178     ISE   ever           Black   Male #>     2: MID25783178     ISE   grad           Black   Male #>     3: MID25783441      CE   ever           White   Male #>     4: MID25783441      CE   grad           White   Male #>     5: MID25783491      EE   ever           White   Male #>    ---                                                   #> 11208: MID26697163      ME   ever Hispanic/Latinx   Male #> 11209: MID26697163      ME   grad Hispanic/Latinx   Male #> 11210: MID26697444      ME   ever           White   Male #> 11211: MID26697447      EE   ever           Asian   Male #> 11212: MID26697447      EE   grad           Asian   Male"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Case study: Data","text":"Starting student, term, degree data tables, processed data obtain observations needed determine stickiness. intermediate result written file.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-metrics.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Case study---metrics","text":"next step case study … writing script(s) follow along, can continue previous script start new script section. starting new script, start packages data. study_reduced_data data frame captures state working data frame close “Data” part case study. bundled midfieldr convenience tutorial user.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # data.table printing options options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE )"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-004-case-displays.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Case study---displays","text":"next step case study … writing script(s) follow along, can continue previous script start new script section. starting new script, start packages data.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # data.table printing options options(   datatable.print.nrows = 6,   datatable.print.topn = 3,   datatable.print.class = TRUE )"},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Layton. Maintainer, author, copyright holder. Russell Long. Data manager, author, copyright holder. Matthew Ohland. Author, copyright holder. Marisa Orr. Author, copyright holder. Susan Lord. Author, copyright holder. US National Science Foundation. Funder.","code":""},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Layton R, Long R, Ohland M, Orr M, Lord S (2022). midfieldr: Tools Studying MIDFIELD Student Unit Record Data R. https://github.com/MIDFIELDR/midfieldr, https://engineering.purdue.edu/MIDFIELD.","code":"@Manual{,   title = {midfieldr: Tools for Studying MIDFIELD Student Unit Record Data in R},   author = {Richard Layton and Russell Long and Matthew Ohland and Marisa Orr and Susan Lord},   year = {2022},   note = {https://github.com/MIDFIELDR/midfieldr, https://engineering.purdue.edu/MIDFIELD}, }"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our pledge","title":"Contributor code of conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Contributor code of conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement responsibilities","title":"Contributor code of conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor code of conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor code of conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement midfield@purdue.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement guidelines","title":"Contributor code of conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement guidelines","what":"1. Correction","title":"Contributor code of conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement guidelines","what":"2. Warning","title":"Contributor code of conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement guidelines","what":"3. Temporary Ban","title":"Contributor code of conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement guidelines","what":"4. Permanent Ban","title":"Contributor code of conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor code of conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"midfieldr","dir":"","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Tools Studying MIDFIELD Student Unit Record Data R goal midfieldr provide tools guides working longitudinal data MIDFIELD database.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 21 US institutions (June 2022). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework major) institution time. midfieldr R package provides tools working MIDFIELD SURs. tools midfieldr work research data MIDFIELD database practice data midfielddata package. midfielddata R package provides practice data (proportionate stratified sample MIDFIELD) longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016 organized four data tables: four data tables keyed student ID. Tables student degree one observation (row) per student. Tables course term multiple observations per student students can enrolled one course term one term program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"outline typical workflow : Define study parameters Transform data yield observations interest Calculate summary statistics metrics Create tables charts display results Iterate brief usage example, goal tabulate counts engineering students race/ethnicity, sex, graduation status. Data processing performed using data.table syntax. midfielddata package, use data sets student, term, degree. midfieldr package, use functions: add_timely_term() add_data_sufficiency() filter_match() add_completion_status() add_race_sex() Tabulated results usage example. “Positive outcome” count graduates completing programs 6 years. “Negative outcome” sum non-graduates plus graduates completing 6 years.","code":"# Packages used library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Load the midfielddata practice data used here data(student, term, degree)  # Initialize the working data table DT <- copy(term)  # Timely completion term required for data sufficiency DT <- add_timely_term(DT, midfield_term = term)  # Filter for data sufficiency DT <- add_data_sufficiency(DT, midfield_term = term) DT <- DT[data_sufficiency == \"include\"]  # Filter observations for degree-seeking DT <- filter_match(DT, match_to = student, by_col = \"mcid\")  # Filter observations for engineering programs DT <- DT[cip6 %like% \"^14\"]  # Filter observations for unique students (first instance) DT <- DT[, .SD[1], by = c(\"mcid\")]  # Determine if completion status is positive or negative DT <- add_completion_status(DT, midfield_degree = degree)  # Add demographics DT <- add_race_sex(DT, midfield_student = student)  # Calculate summary statistics DT <- DT[, .N, by = c(\"completion_status\", \"sex\", \"race\")]  # Tabulate results DT[, race_sex := paste(race, sex)] DT_display <- dcast(DT, race_sex ~ completion_status, value.var = \"N\") setcolorder(DT_display, c(\"race_sex\", \"positive\")) setnames(DT_display,   old = c(\"race_sex\", \"positive\", \"negative\"),   new = c(\"Group\", \"Positive outcome\", \"Negative outcome\") )"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Articles. listing vignettes. Reference (midfieldr). listing midfieldr functions prepared data. Reference (midfielddata). listing four practice MIDFIELD data tables.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"R (>= 3.5.0) data.table (>= 1.9.8) ggplot2 recommended data graphics, required.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"install-midfieldr","dir":"","previous_headings":"","what":"Install midfieldr","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr yet available CRAN. install development version midfieldr drat repository, type Console: can confirm successful installation running following lines bring package help page Help window.","code":"# install midfieldr from drat repo install.packages(\"midfieldr\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") library(\"midfieldr\") help(\"midfieldr-package\")"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"install-midfielddata","dir":"","previous_headings":"","what":"Install midfielddata","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"size, installing practice data takes time; please patient wait prompt “>” reappear. Console, run: can confirm successful installation running following lines bring package help page Help window.","code":"# install midfielddata   install.packages(\"midfielddata\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") # be patient library(\"midfielddata\") help(\"midfielddata-package\")"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"contribute midfieldr, Please clone repo locally. Commit code separate branch. Use checkmate package include runtime argument checks functions. Use tinytest package write unit tests code. Save tests inst/tinytest/ directory. provide feedback report bug, Use GitHub Issues page. Please run package unit tests report results bug report. user can run package tests installing tinytest package running: Participation open source project subject Code Conduct.","code":"test_results <- tinytest::test_package(\"midfieldr\")     as.data.frame(test_results)"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr licensed GPL (>= 2.0) (full license) © 2018–2022 Richard Layton, Russell Long, Susan Lord, Matthew Ohland, Marisa Orr.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine program completion status for every student — add_completion_status","title":"Determine program completion status for every student — add_completion_status","text":"Add columns data frame Student Unit Record (SUR)  observations indicate whether student completed program,  , whether completion timely. Requires MIDFIELD  degree data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine program completion status for every student — add_completion_status","text":"","code":"add_completion_status(dframe, midfield_degree = degree)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine program completion status for every student — add_completion_status","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variables mcid  timely_term. midfield_degree Data frame SUR degree observations keyed  student ID. Default degree. Required variables  mcid term_degree.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine program completion status for every student — add_completion_status","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_degree Character. Term program completed.   Encoded YYYYT. completion Logical. TRUE denotes students completing   programs. completion_status Character. Label observation   indicate program completion status. Possible values :   positive, indicating programs completed later timely   completion term; negative, indicating programs never completed   well programs completed timely completion terms.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine program completion status for every student — add_completion_status","text":"\"program completion\" mean undergraduate earning  baccalaureate degree. many studies, students must complete  programs specified time span, example 4-, 6-, 8-years  admission. , completion timely; , completion  untimely grouped non-completers computing  metric graduation rate. Completion status \"positive\" students completing programs  later timely completion terms. See also  add_timely_term().","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine program completion status for every student — add_completion_status","text":"","code":"# Start with IDs and add institution and timely term # dframe <- toy_student[1:10, .(mcid)] # dframe <- add_institution(dframe, midfield_term = toy_term) # dframe <- add_timely_term(dframe, midfield_term = toy_term) #  #  # # Timely completion column without detail # add_completion_timely(dframe, midfield_degree = toy_degree) #  #  # # Timely completion column with detail # add_completion_timely(dframe, midfield_degree = toy_degree, detail = TRUE) #  #  # # If present, existing completion_timely column is overwritten # DT1 <- add_completion_timely(dframe, midfield_degree = toy_degree) # DT2 <- add_completion_timely(DT1, midfield_degree = toy_degree) # all.equal(DT1, DT2)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_timely.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column to evaluate program completion — add_completion_timely","title":"Add a column to evaluate program completion — add_completion_timely","text":"Add column logical values (TRUE/FALSE) data frame indicating whether student completes program timely manner. Obtains information MIDFIELD degree data table equivalent.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_timely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column to evaluate program completion — add_completion_timely","text":"","code":"add_completion_timely(dframe, midfield_degree, ..., detail = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_timely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column to evaluate program completion — add_completion_timely","text":"dframe Data frame required variables mcid timely_term. midfield_degree MIDFIELD degree data table equivalent required variables mcid term. ... used, forces later arguments used name. detail Optional flag add columns reporting information evaluation based, default FALSE.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_timely.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column to evaluate program completion — add_completion_timely","text":"data.table following properties: Rows modified. Column completion_timely added option add           columns completion, term_degree,           cip6_degree. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_timely.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column to evaluate program completion — add_completion_timely","text":"Program completion typically considered timely occurs within specific span years admission. persistence metric depends program completion (graduation), students whose program completion timely counted graduates; students whose program completion untimely (taking longer specific span complete) counted non-graduates. input data frame dframe must include timely_term column obtained using add_timely_term() function. Completion considered timely : 1) student completed program; 2) degree term later estimated timely completion term. function performs subsetting. detail TRUE, additional column(s) support finding returned well. extra columns completion indicating TRUE/FALSE student completed program term_degree degree table giving first term degree(s), , earned. Existing columns names added columns overwritten.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_timely.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column to evaluate program completion — add_completion_timely","text":"","code":"# Start with IDs and add institution and timely term dframe <- toy_student[1:10, .(mcid)] dframe <- add_institution(dframe, midfield_term = toy_term) dframe <- add_timely_term(dframe, midfield_term = toy_term)   # Timely completion column without detail add_completion_timely(dframe, midfield_degree = toy_degree) #>            mcid   institution timely_term completion_timely #>  1: MID25783939 Institution M       20053              TRUE #>  2: MID25784402 Institution M       20103             FALSE #>  3: MID25805538 Institution M       20091             FALSE #>  4: MID25808099 Institution M       19923              TRUE #>  5: MID25816437 Institution M       20113             FALSE #>  6: MID25826223 Institution M       19913              TRUE #>  7: MID25828870 Institution M       19933              TRUE #>  8: MID25831839 Institution M       20123             FALSE #>  9: MID25839453 Institution M       20111             FALSE #> 10: MID25840802 Institution M       19951              TRUE   # Timely completion column with detail add_completion_timely(dframe, midfield_degree = toy_degree, detail = TRUE) #>            mcid   institution timely_term term_degree cip6_degree completion #>  1: MID25783939 Institution M       20053       20031      010901       TRUE #>  2: MID25784402 Institution M       20103        <NA>        <NA>      FALSE #>  3: MID25805538 Institution M       20091        <NA>        <NA>      FALSE #>  4: MID25808099 Institution M       19923       19903      521401       TRUE #>  5: MID25816437 Institution M       20113        <NA>        <NA>      FALSE #>  6: MID25826223 Institution M       19913       19901      131202       TRUE #>  7: MID25828870 Institution M       19933       19923      140801       TRUE #>  8: MID25831839 Institution M       20123        <NA>        <NA>      FALSE #>  9: MID25839453 Institution M       20111        <NA>        <NA>      FALSE #> 10: MID25840802 Institution M       19951       19933      520201       TRUE #>     completion_timely #>  1:              TRUE #>  2:             FALSE #>  3:             FALSE #>  4:              TRUE #>  5:             FALSE #>  6:              TRUE #>  7:              TRUE #>  8:             FALSE #>  9:             FALSE #> 10:              TRUE   # If present, existing completion_timely column is overwritten DT1 <- add_completion_timely(dframe, midfield_degree = toy_degree) DT2 <- add_completion_timely(DT1, midfield_degree = toy_degree) all.equal(DT1, DT2) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine data sufficiency for every student — add_data_sufficiency","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"Add column data frame Student Unit Record (SUR)  observations labels row inclusion exclusion based data  sufficiency near upper lower bounds institution's data range.  Requires MIDFIELD term data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"add_data_sufficiency(dframe, midfield_term = term)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variables mcid  timely_term. See also add_timely_term(). midfield_term Data frame SUR term observations keyed  student ID. Default term. Required variables  mcid, institution, term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_i Character. Initial term student's longitudinal   record, encoded YYYYT. overwritten present dframe. lower_limit Character. Initial term institution's data   range, encoded YYYYT upper_limit Character. Final term institution's data   range, encoded YYYYT data_sufficiency Character. Label observation   inclusion exclusion based data sufficiency. Possible values :   include, indicating available data sufficient   estimating timely program completion; exclude-upper, indicating   data insufficient upper limit data range;   exclude-lower, indicating data insufficient   lower limit.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"time span MIDFIELD term data varies institution,  lower upper bounds. student records,  near bounds creates unavoidable ambiguity trying assess  program completion. records must identified cases  excluded prevent false summary counts.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"# Start with IDs # dframe <- toy_student[1:10, .(mcid)] #  #  # # Add the timely completion term, required for data sufficiency  # dframe <- add_timely_term(dframe, midfield_term = toy_term) #  #  # # Add the data sufficiency variable  # add_data_sufficiency(dframe, midfield_term = toy_term) #  #  # # Data sufficiency column with details # add_data_sufficiency(dframe, midfield_term = toy_term, details = TRUE) #  #  # # If present, existing data_sufficiency column is overwritten # # Using dframe from above, # DT1 <- add_data_sufficiency(dframe, midfield_term = toy_term) # DT2 <- add_data_sufficiency(DT1, midfield_term = toy_term) # all.equal(DT1, DT2)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_institution.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column of institution names — add_institution","title":"Add a column of institution names — add_institution","text":"Add column character values institution names (labels) using student ID join-variable. Obtains information MIDFIELD term data table equivalent. MIDFIELD practice data, labels de-identified.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_institution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column of institution names — add_institution","text":"","code":"add_institution(dframe, midfield_term = term)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_institution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column of institution names — add_institution","text":"dframe Data frame required variable mcid. midfield_term MIDFIELD term data table equivalent required variables mcid, institution, term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_institution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column of institution names — add_institution","text":"data.table  following properties: Rows modified. Column institution added. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_institution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column of institution names — add_institution","text":"student associated one institution, institution completed terms returned. existing column name added column overwritten.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_institution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column of institution names — add_institution","text":"","code":"# Extract a column of IDs from student id <- toy_student[, .(mcid)]   # Add institutions from term DT1 <- add_institution(id, midfield_term = toy_term) head(DT1) #>           mcid   institution #> 1: MID25783939 Institution M #> 2: MID25784402 Institution M #> 3: MID25805538 Institution M #> 4: MID25808099 Institution M #> 5: MID25816437 Institution M #> 6: MID25826223 Institution M nrow(DT1) #> [1] 100   # Will overwrite institution column if present DT2 <- add_institution(DT1, midfield_term = toy_term) head(DT2) #>           mcid   institution #> 1: MID25783939 Institution M #> 2: MID25784402 Institution M #> 3: MID25805538 Institution M #> 4: MID25808099 Institution M #> 5: MID25816437 Institution M #> 6: MID25826223 Institution M nrow(DT2) #> [1] 100"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns for student race/ethnicity and sex — add_race_sex","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"Add columns data frame Student Unit Record (SUR)  observations labels row student's race/ethnicity sex.  Requires MIDFIELD student data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"","code":"add_race_sex(dframe, midfield_student = student)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variable mcid. midfield_student Data frame SUR student observations keyed  student ID. Default student. Required variables  mcid, race, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: race Character, self-reported race/ethnicity, e.g.,   Asian, Black, Hispanic/LatinX, etc. sex Character, self-reported sex, values Female, Male,   Unknown","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"MIDFIELD student data includes variables race (race/ethnicity)  sex self-reported institution.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"","code":"# Add race and sex to a data frame of graduates dframe <- toy_degree[1:5, c(\"mcid\", \"cip6\")] add_race_sex(dframe, midfield_student = toy_student) #>           mcid   cip6  race    sex #> 1: MID25783939 010901 White Female #> 2: MID25808099 521401 White Female #> 3: MID25826223 131202 White Female #> 4: MID25828870 140801 White   Male #> 5: MID25840802 520201 White Female   # Add race and sex to a data frame from the term table dframe <- toy_term[21:26, c(\"mcid\", \"institution\", \"level\")] add_race_sex(dframe, midfield_student = toy_student) #>           mcid   institution        level  race    sex #> 1: MID25845841 Institution M    03 Junior White Female #> 2: MID25846316 Institution M  01 Freshman White   Male #> 3: MID25846316 Institution M 02 Sophomore White   Male #> 4: MID25846316 Institution M 02 Sophomore White   Male #> 5: MID25846316 Institution M 02 Sophomore White   Male #> 6: MID25846316 Institution M 02 Sophomore White   Male   # If present, existing race and sex columns are overwritten # Using dframe from above, DT1 <- add_race_sex(dframe, midfield_student = toy_student) DT2 <- add_race_sex(DT1, midfield_student = toy_student) all.equal(DT1, DT2) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a timely completion term for every student — add_timely_term","title":"Calculate a timely completion term for every student — add_timely_term","text":"Add column data frame Student Unit Record (SUR)  observations indicates latest term program completion  considered timely every student. Requires MIDFIELD  term data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"add_timely_term(   dframe,   midfield_term = term,   ...,   span = NULL,   sched_span = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a timely completion term for every student — add_timely_term","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variable mcid. midfield_term Data frame SUR term observations keyed  student ID. Default term. Required variables  mcid, term, level. ... used, forces later arguments used name. span Optional integer scalar, number years define timely completion. Commonly used values 100%, 150%, 200%   sched_span. Default 6 years. sched_span Optional integer scalar, number years institution officially schedules completing program. Default 4 years.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a timely completion term for every student — add_timely_term","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_i Character. Initial term student's longitudinal   record, encoded YYYYT level_i Character. Student level (01 Freshman, 02 Sophomore,   etc.) initial term adj_span Numeric. Integer span years timely completion   adjusted student's initial level. timely_term Character. Latest term program   completion considered timely every student. Encoded YYYYT.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a timely completion term for every student — add_timely_term","text":"\"program completion\" mean undergraduate earning  baccalaureate degree. many studies, students must complete  programs specified time span, example 4-, 6-, 8-years  admission. , completion timely; , completion  untimely grouped non-completers computing  metric graduation rate. heuristic assigns span number years (default 6 years)  every student. students admitted second-year level higher,  span reduced one year full year student assumed  completed. example, student admitted  second-year level assumed completed one year program,  span reduced one year. adjusted span added initial term create timely  completion term timely_term column.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"# Using the toy data sets # DT <- toy_student[1:10, .(mcid)] # add_timely_term(DT, midfield_term = toy_term) #  #  # # Add details on which the timely term is based # add_timely_term(DT, midfield_term = toy_term, detail = TRUE) #  #  # # Define timely completion as 200% of scheduled span (8 years) # add_timely_term(DT, midfield_term = toy_term, span = 8) #  #  # # Optional arguments (after ...) must be named # add_timely_term(DT, toy_term, detail = TRUE, span = 6)"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of academic programs — cip","title":"Table of academic programs — cip","text":"data table based US National Center Education Statistics (NCES), Integrated Postsecondary Education Data System (IPEDS), 2010 CIP, https://nces.ed.gov/ipeds/cipcode. data codes names 1582 instructional programs organized three levels: 2-digit series, 4-digit series, 6-digit series.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of academic programs — cip","text":"","code":"cip"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of academic programs — cip","text":"data.table 1582 rows 6 columns keyed 6-digit CIP code: cip6 Character 6-digit code representing \"specific   instructional programs\" (US National Center Education Statistics). cip6name Character program name 6-digit level cip4 Character 4-digit code (first 4 digits cip6)   representing \"intermediate groupings programs   comparable content objectives.\" cip4name Character program name 4-digit level. cip2 Character 2-digit code (first 2 digits cip6)   representing \"general groupings related programs.\" cip2name Character program name 2-digit level.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of academic programs — cip","text":"midfielddata taxonomy includes one non-IPEDS code (999999) Undecided Unspecified, instances institutions reported program information students enrolled program.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition FYE data for multiple imputation — condition_fye","title":"Condition FYE data for multiple imputation — condition_fye","text":"Filter first-year-engineering (FYE) students prepare variables predicting unknown starting majors. prepared variables institution, race, sex (predictors) cip6 (missing values imputed). Obtains requisite information MIDFIELD term data table equivalent. Returns data frame formatted multiple imputation using mice package.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition FYE data for multiple imputation — condition_fye","text":"","code":"condition_fye(dframe, midfield_term, ..., fye_codes = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Condition FYE data for multiple imputation — condition_fye","text":"dframe Data frame degree-seeking engineering students database, required variables mcid, race, sex. midfield_term MIDFIELD term data table equivalent required variables mcid, institution, term, cip6. ... used, forces later arguments used name. fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default 140102. Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes---start 14\"---ignored.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition FYE data for multiple imputation — condition_fye","text":"data.table following properties: One row every FYE student. Columns ID, institution, race, sex, CIP code,     except ID converted factors. Additional columns dframe     dropped. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition FYE data for multiple imputation — condition_fye","text":"US institutions first year engineering (FYE) programs, typically common first year curriculum prerequisite declaring engineering major. FYE programs problematic persistence metrics. example, conventional graduation rate metric, students count graduates complete program admitted. students graduate FYE; instead, upon completing FYE, transition degree-granting engineering program. Therefore, include FYE students persistence metric requiring degree-granting \"starting\" program, predict engineering program FYE student declared required enroll FYE. predict_fye() sorts students two categories: Students complete FYE declare engineering major.     easy case--student's first opportunity,     enrolled engineering program choosing. use     program predicted  starting program. Students , FYE, declare engineering major.     complicated case---data provide information     regarding engineering program student declared     originally institution required enroll FYE.     students, treat starting program missing data     predicted using multiple imputation. function extracts terms FYE students midfield_term. cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. first () post-FYE program identified. program engineering, CIP retained predicted starting major. , CIP replaced NA treated missing data imputation. Lastly, predictor variables (institution, race, sex) imputed variable (cip6) converted unordered factors. resulting data frame ready use input mice package.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Condition FYE data for multiple imputation — condition_fye","text":"","code":"# Using toy data DT <- toy_student[, .(mcid, race, sex)] condition_fye(dframe = DT, midfield_term = toy_term) #>            mcid   institution            race    sex   cip6 #>  1: MID26060301 Institution C           Asian Female   <NA> #>  2: MID25995980 Institution C Hispanic/Latinx Female   <NA> #>  3: MID25997636 Institution C Hispanic/Latinx Female   <NA> #>  4: MID26086310 Institution C Hispanic/Latinx Female   <NA> #>  5: MID26000057 Institution C           White Female   <NA> #>  6: MID26561940 Institution J           White   Male   <NA> #>  7: MID25846316 Institution M           White   Male 143501 #>  8: MID25847220 Institution M           White   Male 143501 #>  9: MID25848589 Institution M           White   Male 143501 #> 10: MID25852023 Institution M           White   Male 143501 #> 11: MID25828870 Institution M           White   Male 149999   # Overwrites institution if present in dframe DT <- toy_student[, .(mcid, institution, race, sex)] condition_fye(dframe = DT, midfield_term = toy_term) #>            mcid   institution            race    sex   cip6 #>  1: MID26060301 Institution C           Asian Female   <NA> #>  2: MID25995980 Institution C Hispanic/Latinx Female   <NA> #>  3: MID25997636 Institution C Hispanic/Latinx Female   <NA> #>  4: MID26086310 Institution C Hispanic/Latinx Female   <NA> #>  5: MID26000057 Institution C           White Female   <NA> #>  6: MID26561940 Institution J           White   Male   <NA> #>  7: MID25846316 Institution M           White   Male 143501 #>  8: MID25847220 Institution M           White   Male 143501 #>  9: MID25848589 Institution M           White   Male 143501 #> 10: MID25852023 Institution M           White   Male 143501 #> 11: MID25828870 Institution M           White   Male 149999   # Other columns, if any, are dropped colnames(toy_student) #> [1] \"mcid\"           \"institution\"    \"transfer\"       \"hours_transfer\" #> [5] \"race\"           \"sex\"            colnames(condition_fye(toy_student, toy_term)) #> [1] \"mcid\"        \"institution\" \"race\"        \"sex\"         \"cip6\"          # Optional argument permits multiple CIP codes for FYE condition_fye(DT, toy_term, fye_codes = c(\"140101\", \"140102\")) #>            mcid   institution            race    sex   cip6 #>  1: MID26060301 Institution C           Asian Female   <NA> #>  2: MID25995980 Institution C Hispanic/Latinx Female   <NA> #>  3: MID25997636 Institution C Hispanic/Latinx Female   <NA> #>  4: MID26086310 Institution C Hispanic/Latinx Female   <NA> #>  5: MID26000057 Institution C           White Female   <NA> #>  6: MID26561940 Institution J           White   Male   <NA> #>  7: MID25846316 Institution M           White   Male 143501 #>  8: MID25847220 Institution M           White   Male 143501 #>  9: MID25848589 Institution M           White   Male 143501 #> 10: MID25852023 Institution M           White   Male 143501 #> 11: MID25828870 Institution M           White   Male 149999"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition multiway data for graphing — condition_multiway","title":"Condition multiway data for graphing — condition_multiway","text":"Transform data frame two categorical variables factors levels ordered display Cleveland \"multiway dot plot,\" ordering panels rows crucial perception effects. multiway data---defined Cleveland (1993) ---single quantitative value (response) every combination levels two categorical variables. Typically quantitative column used order levels two categorical columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition multiway data for graphing — condition_multiway","text":"","code":"condition_multiway(   dframe,   categ_col,   quant_col,   ...,   detail = NULL,   order_by = NULL,   param_col = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Condition multiway data for graphing — condition_multiway","text":"dframe Data frame least three columns: two categorical variables (columns can character factor) one quantitative response variable (column must numeric). categ_col Character vector names (quotes) two categorical columns. quant_col Character scalar name (quotes) quantitative response column. ... used, forces later arguments used name. detail Optional flag retain columns created implement ordering scheme, default FALSE. TRUE, extra columns useful graphing vertical reference lines---indicating, instance, panel median, mean, total count---visualize quantity panels ordered. order_by Optional character scalar (quotes) assigning        method ordering levels categorical variables.        following values possible: \"median\" (default) Orders median values        quantitative column grouped category. \"mean\" Orders mean values quantitative        column grouped category. \"sum\" Orders sum values quantitative        column grouped category. Useful quantitative variable        count frequency. \"percent\" Orders ratios computed category. Used        quantitative response variable ratio (percent) two        columns integer counts (frequencies). counts summed        category obtain grouped percentages used order levels        categorical variables. Requires two parameter columns        identified param_col assumes parameter        larger column sum denominator ratio. \"alphabet\" Orders levels categorical variables        alphabetically. Rarely useful perceiving effects, can        useful value look . param_col Optional character vector names (quotes) columns used parameters order_by method. Currently supports \"percent\" method ---expects two column names (order) integer count columns used construct percentage response column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition multiway data for graphing — condition_multiway","text":"data.table following properties: Rows modified. quantitative column modified. two categorical columns factors levels ordered         method selected. Optionally, additional columns ()         created implement ordering scheme can retained. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition multiway data for graphing — condition_multiway","text":"multiway dot plot, panels, individual dot plots display, levels, rows panel. One category encoded panels; rows. panels quantitative scale x-axis organization category levels y-axis. Panels rows ordered ordering scheme increases \"graph order\", , increases left right bottom top. Note \"multiway\" context refers data structure graph design defined Cleveland, methods analysis described Kroonenberg (2008) .","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Condition multiway data for graphing — condition_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley, Hoboken, NJ.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows by matching values in shared key columns — filter_match","title":"Subset rows by matching values in shared key columns — filter_match","text":"Subset rows one data frame values key column match values similar key column second data frame. Columns subset unless selected optional argument.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"filter_match(dframe, match_to, by_col, ..., select = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows by matching values in shared key columns — filter_match","text":"dframe Data frame subset returned. Must contain key column named by_col. match_to Data frame key column values matched . column used required key column named by_col. by_col Character scalar, name key column. Values key column must character strings. ... used, force later arguments used name. select Optional character vector dframe column names retain, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows by matching values in shared key columns — filter_match","text":"data.table following properties: Rows matching values. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows by matching values in shared key columns — filter_match","text":"Two data frames input. match_to data frame subset retain key column .  result merged dframe inner-join, returning rows dframe values matching key values match_to. Column subsetting occurs inner join, key column included vector column names select.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"# Start with a toy sample of student (built-in data set) head(toy_student) #>           mcid   institution              transfer hours_transfer  race    sex #> 1: MID25783939 Institution M First-Time in College             NA White Female #> 2: MID25784402 Institution M First-Time in College             NA White   Male #> 3: MID25805538 Institution M First-Time in College             NA White Female #> 4: MID25808099 Institution M First-Time in College             NA White Female #> 5: MID25816437 Institution M First-Time in College             NA White   Male #> 6: MID25826223 Institution M   First-Time Transfer             NA White Female nrow(toy_student) #> [1] 100   # Filter by matching IDs of graduates student_example <- filter_match(toy_student,   match_to = toy_degree,   by_col = \"mcid\" ) head(student_example) #>           mcid   institution              transfer hours_transfer  race    sex #> 1: MID25783939 Institution M First-Time in College             NA White Female #> 2: MID25808099 Institution M First-Time in College             NA White Female #> 3: MID25826223 Institution M   First-Time Transfer             NA White Female #> 4: MID25828870 Institution M First-Time in College             NA White   Male #> 5: MID25840802 Institution M First-Time in College             NA White Female #> 6: MID25845841 Institution M First-Time in College             NA White Female # Note change in number of rows nrow(student_example) #> [1] 64   # Same filter and select 3 columns only student_example <- filter_match(toy_student,   match_to = toy_degree,   by_col = \"mcid\",   select = c(\"mcid\", \"race\", \"sex\") ) head(student_example) #>           mcid  race    sex #> 1: MID25783939 White Female #> 2: MID25808099 White Female #> 3: MID25826223 White Female #> 4: MID25828870 White   Male #> 5: MID25840802 White Female #> 6: MID25845841 White Female nrow(student_example) #> [1] 64   # Filter term data for engineering program codes (start with \"14\") term_example <- toy_term[grepl(\"^14\", cip6), ] head(term_example) #>           mcid   institution  term   cip6        level hours_term #> 1: MID25784402 Institution M 20081 141901    04 Senior         19 #> 2: MID25816437 Institution M 20071 140601 02 Sophomore         15 #> 3: MID25828870 Institution M 19881 140102  01 Freshman         17 #> 4: MID25828870 Institution M 19883 140102 02 Sophomore         14 #> 5: MID25828870 Institution M 19891 140102 02 Sophomore         14 #> 6: MID25828870 Institution M 19893 149999    03 Junior         17 nrow(term_example) #> [1] 78   # Filter student by matching IDs of engineering students student_example <- filter_match(toy_student,   match_to = term_example,   by_col = \"mcid\",   select = c(\"mcid\", \"institution\", \"transfer\", \"sex\") ) head(student_example) #>           mcid   institution              transfer    sex #> 1: MID25784402 Institution M First-Time in College   Male #> 2: MID25816437 Institution M First-Time in College   Male #> 3: MID25828870 Institution M First-Time in College   Male #> 4: MID25839453 Institution M First-Time in College Female #> 5: MID25845841 Institution M First-Time in College Female #> 6: MID25846316 Institution M First-Time in College   Male nrow(student_example) #> [1] 26   # The 'by_col' column does not have to be included in the `select` columns student_example <- filter_match(toy_student,   match_to = term_example,   by_col = \"mcid\",   select = c(\"institution\", \"transfer\", \"sex\") ) head(student_example) #>      institution              transfer    sex #> 1: Institution M First-Time in College   Male #> 2: Institution M First-Time in College   Male #> 3: Institution M First-Time in College   Male #> 4: Institution M First-Time in College Female #> 5: Institution M First-Time in College Female #> 6: Institution M First-Time in College   Male nrow(student_example) #> [1] 26"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_search","title":"Subset rows that include matches to search strings — filter_search","text":"Subset data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument. commonly used searching CIP data set.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"filter_search(dframe, keep_text = NULL, ..., drop_text = NULL, select = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows that include matches to search strings — filter_search","text":"dframe Data frame searched. keep_text Optional character vector search text retaining rows, default NULL. ... used, force later arguments used name. drop_text Optional character vector search text dropping rows, default NULL. select Optional character vector column names return, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_search","text":"data.table following properties: Rows matching elements keep_text excluding rows           matching elements drop_text. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_search","text":"Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"# Subset using keywords filter_search(cip, keep_text = \"engineering\") #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>   4:   14                                      Engineering 1403 #>   5:   14                                      Engineering 1404 #>  ---                                                            #> 115:   15                           Engineering Technology 1516 #> 116:   15                           Engineering Technology 1599 #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                     cip4name   cip6 #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering   # drop_text argument, when used, must be named filter_search(cip, \"civil engineering\", drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other   # Subset using numerical codes filter_search(cip, keep_text = c(\"050125\", \"160501\")) #>    cip2                                            cip2name cip4 #> 1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #> 2:   16      Foreign Languages, Literatures and Linguistics 1605 #>                                       cip4name   cip6 #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #> 1:                 German Studies #> 2: German Language and Literature   # subset using regular expressions filter_search(cip, keep_text = \"^54\") #>    cip2 cip2name cip4 cip4name   cip6 #> 1:   54  History 5401  History 540101 #> 2:   54  History 5401  History 540102 #> 3:   54  History 5401  History 540103 #> 4:   54  History 5401  History 540104 #> 5:   54  History 5401  History 540105 #> 6:   54  History 5401  History 540106 #> 7:   54  History 5401  History 540107 #> 8:   54  History 5401  History 540108 #> 9:   54  History 5401  History 540199 #>                                               cip6name #> 1:                                    History, General #> 2:                    American History (United States) #> 3:                                    European History #> 4:    History and Philosophy of Science and Technology #> 5: Public, Applied History and Archival Administration #> 6:                                       Asian History #> 7:                                    Canadian History #> 8:                                    Military History #> 9:                                      History, Other filter_search(cip, keep_text = c(\"^1407\", \"^1408\")) #>    cip2    cip2name cip4             cip4name   cip6 #> 1:   14 Engineering 1407 Chemical Engineering 140701 #> 2:   14 Engineering 1407 Chemical Engineering 140702 #> 3:   14 Engineering 1407 Chemical Engineering 140799 #> 4:   14 Engineering 1408    Civil Engineering 140801 #> 5:   14 Engineering 1408    Civil Engineering 140802 #> 6:   14 Engineering 1408    Civil Engineering 140803 #> 7:   14 Engineering 1408    Civil Engineering 140804 #> 8:   14 Engineering 1408    Civil Engineering 140805 #> 9:   14 Engineering 1408    Civil Engineering 140899 #>                                  cip6name #> 1:                   Chemical Engineering #> 2:  Chemical and Biomolecular Engineering #> 3:            Chemical Engineering, Other #> 4:             Civil Engineering, General #> 5:               Geotechnical Engineering #> 6:                 Structural Engineering #> 7: Transportation and Highway Engineering #> 8:            Water Resources Engineering #> 9:               Civil Engineering, Other   # Select columns filter_search(cip,   keep_text = \"^54\",   select = c(\"cip6\", \"cip4name\") ) #>      cip6 cip4name #> 1: 540101  History #> 2: 540102  History #> 3: 540103  History #> 4: 540104  History #> 5: 540105  History #> 6: 540106  History #> 7: 540107  History #> 8: 540108  History #> 9: 540199  History   # Multiple passes to narrow the results first_pass <- filter_search(cip, \"civil\") second_pass <- filter_search(first_pass, \"engineering\") filter_search(second_pass, drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting programs imputed for FYE students — fye_start","title":"Starting programs imputed for FYE students — fye_start","text":"Degree-granting, engineering CIP codes can substituted First-Year-Engineering (FYE) codes required persistence metric.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting programs imputed for FYE students — fye_start","text":"","code":"fye_start"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting programs imputed for FYE students — fye_start","text":"data.table 5033 rows 2 columns keyed student ID. variables : mcid Character, de-identified student ID. start Character, 6-digit CIP code predicted starting   program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting programs imputed for FYE students — fye_start","text":"FYE different non-degree-granting CIP designations \"undecided\" \"undeclared\". FYE students neither undecided undeclared---accepted institutions Engineering majors. Starting programs fye_start engineering programs predict students declared required enroll FYE. prediction based first post-FYE program imputation suitable multiple categorical variables using mice package. predictor variables institution, race, sex. predicted variable 6-digit CIP code degree-granting engineering program institution. fye_start holds practice data midfielddata---values commingled research database available MIDFIELD partners.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"goal midfieldr provide tools working MIDFIELD data, resource longitudinal, de-identified, individual student unit records.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 21 US institutions (June 2022). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework program) institution time. proportionate stratified sample data (practice) available midfielddata, R data package longitudinal student unit-records 98,000 undergraduates 12 institutions  1987--2016 organized four data tables: student course term degree tools midfieldr work equally well practice data midfielddata research data MIDFIELD. work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_grad_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study graduation rate results — study_grad_rate","title":"Case-study graduation rate results — study_grad_rate","text":"Graduation rate metric results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results grouped program, race/ethnicity, sex. Used case study developed vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_grad_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study graduation rate results — study_grad_rate","text":"","code":"study_grad_rate"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_grad_rate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study graduation rate results — study_grad_rate","text":"data.table 32 rows 3 columns keyed program, race/ethnicity, sex. program Character, instructional programs selected study race_sex Character, student race/ethnicity sex grad_rate Numerical, program graduation rate, persistence metric","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_grad_rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study graduation rate results — study_grad_rate","text":"Graduation rate program fraction students starting program graduate program. Data also subset remove ambiguous levels race/ethnicity.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study programs — study_program","title":"Case-study programs — study_program","text":"Data frame 6-digit CIP codes custom program names Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Used case study developed vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study programs — study_program","text":"","code":"study_program"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study programs — study_program","text":"data.table 12 rows 2 columns keyed 6-digit CIP code. variables : cip6 Character, 6-digit code program. program Character, program name assigned grouping   summarizing display graphs tables.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study programs — study_program","text":"Program names shortened convenience creating graphs tables.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_reduced_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study reduced data — study_reduced_data","title":"Case-study reduced data — study_reduced_data","text":"intermediate result provided convenience vignette users.  Data midfielddata package reduced observations needed  determine stickiness case study programs  Civil,  Electrical, Industrial/Systems, Mechanical Engineering.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_reduced_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study reduced data — study_reduced_data","text":"","code":"study_reduced_data"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_reduced_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study reduced data — study_reduced_data","text":"data.table 7800 rows 5 columns keyed ID. mcid Character, anonymized student identifier program_ever Character, abbreviation indicating program   student ever enrolled program_grad Character, abbreviation indicating program   student graduated timely fashion race Character, race/ethnicity self-reported student,   e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student,   values Female, Male, Unknown","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness results — study_stickiness","title":"Case-study stickiness results — study_stickiness","text":"intermediate result provided convenience vignette users.  Longitudinal stickiness results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results keyed program, race/ethnicity, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness results — study_stickiness","text":"","code":"study_stickiness"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness results — study_stickiness","text":"data.table 33 rows 6 columns keyed program, race/ethnicity, sex. program Character, program name assigned grouping   summarizing display graphs tables. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student, values  Female, Male. ever Numerical, number students ever enrolled program,  accounting data sufficiency timely completion. grad Numerical, number students completing program,  accounting data sufficiency timely completion. stick Numerical, program stickiness, ratio number  students completing program number students ever enrolled  program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study stickiness results — study_stickiness","text":"Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness observations — study_stickiness_observ","title":"Case-study stickiness observations — study_stickiness_observ","text":"intermediate result provided convenience vignette users.  Data midfielddata package processed obtain observations students ever enrolled , graduating timely fashion , case study programs Civil, Electrical, Industrial/Systems,  Mechanical Engineering. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness observations — study_stickiness_observ","text":"","code":"study_stickiness_observ"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness observations — study_stickiness_observ","text":"data.table 11212 rows 5 columns keyed ID. mcid Character, anonymized student identifier program Character, abbreviation indicating program   student completed group Character, indicating grouping (ever   grad) student belongs. Graduate IDs subset   ever enrolled IDs. race Character, race/ethnicity self-reported student,   e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student,   values Female, Male, Unknown","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study students — study_student","title":"Case-study students — study_student","text":"Data frame student attributes Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. data subset data sufficiency can used starting point different persistence metrics stickiness graduation rate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study students — study_student","text":"","code":"study_student"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_student.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study students — study_student","text":"data.table 8219 rows 8 columns keyed student ID. variables : mcid Character, de-identified student ID. institution Character, anonymized institution name, e.g.,   Institution , Institution B, etc. cip6 Character, 6-digit code program student   enrolled. program Character, program name assigned grouping   summarizing display graphs tables. race Character, race/ethnicity self-reported student,   e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student, values   Female, Male, Unknown. timely_term Character, last academic term program   completion considered timely given student,   format YYYYT. data_sufficiency Logical, indicating whether available data   include sufficient range years justify including student   analysis. data sufficiency criterion already   evaluated, values TRUE.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":null,"dir":"Reference","previous_headings":"","what":"Course data for examples — toy_course","title":"Course data for examples — toy_course","text":"small subset row column MIDFIELD course table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Course data for examples — toy_course","text":"","code":"toy_course"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Course data for examples — toy_course","text":"data.table 4616 rows 6 columns keyed student ID. mcid Character, anonymized student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. abbrev Character, course alphabetical identifier, e.g. ENGR, MATH,  ENGL. number Character, course numeric identifier, e.g. 101, 3429. grade Character, course grade, e.g., +, , -, B+, , NG, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree data for examples — toy_degree","title":"Degree data for examples — toy_degree","text":"small subset row column MIDFIELD degree table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree data for examples — toy_degree","text":"","code":"toy_degree"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Degree data for examples — toy_degree","text":"data.table 64 rows 5 columns keyed student ID. mcid Character, anonymized student ID. institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term  student completes program, format YYYYT. cip6 Character, 6-digit CIP code program student  earns degree. degree Character, type degree awarded, e.g., Bachelor's  Degree, Bachelor Arts, Bachelor Science, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data for examples — toy_student","title":"Student data for examples — toy_student","text":"small subset row column MIDFIELD student table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data for examples — toy_student","text":"","code":"toy_student"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data for examples — toy_student","text":"data.table 100 rows 6 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,   Institution , Institution B, etc. transfer Character, stating whether student First-Time  College students First-Time Transfer student. hours_transfer Numeric, transfer hours accepted  institution. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Hispanic/LatinX, etc. sex character, sex self-reported student, possible  values Female, Male, Unknown.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Term data for examples — toy_term","title":"Term data for examples — toy_term","text":"small subset row column MIDFIELD term table use package examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term data for examples — toy_term","text":"","code":"toy_term"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Term data for examples — toy_term","text":"data.table 169 rows 6 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. cip6 Character, 6-digit CIP code program student  enrolled term. level Character, 01 Freshman, 02 Sophomore, etc. hours_term Numeric, credit hours earned term.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009021--2022-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9021 / 2022-07","title":"midfieldr 1.0.0.9021 / 2022-07","text":"Eliminate requirements named arguments functions using student, term, degree assigning default arguments. Reorganize case study vignettes following common outline Revise data sufficiency include lower limit exclusions Functions return supporting variables Edit function names variable names","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009020--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9020 / 2021-07","title":"midfieldr 1.0.0.9020 / 2021-07","text":"Significant changes earlier versions, backwards compatibility, prompting version number change 1.0.0 Change names practice data tables match names research data Edit practice data values consistency research data values Revise built-data sets use vignettes Rd examples Switch wrapr coalesce %?% assigning default arguments Initial round runtime assertions unit tests complete Make function names arguments internally consistent Edit functions depend data.table functionality Make MIDFIELD data arguments explicit functions Remove dependency dplyr related packages Replace Travis CI GitHub Actions CI Use package checkmate runtime assertions Remove dependency installing midfielddata Switch package tinytest unit testing Separate case study detailed vignettes Completely overhaul midfieldr functions Update README midfielddata README Revise vignettes use new functions","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-010--2018-06","dir":"Changelog","previous_headings":"","what":"midfieldr 0.1.0 / 2018-06","title":"midfieldr 0.1.0 / 2018-06","text":"Initial development version public GitHub","code":""}]
