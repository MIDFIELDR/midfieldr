[{"path":"/articles/art-00-midfield-data.html","id":"student-unit-record-data","dir":"Articles","previous_headings":"","what":"Student unit record data","title":"Getting started","text":"MIDFIELD Student Unit Record (SUR) data de-identified undergraduate student-level information covering admission characteristics, demographics, programs, courses, instructors, grades, degrees. data organized four tables—student, course, term, degree—keyed student ID. proportionate stratified sample data (practice) available midfielddata, R data package longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016 organized four data tables:   vignette, introduce four data tables briefly examine contents. suggest installing loading data.table package. use base R functions vignettes reduce cognitive load new users, times data.table syntax offers advantages brevity speed.","code":""},{"path":"/articles/art-00-midfield-data.html","id":"outline","dir":"Articles","previous_headings":"Student unit record data","what":"Outline","title":"Getting started","text":"Organize midfieldr practice project Load practice data midfielddata Inspect four data tables Preview midfieldr functions","code":""},{"path":"/articles/art-00-midfield-data.html","id":"organize-for-practice","dir":"Articles","previous_headings":"","what":"Organize for practice","title":"Getting started","text":"recommend always work within RStudio Project organize file structure start project. practice working midfieldr, might create RStudio project practice-midfieldr minimal structure: code snippets midfieldr vignettes written relative file paths assume existence minimal structure. However, may course use organization suits needs. Reading: Wilson, Bryan, et al. [1] offer detailed advice organizing computational projects. Highly recommended. Using RStudio Projects provides instructions creating RStudio projects.","code":"/practice-midfieldr         /data       # raw data from any external source          /results    # reproducible results:  graphs and tabulated data         /scripts    # R files, one per vignette          practice-midfieldr.Rproj"},{"path":"/articles/art-00-midfield-data.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"Getting started","text":"code snippets can run Console, though repeatability exploration, useful typed R script. Use data() load midfielddata data tables memory use. example, loading package library(\"midfielddata\") , can run ls() see environment contains zero objects, load student data midfielddata memory, run Checking environment , look RStudio Environment pane, see student listed. typically load data sets need top script just loading midfielddata package. need load session. Checking environment ,","code":"# packages used in this vignette library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # the names of objects in the environment ls() #> character(0) # loading a data set  data(student) # the names of objects in the environment ls() #> [1] \"student\" # load remaining data used in this vignette data(course) data(term) data(degree) # the names of objects in the environment ls() #> [1] \"course\"  \"degree\"  \"student\" \"term\""},{"path":"/articles/art-00-midfield-data.html","id":"inspect-the-student-data","dir":"Articles","previous_headings":"","what":"Inspect the student data","title":"Getting started","text":"student table 13 student-related variables students sample, collected time admitted institutions degree-seeking undergraduates. data dictionary, can navigate midfielddata website student page view information help page running observation unique student keyed student ID. Student IDs institution names anonymized consistent across four data sets. see data structure, run student 97,640 observations occupies approximately 19 MB memory. can confirm student IDs unique running, Summarize quantitative variables. Examine categorical variables values.","code":"? student # view the structure of the data set str(student) #> Classes 'data.table' and 'data.frame':   97640 obs. of  13 variables: #>  $ mcid          : chr  \"MID25783135\" \"MID25783147\" \"MID25783156\" \"MID25783162\" ... #>  $ institution   : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ transfer      : chr  \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" ... #>  $ hours_transfer: num  NA NA NA NA NA NA NA NA NA NA ... #>  $ race          : chr  \"White\" \"White\" \"White\" \"White\" ... #>  $ sex           : chr  \"Male\" \"Female\" \"Female\" \"Male\" ... #>  $ age           : num  17 17 18 17 18 18 17 18 18 18 ... #>  $ us_citizen    : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ home_zip      : chr  \"29485\" \"29072\" \"43026\" \"29572\" ... #>  $ high_school   : chr  \"411900\" \"410825\" \"210568\" \"411465\" ... #>  $ sat_math      : num  580 470 750 560 670 620 642 590 492 620 ... #>  $ sat_verbal    : num  505 530 627 395 530 500 486 620 594 456 ... #>  $ act_comp      : num  21 19 29 18 26 22 24 25 21 21 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # number of unique IDs length(unique(student$mcid)) #> [1] 97640 summary(student$sat_math) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   200.0   520.0   580.0   578.1   640.0   800.0   31705  summary(student$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   16.00   18.00   18.00   18.47   18.00   75.00   22916 sort(unique(student$sex)) #> [1] \"Female\"  \"Male\"    \"Unknown\"  sort(unique(student$race)) #> [1] \"Asian\"           \"Black\"           \"Hispanic/Latinx\" \"International\"   #> [5] \"Native American\" \"Other/Unknown\"   \"White\""},{"path":"/articles/art-00-midfield-data.html","id":"exercises","dir":"Articles","previous_headings":"Inspect the student data","what":"Exercises","title":"Getting started","text":"Determine possible values institution column. Determine possible values transfer column. Determine median sat_verbal score.","code":""},{"path":"/articles/art-00-midfield-data.html","id":"inspect-the-course-data","dir":"Articles","previous_headings":"","what":"Inspect the course data","title":"Getting started","text":"course table 12 course-related variables students sample. data dictionary, can navigate midfielddata website course page view information help page running observation one course one term one student keyed student ID combination course, abbreviation, number, section. see data structure, run four practice data sets midfielddata, course far largest, 3,540,533 observations occupying 349 MB memory. Depending machine, loading course can cause noticeable delay execution time (13 seconds machine), probably want load needed. number unique students. Summarize quantitative variable. Examine categorical variable values.","code":"? course # view the structure of the data set str(course) #> Classes 'data.table' and 'data.frame':   3540533 obs. of  12 variables: #>  $ mcid        : chr  \"MID25783135\" \"MID25783135\" \"MID25783135\" \"MID25783135\" ... #>  $ institution : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term        : chr  \"19911\" \"19911\" \"19911\" \"19911\" ... #>  $ course      : chr  \"\" \"\" \"\" \"\" ... #>  $ abbrev      : chr  \"SPCH\" \"CH\" \"ED\" \"ENGL\" ... #>  $ number      : chr  \"363\" \"101\" \"103\" \"101\" ... #>  $ section     : chr  \"001\" \"005\" \"002\" \"050\" ... #>  $ type        : chr  \"Lecture\" \"Lecture\" \"Lecture\" \"Lecture\" ... #>  $ faculty_rank: chr  \"\" \"\" \"\" \"\" ... #>  $ hours_course: num  3 4 1 3 5 3 3 3 3 4 ... #>  $ pass_fail   : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ grade       : chr  \"A\" \"C\" \"A\" \"B\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(course$mcid)) #> [1] 97640 summary(course$hours_course) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    3.00    3.00    2.69    3.00   99.50   60775 # type of courses sort(unique(course$type)) #>  [1] \"\"                         \"Academic Redemption\"      #>  [3] \"Blended\"                  \"Directed Study\"           #>  [5] \"Duplicate Credit\"         \"Exemption Credit\"         #>  [7] \"Grade History\"            \"Honors\"                   #>  [9] \"Individual Study\"         \"Ineigible to Repeat\"      #> [11] \"Internship/Practicum\"     \"Laboratory\"               #> [13] \"Lecture\"                  \"Lecture/Supervised Lab\"   #> [15] \"Lecture/Unsupervised Lab\" \"Living Community\"         #> [17] \"Make-Up\"                  \"Online\"                   #> [19] \"Problem Session\"          \"Research\"                 #> [21] \"Seminar\"                  \"Special Exam\"             #> [23] \"Special Topics\"           \"Supervised Laboratory\"    #> [25] \"Synchronized\"             \"Test\"                     #> [27] \"Thesis/Dissertation\"      \"Unsupervised Laboratory\""},{"path":"/articles/art-00-midfield-data.html","id":"exercises-1","dir":"Articles","previous_headings":"Inspect the course data","what":"Exercises","title":"Getting started","text":"Determine possible values faculty_rank column. Determine range terms term column. Determine possible values grade column.","code":""},{"path":"/articles/art-00-midfield-data.html","id":"inspect-the-term-data","dir":"Articles","previous_headings":"","what":"Inspect the term data","title":"Getting started","text":"term table 13 term-related variables students sample. data dictionary, can navigate midfielddata website term page view information help page running observation one term one student keyed student ID term. see data structure, run term 727,369 observations occupies approximately 82 MB memory. number unique students found , number unique students student term . recorded student, students must degree-seeking. recorded term, students must complete term. data can include degree-seekers fail complete term well term-completers seeking degree—hence difference numbers Summarize quantitative variables. Examine categorical variables values.","code":"? term str(term) #> Classes 'data.table' and 'data.frame':   727369 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783147\" \"MID25783147\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20041\" \"20043\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"131202\" \"131210\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 17 18 15 15 3 15 15 6 ... #>  $ hours_term_attempt : num  19 14 13 18 15 15 3 15 15 6 ... #>  $ hours_cumul        : num  19 33 17 35 50 65 68 83 98 104 ... #>  $ hours_cumul_attempt: num  19 33 13 31 46 61 64 79 94 100 ... #>  $ gpa_term           : num  2.47 3.21 3.76 2.67 3.2 4 4 4 4 4 ... #>  $ gpa_cumul          : num  2.47 2.79 3.76 3.13 3.15 3.36 3.39 3.5 3.59 3.61 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) # number of unique IDs length(unique(term$mcid)) #> [1] 95995 summary(term$hours_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    9.00   12.00   11.48   15.00   46.00  summary(term$gpa_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   2.400   3.000   2.862   3.540   9.300     267 sort(unique(term$level)) #> [1] \"01 Freshman\"  \"02 Sophomore\" \"03 Junior\"    \"04 Senior\"  sort(unique(term$standing)) #> [1] \"Academic Probation\"               \"Academic Suspension\"              #> [3] \"Academic Suspension - Reinstated\" \"Academic Warning\"                 #> [5] \"Good Standing\""},{"path":"/articles/art-00-midfield-data.html","id":"exercises-2","dir":"Articles","previous_headings":"Inspect the term data","what":"Exercises","title":"Getting started","text":"Determine possible values coop column. Determine range terms term column. Determine median value gpa_cumul column.","code":""},{"path":"/articles/art-00-midfield-data.html","id":"inspect-the-degree-data","dir":"Articles","previous_headings":"","what":"Inspect the degree data","title":"Getting started","text":"degree table 5 degree-related variables students sample. data dictionary, can navigate midfielddata website degree page view information help page running observation unique student keyed student ID. see data structure, run degree 47,499 observations occupies approximately 10 MB memory. number unique students found Thus 47,499 graduates (degree) 97,640 students admitted (student). Examine categorical variables values. Checking degrees recorded NA results empty table, thus students degree graduates.","code":"? degree str(degree) #> Classes 'data.table' and 'data.frame':   47499 obs. of  5 variables: #>  $ mcid       : chr  \"MID25783162\" \"MID25783178\" \"MID25783188\" \"MID25783195\" ... #>  $ institution: chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term       : chr  \"19963\" \"20001\" \"20023\" \"19966\" ... #>  $ cip6       : chr  \"521401\" \"143501\" \"230101\" \"521401\" ... #>  $ degree     : chr  \"Bachelor of Science\" \"Bachelor of Science\" \"Bachelor of Arts\" \"Bachelor of Science\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> # number of unique IDs length(unique(degree$mcid)) #> [1] 47499 sort(unique(degree$institution)) #>  [1] \"Institution A\" \"Institution B\" \"Institution C\" \"Institution D\" #>  [5] \"Institution E\" \"Institution F\" \"Institution G\" \"Institution H\" #>  [9] \"Institution J\" \"Institution K\" \"Institution L\" \"Institution M\"  sort(unique(degree$degree)) #>  [1] \"Bachelor's Degree\"                   \"Bachelor of Architecture\"            #>  [3] \"Bachelor of Arts\"                    \"Bachelor of Arts and Sciences\"       #>  [5] \"Bachelor of Arts in Letters\"         \"Bachelor of Business Administration\" #>  [7] \"Bachelor of Fine Arts\"               \"Bachelor of Interior Design\"         #>  [9] \"Bachelor of Music\"                   \"Bachelor of Science\" degree[is.na(degree)] #> Empty data.table (0 rows and 5 cols): mcid,institution,term,cip6,degree"},{"path":"/articles/art-00-midfield-data.html","id":"exercises-3","dir":"Articles","previous_headings":"Inspect the degree data","what":"Exercises","title":"Getting started","text":"packages functions specialized data frame summaries. Try two compare results. Install Hmisc package, load library(\"Hmisc\"), run describe(x), x one data tables, example, describe(student), describe(degree), etc. Install skimr package, load library(\"skimr\"), run skim(x), x one data tables, example, skim(student), skim(degree), etc.","code":""},{"path":"/articles/art-00-midfield-data.html","id":"overview-of-midfieldr-functions","dir":"Articles","previous_headings":"","what":"Overview of midfieldr functions","title":"Getting started","text":"midfieldr functions introduced detail subsequent vignettes, can introduce general organization . add_* family functions takes working data frames input adds specific columns interest without subsetting rows. filter_* family functions takes working data frames input subsets rows match conditions; selected columns subset specified. condition_* family functions takes highly-structured data frames input produces output data frames conditioned particular tasks.","code":""},{"path":"/articles/art-00-midfield-data.html","id":"exercises-4","dir":"Articles","previous_headings":"Overview of midfieldr functions","what":"Exercises","title":"Getting started","text":"View help pages functions add_timely_term() add_completion_timely(). Summarize difference(s) two functions. Describe manner one depends . View help pages functions add_institution() add_race_sex(). List similarities two functions . List differences two functions .","code":""},{"path":"/articles/art-00-midfield-data.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Getting started","text":"conclude vignette collecting code chunks single, condensed script convenience wish copy R file.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # loading data data(student) data(course) data(term) data(degree)  # student str(student) length(unique(student$mcid)) summary(student$sat_math) summary(student$age) sort(unique(student$sex)) sort(unique(student$race))  # course str(course) length(unique(course$mcid)) summary(course$hours_course) sort(unique(course$type))  # term str(term) length(unique(term$mcid)) summary(term$hours_term) summary(term$gpa_term) sort(unique(term$level)) sort(unique(term$standing))  # degree str(degree) length(unique(degree$mcid)) sort(unique(degree$institution)) sort(unique(degree$degree)) degree[is.na(degree)]"},{"path":"/articles/art-01-multiway.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multiway graphs and tables","text":"take time early tutorial create graphs , Wickham Grolemund state [1], Visualization great place start R programming, payoff clear; get make elegant informative plots help understand data. particular, introduce graphs multiway data one quantitative variable two categorical variables. explained Cleveland [2], … quantitative variable response, goal study depends categorical variables, factors. distinguishes multiway data cross-classification categorical variables; value response combination levels two categorical variables. structure multiway data specific: categorical variable \\(m\\) levels; independent categorical variable \\(n\\) levels; single quantitative value associated every combinations levels two categories. Multiway data typically organized three columns \\(m \\times n\\) rows. Note “multiway” context refers data structure graph design defined Cleveland, methods analysis described Kroonenberg [3].","code":""},{"path":"/articles/art-01-multiway.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Multiway graphs and tables","text":"Start case study stickiness results (study_stickiness) Practice conditioning multiway data display Practice creating multiway graphs duals Practice tabulating multiway data","code":""},{"path":"/articles/art-01-multiway.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Multiway graphs and tables","text":"midfieldr functions condition_multiway() packages can control data.table printed screen following options.","code":"# packages used library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\") # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )"},{"path":"/articles/art-01-multiway.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Multiway graphs and tables","text":"Longitudinal “stickiness” ratio number students graduating program number students ever enrolled program [4]. stickiness metric developed separate vignette—focus graphing result. computed stickiness case study Civil, Electrical, Industrial, Mechanical Engineering saved results data set, study_stickiness. may view help page running data loaded midfieldr (don’t use data() access .) Categorical variables often provided character variables. Without ordering levels, rows panels multiway graph ordered alphabetically—best design gaining insights graph. condition categorical variables, use condition_multiway() convert factors levels ordered median response values. see help page, run quantitative variable stick (stickiness); first categorical variable program; second categorical variable race/ethnicity/sex. conditioning, categorical variables characters, process data frame change row column structure, can see, previous character variables converted factors, levels factors ordered non-alphabetically. program now factor 4 levels; race_sex factor 9 levels. expect 4 \\(\\times\\) 9 = 36 observations. However, rows omitted preserve confidentiality, leaving us 31 observations. median values determine order levels can obtained using details argument. ordering data program, can see given program single value med_program copied many times needed. Similarly, ordering data race_sex, can see given demographic group single value med_race_sex copied many times needed.","code":"? study_stickiness # examine the built-in data study_stickiness #>                    program             race_sex stick #>                     <char>               <char> <num> #>  1:      Civil Engineering         Asian Female  0.45 #>  2:      Civil Engineering         Black Female  0.35 #>  3:      Civil Engineering         White Female  0.46 #>  4:      Civil Engineering           Asian Male  0.48 #>  5:      Civil Engineering           Black Male  0.36 #> ---                                                   #> 27: Mechanical Engineering           Asian Male  0.57 #> 28: Mechanical Engineering           Black Male  0.35 #> 29: Mechanical Engineering Hispanic/Latinx Male  0.43 #> 30: Mechanical Engineering Native American Male  0.29 #> 31: Mechanical Engineering           White Male  0.46 ? condition_multiway() # create a new memory location DT <- copy(study_stickiness) # first category is a character class(DT$program) #> [1] \"character\"  # second category is a character class(DT$race_sex) #> [1] \"character\" # condition as multiway data DT <- condition_multiway(DT) DT #>                    program             race_sex stick #>                     <fctr>               <fctr> <num> #>  1:      Civil Engineering         Asian Female  0.45 #>  2:      Civil Engineering         Black Female  0.35 #>  3:      Civil Engineering         White Female  0.46 #>  4:      Civil Engineering           Asian Male  0.48 #>  5:      Civil Engineering           Black Male  0.36 #> ---                                                   #> 27: Mechanical Engineering           Asian Male  0.57 #> 28: Mechanical Engineering           Black Male  0.35 #> 29: Mechanical Engineering Hispanic/Latinx Male  0.43 #> 30: Mechanical Engineering Native American Male  0.29 #> 31: Mechanical Engineering           White Male  0.46 # first category is now a factor levels(DT$program) #> [1] \"Electrical Engineering\" \"Mechanical Engineering\" \"Civil Engineering\"      #> [4] \"Industrial Engineering\"  # second category is now a factor levels(DT$race_sex) #> [1] \"Native American Male\"   \"Black Male\"             \"Black Female\"           #> [4] \"Hispanic/Latinx Female\" \"White Female\"           \"Hispanic/Latinx Male\"   #> [7] \"Asian Female\"           \"White Male\"             \"Asian Male\" # return median stickiness by category DT_med <- condition_multiway(DT, details = TRUE) # optional code to control data.table printing options(datatable.print.topn = 10)  # programs have a median stickiness across race-sex groups DT_med[order(program)] #>                    program               race_sex med_program med_race_sex #>                     <fctr>                 <fctr>       <num>        <num> #>  1: Electrical Engineering           Asian Female       0.425        0.470 #>  2: Electrical Engineering           Black Female       0.425        0.385 #>  3: Electrical Engineering Hispanic/Latinx Female       0.425        0.425 #>  4: Electrical Engineering           White Female       0.425        0.430 #>  5: Electrical Engineering             Asian Male       0.425        0.540 #>  6: Electrical Engineering             Black Male       0.425        0.365 #>  7: Electrical Engineering   Hispanic/Latinx Male       0.425        0.440 #>  8: Electrical Engineering             White Male       0.425        0.480 #>  9: Mechanical Engineering           Asian Female       0.430        0.470 #> 10: Mechanical Engineering           Black Female       0.430        0.385 #> ---                                                                        #> 22:      Civil Engineering             Black Male       0.450        0.365 #> 23:      Civil Engineering   Hispanic/Latinx Male       0.450        0.440 #> 24:      Civil Engineering             White Male       0.450        0.480 #> 25: Industrial Engineering           Asian Female       0.560        0.470 #> 26: Industrial Engineering           Black Female       0.560        0.385 #> 27: Industrial Engineering           White Female       0.560        0.430 #> 28: Industrial Engineering             Asian Male       0.560        0.540 #> 29: Industrial Engineering             Black Male       0.560        0.365 #> 30: Industrial Engineering   Hispanic/Latinx Male       0.560        0.440 #> 31: Industrial Engineering             White Male       0.560        0.480 #>     stick #>     <num> #>  1:  0.46 #>  2:  0.42 #>  3:  0.40 #>  4:  0.34 #>  5:  0.51 #>  6:  0.37 #>  7:  0.43 #>  8:  0.43 #>  9:  0.61 #> 10:  0.33 #> ---       #> 22:  0.36 #> 23:  0.45 #> 24:  0.50 #> 25:  0.48 #> 26:  0.51 #> 27:  0.58 #> 28:  0.65 #> 29:  0.45 #> 30:  0.68 #> 31:  0.56 # race_sex groupings have a median stickiness across programs DT_med[order(race_sex)] #>                    program               race_sex med_program med_race_sex #>                     <fctr>                 <fctr>       <num>        <num> #>  1: Mechanical Engineering   Native American Male       0.430        0.290 #>  2:      Civil Engineering             Black Male       0.450        0.365 #>  3: Electrical Engineering             Black Male       0.425        0.365 #>  4: Industrial Engineering             Black Male       0.560        0.365 #>  5: Mechanical Engineering             Black Male       0.430        0.365 #>  6:      Civil Engineering           Black Female       0.450        0.385 #>  7: Electrical Engineering           Black Female       0.425        0.385 #>  8: Industrial Engineering           Black Female       0.560        0.385 #>  9: Mechanical Engineering           Black Female       0.430        0.385 #> 10: Electrical Engineering Hispanic/Latinx Female       0.425        0.425 #> ---                                                                        #> 22: Industrial Engineering           Asian Female       0.560        0.470 #> 23: Mechanical Engineering           Asian Female       0.430        0.470 #> 24:      Civil Engineering             White Male       0.450        0.480 #> 25: Electrical Engineering             White Male       0.425        0.480 #> 26: Industrial Engineering             White Male       0.560        0.480 #> 27: Mechanical Engineering             White Male       0.430        0.480 #> 28:      Civil Engineering             Asian Male       0.450        0.540 #> 29: Electrical Engineering             Asian Male       0.425        0.540 #> 30: Industrial Engineering             Asian Male       0.560        0.540 #> 31: Mechanical Engineering             Asian Male       0.430        0.540 #>     stick #>     <num> #>  1:  0.29 #>  2:  0.36 #>  3:  0.37 #>  4:  0.45 #>  5:  0.35 #>  6:  0.35 #>  7:  0.42 #>  8:  0.51 #>  9:  0.33 #> 10:  0.40 #> ---       #> 22:  0.48 #> 23:  0.61 #> 24:  0.50 #> 25:  0.43 #> 26:  0.56 #> 27:  0.46 #> 28:  0.48 #> 29:  0.51 #> 30:  0.65 #> 31:  0.57"},{"path":"/articles/art-01-multiway.html","id":"exercises","dir":"Articles","previous_headings":"Prepare data","what":"Exercises","title":"Multiway graphs and tables","text":"Determine class categorical variables built-data set study_grad_rate. Apply condition_multiway(). Confirm categorical variables factors. Determine order factor levels.","code":""},{"path":"/articles/art-01-multiway.html","id":"create-a-multiway-graph","dir":"Articles","previous_headings":"","what":"Create a multiway graph","title":"Multiway graphs and tables","text":"use conventional ggplot2 functions create multiway graphs. previously ordering levels factors, structured data rows panels multiway graph ordered appropriate medians. panel medians drawn vertical dashed lines. Reminder: practice data, suitable drawing inferences student performance, .e., research.  graph permits direct visual comparison stickiness varies race sex within particular major. Reading multiway graph can effectively compare values within panel panels. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. interesting stories often visual anomalies. explore comparison panels, swap row panel categories, creating dual multiway.","code":"# create one multiway graph ggplot(data = DT_med, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_program),     linetype = 2,     color = \"gray70\"   ) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   )"},{"path":"/articles/art-01-multiway.html","id":"exercise","dir":"Articles","previous_headings":"Create a multiway graph","what":"Exercise","title":"Multiway graphs and tables","text":"Create multiway graph using conditioned study_grad_rate data","code":""},{"path":"/articles/art-01-multiway.html","id":"create-the-dual-multiway-graph","dir":"Articles","previous_headings":"","what":"Create the dual multiway graph","title":"Multiway graphs and tables","text":"previous graph facilitate visual comparisons members race-sex group. Cleveland says, asymmetry, often important explore multiway data many multiway dot plots categorical variables, variable assigned levels. create dual multiway graph, swap roles rows panels. y = race_sex becomes y = program facet_wrap(vars(program) ... becomes facet_wrap(vars(race_sex) ...  graph permits direct visual comparison stickiness varies major one group students. multiways created discussion. Usually one convey compelling visual story gets included published findings.","code":"# create the dual multiway graph ggplot(data = DT_med, aes(x = stick, y = program)) +   facet_wrap(vars(race_sex), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_race_sex),     linetype = 2,     color = \"gray70\"   ) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   )"},{"path":"/articles/art-01-multiway.html","id":"exercise-1","dir":"Articles","previous_headings":"Create the dual multiway graph","what":"Exercise","title":"Multiway graphs and tables","text":"Create dual multiway graph using conditioned study_grad_rate data","code":""},{"path":"/articles/art-01-multiway.html","id":"tabulate-multiway-data","dir":"Articles","previous_headings":"","what":"Tabulate multiway data","title":"Multiway graphs and tables","text":"Data tables useful discussions one’s research team often included publications readers want see values underlying data graphics. example data currently laid “block record” form [5], race_sex key program key columns response, stickiness, last column. layout also called “tidy data” [1]. graphing package use, ggplot2, designed work effectively block-record data, thus block-record (“long”) form default layout midfieldr. Table 1: Stickiness (block records)  However, visual convention preferred publishers readers row-record (“wide”) form, illustrated Table 2. race_sex key left column program key column names. stickiness findings lie row-column intersections. Note form, four NA observations mentioned earlier explicitly shown. Table 2: Stickiness (row records) Depending software background, may encountered block-record/row-record transformation using function pairs—list adapted [5]. pivot / anti-pivot crosstab / shred (databases) pivot_to_rowrecs / unpivot_to_blocks (cdata) reshape “wide” / reshape “long” (R) pivot_wider / pivot_longer (tidyr) pivot / unpivot (Microsoft Excel) dcast / melt (data.table) cast / melt (reshape2) example, use dcast() data.table package reshape data publication. start limiting significant figures floating-point numbers. final result want rows columns ordered alphabetically, convert factors characters. dcast() used reshape data frame block-record form row-record form. publication, edit new column names. result source Table 2, repeated . Table 2: Stickiness (row records) good tools reshaping provided packages reshape() base R, cdata [6], tidyr [7].","code":"# create a new memory location block_form <- copy(DT)  # limit significant digits block_form[, stick := round(stick, 2)] # create a new memory location row_form <- copy(block_form)  # convert factors to characters row_form[, race_sex := as.character(race_sex)] row_form[, program := as.character(program)] # reshape row_form <- dcast(row_form, race_sex ~ program, value.var = \"stick\")  # examine the result row_form #>                  race_sex Civil Engineering Electrical Engineering #>                    <char>             <num>                  <num> #> 1:           Asian Female              0.45                   0.46 #> 2:             Asian Male              0.48                   0.51 #> 3:           Black Female              0.35                   0.42 #> 4:             Black Male              0.36                   0.37 #> 5: Hispanic/Latinx Female                NA                   0.40 #> 6:   Hispanic/Latinx Male              0.45                   0.43 #> 7:   Native American Male                NA                     NA #> 8:           White Female              0.46                   0.34 #> 9:             White Male              0.50                   0.43 #>    Industrial Engineering Mechanical Engineering #>                     <num>                  <num> #> 1:                   0.48                   0.61 #> 2:                   0.65                   0.57 #> 3:                   0.51                   0.33 #> 4:                   0.45                   0.35 #> 5:                     NA                   0.45 #> 6:                   0.68                   0.43 #> 7:                     NA                   0.29 #> 8:                   0.58                   0.40 #> 9:                   0.56                   0.46 # edit column names setnames(row_form,   old = c(     \"race_sex\",     \"Civil Engineering\",     \"Electrical Engineering\",     \"Industrial Engineering\",     \"Mechanical Engineering\"   ),   new = c(     \"Race/ethnicity/sex\",     \"Civil\",     \"Electrical\",     \"Industrial\",     \"Mechanical\"   ) )  # examine the result row_form #>        Race/ethnicity/sex Civil Electrical Industrial Mechanical #>                    <char> <num>      <num>      <num>      <num> #> 1:           Asian Female  0.45       0.46       0.48       0.61 #> 2:             Asian Male  0.48       0.51       0.65       0.57 #> 3:           Black Female  0.35       0.42       0.51       0.33 #> 4:             Black Male  0.36       0.37       0.45       0.35 #> 5: Hispanic/Latinx Female    NA       0.40         NA       0.45 #> 6:   Hispanic/Latinx Male  0.45       0.43       0.68       0.43 #> 7:   Native American Male    NA         NA         NA       0.29 #> 8:           White Female  0.46       0.34       0.58       0.40 #> 9:             White Male  0.50       0.43       0.56       0.46"},{"path":"/articles/art-01-multiway.html","id":"exercise-2","dir":"Articles","previous_headings":"Tabulate multiway data","what":"Exercise","title":"Multiway graphs and tables","text":"Create table study_grad_rate data similar table .","code":""},{"path":"/articles/art-01-multiway.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Multiway graphs and tables","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # data preparation DT <- copy(study_stickiness) class(DT$program) class(DT$race_sex) DT <- condition_multiway(DT) levels(DT$program) levels(DT$race_sex) DT_med <- condition_multiway(DT, details = TRUE) DT_med[order(program)] DT_med[order(race_sex)]  # creating a multiway graph ggplot(data = DT_med, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_program),     linetype = 2   ) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   )  # creating the dual multiway graph ggplot(data = DT_med, aes(x = stick, y = program)) +   facet_wrap(vars(race_sex), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_race_sex),     linetype = 2   ) +   geom_point(na.rm = TRUE) +   labs(     x = \"Stickiness\",     y = \"\",     title = \"Practice data (not for research)\",     caption = \"Source: midfielddata\"   )  # creating a table for publication block_form <- copy(DT) block_form[, stick := round(stick, 2)] row_form <- copy(block_form) row_form[, race_sex := as.character(race_sex)] row_form[, program := as.character(program)] row_form <- dcast(row_form, race_sex ~ program, value.var = \"stick\") setnames(row_form,   old = c(     \"race_sex\",     \"Civil Engineering\",     \"Electrical Engineering\",     \"Industrial Engineering\",     \"Mechanical Engineering\"   ),   new = c(     \"Race/ethnicity/sex\",     \"Civil\",     \"Electrical\",     \"Industrial\",     \"Mechanical\"   ) )"},{"path":"/articles/art-02-midfield-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MIDFIELD practice data","text":"midfielddata package repository MIDFIELD practice data, records organized four tables keyed student ID. student course term degree maintain confidentiality human subject data, identifiers students institutions anonymized. vignette, introduce four data tables briefly examine contents moving subsequent vignettes operate data using functions midfieldr.","code":""},{"path":"/articles/art-02-midfield-data.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"MIDFIELD practice data","text":"packages","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")"},{"path":"/articles/art-02-midfield-data.html","id":"r-promise-objects","dir":"Articles","previous_headings":"Introduction","what":"R “promise” objects","title":"MIDFIELD practice data","text":"tables practice data midfielddata load memory use (-called R “promise” objects). Thus, loading package library(\"midfielddata\") , listing R objects environment shows zero objects. Yet data available. use data operation, ’ll see “promise” kept. example, subset student data students whose age admission 40, run look RStudio Environment pane, see dframe listed 152 students meeting criterion. four practice data tables promises load midfielddata, loaded memory use .","code":"# the names of objects in the environment ls() #> character(0) # age at admission over 40 dframe <- student[age > 40]  # the names of objects in the environment ls() #> [1] \"dframe\"  # examine the result dframe #>             mcid   institution              transfer hours_transfer #>   1: MID25827731 Institution M First-Time in College             NA #>   2: MID25896426 Institution B   First-Time Transfer             34 #>   3: MID25898425 Institution B   First-Time Transfer            165 #>   4: MID25901161 Institution B   First-Time Transfer            109 #>   5: MID25920190 Institution B   First-Time Transfer             93 #>  ---                                                                #> 148: MID26618379 Institution J   First-Time Transfer             NA #> 149: MID26625917 Institution J   First-Time Transfer             NA #> 150: MID26632109 Institution J   First-Time Transfer             NA #> 151: MID26697662 Institution L First-Time in College             NA #> 152: MID26697689 Institution L   First-Time Transfer             47 #>                 race    sex age us_citizen home_zip high_school sat_math #>   1:           White   Male  41        Yes    29621                  750 #>   2:           White   Male  53         No    80501      331925      730 #>   3:           White   Male  75         No    80301      471530      500 #>   4:           White   Male  47         No    80501      051260      420 #>   5:           White Female  41         No    80027      060070       NA #>  ---                                                                     #> 148:   Other/Unknown Female  43        Yes    23464                   NA #> 149:   Other/Unknown Female  51        Yes    98043                   NA #> 150:   Other/Unknown Female  48        Yes    20816                   NA #> 151:           White   Male  43       <NA>    73135                   NA #> 152: Native American   Male  42       <NA>    74857      372378       NA #>      sat_verbal act_comp #>   1:        667       32 #>   2:        670       30 #>   3:        500       24 #>   4:        520       20 #>   5:         NA       19 #>  ---                     #> 148:         NA       21 #> 149:         NA       21 #> 150:         NA       21 #> 151:         NA       20 #> 152:         NA       20"},{"path":"/articles/art-02-midfield-data.html","id":"inpect-the-student-data","dir":"Articles","previous_headings":"","what":"Inpect the student data","title":"MIDFIELD practice data","text":"Table attributes approximately 98,000 students upon admitted degree-seeking undergraduates. observation unique student keyed student ID. Student IDs anonymized consistent across four data sets. table comprises 97,640 observations 13 variables occupies approximately 19 MB memory. definitions variables, view help page running see data structure, run Summarize quantitative variables. Examine categorical variables values.","code":"? student str(student) #> Classes 'data.table' and 'data.frame':   97640 obs. of  13 variables: #>  $ mcid          : chr  \"MID25783135\" \"MID25783147\" \"MID25783156\" \"MID25783162\" ... #>  $ institution   : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ transfer      : chr  \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" ... #>  $ hours_transfer: num  NA NA NA NA NA NA NA NA NA NA ... #>  $ race          : chr  \"White\" \"White\" \"White\" \"White\" ... #>  $ sex           : chr  \"Male\" \"Female\" \"Female\" \"Male\" ... #>  $ age           : num  17 17 18 17 18 18 17 18 18 18 ... #>  $ us_citizen    : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ home_zip      : chr  \"29485\" \"29072\" \"43026\" \"29572\" ... #>  $ high_school   : chr  \"411900\" \"410825\" \"210568\" \"411465\" ... #>  $ sat_math      : num  580 470 750 560 670 620 642 590 492 620 ... #>  $ sat_verbal    : num  505 530 627 395 530 500 486 620 594 456 ... #>  $ act_comp      : num  21 19 29 18 26 22 24 25 21 21 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) summary(student[, sat_math]) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   200.0   520.0   580.0   578.1   640.0   800.0   31705  summary(student[, age]) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   16.00   18.00   18.00   18.47   18.00   75.00   22916 sort(unique(student[, sex])) #> [1] \"Female\"  \"Male\"    \"Unknown\"  sort(unique(student[, race])) #> [1] \"Asian\"           \"Black\"           \"Hispanic/Latinx\" \"International\"   #> [5] \"Native American\" \"Other/Unknown\"   \"White\""},{"path":"/articles/art-02-midfield-data.html","id":"inpect-the-course-data","dir":"Articles","previous_headings":"","what":"Inpect the course data","title":"MIDFIELD practice data","text":"Table course-related attributes approximately 98,000 undergraduates enrolled courses institutions. observation one course one term one student keyed student ID combination course, abbreviation, number, section. table comprises 3,540,533 observations 12 variables occupies approximately 349 MB memory. definitions variables, view help page running see data structure, run Summarize quantitative variable. Examine categorical variables values. sample course names.","code":"? course str(course) #> Classes 'data.table' and 'data.frame':   3540533 obs. of  12 variables: #>  $ mcid        : chr  \"MID25783135\" \"MID25783135\" \"MID25783135\" \"MID25783135\" ... #>  $ institution : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term        : chr  \"19911\" \"19911\" \"19911\" \"19911\" ... #>  $ course      : chr  \"\" \"\" \"\" \"\" ... #>  $ abbrev      : chr  \"SPCH\" \"CH\" \"ED\" \"ENGL\" ... #>  $ number      : chr  \"363\" \"101\" \"103\" \"101\" ... #>  $ section     : chr  \"001\" \"005\" \"002\" \"050\" ... #>  $ type        : chr  \"Lecture\" \"Lecture\" \"Lecture\" \"Lecture\" ... #>  $ faculty_rank: chr  \"\" \"\" \"\" \"\" ... #>  $ hours_course: num  3 4 1 3 5 3 3 3 3 4 ... #>  $ pass_fail   : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ grade       : chr  \"A\" \"C\" \"A\" \"B\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> summary(course[, hours_course]) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    3.00    3.00    2.69    3.00   99.50   60775 # type of courses sort(unique(course[, type])) #>  [1] \"\"                         \"Academic Redemption\"      #>  [3] \"Blended\"                  \"Directed Study\"           #>  [5] \"Duplicate Credit\"         \"Exemption Credit\"         #>  [7] \"Grade History\"            \"Honors\"                   #>  [9] \"Individual Study\"         \"Ineigible to Repeat\"      #> [11] \"Internship/Practicum\"     \"Laboratory\"               #> [13] \"Lecture\"                  \"Lecture/Supervised Lab\"   #> [15] \"Lecture/Unsupervised Lab\" \"Living Community\"         #> [17] \"Make-Up\"                  \"Online\"                   #> [19] \"Problem Session\"          \"Research\"                 #> [21] \"Seminar\"                  \"Special Exam\"             #> [23] \"Special Topics\"           \"Supervised Laboratory\"    #> [25] \"Synchronized\"             \"Test\"                     #> [27] \"Thesis/Dissertation\"      \"Unsupervised Laboratory\"  # how many unique course names all_course_names <- course[, .(course)] all_course_names <- all_course_names[course != \"\"] all_course_names <- unique(all_course_names) n <- nrow(all_course_names) n #> [1] 15458 # a random sample of courses print(all_course_names[sample(1:n, 20)], nrows = 20) #>                             course #>  1:   Irish Modernists/Nationalism #>  2:   Comprehensive Biochemistry I #>  3:               World Since 1914 #>  4:   Advanced Database Management #>  5:              Disc-PSY 2113-921 #>  6: Non-Linear Dyn. Sys. & Control #>  7:       British Culture & Pol II #>  8:        Statistical  Consulting #>  9:              Lab-PBIO 4114-010 #> 10:     Philosophical Anthropology #> 11:              Lab-CHEM 3753-140 #> 12:    High Intrmd Spanish Grammar #> 13:       Power Systems Laboratory #> 14:                Market Research #> 15:  Issues in Animal Conservation #> 16:              Lab-GEOG 1114-020 #> 17: Topics in Medical Microbiology #> 18:    Sem in Intercollegiate Athl #> 19:       Human and Animal Disease #> 20:  Telecommunications&Networking"},{"path":"/articles/art-02-midfield-data.html","id":"inpect-the-term-data","dir":"Articles","previous_headings":"","what":"Inpect the term data","title":"MIDFIELD practice data","text":"Table term-related attributes approximately 96,000 undergraduates terms completed institutions. observation one term one student keyed student ID term. table comprises 727,369 observations 13 variables occupies approximately 82 MB memory. definitions variables, view help page running see data structure, run Summarize quantitative variables. Examine categorical variables values.","code":"? term str(term) #> Classes 'data.table' and 'data.frame':   727369 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783147\" \"MID25783147\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20041\" \"20043\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"131202\" \"131210\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 17 18 15 15 3 15 15 6 ... #>  $ hours_term_attempt : num  19 14 13 18 15 15 3 15 15 6 ... #>  $ hours_cumul        : num  19 33 17 35 50 65 68 83 98 104 ... #>  $ hours_cumul_attempt: num  19 33 13 31 46 61 64 79 94 100 ... #>  $ gpa_term           : num  2.47 3.21 3.76 2.67 3.2 4 4 4 4 4 ... #>  $ gpa_cumul          : num  2.47 2.79 3.76 3.13 3.15 3.36 3.39 3.5 3.59 3.61 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) summary(term[, hours_term]) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    9.00   12.00   11.48   15.00   46.00  summary(term[, gpa_term]) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   2.400   3.000   2.862   3.540   9.300     267 sort(unique(term[, level])) #> [1] \"01 Freshman\"  \"02 Sophomore\" \"03 Junior\"    \"04 Senior\"  sort(unique(term[, standing])) #> [1] \"Academic Probation\"               \"Academic Suspension\"              #> [3] \"Academic Suspension - Reinstated\" \"Academic Warning\"                 #> [5] \"Good Standing\""},{"path":"/articles/art-02-midfield-data.html","id":"inpect-the-degree-data","dir":"Articles","previous_headings":"","what":"Inpect the degree data","title":"MIDFIELD practice data","text":"Table degree-related attributes approximately 48,000 undergraduates upon completing programs. observation unique student keyed student ID. table comprises 47,499 observations 5 variables occupies approximately 10 MB memory. definitions variables, view help page running see data structure, run Examine categorical variables values. students completing programs.","code":"? degree str(degree) #> Classes 'data.table' and 'data.frame':   47499 obs. of  5 variables: #>  $ mcid       : chr  \"MID25783162\" \"MID25783178\" \"MID25783188\" \"MID25783195\" ... #>  $ institution: chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term       : chr  \"19963\" \"20001\" \"20023\" \"19966\" ... #>  $ cip6       : chr  \"521401\" \"143501\" \"230101\" \"521401\" ... #>  $ degree     : chr  \"Bachelor of Science\" \"Bachelor of Science\" \"Bachelor of Arts\" \"Bachelor of Science\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> sort(unique(degree[, institution])) #>  [1] \"Institution A\" \"Institution B\" \"Institution C\" \"Institution D\" #>  [5] \"Institution E\" \"Institution F\" \"Institution G\" \"Institution H\" #>  [9] \"Institution J\" \"Institution K\" \"Institution L\" \"Institution M\"  sort(unique(degree[, degree])) #>  [1] \"Bachelor's Degree\"                   \"Bachelor of Architecture\"            #>  [3] \"Bachelor of Arts\"                    \"Bachelor of Arts and Sciences\"       #>  [5] \"Bachelor of Arts in Letters\"         \"Bachelor of Business Administration\" #>  [7] \"Bachelor of Fine Arts\"               \"Bachelor of Interior Design\"         #>  [9] \"Bachelor of Music\"                   \"Bachelor of Science\" degree[!is.na(degree)] #>               mcid   institution  term   cip6 #>     1: MID25783162 Institution M 19963 521401 #>     2: MID25783178 Institution M 20001 143501 #>     3: MID25783188 Institution M 20023 230101 #>     4: MID25783195 Institution M 19966 521401 #>     5: MID25783197 Institution M 19911 140801 #>    ---                                        #> 47495: MID26697553 Institution L 20133 451001 #> 47496: MID26697574 Institution L 20113 300000 #> 47497: MID26697576 Institution L 20134 521401 #> 47498: MID26697599 Institution L 20143 110401 #> 47499: MID26697623 Institution L 20153 520301 #>                                     degree #>     1:                 Bachelor of Science #>     2:                 Bachelor of Science #>     3:                    Bachelor of Arts #>     4:                 Bachelor of Science #>     5:                 Bachelor of Science #>    ---                                     #> 47495:                    Bachelor of Arts #> 47496:                    Bachelor of Arts #> 47497: Bachelor of Business Administration #> 47498:                    Bachelor of Arts #> 47499: Bachelor of Business Administration"},{"path":"/articles/art-02-midfield-data.html","id":"exercises","dir":"Articles","previous_headings":"","what":"Exercises","title":"MIDFIELD practice data","text":"summarize data frame detail, try following compare results. Install Hmisc package, load library(\"Hmisc\"), run describe(x), x one data tables, example, describe(student), describe(course), etc. Install skimr package, load library(\"skimr\"), run skim(x), x one data tables, example, skim(student), skim(course), etc.","code":""},{"path":"/articles/art-02-midfield-data.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"MIDFIELD practice data","text":"vignette concludes code chunks collected single, condensed script. users like copy paste R script .","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # cip str(cip) sort(unique(cip[, cip2])) length(unique(cip[, cip4])) length(unique(cip[, cip6])) set.seed(20210529) some_programs <- cip[, .(cip4name)] print(some_programs[sample(1:300, 20)], nrows = 20)  # student str(student) summary(student[, sat_math]) summary(student[, age]) sort(unique(student[, sex])) sort(unique(student[, race]))  # course str(course) summary(course[, hours_course]) sort(unique(course[, type])) some_courses <- course[, .(course)] some_courses <- some_courses[course != \"\"] some_courses <- unique(some_courses) n <- nrow(some_courses) print(some_courses[sample(1:n, 20)], nrows = 20)  # term str(term) summary(term[, hours_term]) summary(term[, gpa_term]) sort(unique(term[, level])) sort(unique(term[, standing]))  # degree str(degree) sort(unique(degree[, institution])) sort(unique(degree[, degree])) degree[!is.na(degree)]"},{"path":"/articles/art-02-program-codes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Program codes","text":"studying student records, common first step subset data, retaining instructional programs dropping others. US, instructional programs encoded “CIP” codes. CIP acronym Classification Instructional Programs, taxonomy academic programs curated US Department Education [1]. IPEDS standard encoding format two-digit number followed period, followed four-digit number, example, 14.0102 [2]. MIDFIELD uses numerals, omits period, .e., 140102, stores variable character string. 2010 CIP codes included midfieldr data set cip. vignette, examine strategies searching cip programs want study.","code":""},{"path":"/articles/art-02-program-codes.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Program codes","text":"Explore taxonomy academic programs Inspect CIP data Practice searching CIP data using different approaches","code":""},{"path":"/articles/art-02-program-codes.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Program codes","text":"midfieldr functions filter_search() packages","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )"},{"path":"/articles/art-02-program-codes.html","id":"taxonomy-of-programs","dir":"Articles","previous_headings":"","what":"Taxonomy of programs","title":"Program codes","text":"Academic programs three levels codes names: 6-digit code, specific program 4-digit code, group 6-digit programs comparable content 2-digit code, grouping 4-digit groups related content Loosely, 6-digit level can thought specialty within discipline, 4-digit level often equivalent academic department, 2-digit level roughly equivalent academic college. example, Geotechnical Engineering (140802) specialty Civil Engineering (1408) department college Engineering (14). table , show programs broad area “Science Technologies, Technicians” (code 41) illustrate relationships among 2-, 4-, 6-digit program codes names detail. 2-digit grouping subdivided 5 groups 4-digit level (codes 4100–4199) subdivided 9 programs 6-digit level (codes 410000–419999).  number 6-digit programs 4-digit group varies program. Four-digit groupings include anywhere 1 program (code 4100 example) 37 programs (code 1313 Education). Similarly, 2-digit groupings include anywhere four 4-digit programs (code 24 Liberal Arts Sciences, General Studies Humanities) 238 programs (code 51 Health Professions Related Clinical Sciences).","code":""},{"path":"/articles/art-02-program-codes.html","id":"inspect-the-cip-data","dir":"Articles","previous_headings":"","what":"Inspect the cip data","title":"Program codes","text":"Data set loads midfieldr. definitions variables, view help page running see data structure, run following. Note variables character strings, protect leading zeros codes. see observations, run number unique programs. sample program names (sample() uses random number generator, result differ shown)","code":"? cip str(cip) #> Classes 'data.table' and 'data.frame':   1582 obs. of  6 variables: #>  $ cip2    : chr  \"01\" \"01\" \"01\" \"01\" ... #>  $ cip2name: chr  \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" ... #>  $ cip4    : chr  \"0100\" \"0101\" \"0101\" \"0101\" ... #>  $ cip4name: chr  \"Agriculture, General\" \"Agricultural Business and Management\" \"Agricultural Business and Management\" \"Agricultural Business and Management\" ... #>  $ cip6    : chr  \"010000\" \"010101\" \"010102\" \"010103\" ... #>  $ cip6name: chr  \"Agriculture, General\" \"Agricultural Business and Management, General\" \"Agribusiness, Agricultural Business Operations\" \"Agricultural Economics\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> cip #>         cip2                                                  cip2name   cip4 #>       <char>                                                    <char> <char> #>    1:     01 Agriculture, Agricultural Operations and Related Sciences   0100 #>    2:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    3:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    4:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    5:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>   ---                                                                         #> 1578:     54                                                   History   5401 #> 1579:     54                                                   History   5401 #> 1580:     54                                                   History   5401 #> 1581:     54                                                   History   5401 #> 1582:     99                         NonIPEDS - Undecided, Unspecified   9999 #>                                   cip4name   cip6 #>                                     <char> <char> #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>    4: Agricultural Business and Management 010103 #>    5: Agricultural Business and Management 010104 #>   ---                                             #> 1578:                              History 540106 #> 1579:                              History 540107 #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>                                               <char> #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>    4:                         Agricultural Economics #>    5:                Farm, Farm and Ranch Management #>   ---                                                #> 1578:                                  Asian History #> 1579:                               Canadian History #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified # at the 2-digit level sort(unique(cip$cip2)) #>  [1] \"01\" \"03\" \"04\" \"05\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"19\" \"22\" \"23\" #> [16] \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" #> [31] \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"54\" #> [46] \"99\"  # at the 4-digit level sort(unique(cip$cip4)) #>   [1] \"0100\" \"0101\" \"0102\" \"0103\" \"0104\" \"0105\" \"0106\" \"0107\" \"0108\" \"0109\" #>  [11] \"0110\" \"0111\" \"0112\" \"0199\" \"0301\" \"0302\" \"0303\" \"0305\" \"0306\" \"0399\" #>  [21] \"0402\" \"0403\" \"0404\" \"0405\" \"0406\" \"0408\" \"0409\" \"0410\" \"0499\" \"0501\" #>  [31] \"0502\" \"0599\" \"0901\" \"0904\" \"0907\" \"0909\" \"0910\" \"0999\" \"1001\" \"1002\" #>  [41] \"1003\" \"1099\" \"1100\" \"1101\" \"1102\" \"1103\" \"1104\" \"1105\" \"1106\" \"1107\" #>  [51] \"1108\" \"1109\" \"1110\" \"1199\" \"1203\" \"1204\" \"1205\" \"1299\" \"1301\" \"1302\" #>  [61] \"1303\" \"1304\" \"1305\" \"1306\" \"1307\" \"1309\" \"1310\" \"1311\" \"1312\" \"1313\" #>  [71] \"1314\" \"1315\" \"1399\" \"1401\" \"1402\" \"1403\" \"1404\" \"1405\" \"1406\" \"1407\" #>  [81] \"1408\" \"1409\" \"1410\" \"1411\" \"1412\" \"1413\" \"1414\" \"1418\" \"1419\" \"1420\" #>  [91] \"1421\" \"1422\" \"1423\" \"1424\" \"1425\" \"1427\" \"1428\" \"1431\" \"1432\" \"1433\" #> [101] \"1434\" \"1435\" \"1436\" \"1437\" \"1438\" \"1439\" \"1440\" \"1441\" \"1442\" \"1443\" #> [111] \"1444\" \"1445\" \"1499\" \"1500\" \"1501\" \"1502\" \"1503\" \"1504\" \"1505\" \"1506\" #> [121] \"1507\" \"1508\" \"1509\" \"1510\" \"1511\" \"1512\" \"1513\" \"1514\" \"1515\" \"1516\" #> [131] \"1599\" \"1600\" \"1601\" \"1602\" \"1603\" \"1604\" \"1605\" \"1606\" \"1607\" \"1608\" #> [141] \"1609\" \"1610\" \"1611\" \"1612\" \"1613\" \"1614\" \"1615\" \"1616\" \"1699\" \"1900\" #> [151] \"1901\" \"1902\" \"1904\" \"1905\" \"1906\" \"1907\" \"1909\" \"1999\" \"2200\" \"2201\" #> [161] \"2202\" \"2203\" \"2299\" \"2301\" \"2304\" \"2305\" \"2307\" \"2308\" \"2310\" \"2311\" #> [171] \"2313\" \"2314\" \"2399\" \"2401\" \"2501\" \"2503\" \"2599\" \"2601\" \"2602\" \"2603\" #> [181] \"2604\" \"2605\" \"2606\" \"2607\" \"2608\" \"2609\" \"2610\" \"2611\" \"2612\" \"2613\" #> [191] \"2614\" \"2615\" \"2699\" \"2701\" \"2703\" \"2705\" \"2799\" \"2801\" \"2803\" \"2804\" #> [201] \"2805\" \"2806\" \"2807\" \"2899\" \"2902\" \"2903\" \"2904\" \"2999\" \"3000\" \"3001\" #> [211] \"3005\" \"3006\" \"3008\" \"3010\" \"3011\" \"3012\" \"3013\" \"3014\" \"3015\" \"3016\" #> [221] \"3017\" \"3018\" \"3019\" \"3020\" \"3021\" \"3022\" \"3023\" \"3024\" \"3025\" \"3026\" #> [231] \"3027\" \"3028\" \"3029\" \"3030\" \"3031\" \"3032\" \"3033\" \"3099\" \"3101\" \"3103\" #> [241] \"3105\" \"3106\" \"3199\" \"3201\" \"3301\" \"3401\" \"3501\" \"3601\" \"3701\" \"3800\" #> [251] \"3801\" \"3802\" \"3899\" \"3902\" \"3903\" \"3904\" \"3905\" \"3906\" \"3907\" \"3999\" #> [261] \"4001\" \"4002\" \"4004\" \"4005\" \"4006\" \"4008\" \"4010\" \"4099\" \"4100\" \"4101\" #> [271] \"4102\" \"4103\" \"4199\" \"4201\" \"4227\" \"4228\" \"4299\" \"4301\" \"4302\" \"4303\" #> [281] \"4399\" \"4400\" \"4402\" \"4404\" \"4405\" \"4407\" \"4499\" \"4501\" \"4502\" \"4503\" #> [291] \"4504\" \"4505\" \"4506\" \"4507\" \"4509\" \"4510\" \"4511\" \"4512\" \"4513\" \"4514\" #> [301] \"4599\" \"4600\" \"4601\" \"4602\" \"4603\" \"4604\" \"4605\" \"4699\" \"4700\" \"4701\" #> [311] \"4702\" \"4703\" \"4704\" \"4706\" \"4799\" \"4800\" \"4803\" \"4805\" \"4807\" \"4808\" #> [321] \"4899\" \"4901\" \"4902\" \"4903\" \"4999\" \"5001\" \"5002\" \"5003\" \"5004\" \"5005\" #> [331] \"5006\" \"5007\" \"5009\" \"5010\" \"5099\" \"5100\" \"5101\" \"5102\" \"5104\" \"5105\" #> [341] \"5106\" \"5107\" \"5108\" \"5109\" \"5110\" \"5111\" \"5112\" \"5114\" \"5115\" \"5117\" #> [351] \"5118\" \"5119\" \"5120\" \"5121\" \"5122\" \"5123\" \"5124\" \"5125\" \"5126\" \"5127\" #> [361] \"5131\" \"5132\" \"5133\" \"5134\" \"5135\" \"5136\" \"5137\" \"5138\" \"5139\" \"5199\" #> [371] \"5201\" \"5202\" \"5203\" \"5204\" \"5205\" \"5206\" \"5207\" \"5208\" \"5209\" \"5210\" #> [381] \"5211\" \"5212\" \"5213\" \"5214\" \"5215\" \"5216\" \"5217\" \"5218\" \"5219\" \"5220\" #> [391] \"5221\" \"5299\" \"5401\" \"9999\"  # at the 6-digit level length(unique(cip$cip6)) #> [1] 1582 some_programs <- cip[, cip4name, drop = FALSE] sample(some_programs, 20) #>  [1] \"Educational Administration and Supervision\"                             #>  [2] \"Linguistic, Comparative Related Language Studies and Services\"          #>  [3] \"Business Operations Support and Assistant Services\"                     #>  [4] \"Biomedical, Medical Engineering\"                                        #>  [5] \"Human Development, Family Studies Related Services\"                     #>  [6] \"Industrial Production Technologies, Technicians\"                        #>  [7] \"Somatic Bodywork and Related Therapeutic Services\"                      #>  [8] \"Business Operations Support and Assistant Services\"                     #>  [9] \"Rehabilitation and Therapeutic Professions\"                             #> [10] \"Astronomy and Astrophysics\"                                             #> [11] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #> [12] \"Applied Horticulture, Horticultural Business Services\"                  #> [13] \"Ophthalmic and Optometric Support Services and Allied Professions\"      #> [14] \"Specialized Sales, Merchandising and Marketing Operations\"              #> [15] \"Engineering-Related Fields\"                                             #> [16] \"Teacher Education and Professional Development, Specific Subject Areas\" #> [17] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #> [18] \"Leatherworking and Upholstery\"                                          #> [19] \"Health, Medical Preparatory Programs\"                                   #> [20] \"Research and Experimental Psychology\""},{"path":"/articles/art-02-program-codes.html","id":"filter-using-a-keyword-search","dir":"Articles","previous_headings":"","what":"Filter using a keyword search","title":"Program codes","text":"filter_search() midfieldr function searching cip data set program codes names. View help page running variables cip characters filter_search() subsets data frame using character search terms. arguments : dframe data frame subset keep_text character vector search text retaining rows, case-sensitive drop_text (optional) character vector search text dropping rows select (optional) character vector column names search return, default columns example, filtering CIP data programs containing word “engineering” yields 119 observations. first two arguments filter_search() named explicitly, optional drop_text select arguments . Columns select subset filtering keep_text drop_text. Thus repeat search different column selection return rows different columns. Suppose want find CIP codes names programs Civil Engineering. search insensitive case, start following code chunk. information tabulated help see structure. examples follow, show table like one instead R output.  search returns programs Civilization names well Engineering Technology. wanted Civil Engineering , can use sequence function calls, outcome one operation assigned first argument next operation. following code chunk read , “Start cip data frame, keep rows ‘civil’ detected, keep rows ‘engineering’ detected, drop rows ‘technology’ detected.”  Seeing Civil Engineering programs cip4name, used keep_text = c(\"civil engineering\") narrow search rows match full phrase. example, produces result reported table .","code":"? filter_search() # filter basics filter_search(dframe = cip, keep_text = \"engineering\") #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>   4:     14                                      Engineering   1403 #>   5:     14                                      Engineering   1404 #>  ---                                                                #> 115:     15                           Engineering Technology   1516 #> 116:     15                           Engineering Technology   1599 #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                     cip4name   cip6 #>                                                       <char> <char> #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering # applying optional argument drop_text and select filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip6\", \"cip6name\") ) #>       cip6                                                     cip6name #>     <char>                                                       <char> #>  1: 140101                                         Engineering, General #>  2: 140102                                              Pre-Engineering #>  3: 140201 Aerospace, Aeronautical and Astronautical, Space Engineering #>  4: 140301      Agricultural, Biological Engineering and Bioengineering #>  5: 140401                                    Architectural Engineering #> ---                                                                     #> 50: 144201            Mechatronics, Robotics and Automation Engineering #> 51: 144301                                      Biochemical Engineering #> 52: 144401                                        Engineering Chemistry #> 53: 144501                           Biological, Biosystems Engineering #> 54: 149999                                           Engineering, Other # repeat search with different columns selected filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip4\", \"cip4name\") ) #>       cip4                                                cip4name #>     <char>                                                  <char> #>  1:   1401                                    Engineering, General #>  2:   1401                                    Engineering, General #>  3:   1402   Aerospace, Aeronautical and Astronautical Engineering #>  4:   1403 Agricultural, Biological Engineering and Bioengineering #>  5:   1404                               Architectural Engineering #> ---                                                                #> 50:   1442       Mechatronics, Robotics and Automation Engineering #> 51:   1443                                 Biochemical Engineering #> 52:   1444                                   Engineering Chemistry #> 53:   1445                      Biological, Biosystems Engineering #> 54:   1499                                      Engineering, Other # example 1 filter using keywords filter_search(cip, \"civil\") #>       cip2                                            cip2name   cip4 #>     <char>                                              <char> <char> #>  1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #>  2:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #>  3:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #>  4:     14                                         Engineering   1408 #>  5:     14                                         Engineering   1408 #> ---                                                                   #>  8:     14                                         Engineering   1408 #>  9:     14                                         Engineering   1408 #> 10:     15                              Engineering Technology   1502 #> 11:     15                              Engineering Technology   1513 #> 12:     30                     Muti, Interdisciplinary Studies   3022 #>                                                                       cip4name #>                                                                         <char> #>  1:                                                               Area Studies #>  2:                                                               Area Studies #>  3:                                                               Area Studies #>  4:                                                          Civil Engineering #>  5:                                                          Civil Engineering #> ---                                                                            #>  8:                                                          Civil Engineering #>  9:                                                          Civil Engineering #> 10:                                Civil Engineering Technologies, Technicians #> 11:                     Drafting, Design Engineering Technologies, Technicians #> 12: Classical and Ancient, Oriental Studies - Multi, Interdisciplinary Studies #>       cip6                                                         cip6name #>     <char>                                                           <char> #>  1: 050102                    American, United States Studies, Civilization #>  2: 050103                                      Asian Studies, Civilization #>  3: 050106                                   European Studies, Civilization #>  4: 140801                                       Civil Engineering, General #>  5: 140802                                         Geotechnical Engineering #> ---                                                                         #>  8: 140805                                      Water Resources Engineering #>  9: 140899                                         Civil Engineering, Other #> 10: 150201                         Civil Engineering Technology, Technician #> 11: 151304                   Civil Drafting and Civil Engineering CAD, CADD #> 12: 302201 Multi, Interdisciplinary Studies - Ancient Studies, Civilization # first search first_pass <- filter_search(cip, \"civil\")  # refine the search second_pass <- filter_search(first_pass, \"engineering\")  # refine further third_pass <- filter_search(second_pass, drop_text = \"technology\") filter_search(cip, \"civil engineering\", drop_text = \"technology\")"},{"path":"/articles/art-02-program-codes.html","id":"exercises","dir":"Articles","previous_headings":"Filter using a keyword search","what":"Exercises","title":"Program codes","text":"Determine set 6-digit CIP codes expect used College Business. social sciences 2-digit CIP necessarily include possible social science programs. Let anthropology, economics, geography, linguistics, political science, jurisprudence, psychology, sociology defined social sciences. Determine set 6-digit codes collect study programs.","code":""},{"path":"/articles/art-02-program-codes.html","id":"filter-using-a-numerical-code-search","dir":"Articles","previous_headings":"","what":"Filter using a numerical code search","title":"Program codes","text":"Suppose want study programs relating German culture, language, literature. Using “german” keep_text value yields  6-digit program names find two interest, German Studies (050125) German Language Literature (160501). use character vector assign two codes keep_text argument.  6-digit codes entered integers, produce error.","code":"# example 2 filter using numerical codes filter_search(cip, \"german\") # character vector of search terms  filter_search(cip, c(\"050125\", \"160501\")) filter_search(cip, c(050125, 160501)) #> Error in filter_search(cip, c(50125, 160501)): Assertion on 'keep_text' failed. Must be of class 'string', not 'double'."},{"path":"/articles/art-02-program-codes.html","id":"exercise","dir":"Articles","previous_headings":"Filter using a numerical code search","what":"Exercise","title":"Program codes","text":"Social sciences exercise previous section, searching “jurisprudence” produced two codes: “220203” “220204.” Search cip two codes determine 2-digit program belong.","code":""},{"path":"/articles/art-02-program-codes.html","id":"filter-using-a-regular-expression-search","dir":"Articles","previous_headings":"","what":"Filter using a regular expression search","title":"Program codes","text":"Specifying 4-digit codes yields data frame 6-digit programs containing 4-digit string. use regular expression notation ^ match start strings.  2-digit series represent general groupings related programs. , result includes History programs.  series argument can include combination 2, 4, 6-digit codes. can also passed function character vector.","code":"# example 3 filter using regular expressions filter_search(cip, c(\"^1407\", \"^1408\")) # 2-digit example filter_search(cip, \"^54\") # character vector of search terms codes_we_want <- c(\"^24\", \"^4102\", \"^450202\")  # a series with 2, 4, and 6-digits specified filter_search(cip, codes_we_want)"},{"path":"/articles/art-02-program-codes.html","id":"when-search-terms-cannot-be-found","dir":"Articles","previous_headings":"","what":"When search terms cannot be found","title":"Program codes","text":"keep_text argument includes terms found CIP data frame, unsuccessful terms identified message successful terms produce usual output. example, following keep_text argument includes three search terms present CIP data (“111111,” “^55,” “Bogus”) two (“050125” “160501”). However, seen earlier, none search terms found, error occurs.","code":"# unsuccessful terms produce a message sub_cip <- filter_search(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) #> Can't find these terms: 111111, Bogus, ^55  # but the successful terms are returned sub_cip #>      cip2                                            cip2name   cip4 #>    <char>                                              <char> <char> #> 1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #> 2:     16      Foreign Languages, Literatures and Linguistics   1605 #>                                       cip4name   cip6 #>                                         <char> <char> #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #>                            <char> #> 1:                 German Studies #> 2: German Language and Literature filter_search(cip, c(\"111111\", \"Bogus\", \"^55\")) #> Error: The search result is empty. Possible causes are: #>  * 'dframe' contained no matches to terms in 'keep_text'. #>  * 'drop_text' eliminated all remaining rows."},{"path":"/articles/art-02-program-codes.html","id":"exercise-1","dir":"Articles","previous_headings":"When search terms cannot be found","what":"Exercise","title":"Program codes","text":"Determine set programs 4-digit codes “220203” “220204.”","code":""},{"path":"/articles/art-02-program-codes.html","id":"cip-data-from-another-source","dir":"Articles","previous_headings":"","what":"CIP data from another source","title":"Program codes","text":"use CIP data set another source, must structure cip: six character columns named follows,","code":"# name and class of variables (columns) in cip unlist(lapply(cip, FUN = class)) #>        cip2    cip2name        cip4    cip4name        cip6    cip6name  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"/articles/art-02-program-codes.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Program codes","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # cip str(cip) sort(unique(cip$cip2)) sort(unique(cip$cip4)) length(unique(cip$cip6)) some_programs <- cip[, cip4name, drop = FALSE] sample(some_programs, 20)  # filter using keywords filter_search(dframe = cip, keep_text = \"engineering\") filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip6\", \"cip6name\") ) filter_search(cip,   \"engineering\",   drop_text = c(     \"related\",     \"technology\",     \"technologies\"   ),   select = c(\"cip4\", \"cip4name\") ) filter_search(cip, \"civil\") first_pass <- filter_search(cip, \"civil\") second_pass <- filter_search(first_pass, \"engineering\") third_pass <- filter_search(second_pass, drop_text = \"technology\") filter_search(cip, \"civil engineering\", drop_text = \"technology\")  # filter using numerical codes filter_search(cip, \"german\") filter_search(cip, c(\"050125\", \"160501\")) filter_search(cip, c(\"^1407\", \"^1408\")) filter_search(cip, \"^54\") codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_search(cip, codes_we_want)  # when search terms cannot be found sub_cip <- filter_search(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) sub_cip"},{"path":"/articles/art-03-case-selection.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Case selection","text":"studying student records, common first step select specific set programs explore. vignette, illustrate first step constructing data frame program CIP codes program names four engineering programs (Civil, Electrical, Industrial, Mechanical). use case selection subsequent vignettes illustrate typical workflows using midfieldr functions MIDFIELD data tables.","code":""},{"path":"/articles/art-03-case-selection.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Case selection","text":"Identify CIP codes case study Assign custom program names Practice different subsetting scenarios Practice read/write results directory Result set programs case study (study_programs)","code":""},{"path":"/articles/art-03-case-selection.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Case selection","text":"midfieldr functions filter_search() filter_match() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term, degree)"},{"path":"/articles/art-03-case-selection.html","id":"identify-program-codes","dir":"Articles","previous_headings":"","what":"Identify program codes","title":"Case selection","text":"know conventional names desired programs (Civil, Electrical, Industrial, Mechanical Engineering) necessarily exact program names used CIP. Thus search CIP thoroughly make sure find 6-digit CIP codes associated disciplines. start text search cip engineering. number 2-digit codes reported. Let’s examine closely using data.table syntax selecting columns. one (14) programs looking . can restrict search codes starting 14. Let’s try restricting search four conventional terms: civil, electrical, industrial, mechanical. search case-sensitive. result, Electromechanical Engineering superfluous. see 4-digit level describes programs customary names Civil Engineering encompasses six programs 6-digit level Electrical Engineering encompasses four programs 6-digit level Mechanical Industrial one program 6-digit level MIDFIELD data tables column CIP codes use 6-digit codes. Therefore, case study, need cip6 column work . names want (case), however, 4-digit level. can select columns need.","code":"# subset rows of the CIP data matching conditions pass01 <- filter_search(cip, \"engineering\") pass01 #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>   4:     14                                      Engineering   1403 #>   5:     14                                      Engineering   1404 #>  ---                                                                #> 115:     15                           Engineering Technology   1516 #> 116:     15                           Engineering Technology   1599 #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                     cip4name   cip6 #>                                                       <char> <char> #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering cols_we_want <- c(\"cip2\", \"cip2name\") unique(pass01[, ..cols_we_want]) #>      cip2                                         cip2name #>    <char>                                           <char> #> 1:     14                                      Engineering #> 2:     15                           Engineering Technology #> 3:     29                            Military Technologies #> 4:     51 Health Professions and Related Clinical Sciences pass02 <- filter_search(pass01, \"^14\") pass02 #>       cip2    cip2name   cip4 #>     <char>      <char> <char> #>  1:     14 Engineering   1401 #>  2:     14 Engineering   1401 #>  3:     14 Engineering   1402 #>  4:     14 Engineering   1403 #>  5:     14 Engineering   1404 #> ---                           #> 50:     14 Engineering   1442 #> 51:     14 Engineering   1443 #> 52:     14 Engineering   1444 #> 53:     14 Engineering   1445 #> 54:     14 Engineering   1499 #>                                                    cip4name   cip6 #>                                                      <char> <char> #>  1:                                    Engineering, General 140101 #>  2:                                    Engineering, General 140102 #>  3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>  4: Agricultural, Biological Engineering and Bioengineering 140301 #>  5:                               Architectural Engineering 140401 #> ---                                                                #> 50:       Mechatronics, Robotics and Automation Engineering 144201 #> 51:                                 Biochemical Engineering 144301 #> 52:                                   Engineering Chemistry 144401 #> 53:                      Biological, Biosystems Engineering 144501 #> 54:                                      Engineering, Other 149999 #>                                                         cip6name #>                                                           <char> #>  1:                                         Engineering, General #>  2:                                              Pre-Engineering #>  3: Aerospace, Aeronautical and Astronautical, Space Engineering #>  4:      Agricultural, Biological Engineering and Bioengineering #>  5:                                    Architectural Engineering #> ---                                                              #> 50:            Mechatronics, Robotics and Automation Engineering #> 51:                                      Biochemical Engineering #> 52:                                        Engineering Chemistry #> 53:                           Biological, Biosystems Engineering #> 54:                                           Engineering, Other # optional code to control data.table printing options(datatable.print.topn = 13)  pass03 <- filter_search(pass02, c(\"civil\", \"electrical\", \"industrial\", \"mechanical\")) pass03 #>       cip2    cip2name   cip4 #>     <char>      <char> <char> #>  1:     14 Engineering   1408 #>  2:     14 Engineering   1408 #>  3:     14 Engineering   1408 #>  4:     14 Engineering   1408 #>  5:     14 Engineering   1408 #>  6:     14 Engineering   1408 #>  7:     14 Engineering   1410 #>  8:     14 Engineering   1410 #>  9:     14 Engineering   1410 #> 10:     14 Engineering   1410 #> 11:     14 Engineering   1419 #> 12:     14 Engineering   1435 #> 13:     14 Engineering   1441 #>                                                   cip4name   cip6 #>                                                     <char> <char> #>  1:                                      Civil Engineering 140801 #>  2:                                      Civil Engineering 140802 #>  3:                                      Civil Engineering 140803 #>  4:                                      Civil Engineering 140804 #>  5:                                      Civil Engineering 140805 #>  6:                                      Civil Engineering 140899 #>  7: Electrical, Electronics and Communications Engineering 141001 #>  8: Electrical, Electronics and Communications Engineering 141003 #>  9: Electrical, Electronics and Communications Engineering 141004 #> 10: Electrical, Electronics and Communications Engineering 141099 #> 11:                                 Mechanical Engineering 141901 #> 12:                                 Industrial Engineering 143501 #> 13:                          Electromechanical Engineering 144101 #>                                                          cip6name #>                                                            <char> #>  1:                                    Civil Engineering, General #>  2:                                      Geotechnical Engineering #>  3:                                        Structural Engineering #>  4:                        Transportation and Highway Engineering #>  5:                                   Water Resources Engineering #>  6:                                      Civil Engineering, Other #>  7:        Electrical, Electronics and Communications Engineering #>  8:                                 Laser and Optical Engineering #>  9:                                Telecommunications Engineering #> 10: Electrical, Electronics and Communications Engineering, Other #> 11:                                        Mechanical Engineering #> 12:                                        Industrial Engineering #> 13:                                 Electromechanical Engineering pass04 <- filter_search(pass03, drop_text = \"electromechanical\") pass04 #>       cip2    cip2name   cip4 #>     <char>      <char> <char> #>  1:     14 Engineering   1408 #>  2:     14 Engineering   1408 #>  3:     14 Engineering   1408 #>  4:     14 Engineering   1408 #>  5:     14 Engineering   1408 #>  6:     14 Engineering   1408 #>  7:     14 Engineering   1410 #>  8:     14 Engineering   1410 #>  9:     14 Engineering   1410 #> 10:     14 Engineering   1410 #> 11:     14 Engineering   1419 #> 12:     14 Engineering   1435 #>                                                   cip4name   cip6 #>                                                     <char> <char> #>  1:                                      Civil Engineering 140801 #>  2:                                      Civil Engineering 140802 #>  3:                                      Civil Engineering 140803 #>  4:                                      Civil Engineering 140804 #>  5:                                      Civil Engineering 140805 #>  6:                                      Civil Engineering 140899 #>  7: Electrical, Electronics and Communications Engineering 141001 #>  8: Electrical, Electronics and Communications Engineering 141003 #>  9: Electrical, Electronics and Communications Engineering 141004 #> 10: Electrical, Electronics and Communications Engineering 141099 #> 11:                                 Mechanical Engineering 141901 #> 12:                                 Industrial Engineering 143501 #>                                                          cip6name #>                                                            <char> #>  1:                                    Civil Engineering, General #>  2:                                      Geotechnical Engineering #>  3:                                        Structural Engineering #>  4:                        Transportation and Highway Engineering #>  5:                                   Water Resources Engineering #>  6:                                      Civil Engineering, Other #>  7:        Electrical, Electronics and Communications Engineering #>  8:                                 Laser and Optical Engineering #>  9:                                Telecommunications Engineering #> 10: Electrical, Electronics and Communications Engineering, Other #> 11:                                        Mechanical Engineering #> 12:                                        Industrial Engineering cols_we_want <- c(\"cip6\", \"cip4name\") case_cip <- pass04[, cols_we_want, with = FALSE]  # or, equivalently, # case_cip <- pass04[, ..cols_we_want]  # examine the result case_cip #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering"},{"path":"/articles/art-03-case-selection.html","id":"exercises","dir":"Articles","previous_headings":"Identify program codes","what":"Exercises","title":"Case selection","text":"initial search term, “history.” results, identify 2-digit CIP history use numerical search programs start 2-digit CIP. Subset 6-digit CIPs 6-digit CIP names. Assign result object name exercise_cip.","code":"# Answer exercise_cip #>      cip6                                            cip6name #>    <char>                                              <char> #> 1: 540101                                    History, General #> 2: 540102                    American History (United States) #> 3: 540103                                    European History #> 4: 540104    History and Philosophy of Science and Technology #> 5: 540105 Public, Applied History and Archival Administration #> 6: 540106                                       Asian History #> 7: 540107                                    Canadian History #> 8: 540108                                    Military History #> 9: 540199                                      History, Other"},{"path":"/articles/art-03-case-selection.html","id":"assign-program-names","dir":"Articles","previous_headings":"","what":"Assign program names","title":"Case selection","text":"study proceeds, want compare contrast programs name. case, names cip4name suitable purpose except “Electrical, Electronics Communications Engineering” prefer replace generally used (less specific) “Electrical Engineering.” general approach create new variable program names want use. leave cip4name column place now able check work. number ways recode values program column. ’ll show three approaches.","code":"case_program <- copy(case_cip) case_program[, program := cip4name] case_program #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                                                    program #>                                                     <char> #>  1:                                      Civil Engineering #>  2:                                      Civil Engineering #>  3:                                      Civil Engineering #>  4:                                      Civil Engineering #>  5:                                      Civil Engineering #>  6:                                      Civil Engineering #>  7: Electrical, Electronics and Communications Engineering #>  8: Electrical, Electronics and Communications Engineering #>  9: Electrical, Electronics and Communications Engineering #> 10: Electrical, Electronics and Communications Engineering #> 11:                                 Mechanical Engineering #> 12:                                 Industrial Engineering"},{"path":"/articles/art-03-case-selection.html","id":"use-program-fcase-to-edit-all-values","dir":"Articles","previous_headings":"Assign program names","what":"1. Use program := fcase() to edit all values","title":"Case selection","text":"approach, use data.table fcase() function change program names abbreviations. %like% function essentially wrapper function around base R grepl() function. %ilike% variant sets ignore.case = TRUE. See help page running (back-ticks facilitate help search terms starting symbol):","code":"? `%like%` dframe <- copy(case_program) dframe[, program := fcase(   program %ilike% \"civil\", \"CVE\",   program %ilike% \"electrical\", \"ECE\",   program %ilike% \"mechanical\", \"MCE\",   program %ilike% \"industrial\", \"ISE\" )] dframe #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering     CVE #>  2: 140802                                      Civil Engineering     CVE #>  3: 140803                                      Civil Engineering     CVE #>  4: 140804                                      Civil Engineering     CVE #>  5: 140805                                      Civil Engineering     CVE #>  6: 140899                                      Civil Engineering     CVE #>  7: 141001 Electrical, Electronics and Communications Engineering     ECE #>  8: 141003 Electrical, Electronics and Communications Engineering     ECE #>  9: 141004 Electrical, Electronics and Communications Engineering     ECE #> 10: 141099 Electrical, Electronics and Communications Engineering     ECE #> 11: 141901                                 Mechanical Engineering     MCE #> 12: 143501                                 Industrial Engineering     ISE"},{"path":"/articles/art-03-case-selection.html","id":"use-program-like-to-edit-one-value","dir":"Articles","previous_headings":"Assign program names","what":"2. Use program %like% to edit one value","title":"Case selection","text":"approach, search one distinctive term .","code":"# return matches in the cip4name column dframe <- copy(case_program) rows_to_edit <- dframe$program %ilike% \"electrical\" dframe[rows_to_edit, program := \"Electrical Engineering\"] dframe #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                    program #>                     <char> #>  1:      Civil Engineering #>  2:      Civil Engineering #>  3:      Civil Engineering #>  4:      Civil Engineering #>  5:      Civil Engineering #>  6:      Civil Engineering #>  7: Electrical Engineering #>  8: Electrical Engineering #>  9: Electrical Engineering #> 10: Electrical Engineering #> 11: Mechanical Engineering #> 12: Industrial Engineering"},{"path":"/articles/art-03-case-selection.html","id":"use-cip6-like-to-edit-one-value","dir":"Articles","previous_headings":"Assign program names","what":"3. Use cip6 %like% to edit one value","title":"Case selection","text":"final approach, use %like% function , apply CIP codes. use regular expression ^1410 meaning “starts 1410.” ever approaches prefer, result . Reviewing results, see program names adequate substitutes original cip4name values, can now drop.","code":"# return matches that start with 1410 rows_to_edit <- case_program$cip6 %like% \"^1410\" case_program[rows_to_edit, program := \"Electrical Engineering\"] case_program #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                    program #>                     <char> #>  1:      Civil Engineering #>  2:      Civil Engineering #>  3:      Civil Engineering #>  4:      Civil Engineering #>  5:      Civil Engineering #>  6:      Civil Engineering #>  7: Electrical Engineering #>  8: Electrical Engineering #>  9: Electrical Engineering #> 10: Electrical Engineering #> 11: Mechanical Engineering #> 12: Industrial Engineering case_program[, cip4name := NULL]  case_program #>       cip6                program #>     <char>                 <char> #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #>  6: 140899      Civil Engineering #>  7: 141001 Electrical Engineering #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering"},{"path":"/articles/art-03-case-selection.html","id":"exercises-1","dir":"Articles","previous_headings":"Assign program names","what":"Exercises","title":"Case selection","text":"Assign copy exercise_cip (exercise previous section) name exercise_program. Add program column exercise_program initial values cip6name. Rename “General” “” “General History” Shorten “History Philosophy…” “Science Techn” Shorten “American History …” “US History” Shorten “Public Applied …” “Resource Admin” Delete cip6name column","code":"# Answer exercise_program #>      cip6           program #>    <char>            <char> #> 1: 540101   General History #> 2: 540102        US History #> 3: 540103  European History #> 4: 540104 Science and Techn #> 5: 540105    Resource Admin #> 6: 540106     Asian History #> 7: 540107  Canadian History #> 8: 540108  Military History #> 9: 540199   General History"},{"path":"/articles/art-03-case-selection.html","id":"apply-results","dir":"Articles","previous_headings":"","what":"Apply results","title":"Case selection","text":"set programs identified 6-digit CIP codes, usual application use codes subset one MIDFIELD data tables (student, course, term, degree) merge program names.","code":""},{"path":"/articles/art-03-case-selection.html","id":"example-1--subset-by-program-code","dir":"Articles","previous_headings":"Apply results","what":"Example 1. Subset by program code","title":"Case selection","text":"example, extract students case study graduated, subset rows degree keep values cip6 match values cip6 study_programs. often want select specific rows time, e.g., code chunk represents routine encounter fairly often: subset rows one data frame keep values key variable match values key variable second data frame. use filter_match() entire task: subset rows degree keep values cip6 match values cip6 case_program return three columns degree subset. duplicate rows possibility want delete , unique() job.","code":"# optional code to control data.table printing options(datatable.print.topn = 5)  # subset degree rows rows_we_want <- degree$cip6 %chin% case_program$cip6 dframe <- degree[rows_we_want]  # examine the result dframe #>              mcid   institution   term   cip6              degree #>            <char>        <char> <char> <char>              <char> #>    1: MID25783178 Institution M  20001 143501 Bachelor of Science #>    2: MID25783197 Institution M  19911 140801 Bachelor of Science #>    3: MID25783441 Institution M  19963 140801 Bachelor of Science #>    4: MID25783491 Institution M  20001 141001 Bachelor of Science #>    5: MID25783912 Institution M  20001 143501 Bachelor of Science #>   ---                                                             #> 4672: MID26696738 Institution L  20133 141901 Bachelor of Science #> 4673: MID26696771 Institution L  20143 141001 Bachelor of Science #> 4674: MID26696967 Institution L  20141 141901 Bachelor of Science #> 4675: MID26697163 Institution L  20133 141901 Bachelor of Science #> 4676: MID26697447 Institution L  20154 141001 Bachelor of Science # subset degree rows and columns cols_we_want <- c(\"mcid\", \"institution\", \"cip6\") rows_we_want <- degree$cip6 %chin% case_program$cip6 dframe <- degree[rows_we_want, ..cols_we_want]  # examine the result dframe #>              mcid   institution   cip6 #>            <char>        <char> <char> #>    1: MID25783178 Institution M 143501 #>    2: MID25783197 Institution M 140801 #>    3: MID25783441 Institution M 140801 #>    4: MID25783491 Institution M 141001 #>    5: MID25783912 Institution M 143501 #>   ---                                  #> 4672: MID26696738 Institution L 141901 #> 4673: MID26696771 Institution L 141001 #> 4674: MID26696967 Institution L 141901 #> 4675: MID26697163 Institution L 141901 #> 4676: MID26697447 Institution L 141001 # subset degree table case_degree <- filter_match(degree,   match_to = case_program,   by_col = \"cip6\",   select = c(\"mcid\", \"institution\", \"cip6\") )  # compare to the DT we obtained above after ordering rows the same way all.equal(case_degree[order(mcid)], dframe[order(mcid)]) #> [1] TRUE # omit duplicate rows if any case_degree <- unique(case_degree)  # examine the results case_degree #>              mcid   institution   cip6 #>            <char>        <char> <char> #>    1: MID25783197 Institution M 140801 #>    2: MID25783441 Institution M 140801 #>    3: MID25784334 Institution M 140801 #>    4: MID25784418 Institution M 140801 #>    5: MID25784489 Institution M 140801 #>   ---                                  #> 4672: MID26689274 Institution L 143501 #> 4673: MID26692926 Institution L 143501 #> 4674: MID26695626 Institution L 143501 #> 4675: MID26696116 Institution L 143501 #> 4676: MID26696429 Institution L 143501"},{"path":"/articles/art-03-case-selection.html","id":"example-2--subset-by-id","dir":"Articles","previous_headings":"Apply results","what":"Example 2. Subset by ID","title":"Case selection","text":"Another common data access task retrieve information student ID. Suppose wanted examine transfer status time admission students degrees subset . use filter_match() subset rows student keep values mcid match values mcid case_degree return three columns student subset. next step compare numbers students transfer status, use .N data.table. example,","code":"# subset student table case_student <- filter_match(student,   match_to = case_degree,   by_col = \"mcid\",   select = c(\"mcid\", \"transfer\", \"hours_transfer\") ) # examine the result case_student #>              mcid              transfer hours_transfer #>            <char>                <char>          <num> #>    1: MID25783178 First-Time in College             NA #>    2: MID25783197 First-Time in College             NA #>    3: MID25783441 First-Time in College             NA #>    4: MID25783491 First-Time in College             NA #>    5: MID25783912 First-Time in College             NA #>   ---                                                  #> 4672: MID26696738   First-Time Transfer             84 #> 4673: MID26696771 First-Time in College             NA #> 4674: MID26696967 First-Time in College             NA #> 4675: MID26697163 First-Time in College             NA #> 4676: MID26697447 First-Time in College             NA # omit any duplicate rows before counting case_student <- unique(case_student) case_student[, .N, by = \"transfer\"] #>                 transfer     N #>                   <char> <int> #> 1: First-Time in College  3873 #> 2:   First-Time Transfer   803"},{"path":"/articles/art-03-case-selection.html","id":"example-3--merge-program-names","dir":"Articles","previous_headings":"Apply results","what":"Example 3. Merge program names","title":"Case selection","text":"Another common use case_program data merge program names another data frame matching cip6 values. program names can used grouping summarizing. example, let’s join program names case degree data frame created . .x = TRUE argument performs merge “left outer join,” retaining rows case_degree (“left” data frame). next step group summarize program, use .N , example,","code":"# join program names case_degree <- merge(case_degree, case_program, by = \"cip6\", all.x = TRUE)  # examine the result case_degree #>         cip6        mcid   institution                program #>       <char>      <char>        <char>                 <char> #>    1: 140801 MID25783197 Institution M      Civil Engineering #>    2: 140801 MID25783441 Institution M      Civil Engineering #>    3: 140801 MID25784334 Institution M      Civil Engineering #>    4: 140801 MID25784418 Institution M      Civil Engineering #>    5: 140801 MID25784489 Institution M      Civil Engineering #>   ---                                                         #> 4672: 143501 MID26689274 Institution L Industrial Engineering #> 4673: 143501 MID26692926 Institution L Industrial Engineering #> 4674: 143501 MID26695626 Institution L Industrial Engineering #> 4675: 143501 MID26696116 Institution L Industrial Engineering #> 4676: 143501 MID26696429 Institution L Industrial Engineering case_degree[, .N, by = \"program\"] #>                   program     N #>                    <char> <int> #> 1:      Civil Engineering  1053 #> 2: Electrical Engineering  1221 #> 3: Mechanical Engineering  1646 #> 4: Industrial Engineering   756"},{"path":"/articles/art-03-case-selection.html","id":"exercises-2","dir":"Articles","previous_headings":"Apply results","what":"Exercises","title":"Case selection","text":"Starting exercise_program (exercise previous section), use filter_match() find terms students ever enrolled programs matching term data table exercise_program cip6 column. Select ID CIP variables. Assign result object exercise_student. Eliminate duplicate rows using unique(). Merge program names exercise_program students exercise_student CIP code. Summarize number students history programs program column.","code":"# answer exercise_summary #>              program     N #>               <char> <int> #> 1:   General History  2002 #> 2: Science and Techn    41"},{"path":"/articles/art-03-case-selection.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save results","title":"Case selection","text":"identified set codes names programs want study, save use later without rerunning code created . save case_program data frame CSV file project results directory easy access work study. use fast read write fread() fwrite() data.table. may prefer read/write functions base R packages readr rio. Let’s read using fread(). use colClasses argument ensure cip6 variable type read character, integer. suggest saving intermediate results like significant milestone study, especially steps requiring lot computing time. instance, case study program codes names developed saved midfieldr package data set study_programs. View help page running View data frame, Check two data frames identical,","code":"# save an intermediate result fwrite(case_program, file = \"results/case_program.csv\") # read from the results directory case_program <- fread(   \"results/case_program.csv\",   colClasses = list(character = c(\"cip6\")) ) ? study_programs study_programs #>       cip6                program #>     <char>                 <char> #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #> ---                               #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering all.equal(case_program, study_programs) #> [1] TRUE"},{"path":"/articles/art-03-case-selection.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case selection","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # load data tables from midfielddata data(student, degree)  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # identify program codes pass01 <- filter_search(cip, \"engineering\") pass02 <- filter_search(pass01, \"^14\") pass03 <- filter_search(   pass02,   c(\"civil\", \"electrical\", \"industrial\", \"mechanical\") ) pass04 <- filter_search(pass03, drop_text = \"electromechanical\") cols_we_want <- c(\"cip6\", \"cip4name\") case_cip <- pass04[, cols_we_want, with = FALSE]  # assign program names case_program <- copy(case_cip) case_program[, program := cip4name] dframe <- copy(case_program) dframe[, program := fcase(   program %ilike% \"civil\", \"CVE\",   program %ilike% \"electrical\", \"ECE\",   program %ilike% \"mechanical\", \"MCE\",   program %ilike% \"industrial\", \"ISE\" )] dframe <- copy(case_program) rows_to_edit <- dframe$program %ilike% \"electrical\" dframe[rows_to_edit, program := \"Electrical Engineering\"] rows_to_edit <- case_program$cip6 %like% \"^1410\" case_program[rows_to_edit, program := \"Electrical Engineering\"] case_program[, cip4name := NULL]  # apply results case_degree <- filter_match(degree,   match_to = case_program,   by_col = \"cip6\",   select = c(\"mcid\", \"institution\", \"cip6\") ) case_student <- filter_match(student,   match_to = case_degree,   by_col = \"mcid\",   select = c(\"mcid\", \"transfer\", \"hours_transfer\") ) case_student[, .N, by = \"transfer\"] case_degree <- merge(case_degree, case_program, by = \"cip6\", all.x = TRUE) case_degree[, .N, by = \"program\"]  # save results fwrite(case_program, file = \"results/case_program.csv\") case_program <- fread(   \"results/case_program.csv\",   colClasses = list(character = c(\"cip6\")) ) #>      cip6                                            cip6name #>    <char>                                              <char> #> 1: 540101                                    History, General #> 2: 540102                    American History (United States) #> 3: 540103                                    European History #> 4: 540104    History and Philosophy of Science and Technology #> 5: 540105 Public, Applied History and Archival Administration #> 6: 540106                                       Asian History #> 7: 540107                                    Canadian History #> 8: 540108                                    Military History #> 9: 540199                                      History, Other #>      cip6                program #>    <char>                 <char> #> 1: 540101        General History #> 2: 540102             US History #> 3: 540103       European History #> 4: 540104 Science and Technology #> 5: 540105   Historical Resources #> 6: 540106          Asian History #> 7: 540107       Canadian History #> 8: 540108       Military History #> 9: 540199        General History #>              mcid   cip6 #>            <char> <char> #>    1: MID25783780 540101 #>    2: MID25784085 540101 #>    3: MID25784804 540101 #>    4: MID25785329 540101 #>    5: MID25785903 540101 #>   ---                    #> 2039: MID26398697 540104 #> 2040: MID26400780 540104 #> 2041: MID26660944 540104 #> 2042: MID26668731 540104 #> 2043: MID26692192 540104 #>         cip6        mcid                program #>       <char>      <char>                 <char> #>    1: 540101 MID25783780        General History #>    2: 540101 MID25784085        General History #>    3: 540101 MID25784804        General History #>    4: 540101 MID25785329        General History #>    5: 540101 MID25785903        General History #>   ---                                           #> 2039: 540104 MID26398697 Science and Technology #> 2040: 540104 MID26400780 Science and Technology #> 2041: 540104 MID26660944 Science and Technology #> 2042: 540104 MID26668731 Science and Technology #> 2043: 540104 MID26692192 Science and Technology #>                   program     N #>                    <char> <int> #> 1:        General History  2002 #> 2: Science and Technology    41"},{"path":"/articles/art-03-multiway.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multiway graphs and tables","text":"take time early tutorial create graphs , Wickham Grolemund state (2017), Visualization great place start R programming, payoff clear; get make elegant informative plots help understand data. particular, introduce graphs multiway data one quantitative variable two categorical variables. explained Cleveland (1993), … quantitative variable response, goal study depends categorical variables, factors. distinguishes multiway data cross-classification categorical variables; value response combination levels two categorical variables. structure multiway data specific: categorical variable \\(m\\) levels; independent categorical variable \\(n\\) levels; single quantitative value associated every combinations levels two categories. Multiway data typically organized three columns \\(m \\times n\\) rows. Note “multiway” context refers data structure graph design defined Cleveland, methods analysis described Kroonenberg (2008).","code":""},{"path":"/articles/art-03-multiway.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Multiway graphs and tables","text":"midfieldr functions condition_multiway() packages","code":"# packages used library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(datatable.print.nrows = 10, datatable.print.topn = 5)"},{"path":"/articles/art-03-multiway.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Multiway graphs and tables","text":"Longitudinal “stickiness” ratio number students graduating program number students ever enrolled program (Ohland et al., 2012). stickiness metric developed separate vignette—focus graphing result. computed stickiness case study Civil, Electrical, Industrial, Mechanical Engineering saved results data set, study_stickiness. may view help page running data loaded midfieldr. Categorical variables often provided character variables. Without ordering levels, rows panels multiway graph ordered alphabetically—best design gaining insights graph. condition categorical variables, use condition_multiway() convert factors levels ordered median response values. see help page, run quantitative variable stick (stickiness); first categorical variable program; second categorical variable race/ethnicity/sex. conditioning, categorical variables characters, process data frame change row column structure, categorical variables now factors, levels ordered non-alphabetically. program now factor 4 levels; race_sex factor 9 levels. expect 4 \\(\\times\\) 9 = 36 observations. However, rows omitted preserve confidentiality, leaving us 31 observations. median values determine order levels can obtained using details argument.","code":"? study_stickiness # examine the built-in data  study_stickiness #>                    program             race_sex stick #>  1:      Civil Engineering         Asian Female  0.45 #>  2:      Civil Engineering         Black Female  0.35 #>  3:      Civil Engineering         White Female  0.46 #>  4:      Civil Engineering           Asian Male  0.48 #>  5:      Civil Engineering           Black Male  0.36 #> ---                                                   #> 27: Mechanical Engineering           Asian Male  0.57 #> 28: Mechanical Engineering           Black Male  0.35 #> 29: Mechanical Engineering Hispanic/Latinx Male  0.43 #> 30: Mechanical Engineering Native American Male  0.29 #> 31: Mechanical Engineering           White Male  0.46 ? condition_multiway() # create a new memory location  DT <- copy(study_stickiness) # first category is a character class(DT[, program]) #> [1] \"character\"  # second category is a character class(DT[, race_sex]) #> [1] \"character\" # condition as multiway data DT <- condition_multiway(DT) DT #>                    program             race_sex stick #>  1:      Civil Engineering         Asian Female  0.45 #>  2:      Civil Engineering         Black Female  0.35 #>  3:      Civil Engineering         White Female  0.46 #>  4:      Civil Engineering           Asian Male  0.48 #>  5:      Civil Engineering           Black Male  0.36 #> ---                                                   #> 27: Mechanical Engineering           Asian Male  0.57 #> 28: Mechanical Engineering           Black Male  0.35 #> 29: Mechanical Engineering Hispanic/Latinx Male  0.43 #> 30: Mechanical Engineering Native American Male  0.29 #> 31: Mechanical Engineering           White Male  0.46 # first category is now a factor class(DT[, program]) #> [1] \"factor\" levels(DT[, program]) #> [1] \"Electrical Engineering\" \"Mechanical Engineering\" \"Civil Engineering\"      #> [4] \"Industrial Engineering\"  # second category is now a factor class(DT[, race_sex]) #> [1] \"factor\" levels(DT[, race_sex]) #> [1] \"Native American Male\"   \"Black Male\"             \"Black Female\"           #> [4] \"Hispanic/Latinx Female\" \"White Female\"           \"Hispanic/Latinx Male\"   #> [7] \"Asian Female\"           \"White Male\"             \"Asian Male\" # return median stickiness by category DT_med <- condition_multiway(DT, details = TRUE)  # programs have a median stickiness across race-sex groups   DT_med[order(program, race_sex)] #>                    program               race_sex med_program med_race_sex #>  1: Electrical Engineering             Black Male       0.425        0.365 #>  2: Electrical Engineering           Black Female       0.425        0.385 #>  3: Electrical Engineering Hispanic/Latinx Female       0.425        0.425 #>  4: Electrical Engineering           White Female       0.425        0.430 #>  5: Electrical Engineering   Hispanic/Latinx Male       0.425        0.440 #> ---                                                                        #> 27: Industrial Engineering           White Female       0.560        0.430 #> 28: Industrial Engineering   Hispanic/Latinx Male       0.560        0.440 #> 29: Industrial Engineering           Asian Female       0.560        0.470 #> 30: Industrial Engineering             White Male       0.560        0.480 #> 31: Industrial Engineering             Asian Male       0.560        0.540 #>     stick #>  1:  0.37 #>  2:  0.42 #>  3:  0.40 #>  4:  0.34 #>  5:  0.43 #> ---       #> 27:  0.58 #> 28:  0.68 #> 29:  0.48 #> 30:  0.56 #> 31:  0.65  # race_sex groupings have a median stickiness across programs  DT_med[order(race_sex, program)] #>                    program             race_sex med_program med_race_sex stick #>  1: Mechanical Engineering Native American Male       0.430        0.290  0.29 #>  2: Electrical Engineering           Black Male       0.425        0.365  0.37 #>  3: Mechanical Engineering           Black Male       0.430        0.365  0.35 #>  4:      Civil Engineering           Black Male       0.450        0.365  0.36 #>  5: Industrial Engineering           Black Male       0.560        0.365  0.45 #> ---                                                                            #> 27: Industrial Engineering           White Male       0.560        0.480  0.56 #> 28: Electrical Engineering           Asian Male       0.425        0.540  0.51 #> 29: Mechanical Engineering           Asian Male       0.430        0.540  0.57 #> 30:      Civil Engineering           Asian Male       0.450        0.540  0.48 #> 31: Industrial Engineering           Asian Male       0.560        0.540  0.65"},{"path":"/articles/art-03-multiway.html","id":"create-a-multiway-graph","dir":"Articles","previous_headings":"","what":"Create a multiway graph","title":"Multiway graphs and tables","text":"use conventional ggplot2 functions create multiway graphs. previously ordering levels factors, structured data rows panels multiway graph ordered appropriate medians. panel medians drawn vertical dashed lines. Reminder: practice data, suitable drawing inferences student performance, .e., research.  graph permits direct visual comparison stickiness varies race sex within particular major. Reading multiway graph can effectively compare values within panel panels. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. interesting stories often visual anomalies. explore comparison panels, swap row panel categories, creating dual multiway.","code":"# create one multiway graph ggplot(data = DT_med, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_program),               linetype = 2,               color = \"gray70\") +   geom_point(na.rm = TRUE) +   labs(x = \"Stickiness\",         y = \"\",         title = \"Practice data (not for research)\",         caption = \"Source: midfielddata\")"},{"path":"/articles/art-03-multiway.html","id":"create-the-dual-multiway-graph","dir":"Articles","previous_headings":"","what":"Create the dual multiway graph","title":"Multiway graphs and tables","text":"previous graph facilitate visual comparisons members race-sex group. Cleveland says, asymmetry, often important explore multiway data many multiway dot plots categorical variables, variable assigned levels. create dual multiway graph, swap roles rows panels. y = race_sex becomes y = program facet_wrap(vars(program) ... becomes facet_wrap(vars(race_sex) ...  graph permits direct visual comparison stickiness varies major one group students. multiways created discussion. Usually one convey compelling visual story gets included published findings.","code":"# create the dual multiway graph ggplot(data = DT_med, aes(x = stick, y = program)) +   facet_wrap(vars(race_sex), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_race_sex),               linetype = 2,               color = \"gray70\") +   geom_point(na.rm = TRUE) +   labs(x = \"Stickiness\",         y = \"\",         title = \"Practice data (not for research)\",         caption = \"Source: midfielddata\")"},{"path":"/articles/art-03-multiway.html","id":"tabulate-multiway-data","dir":"Articles","previous_headings":"","what":"Tabulate multiway data","title":"Multiway graphs and tables","text":"Data tables useful discussions one’s research team often included publications readers want see values underlying data graphics. example data currently laid “block record” form (Mount Zumel, 2019), race_sex key program key columns response, stickiness, last column. layout also called “tidy data” (Wickham Grolemund, 2017). graphing package use, ggplot2, designed work effectively block-record data, thus block-record (“long”) form default layout midfieldr. Table 1: Stickiness (block records)  However, visual convention preferred publishers readers row-record (“wide”) form, illustrated Table 2. race_sex key left column program key column names. stickiness findings lie row-column intersections. Note form, four NA observations mentioned earlier explicitly shown. Table 2: Stickiness (row records) Depending software background, may encountered block-record/row-record transformation using function pairs—list adapted (Mount Zumel, 2019). pivot / anti-pivot crosstab / shred (databases) pivot_to_rowrecs / unpivot_to_blocks (cdata) reshape “wide” / reshape “long” (R) pivot_wider / pivot_longer (tidyr) pivot / unpivot (Microsoft Excel) dcast / melt (data.table) cast / melt (reshape2) example, use dcast() data.table package reshape data publication. start limiting significant figures floating-point numbers. final result want rows columns ordered alphabetically, convert factors characters. dcast() used reshape data frame block-record form row-record form. publication, edit new column names. result source Table 2, repeated . Table 2: Stickiness (row records) good tools reshaping provided packages reshape() base R, cdata (Mount Zumel, 2020), tidyr (Wickham Henry, 2020).","code":"# create a new memory location   block_form <- copy(DT)  # limit significant digits block_form[, stick := round(stick, 2)] # create a new memory location  row_form <- copy(block_form)  # convert factors to characters row_form[, race_sex := as.character(race_sex)] row_form[, program := as.character(program)] # reshape row_form <- dcast(row_form, race_sex ~ program, value.var = \"stick\")  # examine the result row_form #>                  race_sex Civil Engineering Electrical Engineering #> 1:           Asian Female              0.45                   0.46 #> 2:             Asian Male              0.48                   0.51 #> 3:           Black Female              0.35                   0.42 #> 4:             Black Male              0.36                   0.37 #> 5: Hispanic/Latinx Female                NA                   0.40 #> 6:   Hispanic/Latinx Male              0.45                   0.43 #> 7:   Native American Male                NA                     NA #> 8:           White Female              0.46                   0.34 #> 9:             White Male              0.50                   0.43 #>    Industrial Engineering Mechanical Engineering #> 1:                   0.48                   0.61 #> 2:                   0.65                   0.57 #> 3:                   0.51                   0.33 #> 4:                   0.45                   0.35 #> 5:                     NA                   0.45 #> 6:                   0.68                   0.43 #> 7:                     NA                   0.29 #> 8:                   0.58                   0.40 #> 9:                   0.56                   0.46 # edit column names setnames(row_form,           old = c(\"race_sex\",                   \"Civil Engineering\",                   \"Electrical Engineering\",                   \"Industrial Engineering\",                   \"Mechanical Engineering\"),           new = c(\"Race/ethnicity/sex\",                   \"Civil\",                   \"Electrical\",                   \"Industrial\",                   \"Mechanical\"))  # examine the result row_form #>        Race/ethnicity/sex Civil Electrical Industrial Mechanical #> 1:           Asian Female  0.45       0.46       0.48       0.61 #> 2:             Asian Male  0.48       0.51       0.65       0.57 #> 3:           Black Female  0.35       0.42       0.51       0.33 #> 4:             Black Male  0.36       0.37       0.45       0.35 #> 5: Hispanic/Latinx Female    NA       0.40         NA       0.45 #> 6:   Hispanic/Latinx Male  0.45       0.43       0.68       0.43 #> 7:   Native American Male    NA         NA         NA       0.29 #> 8:           White Female  0.46       0.34       0.58       0.40 #> 9:             White Male  0.50       0.43       0.56       0.46"},{"path":"/articles/art-03-multiway.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Multiway graphs and tables","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")  # data preparation DT <- copy(study_stickiness) class(DT[, program]) class(DT[, race_sex]) DT <- condition_multiway(DT) class(DT[, program]) levels(DT[, program]) class(DT[, race_sex]) levels(DT[, race_sex]) DT_med <- condition_multiway(DT, details = TRUE) DT_med[order(program, race_sex)] DT_med[order(race_sex, program)]  # creating a multiway graph  ggplot(data = DT_med, aes(x = stick, y = race_sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_program),               linetype = 2) +   geom_point(na.rm = TRUE) +   labs(x = \"Stickiness\",         y = \"\",         title = \"Practice data (not for research)\",         caption = \"Source: midfielddata\")  # creating the dual multiway graph ggplot(data = DT_med, aes(x = stick, y = program)) +   facet_wrap(vars(race_sex), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = med_race_sex),               linetype = 2) +   geom_point(na.rm = TRUE) +   labs(x = \"Stickiness\",         y = \"\",         title = \"Practice data (not for research)\",         caption = \"Source: midfielddata\")  # creating a table for publication block_form <- copy(DT) block_form[, stick := round(stick, 2)] row_form <- copy(block_form) row_form[, race_sex := as.character(race_sex)] row_form[, program := as.character(program)] row_form <- dcast(row_form, race_sex ~ program, value.var = \"stick\") setnames(row_form,           old = c(\"race_sex\",                   \"Civil Engineering\",                   \"Electrical Engineering\",                   \"Industrial Engineering\",                   \"Mechanical Engineering\"),           new = c(\"Race/ethnicity/sex\",                   \"Civil\",                   \"Electrical\",                   \"Industrial\",                   \"Mechanical\"))"},{"path":"/articles/art-04-data-sufficiency.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data sufficiency","text":"data provided institutions MIDFIELD cover finite span years, different starting ending terms institution. students admitted near upper limit institution’s data range, available data cover insufficient number years fairly assess student performance. students data range sufficient included analysis. vignette, introduce two concepts related midfieldr functions: timely completion (TC) term last term program completion considered timely given student. example, TC term many cases defined admission term plus 6 years. data sufficiency criterion study must limited students whose timely completion term within range data provided institution. figure compare two first-time--college students admitted different terms, 6-year spans program completion considered timely. Student enters Fall 1990 timely completion (TC) term Spring 1995. Student B enters Fall 1992 TC term Spring 1997. Institution data available 1986 1996.  TC term Student B within range data provided institution. data sufficiency criterion, exclude student B study. criterion applies even Student B known graduated within data limit. students like Student B graduate data limit, know program completion timely . students must excluded study, must every student whose TC term encompassed available data.","code":""},{"path":"/articles/art-04-data-sufficiency.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Data sufficiency","text":"Start case study programs (study_programs) Obtain students ever enrolled programs Determine timely completion terms Determine data sufficiency institution student Filter observations data sufficiency Result set students analysis (study_students)","code":""},{"path":"/articles/art-04-data-sufficiency.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Data sufficiency","text":"midfieldr functions add_data_sufficiency() add_institution() add_timely_term() filter_match() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # optional code to format data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term, degree)"},{"path":"/articles/art-04-data-sufficiency.html","id":"case-study-students","dir":"Articles","previous_headings":"","what":"Case study students","title":"Data sufficiency","text":"Recall case study program codes names saved midfieldr package data set study_programs. View help page running View data frame, obtain students enrolled case study programs, use filter_match() access term table. Delete duplicate rows, ,","code":"? study_programs study_programs #>       cip6                program #>     <char>                 <char> #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #> ---                               #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering case_students <- filter_match(term,   match_to = study_programs,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) case_students #>               mcid   cip6 #>             <char> <char> #>     1: MID25783197 140801 #>     2: MID25783197 140801 #>     3: MID25783197 140801 #>     4: MID25783197 140801 #>     5: MID25783197 140801 #>    ---                    #> 67089: MID26696429 143501 #> 67090: MID26696429 143501 #> 67091: MID26696429 143501 #> 67092: MID26696429 143501 #> 67093: MID26696429 143501 case_students <- unique(case_students) case_students #>               mcid   cip6 #>             <char> <char> #>     1: MID25783197 140801 #>     2: MID25783441 140801 #>     3: MID25783553 140801 #>     4: MID25783648 140801 #>     5: MID25784209 140801 #>    ---                    #> 10760: MID26693368 143501 #> 10761: MID26695188 143501 #> 10762: MID26695626 143501 #> 10763: MID26696116 143501 #> 10764: MID26696429 143501"},{"path":"/articles/art-04-data-sufficiency.html","id":"estimate-the-timely-completion-term","dir":"Articles","previous_headings":"","what":"Estimate the timely completion term","title":"Data sufficiency","text":"necessary prerequisite applying data sufficiency criterion determine timely completion term every prospective student study. confirm pool students degree-seeking, use filter_match() match IDs student table. use add_timely_term() estimate timely completion term. View help page running function name suggests, add_timely_term() adds timely_term column input data frame. new variable contains estimated timely completion term student. first argument working data frame column added; second argument term (equivalent term-variables data frame). required. basic heuristic starts span number years student (default 6 years) adjusts span subtracting whole number years based level student admitted. example, student admitted second-year level assumed completed one year program, span reduced one year. Similarly, spans reduced two years students admitted 3rd-year level three years students admitted fourth-year level. adjusted span years added starting term produces timely completion term. Optional arguments details, span, sched_span. used, arguments must named. span must less sched_span. sched_span number years institution schedules program completion, typically 4 years. details, TRUE, provides additional columns (described next) Setting details TRUE yields additional columns used determine timely-term results: term_i admission term level_i level upon admitted adj_span adjusted span potential use data implement one’s heuristic determining timely completion terms. input data frame existing column name matching added column names, existing columns deleted. example, examined details, can delete (especially useful interactive session) running code details set FALSE.","code":"# limit population to degree-seeking students DT <- filter_match(case_students,   match_to = student,   by_col = \"mcid\" )  # examine the result DT <- unique(DT) DT #>               mcid   cip6 #>             <char> <char> #>     1: MID25783178 143501 #>     2: MID25783197 140801 #>     3: MID25783388 141901 #>     4: MID25783441 140801 #>     5: MID25783491 141001 #>    ---                    #> 10760: MID26696967 141901 #> 10761: MID26696979 141901 #> 10762: MID26697163 141901 #> 10763: MID26697444 141901 #> 10764: MID26697447 141001 ? add_timely_term # estimate the timely completion term DT <- add_timely_term(DT, midfield_term = term) DT #>               mcid   cip6 timely_term #>             <char> <char>      <char> #>     1: MID25783178 143501       20003 #>     2: MID25783197 140801       19923 #>     3: MID25783388 141901       19923 #>     4: MID25783441 140801       19973 #>     5: MID25783491 141001       20013 #>    ---                                #> 10760: MID26696967 141901       20153 #> 10761: MID26696979 141901       20183 #> 10762: MID26697163 141901       20143 #> 10763: MID26697444 141901       20153 #> 10764: MID26697447 141001       20163 add_timely_term(dframe,                 midfield_term,                 ...,                 details = NULL,     # default FALSE                 span = NULL,        # default 6 years                 sched_span = NULL)  # default 4 years # show details DT <- add_timely_term(DT,   midfield_term = term,   details = TRUE ) DT #>               mcid   cip6 term_i      level_i adj_span timely_term #>             <char> <char> <char>       <char>    <num>      <char> #>     1: MID25783178 143501  19946  01 Freshman        6       20003 #>     2: MID25783197 140801  19871  01 Freshman        6       19923 #>     3: MID25783388 141901  19871  01 Freshman        6       19923 #>     4: MID25783441 140801  19921  01 Freshman        6       19973 #>     5: MID25783491 141001  19961  01 Freshman        6       20013 #>    ---                                                             #> 10760: MID26696967 141901  20101  01 Freshman        6       20153 #> 10761: MID26696979 141901  20154    04 Senior        3       20183 #> 10762: MID26697163 141901  20101 02 Sophomore        5       20143 #> 10763: MID26697444 141901  20101  01 Freshman        6       20153 #> 10764: MID26697447 141001  20111  01 Freshman        6       20163 # remove details DT <- add_timely_term(DT,   midfield_term = term,   details = FALSE ) DT #>               mcid   cip6 timely_term #>             <char> <char>      <char> #>     1: MID25783178 143501       20003 #>     2: MID25783197 140801       19923 #>     3: MID25783388 141901       19923 #>     4: MID25783441 140801       19973 #>     5: MID25783491 141001       20013 #>    ---                                #> 10760: MID26696967 141901       20153 #> 10761: MID26696979 141901       20183 #> 10762: MID26697163 141901       20143 #> 10763: MID26697444 141901       20153 #> 10764: MID26697447 141001       20163"},{"path":"/articles/art-04-data-sufficiency.html","id":"exercises","dir":"Articles","previous_headings":"Estimate the timely completion term","what":"Exercises","title":"Data sufficiency","text":"start data frame details shown following code chunk, subsets x follows: adj_span == 6 subsets rows 6 year span = cip6 groups data four CIP codes .SD[1] retains first row group resulting 4 rows (one CIP): Recall (term help page) terms academic year encoded YYYY value. Choose row. Confirm student starting initial term shown graduating full 6 academic years later graduate term reported timely-term column. Reuse code chunk change adjusted span 4 5 years. Select one row repeat assessment.","code":"x <- add_timely_term(DT, term, details = TRUE) x[adj_span == 6, .SD[1], by = cip6] #>      cip6        mcid term_i     level_i adj_span timely_term #>    <char>      <char> <char>      <char>    <num>      <char> #> 1: 143501 MID25783178  19946 01 Freshman        6       20003 #> 2: 140801 MID25783197  19871 01 Freshman        6       19923 #> 3: 141901 MID25783388  19871 01 Freshman        6       19923 #> 4: 141001 MID25783491  19961 01 Freshman        6       20013"},{"path":"/articles/art-04-data-sufficiency.html","id":"determine-data-sufficiency","dir":"Articles","previous_headings":"","what":"Determine data sufficiency","title":"Data sufficiency","text":"Data sufficiency depends range data institution, first step add column institution keyed student ID. use add_institution(). View help page running function two arguments, data frame new variable added term MIDFIELD data table (equivalent). event student admitted one institution history data, function reports institution student enrolled greatest number terms. Like midfieldr add_ functions, existing columns deleted overwritten name variables added (, institution). Now working data frame timely_term institution columns, can use add_data_sufficiency() add logical variable (TRUE/FALSE) answers question, “data sufficiency constraint satisfied?” View help page running, Similar add_timely_term(), function two required arguments one optional details argument. details, case, add one extra column show institution’s upper data limit. details FALSE, data_sufficieny column added.","code":"? add_institution # add institutions DT <- add_institution(DT,   midfield_term = term )  # examine the result DT #>               mcid   institution   cip6 timely_term #>             <char>        <char> <char>      <char> #>     1: MID25783178 Institution M 143501       20003 #>     2: MID25783197 Institution M 140801       19923 #>     3: MID25783388 Institution M 141901       19923 #>     4: MID25783441 Institution M 140801       19973 #>     5: MID25783491 Institution M 141001       20013 #>    ---                                              #> 10760: MID26696967 Institution L 141901       20153 #> 10761: MID26696979 Institution L 141901       20183 #> 10762: MID26697163 Institution L 141901       20143 #> 10763: MID26697444 Institution L 141901       20153 #> 10764: MID26697447 Institution L 141001       20163 ? add_data_sufficiency # add column with details DT <- add_data_sufficiency(DT,   midfield_term = term,   details = TRUE ) # examine the result DT #>               mcid   institution   cip6 timely_term inst_limit data_sufficiency #>             <char>        <char> <char>      <char>     <char>           <lgcl> #>     1: MID25783178 Institution M 143501       20003      20096             TRUE #>     2: MID25783197 Institution M 140801       19923      20096             TRUE #>     3: MID25783388 Institution M 141901       19923      20096             TRUE #>     4: MID25783441 Institution M 140801       19973      20096             TRUE #>     5: MID25783491 Institution M 141001       20013      20096             TRUE #>    ---                                                                          #> 10760: MID26696967 Institution L 141901       20153      20164             TRUE #> 10761: MID26696979 Institution L 141901       20183      20164            FALSE #> 10762: MID26697163 Institution L 141901       20143      20164             TRUE #> 10763: MID26697444 Institution L 141901       20153      20164             TRUE #> 10764: MID26697447 Institution L 141001       20163      20164             TRUE # without details DT <- add_data_sufficiency(DT,   midfield_term = term,   details = FALSE ) # examine the result DT #>               mcid   institution   cip6 timely_term data_sufficiency #>             <char>        <char> <char>      <char>           <lgcl> #>     1: MID25783178 Institution M 143501       20003             TRUE #>     2: MID25783197 Institution M 140801       19923             TRUE #>     3: MID25783388 Institution M 141901       19923             TRUE #>     4: MID25783441 Institution M 140801       19973             TRUE #>     5: MID25783491 Institution M 141001       20013             TRUE #>    ---                                                               #> 10760: MID26696967 Institution L 141901       20153             TRUE #> 10761: MID26696979 Institution L 141901       20183            FALSE #> 10762: MID26697163 Institution L 141901       20143             TRUE #> 10763: MID26697444 Institution L 141901       20153             TRUE #> 10764: MID26697447 Institution L 141001       20163             TRUE"},{"path":"/articles/art-04-data-sufficiency.html","id":"exercises-1","dir":"Articles","previous_headings":"Determine data sufficiency","what":"Exercises","title":"Data sufficiency","text":"start term data table, select two columns, order rows institution term, following code chunk, subsets x follows: = institution groups data 12 institutions .SD[.N] retains last row group (previously ordered rows term within institution) yielding data frame (shown) giving last term data institution. Obtain data frame running code chunks . run: Filter one institution using institution == \"Institution \" filters Institution .SD[1:5] pulls first 5 rows, Confirm last term Institution found earlier match inst_limit reported add_data_sufficiency(). Repeat last code chunk another institution confirm result.","code":"# select columns from term cols_we_want <- c(\"institution\", \"term\") x <- term[order(institution, term), ..cols_we_want] # optional code to format data.table printing options(datatable.print.nrows = 12)  # filter for last term grouped by instititution x[, .SD[.N], by = institution] y <- add_data_sufficiency(DT,   midfield_term = term,   details = TRUE ) y[institution == \"Institution A\", .SD[1:5]]"},{"path":"/articles/art-04-data-sufficiency.html","id":"subset-data-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Subset data for data sufficiency","title":"Data sufficiency","text":"Observations (rows) satisfying data sufficiency criterion labeled TRUE data_sufficiency column; labeled FALSE. Limiting population students satisfying criterion straightforward—retain TRUE data sufficiency rows. performed subset, working columns used get point can deleted. retain two columns started vignette, mcid cip6. , suggest saving intermediate results like . data frame IDs CIP codes saved midfieldr data set study_students. View help page running View data frame, Confirm two .","code":"# limit population to data sufficient DT <- DT[data_sufficiency == TRUE]  # examine the result DT #>              mcid   institution   cip6 timely_term data_sufficiency #>            <char>        <char> <char>      <char>           <lgcl> #>    1: MID25783178 Institution M 143501       20003             TRUE #>    2: MID25783197 Institution M 140801       19923             TRUE #>    3: MID25783388 Institution M 141901       19923             TRUE #>    4: MID25783441 Institution M 140801       19973             TRUE #>    5: MID25783491 Institution M 141001       20013             TRUE #>   ---                                                               #> 8215: MID26696958 Institution L 141901       20163             TRUE #> 8216: MID26696967 Institution L 141901       20153             TRUE #> 8217: MID26697163 Institution L 141901       20143             TRUE #> 8218: MID26697444 Institution L 141901       20153             TRUE #> 8219: MID26697447 Institution L 141001       20163             TRUE DT <- DT[, .(mcid, cip6)] ? study_students study_students #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783197 140801 #>    3: MID25783388 141901 #>    4: MID25783441 140801 #>    5: MID25783491 141001 #>   ---                    #> 8215: MID26696958 141901 #> 8216: MID26696967 141901 #> 8217: MID26697163 141901 #> 8218: MID26697444 141901 #> 8219: MID26697447 141001 DT <- DT[order(mcid)] study_students <- study_students[order(mcid)] all.equal(DT, study_students) #> [1] TRUE"},{"path":"/articles/art-04-data-sufficiency.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Data sufficiency","text":"data sufficiency criterion must applied whenever study incorporates program completion (graduation) part metric. Different heuristics might used determine term timely completion (discussed separate vignette), timely term determined, sufficiency data available immediately determines whether student remains study.","code":""},{"path":"/articles/art-04-data-sufficiency.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Data sufficiency","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # load data tables from midfielddata data(student, term, degree)  # Case study students case_students <- filter_match(term,   match_to = study_programs,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) case_students <- unique(case_students)  # Estimate the timely completion term DT <- filter_match(case_students,   match_to = student,   by_col = \"mcid\" ) DT <- unique(DT) DT <- add_timely_term(DT, midfield_term = term)  # Determine data sufficiency DT <- add_institution(DT, midfield_term = term) DT <- add_data_sufficiency(DT,   midfield_term = term,   details = TRUE )  # Subset data for data sufficiency DT <- DT[data_sufficiency == TRUE] DT <- DT[, .(mcid, cip6)]"},{"path":"/articles/art-04-program-codes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Program codes","text":"studying student records, common first step subset data, retaining instructional programs dropping others. US, instructional programs encoded “CIP” codes. CIP acronym Classification Instructional Programs, taxonomy academic programs curated US Department Education (NCES, 2010). IPEDS standard encoding format two-digit number followed period, followed four-digit number, example, 14.0102 (NCES, 2020). MIDFIELD uses numerals, omits period, .e., 140102, stores variable character string. 2010 CIP codes included midfieldr data set cip. vignette, examine strategies searching cip programs want study.","code":""},{"path":"/articles/art-04-program-codes.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Program codes","text":"midfieldr functions filter_text() packages","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # optional code to control data.table printing options(datatable.print.nrows = 10, datatable.print.topn = 5)"},{"path":"/articles/art-04-program-codes.html","id":"taxonomy-of-programs","dir":"Articles","previous_headings":"","what":"Taxonomy of programs","title":"Program codes","text":"Academic programs three levels codes names: 6-digit code, specific program 4-digit code, group 6-digit programs comparable content 2-digit code, grouping 4-digit groups related content Loosely, 6-digit level can thought specialty within discipline, 4-digit level often equivalent academic department, 2-digit level roughly equivalent academic college. example, Geotechnical Engineering (140802) specialty Civil Engineering (1408) department college Engineering (14). table , show programs broad area “Science Technologies, Technicians” (code 41) illustrate relationships among 2-, 4-, 6-digit program codes names detail. 2-digit grouping subdivided 5 groups 4-digit level (codes 4100–4199) subdivided 9 programs 6-digit level (codes 410000–419999).  number 6-digit programs 4-digit group varies program. Four-digit groupings include anywhere 1 program (code 4100 example) 37 programs (code 1313 Education). Similarly, 2-digit groupings include anywhere four 4-digit programs (code 24 Liberal Arts Sciences, General Studies Humanities) 238 programs (code 51 Health Professions Related Clinical Sciences).","code":""},{"path":"/articles/art-04-program-codes.html","id":"inspect-the-cip-data","dir":"Articles","previous_headings":"","what":"Inspect the cip data","title":"Program codes","text":"Data set loads midfieldr. definitions variables, view help page running see data structure, run following. Note variables character strings, protect leading zeros codes. see observations, run number unique programs. sample program names,","code":"? cip str(cip) #> Classes 'data.table' and 'data.frame':   1582 obs. of  6 variables: #>  $ cip2    : chr  \"01\" \"01\" \"01\" \"01\" ... #>  $ cip2name: chr  \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" \"Agriculture, Agricultural Operations and Related Sciences\" ... #>  $ cip4    : chr  \"0100\" \"0101\" \"0101\" \"0101\" ... #>  $ cip4name: chr  \"Agriculture, General\" \"Agricultural Business and Management\" \"Agricultural Business and Management\" \"Agricultural Business and Management\" ... #>  $ cip6    : chr  \"010000\" \"010101\" \"010102\" \"010103\" ... #>  $ cip6name: chr  \"Agriculture, General\" \"Agricultural Business and Management, General\" \"Agribusiness, Agricultural Business Operations\" \"Agricultural Economics\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0)  #>   ..- attr(*, \"__cip6\")= int(0) cip #>       cip2                                                  cip2name cip4 #>    1:   01 Agriculture, Agricultural Operations and Related Sciences 0100 #>    2:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>    3:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>    4:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>    5:   01 Agriculture, Agricultural Operations and Related Sciences 0101 #>   ---                                                                     #> 1578:   54                                                   History 5401 #> 1579:   54                                                   History 5401 #> 1580:   54                                                   History 5401 #> 1581:   54                                                   History 5401 #> 1582:   99                         NonIPEDS - Undecided, Unspecified 9999 #>                                   cip4name   cip6 #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>    4: Agricultural Business and Management 010103 #>    5: Agricultural Business and Management 010104 #>   ---                                             #> 1578:                              History 540106 #> 1579:                              History 540107 #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>    4:                         Agricultural Economics #>    5:                Farm, Farm and Ranch Management #>   ---                                                #> 1578:                                  Asian History #> 1579:                               Canadian History #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified # at the 2-digit level sort(unique(cip[, cip2])) #>  [1] \"01\" \"03\" \"04\" \"05\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"19\" \"22\" \"23\" #> [16] \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" #> [31] \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"54\" #> [46] \"99\"  # at the 4-digit level length(unique(cip[, cip4])) #> [1] 394  # at the 6-digit level length(unique(cip[, cip6])) #> [1] 1582 set.seed(20210529) some_programs <- cip[, .(cip4name)] print(some_programs[sample(1:300, 20)], nrows = 20) #>                                                                 cip4name #>  1:                   Cosmetology and Related Personal Grooming Services #>  2:              Public Relations, Advertising and Applied Communication #>  3:                              Natural Resources Management and Policy #>  4:                                Communications Technology, Technician #>  5:                                                        Soil Sciences #>  6:                           Educational Administration and Supervision #>  7:                                   Agricultural Production Operations #>  8:                                                         Area Studies #>  9:                                                      Animal Sciences #> 10:                                                             Forestry #> 11:                                       Special Education and Teaching #> 12: Communications Technologies, Technicians and Support Services, Other #> 13:                                       Special Education and Teaching #> 14:                                                         Area Studies #> 15:                                                             Forestry #> 16:                                 Agricultural Business and Management #> 17:                                                           Journalism #> 18:                   Cosmetology and Related Personal Grooming Services #> 19:                                                             Forestry #> 20:              Public Relations, Advertising and Applied Communication"},{"path":"/articles/art-04-program-codes.html","id":"filter-using-keywords","dir":"Articles","previous_headings":"","what":"Filter using keywords","title":"Program codes","text":"filter_text() midfieldr function searching cip data set program codes names. View help page running variables cip characters filter_text() subsets data frame using character search terms. arguments : dframe data frame subset keep_text character vector search text retaining rows, case-sensitive drop_text (optional) character vector search text dropping rows select (optional) character vector column names search return, default columns example, filtering CIP data programs containing word “engineering” yields 119 observations. first two argument names filter_text() can omitted. optional drop_text select arguments, however, must named used. Note unique rows returned. selected 6-digit codes names. search, report 4-digit codes names, obtain shorter listing, expected. Suppose want find CIP codes names programs Civil Engineering. search case-insensitive, start following code chunk. information tabulated help see structure. examples follow, show table like one instead R output.  search returns programs Civilization names well Engineering Technology. wanted Civil Engineering , can use sequence function calls, outcome one operation assigned first argument next operation. following code chunk read , “Start cip data frame, keep rows ‘civil’ detected, keep rows ‘engineering’ detected, drop rows ‘technology’ detected.”  Seeing Civil Engineering programs cip4name, combined arguments obtained result.","code":"? filter_text() # filter basics filter_text(dframe = cip, keep_text = \"engineering\") #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>   4:   14                                      Engineering 1403 #>   5:   14                                      Engineering 1404 #>  ---                                                            #> 115:   15                           Engineering Technology 1516 #> 116:   15                           Engineering Technology 1599 #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                     cip4name   cip6 #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering # applying optional argument drop_text and select filter_text(cip,              \"engineering\",              drop_text = c(\"engineering-related\",                            \"engineering related\",                            \"engineering technology\",                            \"engineering technologies\"),              select = c(\"cip6\", \"cip6name\")) #>       cip6                                                         cip6name #>  1: 140101                                             Engineering, General #>  2: 140102                                                  Pre-Engineering #>  3: 140201     Aerospace, Aeronautical and Astronautical, Space Engineering #>  4: 140301          Agricultural, Biological Engineering and Bioengineering #>  5: 140401                                        Architectural Engineering #> ---                                                                         #> 54: 151304                   Civil Drafting and Civil Engineering CAD, CADD #> 55: 151502                                               Engineering Design #> 56: 290301                                       Combat Systems Engineering #> 57: 290303                                            Engineering Acoustics #> 58: 512312 Assistive, Augmentative Technology and Rehabiliation Engineering # applying optionalk argument drop_text and select filter_text(cip,              c(\"engineering\"),              drop_text = c(\"engineering-related\",                            \"engineering related\",                            \"engineering technology\",                            \"engineering technologies\"),              select = c(\"cip4\", \"cip4name\")) #>     cip4                                                cip4name #>  1: 1401                                    Engineering, General #>  2: 1402   Aerospace, Aeronautical and Astronautical Engineering #>  3: 1403 Agricultural, Biological Engineering and Bioengineering #>  4: 1404                               Architectural Engineering #>  5: 1405                         Biomedical, Medical Engineering #> ---                                                              #> 34: 1442       Mechatronics, Robotics and Automation Engineering #> 35: 1443                                 Biochemical Engineering #> 36: 1444                                   Engineering Chemistry #> 37: 1445                      Biological, Biosystems Engineering #> 38: 1499                                      Engineering, Other # example 1 filter using keywords filter_text(cip, \"civil\") #>     cip2                                            cip2name cip4 #>  1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #>  2:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #>  3:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #>  4:   14                                         Engineering 1408 #>  5:   14                                         Engineering 1408 #> ---                                                               #>  8:   14                                         Engineering 1408 #>  9:   14                                         Engineering 1408 #> 10:   15                              Engineering Technology 1502 #> 11:   15                              Engineering Technology 1513 #> 12:   30                     Muti, Interdisciplinary Studies 3022 #>                                                                       cip4name #>  1:                                                               Area Studies #>  2:                                                               Area Studies #>  3:                                                               Area Studies #>  4:                                                          Civil Engineering #>  5:                                                          Civil Engineering #> ---                                                                            #>  8:                                                          Civil Engineering #>  9:                                                          Civil Engineering #> 10:                                Civil Engineering Technologies, Technicians #> 11:                     Drafting, Design Engineering Technologies, Technicians #> 12: Classical and Ancient, Oriental Studies - Multi, Interdisciplinary Studies #>       cip6                                                         cip6name #>  1: 050102                    American, United States Studies, Civilization #>  2: 050103                                      Asian Studies, Civilization #>  3: 050106                                   European Studies, Civilization #>  4: 140801                                       Civil Engineering, General #>  5: 140802                                         Geotechnical Engineering #> ---                                                                         #>  8: 140805                                      Water Resources Engineering #>  9: 140899                                         Civil Engineering, Other #> 10: 150201                         Civil Engineering Technology, Technician #> 11: 151304                   Civil Drafting and Civil Engineering CAD, CADD #> 12: 302201 Multi, Interdisciplinary Studies - Ancient Studies, Civilization # first search first_pass <- filter_text(cip, \"civil\")  # refine the search second_pass <- filter_text(first_pass, \"engineering\")  # refine further third_pass <- filter_text(second_pass, drop_text = \"technology\") filter_text(cip, \"civil engineering\", drop_text = \"technology\")"},{"path":"/articles/art-04-program-codes.html","id":"filter-using-numerical-codes","dir":"Articles","previous_headings":"","what":"Filter using numerical codes","title":"Program codes","text":"Suppose want study programs relating German culture, language, literature. Using “german” keep_text value yields  6-digit program names find two interest, German Studies (050125) German Language Literature (160501). use character vector assign two codes keep_text argument.  6-digit codes entered integers, produce error.","code":"# example 2 filter using numerical codes filter_text(cip, \"german\") # character vector of search terms  filter_text(cip, c(\"050125\", \"160501\")) filter_text(cip, c(050125, 160501)) #> Error: `keep_text` must be of class character"},{"path":"/articles/art-04-program-codes.html","id":"filter-using-regular-expressions","dir":"Articles","previous_headings":"","what":"Filter using regular expressions","title":"Program codes","text":"Specifying 4-digit codes yields data frame 6-digit programs containing 4-digit string. use regular expression notation ^ match start strings.  2-digit series represent general groupings related programs. , result includes History programs.  series argument can include combination 2, 4, 6-digit codes. can also passed function character vector.","code":"# example 3 filter using regular expressions filter_text(cip, c(\"^1407\", \"^1408\")) # 2-digit example filter_text(cip, \"^54\") # character vector of search terms  codes_we_want <- c(\"^24\", \"^4102\", \"^450202\")  # a series with 2, 4, and 6-digits specified filter_text(cip, codes_we_want)"},{"path":"/articles/art-04-program-codes.html","id":"when-search-terms-cannot-be-found","dir":"Articles","previous_headings":"","what":"When search terms cannot be found","title":"Program codes","text":"keep_text argument includes terms found CIP data frame, unsuccessful terms identified message successful terms produce usual output. example, following keep_text argument includes three search terms present CIP data (“111111”, “^55”, “Bogus”) two (“050125” “160501”). However, seen earlier, none search terms found, error occurs.","code":"# unsuccessful terms produce a message sub_cip <- filter_text(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) #> Can't find these terms: 111111, Bogus, ^55  # but the successful terms are returned sub_cip #>    cip2                                            cip2name cip4 #> 1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #> 2:   16      Foreign Languages, Literatures and Linguistics 1605 #>                                       cip4name   cip6 #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #> 1:                 German Studies #> 2: German Language and Literature filter_text(cip, c(\"111111\", \"Bogus\", \"^55\")) #> Error: No CIPs satisfy the search criteria"},{"path":"/articles/art-04-program-codes.html","id":"cip-data-from-another-source","dir":"Articles","previous_headings":"","what":"CIP data from another source","title":"Program codes","text":"use CIP data set another source, must structure cip: six character columns named follows,","code":"# name and class of variables (columns) in cip unlist(lapply(cip, FUN = class)) #>        cip2    cip2name        cip4    cip4name        cip6    cip6name  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"/articles/art-04-program-codes.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Program codes","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"data.table\")  # cip str(cip) sort(unique(cip[, cip2])) length(unique(cip[, cip4])) length(unique(cip[, cip6])) set.seed(20210529) some_programs <- cip[, .(cip4name)] print(some_programs[sample(1:300, 20)], nrows = 20)  # filter using keywords filter_text(dframe = cip, keep_text = \"engineering\") filter_text(cip,              \"engineering\",              drop_text = c(\"engineering-related\",                            \"engineering related\",                            \"engineering technology\",                            \"engineering technologies\"),              select = c(\"cip6\", \"cip6name\")) filter_text(cip,              c(\"engineering\"),              drop_text = c(\"engineering-related\",                            \"engineering related\",                            \"engineering technology\",                            \"engineering technologies\"),              select = c(\"cip4\", \"cip4name\")) filter_text(cip, \"civil\") first_pass <- filter_text(cip, \"civil\") second_pass <- filter_text(first_pass, \"engineering\") third_pass <- filter_text(second_pass, drop_text = \"technology\") filter_text(cip, \"civil engineering\", drop_text = \"technology\")  # filter using numerical codes filter_text(cip, \"german\") filter_text(cip, c(\"050125\", \"160501\")) filter_text(cip, c(\"^1407\", \"^1408\")) filter_text(cip, \"^54\") codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_text(cip, codes_we_want)  # when search terms cannot be found sub_cip <- filter_text(cip, c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) sub_cip"},{"path":"/articles/art-04-timely-completion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Timely completion","text":"Students generally expect complete program within span years entry. Institutions typically use 6 year span, based IPEDS convention using 150% “normal time” 4-year institution define gradation rate. However, span program completion might considered “timely” highly dependent choices student makes transferring institutions changing majors. example, figure illustrates history two students enter Fall 2010 graduate Spring 2015. assume basis 6 years timely completion. Student first-time--college student timely completion (TC) term Spring 2016. completion timely degree term comes TC term. Student B transfer student, entering junior. already satisfied 2 years program requirements, TC term Spring 2014. completion timely degree term comes TC term.  entry term Term student enters institution earn first degree. degree, term student enters last institution record. timely completion span (TC span) Span years entry program completion considered timely. Depends heuristic used evaluate student’s history data record. timely completion term (TC term) Last term program completion considered timely. end TC span. degree term Term student earns first degree completing program.","code":""},{"path":"/articles/art-04-timely-completion.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Timely completion","text":"midfieldr functions () packages","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(datatable.print.nrows = 10, datatable.print.topn = 5)"},{"path":"/articles/art-04-timely-completion.html","id":"estimating-the-timely-completion-term","dir":"Articles","previous_headings":"","what":"Estimating the timely completion term","title":"Timely completion","text":"Simple heuristic: 6 years minus level entry Better: wold account students like , transfer, level, switchers","code":""},{"path":"/articles/art-04-timely-completion.html","id":"applying-the-timely-completion-term","dir":"Articles","previous_headings":"","what":"Applying the timely completion term","title":"Timely completion","text":"Untimely graduation? Grad reclassified nongrad TC exceeds data limit? Omit students study","code":""},{"path":"/articles/art-04-timely-completion.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Timely completion","text":"vignette code chunks collected single, condensed script.","code":""},{"path":"/articles/art-05-fye-programs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"FYE programs","text":"US institutions first year engineering (FYE) programs—typically common first-year curriculum prerequisite acceptance degree-granting engineering major. persistence metrics computed program level, FYE programs can problematic. example, graduation rate conventionally defined ratio number students complete program (specified span years) number students entering cohort (NCES-IPEDS, 2016). FYE students don’t transition particular engineering program easily overlooked potential members program’s entering cohort—reducing size cohort artificially increasing graduation rate. FYE students admitted Engineering (CIP 14)—status neither “undecided” “unknown.” simply don’t know degree-granting program intend transition. Therefore, include FYE students persistence metric requiring degree-granting “starting” program, predict engineering program FYE student declared required enroll FYE. vignette describes prediction process results used.","code":""},{"path":"/articles/art-05-fye-programs.html","id":"options-for-predicting-starting-programs","dir":"Articles","previous_headings":"Introduction","what":"Options for predicting starting programs","title":"FYE programs","text":"Two approaches described vignette. Use prepared predictions fye_start, built-data set midfieldr predicted starting programs FYE students midfielddata practice data tables. Perform imputation. Use condition_fye() construct data frame appropriate predictor variables formatted can used input argument mice() function R package “mice” (multivariate imputation chained equations).","code":""},{"path":"/articles/art-05-fye-programs.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"FYE programs","text":"midfieldr functions add_race_sex() filter_by_key() filter_text() condition_fye() packages","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # only if performing your own imputation  library(\"mice\")  # optional code to control data.table printing options(datatable.print.nrows = 10, datatable.print.topn = 5)"},{"path":"/articles/art-05-fye-programs.html","id":"use-prepared-predictions","dir":"Articles","previous_headings":"","what":"Use prepared predictions","title":"FYE programs","text":"set predicted starting programs degree-seeking FYE students midfielddata provided midfieldr data set fye_start. View help page running, Examine data.","code":"? fye_start # prepared starting programs of FYE students fye_start #>              mcid  start #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701"},{"path":"/articles/art-05-fye-programs.html","id":"example-using-fye_start","dir":"Articles","previous_headings":"Use prepared predictions","what":"Example using fye_start","title":"FYE programs","text":"illustrate using data, let’s suppose trying determine number students four majors case study (Civil, Electrical, Industrial, Mechanical Engineering) start first year, second year, third year, etc. FYE students transition majors appear term data second year beyond, first year. example, therefore, focus determining include FYE students first-year count. use two additional prepared data sets, study_programs case-study CIP codes program names, study_students, students ever enrolled programs. see help pages, run Examine two data sets. student data include predicted starting majors FYE students. subset term table rows matching student IDs. matching IDs, obtain terms students ever enrolled programs. code chunk represents routine encounter fairly often: subset rows one data frame keep values key variable match values key variable second data frame. , example, want subset rows term keep values mcid match values mcid study_students. can use filter_by_key() accomplish task. ’ll use filter_by_key() remainder vignette type subset task. Continuing example, set keys organize rows block ID ordered terms. Now, use ID key subset first row student’s block. now one row per unique student. data subset matching program codes study_programs, thereby omitting students enrolled one four programs first term. adding FYE students, can group summarize comparison later. Now, turn FYE students. subset fye_start four programs. using filter_by_key(), change name key column start cip6. Bind two data frames. Now can group CIP count. Adding program names study_programs helpful interpreting results. Compare earlier results, summarized without FYE students, course, imputation, counts estimates. However, ignored FYE students, starting term counts programs artificially low—leading unreliable comparisons totals subsequent years.","code":"# case study data sets  ? study_programs ? study_students # case study programs  study_programs #>       cip6                program #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #> ---                               #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering  # students ever enrolled in the case study programs study_students #>               mcid   cip6 #>     1: MID25783178 143501 #>     2: MID25783197 140801 #>     3: MID25783388 141901 #>     4: MID25783441 140801 #>     5: MID25783491 141001 #>    ---                    #> 10760: MID26696967 141901 #> 10761: MID26696979 141901 #> 10762: MID26697163 141901 #> 10763: MID26697444 141901 #> 10764: MID26697447 141001 # subset term table by ID of case study students rows_we_want <- term[, mcid] %chin% study_students[, mcid] cols_we_want <- c(\"mcid\", \"term\", \"cip6\") DT <- term[rows_we_want, ..cols_we_want] DT <- unique(DT) DT #>               mcid  term   cip6 #>     1: MID25783178 19946 140102 #>     2: MID25783178 19951 140102 #>     3: MID25783178 19953 140102 #>     4: MID25783178 19956 140102 #>     5: MID25783178 19961 140102 #>    ---                          #> 96564: MID26697447 20134 141001 #> 96565: MID26697447 20141 141001 #> 96566: MID26697447 20143 141001 #> 96567: MID26697447 20151 141001 #> 96568: MID26697447 20153 141001 # temporary object try_this <- filter_by_key(term,                            match_to = study_students,                            key_col = \"mcid\",                            select = c(\"mcid\", \"term\", \"cip6\"))  # compare to the DT we obtained above all.equal(DT, try_this) #> [1] TRUE # set keys for ordering rows  keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT #>               mcid  term   cip6 #>     1: MID25783178 19946 140102 #>     2: MID25783178 19951 140102 #>     3: MID25783178 19953 140102 #>     4: MID25783178 19956 140102 #>     5: MID25783178 19961 140102 #>    ---                          #> 96564: MID26697447 20134 141001 #> 96565: MID26697447 20141 141001 #> 96566: MID26697447 20143 141001 #> 96567: MID26697447 20151 141001 #> 96568: MID26697447 20153 141001 # first term of each student DT <- DT[, .SD[1], by = \"mcid\"]  # keys no longer required setkey(DT, NULL)  # examine the result DT #>               mcid  term   cip6 #>     1: MID25783178 19946 140102 #>     2: MID25783197 19871 140102 #>     3: MID25783388 19871 140102 #>     4: MID25783441 19921 140102 #>     5: MID25783491 19961 140102 #>    ---                          #> 10131: MID26696967 20101 141901 #> 10132: MID26696979 20154 141901 #> 10133: MID26697163 20101 140101 #> 10134: MID26697444 20101 141901 #> 10135: MID26697447 20111 140701 # filter for case study programs only  DT <- filter_by_key(DT,                      match_to = study_programs,                      key_col = \"cip6\",                      select = c(\"mcid\", \"cip6\"))  # examine the result DT #>              mcid   cip6 #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 5347: MID26687969 143501 #> 5348: MID26690944 143501 #> 5349: MID26692128 143501 #> 5350: MID26692594 143501 #> 5351: MID26696429 143501 # summarize by CIP code DT_no_fye <- DT[, .N, by = \"cip6\"]  # join program names  DT_no_fye <- merge(DT_no_fye, study_programs, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want] DT_no_fye #>                   program    N #> 1: Mechanical Engineering 1992 #> 2: Electrical Engineering 1763 #> 3:      Civil Engineering 1120 #> 4: Industrial Engineering  476 # subset predicted FYE start programs  setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_by_key(fye_start,                             match_to = study_programs,                             key_col = \"cip6\",                             select = c(\"mcid\", \"cip6\"))  # examine the result study_fye #>              mcid   cip6 #>    1: MID25783162 140801 #>    2: MID25783441 140801 #>    3: MID25783553 140801 #>    4: MID25783648 140801 #>    5: MID25783753 140801 #>   ---                    #> 3109: MID26641136 143501 #> 3110: MID26641265 143501 #> 3111: MID26642173 143501 #> 3112: MID26642851 143501 #> 3113: MID26643299 143501 # combine the two data frames  DT <- rbindlist(list(DT, study_fye))  # examine the result DT #>              mcid   cip6 #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 8460: MID26641136 143501 #> 8461: MID26641265 143501 #> 8462: MID26642173 143501 #> 8463: MID26642851 143501 #> 8464: MID26643299 143501  # check that the IDs are unique length(unique(DT[, mcid])) #> [1] 8464 # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"]  # examine the result DT_with_fye #>      cip6    N #> 1: 140801 1911 #> 2: 141001 2422 #> 3: 141901 3273 #> 4: 143501  858 # join program names DT_with_fye <- merge(DT_with_fye, study_programs, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\")  DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # examine the result DT_with_fye #>                   program    N #> 1: Mechanical Engineering 3273 #> 2: Electrical Engineering 2422 #> 3:      Civil Engineering 1911 #> 4: Industrial Engineering  858 # earlier summary for comparison DT_no_fye #>                   program    N #> 1: Mechanical Engineering 1992 #> 2: Electrical Engineering 1763 #> 3:      Civil Engineering 1120 #> 4: Industrial Engineering  476"},{"path":"/articles/art-05-fye-programs.html","id":"using-condition_fye","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using condition_fye()","title":"FYE programs","text":"section shows details preparing data imputation using mice package perform imputation. procedure results prepared fye_start data set used . main preparation work done condition_fye(). first argument condition_fye() data frame available degree-seeking engineering students, required variables student ID, race, sex. Regardless programs happen studying, impute starting majors FYE students, include engineering programs point. collect students, start obtaining CIP codes start “14” (Engineering). obtain IDs students ever enrolled programs, access term table. students must degree-seeking, want subset rows engr keep values mcid match values mcid student data table. use filter_by_key() . case, change data frame students degree-seeking. Lastly, add demographic information add_race_sex(). ’re starting 19,036 engineers total. data frame ready use first argument condition_fye(). remaining arguments default settings optional. Arguments condition_fye(): dframe data frame variables mcid, race, sex midfield_table term table, default term fye_codes CIP code(s) FYE, default \"140102\" Using default settings, engineering students, 5033 enrolled FYE program least . FYE students, NA cip6 column indicates students impute starting major. number NAs CIP code column can found using sum(). Thus 1931 starting programs impute. (works applying sum() logical vector, R coerces TRUE/FALSE values numerical values 1 0.)","code":"# get engineering CIP codes engr_cip <- filter_text(cip, keep_text = \"^14\")  # examine the result engr_cip #>     cip2    cip2name cip4 #>  1:   14 Engineering 1401 #>  2:   14 Engineering 1401 #>  3:   14 Engineering 1402 #>  4:   14 Engineering 1403 #>  5:   14 Engineering 1404 #> ---                       #> 50:   14 Engineering 1442 #> 51:   14 Engineering 1443 #> 52:   14 Engineering 1444 #> 53:   14 Engineering 1445 #> 54:   14 Engineering 1499 #>                                                    cip4name   cip6 #>  1:                                    Engineering, General 140101 #>  2:                                    Engineering, General 140102 #>  3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>  4: Agricultural, Biological Engineering and Bioengineering 140301 #>  5:                               Architectural Engineering 140401 #> ---                                                                #> 50:       Mechatronics, Robotics and Automation Engineering 144201 #> 51:                                 Biochemical Engineering 144301 #> 52:                                   Engineering Chemistry 144401 #> 53:                      Biological, Biosystems Engineering 144501 #> 54:                                      Engineering, Other 149999 #>                                                         cip6name #>  1:                                         Engineering, General #>  2:                                              Pre-Engineering #>  3: Aerospace, Aeronautical and Astronautical, Space Engineering #>  4:      Agricultural, Biological Engineering and Bioengineering #>  5:                                    Architectural Engineering #> ---                                                              #> 50:            Mechatronics, Robotics and Automation Engineering #> 51:                                      Biochemical Engineering #> 52:                                        Engineering Chemistry #> 53:                           Biological, Biosystems Engineering #> 54:                                           Engineering, Other # get IDs of all engineering students engr <- filter_by_key(term,                        match_to = engr_cip,                        key_col = \"cip6\",                         select = \"mcid\")  # examine the result engr #>               mcid #>     1: MID25853474 #>     2: MID25864225 #>     3: MID25864273 #>     4: MID25864554 #>     5: MID25864996 #>    ---             #> 19032: MID26346976 #> 19033: MID26355610 #> 19034: MID26529140 #> 19035: MID26544796 #> 19036: MID26550059 # limit the population to degree-seeking students  engr <- filter_by_key(engr,                       match_to = student,                       key_col = \"mcid\")  # examine the result engr #>               mcid #>     1: MID25783162 #>     2: MID25783166 #>     3: MID25783167 #>     4: MID25783178 #>     5: MID25783197 #>    ---             #> 19032: MID26697295 #> 19033: MID26697298 #> 19034: MID26697367 #> 19035: MID26697444 #> 19036: MID26697447 # add race and sex variables  engr <- add_race_sex(engr)  # examine the result engr #>               mcid            race  sex #>     1: MID25783162           White Male #>     2: MID25783166           White Male #>     3: MID25783167           White Male #>     4: MID25783178           Black Male #>     5: MID25783197           White Male #>    ---                                  #> 19032: MID26697295           White Male #> 19033: MID26697298           Asian Male #> 19034: MID26697367 Hispanic/Latinx Male #> 19035: MID26697444           White Male #> 19036: MID26697447           Asian Male # set up a data frame for imputation  fye <- condition_fye(engr)  # view the result fye #>              mcid   institution            race    sex   cip6 #>    1: MID26060301 Institution C           Asian Female   <NA> #>    2: MID25995980 Institution C Hispanic/Latinx Female   <NA> #>    3: MID25997636 Institution C Hispanic/Latinx Female   <NA> #>    4: MID26086310 Institution C Hispanic/Latinx Female   <NA> #>    5: MID26000057 Institution C           White Female   <NA> #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 # number of NA values in cip6 column  sum(is.na(fye[, cip6])) #> [1] 1931"},{"path":"/articles/art-05-fye-programs.html","id":"using-the-mice-package","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using the mice package","title":"FYE programs","text":"mice package (van Buuren Groothuis-Oudshoorn, 2011) implements multivariate imputation chained equations (MICE). MICE also known “fully conditional specification” “sequential regression multiple imputation” suitable categorical variables (Azur et al., 2011). computational procedure follows approach suggested Dhana (2017). procedure assumes missing CIP data—NA values prepared data frame—“missing random” (MAR), , independent variables used impute missing values. rationale using data FYE institutions impute missing values—existence missing data depend institution type, FYE non-FYE. Within FYE data , however, assume imputed starting majors missing random. first use mice examine framework calling function zero iterations. (warning may appear console. can ignored.) look closely two elements framework. first imputation method variables method applied. case, correct. “polyreg” imputation method (polytomous logistic regression) appropriate data comprised unordered categorical variables. method correctly assigned, assign follows, second element review predictor matrix. row predictor matrix identifies predictors used predict variable row name—variables prediction method assigned . Since variable predicted cip6, really examine last row matrix, zeros ones tell us cip6 going predicted institution, race, sex (mcid). correct. default setting incorrect, can set manually ready imputation. default seed argument NULL, setting seed shown vignette results reproducible. Setting printFlag = TRUE displays progress console. mice() produces calls mids object: “multiply-imputed data set”. complete() function extracts completed data frame mids object, convert data.table. use result, need two columns, predicted starting program keyed ID. program codes still factors. change back characters. program codes data frame predicted, change variable name start distinguish cip6 variables data tables. process built-data set fye_start constructed, using random number seed used . confirm identical, Lastly, mice package masks base R rbind() cbind() functions, use following unload package ’re done .","code":"# imputation framework <- mice(fye, maxit = 0)  # examine the results framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 #> Number of logged events:  1  #>   it im dep     meth  out #> 1  0  0     constant mcid method <- framework[[\"method\"]] method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # variable(s) being imputed method[c(\"cip6\")] <- \"polyreg\"  # variable(s) not being imputed method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\"  #examine the result method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" predictors <- framework[[\"predictorMatrix\"]] predictors #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 predictors[\"cip6\", , drop = FALSE] #>      mcid institution race sex cip6 #> cip6    0           1    1   1    0 # set individual columns of the predictor matrix predictors[, c(\"mcid\", \"cip6\")] <- 0  # we need a one only in the last row for these three predictors predictors[, c(\"institution\", \"race\", \"sex\")]  <- c(0, 0, 0, 0, 1)  # examine the result predictors #>             mcid institution race sex cip6 #> mcid           0           0    0   0    0 #> institution    0           0    0   0    0 #> race           0           0    0   0    0 #> sex            0           0    0   0    0 #> cip6           0           1    1   1    0 # imputation fye_mids <- mice(     data = fye,     method = method,     predictorMatrix = predictors,     seed = 20180624,     printFlag = TRUE )  # output in console with printFlag = TRUE #>  iter imp variable #>   1   1  cip6 #>   1   2  cip6 #>   1   3  cip6 #>   1   4  cip6 #>   1   5  cip6 #>   ---    #>   5   1  cip6 #>   5   2  cip6 #>   5   3  cip6 #>   5   4  cip6 #>   5   5  cip6 fye <- complete(fye_mids) setDT(fye)  # examine the result fye #>              mcid   institution            race    sex   cip6 #>    1: MID26060301 Institution C           Asian Female 140801 #>    2: MID25995980 Institution C Hispanic/Latinx Female 141901 #>    3: MID25997636 Institution C Hispanic/Latinx Female 140701 #>    4: MID26086310 Institution C Hispanic/Latinx Female 141901 #>    5: MID26000057 Institution C           White Female 140701 #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: Factor w/ 17 levels \"140201\",\"140301\",..: 6 13 5 13 5 5 6 5 3 13 ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye[, cip6 := as.character(cip6)] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: chr  \"140801\" \"141901\" \"140701\" \"141901\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\") fye #>              mcid  start #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701 all.equal(fye, fye_start) #> [1] \"Different column names\" detach(\"package:mice\", unload = TRUE)"},{"path":"/articles/art-05-fye-programs.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"FYE programs","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"mice\")  # prepared predictions DT <- filter_by_key(term,                      match_to = study_students,                      key_col = \"mcid\",                      select = c(\"mcid\", \"term\", \"cip6\")) keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT <- DT[, .SD[1], by = \"mcid\"] setkey(DT, NULL) DT <- filter_by_key(DT,                      match_to = study_programs,                      key_col = \"cip6\",                      select = c(\"mcid\", \"cip6\"))  # summarize for later DT_no_fye <- DT[, .N, by = \"cip6\"] DT_no_fye <- merge(DT_no_fye, study_programs, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want]  # subset predicted FYE start programs  setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_by_key(fye_start,                             match_to = study_programs,                             key_col = \"cip6\",                             select = c(\"mcid\", \"cip6\")) DT <- rbindlist(list(DT, study_fye))  # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"] DT_with_fye <- merge(DT_with_fye, study_programs, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\")  DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # perform your own prediction engr_cip <- filter_text(cip, keep_text = \"^14\") engr <- filter_by_key(term,                        match_to = engr_cip,                        key_col = \"cip6\",                         select = \"mcid\") engr <- filter_by_key(engr,                       match_to = student,                       key_col = \"mcid\") engr <- add_race_sex(engr) fye <- condition_fye(engr)  # mice framework <- mice(fye, maxit = 0) method <- framework[[\"method\"]] method[c(\"cip6\")] <- \"polyreg\" method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\" predictors <- framework[[\"predictorMatrix\"]] predictors[, c(\"mcid\", \"cip6\")] <- 0 predictors[, c(\"institution\", \"race\", \"sex\")]  <- c(0, 0, 0, 0, 1) fye_mids <- mice(     data = fye,     method = method,     predictorMatrix = predictors,     seed = 20180624,     printFlag = TRUE ) fye <- complete(fye_mids)  # prepare for use setDT(fye) cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] fye[, cip6 := as.character(cip6)] fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\")"},{"path":"/articles/art-05-stickiness.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Stickiness","text":"Longitudinal “stickiness” ratio number students graduating program number students ever enrolled program [1]. stickiness metric accounts students program. Unlike graduation rate metric, stickiness includes students begin college part-time, enroll mid-year, switch majors transfer institutions. Every student counted program’s stickiness metric enrolled program least one term. program succeeded attracting students—stickiness tells us well program succeeded retaining .","code":""},{"path":"/articles/art-05-stickiness.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Stickiness","text":"Start Result ","code":""},{"path":"/articles/art-05-stickiness.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Stickiness","text":"midfieldr functions f() f() f() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term, degree)"},{"path":"/articles/art-05-stickiness.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Stickiness","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")"},{"path":"/articles/art-06-case-selection.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Case selection","text":"studying student records, common first step select specific set programs explore. vignette, illustrate first step constructing data frame program CIP codes program names four engineering programs (Civil, Electrical, Industrial, Mechanical). use case selection subsequent vignettes illustrate typical workflows using midfieldr functions MIDFIELD data tables.","code":""},{"path":"/articles/art-06-case-selection.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Case selection","text":"midfieldr functions filter_by_key() filter_text() packages","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # optional code to control data.table printing options(datatable.print.nrows = 6, datatable.print.topn = 3)"},{"path":"/articles/art-06-case-selection.html","id":"identify-program-codes","dir":"Articles","previous_headings":"","what":"Identify program codes","title":"Case selection","text":"know conventional names desired programs (Civil, Electrical, Industrial, Mechanical Engineering) necessarily exact program names used CIP. Thus search CIP thoroughly make sure find 6-digit CIP codes associated disciplines. start text search cip engineering. number 2-digit codes reported. let’s examine closely one (14) programs looking . can restrict search codes starting 14. Let’s try restricting search four conventional terms: civil, electrical, industrial, mechanical. search case-sensitive. result, Electromechanical Engineering superfluous. see 4-digit level describes programs customary names Civil Engineering encompasses six programs 6-digit level Electrical Engineering encompasses four programs 6-digit level Mechanical Industrial one program 6-digit level MIDFIELD data tables column CIP codes use 6-digit codes. Therefore, case study, need cip6 column work . names want (case), however, 4-digit level. can take one final pass keep columns need,","code":"# subset rows of the CIP data matching conditions pass01 <- filter_text(cip, \"engineering\") pass01 #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>  ---                                                            #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                   cip4name   cip6 #>   1:                                  Engineering, General 140101 #>   2:                                  Engineering, General 140102 #>   3: Aerospace, Aeronautical and Astronautical Engineering 140201 #>  ---                                                              #> 117:                             Military Applied Sciences 290301 #> 118:                             Military Applied Sciences 290303 #> 119:            Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>  ---                                                                  #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering cols_we_want <- c(\"cip2\", \"cip2name\") unique(pass01[, ..cols_we_want]) #>    cip2                                         cip2name #> 1:   14                                      Engineering #> 2:   15                           Engineering Technology #> 3:   29                            Military Technologies #> 4:   51 Health Professions and Related Clinical Sciences pass02 <- filter_text(pass01, \"^14\") pass02 #>     cip2    cip2name cip4                                              cip4name #>  1:   14 Engineering 1401                                  Engineering, General #>  2:   14 Engineering 1401                                  Engineering, General #>  3:   14 Engineering 1402 Aerospace, Aeronautical and Astronautical Engineering #> ---                                                                             #> 52:   14 Engineering 1444                                 Engineering Chemistry #> 53:   14 Engineering 1445                    Biological, Biosystems Engineering #> 54:   14 Engineering 1499                                    Engineering, Other #>       cip6                                                     cip6name #>  1: 140101                                         Engineering, General #>  2: 140102                                              Pre-Engineering #>  3: 140201 Aerospace, Aeronautical and Astronautical, Space Engineering #> ---                                                                     #> 52: 144401                                        Engineering Chemistry #> 53: 144501                           Biological, Biosystems Engineering #> 54: 149999                                           Engineering, Other # optional code to control data.table printing options(datatable.print.nrows = 13, datatable.print.topn = 13)  pass03 <- filter_text(pass02, c(\"civil\", \"electrical\", \"industrial\", \"mechanical\")) pass03 #>     cip2    cip2name cip4 #>  1:   14 Engineering 1408 #>  2:   14 Engineering 1408 #>  3:   14 Engineering 1408 #>  4:   14 Engineering 1408 #>  5:   14 Engineering 1408 #>  6:   14 Engineering 1408 #>  7:   14 Engineering 1410 #>  8:   14 Engineering 1410 #>  9:   14 Engineering 1410 #> 10:   14 Engineering 1410 #> 11:   14 Engineering 1419 #> 12:   14 Engineering 1435 #> 13:   14 Engineering 1441 #>                                                   cip4name   cip6 #>  1:                                      Civil Engineering 140801 #>  2:                                      Civil Engineering 140802 #>  3:                                      Civil Engineering 140803 #>  4:                                      Civil Engineering 140804 #>  5:                                      Civil Engineering 140805 #>  6:                                      Civil Engineering 140899 #>  7: Electrical, Electronics and Communications Engineering 141001 #>  8: Electrical, Electronics and Communications Engineering 141003 #>  9: Electrical, Electronics and Communications Engineering 141004 #> 10: Electrical, Electronics and Communications Engineering 141099 #> 11:                                 Mechanical Engineering 141901 #> 12:                                 Industrial Engineering 143501 #> 13:                          Electromechanical Engineering 144101 #>                                                          cip6name #>  1:                                    Civil Engineering, General #>  2:                                      Geotechnical Engineering #>  3:                                        Structural Engineering #>  4:                        Transportation and Highway Engineering #>  5:                                   Water Resources Engineering #>  6:                                      Civil Engineering, Other #>  7:        Electrical, Electronics and Communications Engineering #>  8:                                 Laser and Optical Engineering #>  9:                                Telecommunications Engineering #> 10: Electrical, Electronics and Communications Engineering, Other #> 11:                                        Mechanical Engineering #> 12:                                        Industrial Engineering #> 13:                                 Electromechanical Engineering pass04 <- filter_text(pass03, drop_text = \"electromechanical\") pass04 #>     cip2    cip2name cip4 #>  1:   14 Engineering 1408 #>  2:   14 Engineering 1408 #>  3:   14 Engineering 1408 #>  4:   14 Engineering 1408 #>  5:   14 Engineering 1408 #>  6:   14 Engineering 1408 #>  7:   14 Engineering 1410 #>  8:   14 Engineering 1410 #>  9:   14 Engineering 1410 #> 10:   14 Engineering 1410 #> 11:   14 Engineering 1419 #> 12:   14 Engineering 1435 #>                                                   cip4name   cip6 #>  1:                                      Civil Engineering 140801 #>  2:                                      Civil Engineering 140802 #>  3:                                      Civil Engineering 140803 #>  4:                                      Civil Engineering 140804 #>  5:                                      Civil Engineering 140805 #>  6:                                      Civil Engineering 140899 #>  7: Electrical, Electronics and Communications Engineering 141001 #>  8: Electrical, Electronics and Communications Engineering 141003 #>  9: Electrical, Electronics and Communications Engineering 141004 #> 10: Electrical, Electronics and Communications Engineering 141099 #> 11:                                 Mechanical Engineering 141901 #> 12:                                 Industrial Engineering 143501 #>                                                          cip6name #>  1:                                    Civil Engineering, General #>  2:                                      Geotechnical Engineering #>  3:                                        Structural Engineering #>  4:                        Transportation and Highway Engineering #>  5:                                   Water Resources Engineering #>  6:                                      Civil Engineering, Other #>  7:        Electrical, Electronics and Communications Engineering #>  8:                                 Laser and Optical Engineering #>  9:                                Telecommunications Engineering #> 10: Electrical, Electronics and Communications Engineering, Other #> 11:                                        Mechanical Engineering #> 12:                                        Industrial Engineering case_study <- filter_text(pass04, select = c(\"cip6\", \"cip4name\")) case_study #>       cip6                                               cip4name #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering"},{"path":"/articles/art-06-case-selection.html","id":"assign-program-names","dir":"Articles","previous_headings":"","what":"Assign program names","title":"Case selection","text":"study proceeds, want compare contrast programs name. case, names cip4name suitable purpose except “Electrical, Electronics Communications Engineering” prefer replace generally used (less specific) “Electrical Engineering”. general approach create new variable program names want use. leave cip4name column place now able check work. number ways recode values program column. ’ll show three approaches.","code":"case_study[, program := cip4name] case_study #>       cip6                                               cip4name #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                                                    program #>  1:                                      Civil Engineering #>  2:                                      Civil Engineering #>  3:                                      Civil Engineering #>  4:                                      Civil Engineering #>  5:                                      Civil Engineering #>  6:                                      Civil Engineering #>  7: Electrical, Electronics and Communications Engineering #>  8: Electrical, Electronics and Communications Engineering #>  9: Electrical, Electronics and Communications Engineering #> 10: Electrical, Electronics and Communications Engineering #> 11:                                 Mechanical Engineering #> 12:                                 Industrial Engineering"},{"path":"/articles/art-06-case-selection.html","id":"use-program-fcase-to-edit-all-values","dir":"Articles","previous_headings":"Assign program names","what":"1. Use program := fcase() to edit all values","title":"Case selection","text":"approach, use data.table fcase() function change program names abbreviations. %like% function essentially wrapper function around base R grepl() function. %ilike% variant sets ignore.case = TRUE. See help page running (back-ticks facilitate help search terms starting symbol):","code":"? `%like%` dframe <- copy(case_study) dframe[, program := fcase(   program %ilike% \"civil\"     , \"CVE\",    program %ilike% \"electrical\", \"ECE\",    program %ilike% \"mechanical\", \"MCE\",    program %ilike% \"industrial\", \"ISE\" )] dframe #>       cip6                                               cip4name program #>  1: 140801                                      Civil Engineering     CVE #>  2: 140802                                      Civil Engineering     CVE #>  3: 140803                                      Civil Engineering     CVE #>  4: 140804                                      Civil Engineering     CVE #>  5: 140805                                      Civil Engineering     CVE #>  6: 140899                                      Civil Engineering     CVE #>  7: 141001 Electrical, Electronics and Communications Engineering     ECE #>  8: 141003 Electrical, Electronics and Communications Engineering     ECE #>  9: 141004 Electrical, Electronics and Communications Engineering     ECE #> 10: 141099 Electrical, Electronics and Communications Engineering     ECE #> 11: 141901                                 Mechanical Engineering     MCE #> 12: 143501                                 Industrial Engineering     ISE"},{"path":"/articles/art-06-case-selection.html","id":"use-program-like-to-edit-one-value","dir":"Articles","previous_headings":"Assign program names","what":"2. Use program %like% to edit one value","title":"Case selection","text":"approach, search one distinctive term .","code":"# return matches in the cip4name column  dframe <- copy(case_study)  rows_to_edit <- dframe$program %ilike% \"electrical\" dframe[rows_to_edit, program := \"Electrical Engineering\"] dframe #>       cip6                                               cip4name #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                    program #>  1:      Civil Engineering #>  2:      Civil Engineering #>  3:      Civil Engineering #>  4:      Civil Engineering #>  5:      Civil Engineering #>  6:      Civil Engineering #>  7: Electrical Engineering #>  8: Electrical Engineering #>  9: Electrical Engineering #> 10: Electrical Engineering #> 11: Mechanical Engineering #> 12: Industrial Engineering"},{"path":"/articles/art-06-case-selection.html","id":"use-cip6-like-to-edit-one-value","dir":"Articles","previous_headings":"Assign program names","what":"3. Use cip6 %like% to edit one value","title":"Case selection","text":"final approach, use %like% function , apply CIP codes. use regular expression ^1410 meaning “starts 1410.” ever approaches prefer, result . Reviewing results, see program names adequate substitutes original cip4name values, can now drop.","code":"# return matches that start with 1410 rows_to_edit <- case_study$cip6 %like% \"^1410\" case_study[rows_to_edit, program := \"Electrical Engineering\"] case_study #>       cip6                                               cip4name #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 143501                                 Industrial Engineering #>                    program #>  1:      Civil Engineering #>  2:      Civil Engineering #>  3:      Civil Engineering #>  4:      Civil Engineering #>  5:      Civil Engineering #>  6:      Civil Engineering #>  7: Electrical Engineering #>  8: Electrical Engineering #>  9: Electrical Engineering #> 10: Electrical Engineering #> 11: Mechanical Engineering #> 12: Industrial Engineering case_study[, cip4name := NULL]  case_study #>       cip6                program #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #>  6: 140899      Civil Engineering #>  7: 141001 Electrical Engineering #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering"},{"path":"/articles/art-06-case-selection.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save results","title":"Case selection","text":"identified set codes names programs want study, save use later without rerunning code created . proceeding, might want check edit directory structure. code snippets section assume working RStudio Project project directory data subdirectory. addition, minimal project setup include least following directories: save case_study data frame CSV file data directory easy access work study. Let’s read using fread(). use colClasses argument ensure cip6 variable type read character, integer. suggest saving intermediate results like significant milestone study, especially steps requiring lot computing time. instance, case study program codes names developed saved midfieldr package data set study_programs. View help page running View data frame, Going forward, ’ll use study_programs.","code":"project-name/   |- data/    |- data-raw/   |- documents/   |- figures/   |- scripts/   |- project-name.Rproj # save an intermediate result fwrite(case_study, file = \"data/case_study.csv\") # read from the data directory case_study <- fread(   \"data/case_study.csv\",   colClasses = list(character = c(\"cip6\")) ) ? study_programs study_programs #>       cip6                program #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #>  6: 140899      Civil Engineering #>  7: 141001 Electrical Engineering #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering"},{"path":"/articles/art-06-case-selection.html","id":"apply-results","dir":"Articles","previous_headings":"","what":"Apply results","title":"Case selection","text":"set programs identified 6-digit CIP codes, usual application use codes subset one MIDFIELD data tables (student, course, term, degree) merge program names.","code":"# optional code to control data.table printing options(datatable.print.nrows = 10, datatable.print.topn = 5)"},{"path":"/articles/art-06-case-selection.html","id":"example-1--subset-by-program-code","dir":"Articles","previous_headings":"Apply results","what":"Example 1. Subset by program code","title":"Case selection","text":"example, extract students case study graduated, subset rows degree keep values cip6 match values cip6 study_programs. often want select specific rows time, e.g., code chunk represents routine encounter fairly often: subset rows one data frame keep values key variable match values key variable second data frame. can use filter_by_key() accomplish entire task.","code":"# subset degree rows rows_we_want <- degree[, cip6] %chin% study_programs[, cip6] case_degree <- degree[rows_we_want]  # examine the result case_degree #>              mcid   institution  term   cip6              degree #>    1: MID25783178 Institution M 20001 143501 Bachelor of Science #>    2: MID25783197 Institution M 19911 140801 Bachelor of Science #>    3: MID25783441 Institution M 19963 140801 Bachelor of Science #>    4: MID25783491 Institution M 20001 141001 Bachelor of Science #>    5: MID25783912 Institution M 20001 143501 Bachelor of Science #>   ---                                                            #> 4672: MID26696738 Institution L 20133 141901 Bachelor of Science #> 4673: MID26696771 Institution L 20143 141001 Bachelor of Science #> 4674: MID26696967 Institution L 20141 141901 Bachelor of Science #> 4675: MID26697163 Institution L 20133 141901 Bachelor of Science #> 4676: MID26697447 Institution L 20154 141001 Bachelor of Science # subset degree rows and columns  cols_we_want <- c(\"mcid\", \"institution\", \"cip6\") rows_we_want <- degree[, cip6] %chin% study_programs[, cip6] case_degree <- degree[rows_we_want, ..cols_we_want]  # examine the result case_degree #>              mcid   institution   cip6 #>    1: MID25783178 Institution M 143501 #>    2: MID25783197 Institution M 140801 #>    3: MID25783441 Institution M 140801 #>    4: MID25783491 Institution M 141001 #>    5: MID25783912 Institution M 143501 #>   ---                                  #> 4672: MID26696738 Institution L 141901 #> 4673: MID26696771 Institution L 141001 #> 4674: MID26696967 Institution L 141901 #> 4675: MID26697163 Institution L 141901 #> 4676: MID26697447 Institution L 141001 # subset degree table dframe <- filter_by_key(degree,                          match_to = study_programs,                          key_col = \"cip6\",                          select = c(\"mcid\", \"institution\", \"cip6\"))  # compare to the DT we obtained above after ordering rows the same way all.equal(case_degree[order(mcid)], dframe[order(mcid)]) #> [1] TRUE"},{"path":"/articles/art-06-case-selection.html","id":"example-2--subset-by-id","dir":"Articles","previous_headings":"Apply results","what":"Example 2. Subset by ID","title":"Case selection","text":"Another common data access task retrieve information student ID. Suppose wanted examine transfer status time admission students degrees subset . use filter_by_key() subset rows student keep values mcid match values mcid case_degree. next step compare numbers students transfer status, use .N data.table. example,","code":"# subset student table case_student <- filter_by_key(student,                          match_to = case_degree,                          key_col = \"mcid\",                          select = c(\"mcid\", \"transfer\", \"hours_transfer\")) # examine the result case_student #>              mcid              transfer hours_transfer #>    1: MID25783178 First-Time in College             NA #>    2: MID25783197 First-Time in College             NA #>    3: MID25783441 First-Time in College             NA #>    4: MID25783491 First-Time in College             NA #>    5: MID25783912 First-Time in College             NA #>   ---                                                  #> 4672: MID26696738   First-Time Transfer             84 #> 4673: MID26696771 First-Time in College             NA #> 4674: MID26696967 First-Time in College             NA #> 4675: MID26697163 First-Time in College             NA #> 4676: MID26697447 First-Time in College             NA case_student[, .N, by = \"transfer\"] #>                 transfer    N #> 1: First-Time in College 3873 #> 2:   First-Time Transfer  803"},{"path":"/articles/art-06-case-selection.html","id":"example-3--merge-program-names","dir":"Articles","previous_headings":"Apply results","what":"Example 3. Merge program names","title":"Case selection","text":"Another common use study_programs data merge program names another data frame matching cip6 values. program names can used grouping summarizing. example, let’s join program names case degree data frame created . .x = TRUE argument performs merge “left outer join”, retaining rows case_degree (“left” data frame). next step group summarize program, use .N , example,","code":"# join program names  case_degree <- merge(case_degree, study_programs, by = \"cip6\", all.x = TRUE)  # examine the result case_degree #>         cip6        mcid   institution                program #>    1: 140801 MID25783197 Institution M      Civil Engineering #>    2: 140801 MID25783441 Institution M      Civil Engineering #>    3: 140801 MID25784334 Institution M      Civil Engineering #>    4: 140801 MID25784418 Institution M      Civil Engineering #>    5: 140801 MID25784489 Institution M      Civil Engineering #>   ---                                                         #> 4672: 143501 MID26689274 Institution L Industrial Engineering #> 4673: 143501 MID26692926 Institution L Industrial Engineering #> 4674: 143501 MID26695626 Institution L Industrial Engineering #> 4675: 143501 MID26696116 Institution L Industrial Engineering #> 4676: 143501 MID26696429 Institution L Industrial Engineering case_degree[, .N, by = \"program\"] #>                   program    N #> 1:      Civil Engineering 1053 #> 2: Electrical Engineering 1221 #> 3: Mechanical Engineering 1646 #> 4: Industrial Engineering  756"},{"path":"/articles/art-06-case-selection.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case selection","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # identify program codes pass01 <- filter_text(cip, \"engineering\") pass02 <- filter_text(pass01, \"^14\") pass03 <- filter_text(pass02,                        c(\"civil\", \"electrical\", \"industrial\", \"mechanical\")) pass04 <- filter_text(pass03, drop_text = \"electromechanical\") case_study <- filter_text(pass04, select = c(\"cip6\", \"cip4name\"))  # assign program names case_study[, program := cip4name] dframe <- copy(case_study) dframe[, program := fcase(   program %ilike% \"civil\"     , \"CVE\",    program %ilike% \"electrical\", \"ECE\",    program %ilike% \"mechanical\", \"MCE\",    program %ilike% \"industrial\", \"ISE\" )] dframe <- copy(case_study)  rows_to_edit <- dframe$program %ilike% \"electrical\" dframe[rows_to_edit, program := \"Electrical Engineering\"] rows_to_edit <- case_study$cip6 %like% \"^1410\" case_study[rows_to_edit, program := \"Electrical Engineering\"] case_study[, cip4name := NULL]  # apply results case_degree <- filter_by_key(degree,                          match_to = study_programs,                          key_col = \"cip6\",                          select = c(\"mcid\", \"institution\", \"cip6\")) case_student <- filter_by_key(student,                          match_to = case_degree,                          key_col = \"mcid\",                          select = c(\"mcid\", \"transfer\", \"hours_transfer\")) case_student[, .N, by = \"transfer\"] case_degree <- merge(case_degree, study_programs, by = \"cip6\", all.x = TRUE) case_degree[, .N, by = \"program\"]"},{"path":"/articles/art-06-fye-programs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"FYE programs","text":"US institutions first year engineering (FYE) programs—typically common first-year curriculum prerequisite acceptance degree-granting engineering major. persistence metrics computed program level, FYE programs can problematic. example, graduation rate conventionally defined ratio number students complete program (specified span years) number students entering cohort (NCES-IPEDS, 2016). FYE students don’t transition particular engineering program easily overlooked potential members program’s entering cohort—reducing size cohort artificially increasing graduation rate. FYE students admitted Engineering (CIP 14)—status neither “undecided” “unknown.” simply don’t know degree-granting program intend transition. Therefore, include FYE students persistence metric requiring degree-granting “starting” program, predict engineering program FYE student declared required enroll FYE. vignette describes prediction process results used.","code":""},{"path":"/articles/art-06-fye-programs.html","id":"options-for-predicting-starting-programs","dir":"Articles","previous_headings":"Introduction","what":"Options for predicting starting programs","title":"FYE programs","text":"Two approaches described vignette. Use prepared predictions fye_start, built-data set midfieldr predicted starting programs FYE students midfielddata practice data tables. Perform imputation. Use condition_fye() construct data frame appropriate predictor variables formatted can used input argument mice() function R package “mice” (multivariate imputation chained equations).","code":""},{"path":"/articles/art-06-fye-programs.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"FYE programs","text":"midfieldr functions add_race_sex() filter_by_key() filter_text() condition_fye() packages","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # only if performing your own imputation  library(\"mice\")  # optional code to control data.table printing options(datatable.print.nrows = 10, datatable.print.topn = 5)"},{"path":"/articles/art-06-fye-programs.html","id":"use-prepared-predictions","dir":"Articles","previous_headings":"","what":"Use prepared predictions","title":"FYE programs","text":"set predicted starting programs degree-seeking FYE students midfielddata provided midfieldr data set fye_start. View help page running, Examine data.","code":"? fye_start # prepared starting programs of FYE students fye_start #>              mcid  start #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701"},{"path":"/articles/art-06-fye-programs.html","id":"example-using-fye_start","dir":"Articles","previous_headings":"Use prepared predictions","what":"Example using fye_start","title":"FYE programs","text":"illustrate using data, let’s suppose trying determine number students four majors case study (Civil, Electrical, Industrial, Mechanical Engineering) start first year, second year, third year, etc. FYE students transition majors appear term data second year beyond, first year. example, therefore, focus determining include FYE students first-year count. use two additional prepared data sets, study_programs case-study CIP codes program names, study_students, students ever enrolled programs. see help pages, run Examine two data sets. student data include predicted starting majors FYE students. subset term table rows matching student IDs. matching IDs, obtain terms students ever enrolled programs. code chunk represents routine encounter fairly often: subset rows one data frame keep values key variable match values key variable second data frame. , example, want subset rows term keep values mcid match values mcid study_students. can use filter_by_key() accomplish task. ’ll use filter_by_key() remainder vignette type subset task. Continuing example, set keys organize rows block ID ordered terms. Now, use ID key subset first row student’s block. now one row per unique student. data subset matching program codes study_programs, thereby omitting students enrolled one four programs first term. adding FYE students, can group summarize comparison later. Now, turn FYE students. subset fye_start four programs. using filter_by_key(), change name key column start cip6. Bind two data frames. Now can group CIP count. Adding program names study_programs helpful interpreting results. Compare earlier results, summarized without FYE students, course, imputation, counts estimates. However, ignored FYE students, starting term counts programs artificially low—leading unreliable comparisons totals subsequent years.","code":"# case study data sets  ? study_programs ? study_students # case study programs  study_programs #>       cip6                program #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #> ---                               #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering  # students ever enrolled in the case study programs study_students #>               mcid   cip6 #>     1: MID25783178 143501 #>     2: MID25783197 140801 #>     3: MID25783388 141901 #>     4: MID25783441 140801 #>     5: MID25783491 141001 #>    ---                    #> 10760: MID26696967 141901 #> 10761: MID26696979 141901 #> 10762: MID26697163 141901 #> 10763: MID26697444 141901 #> 10764: MID26697447 141001 # subset term table by ID of case study students rows_we_want <- term[, mcid] %chin% study_students[, mcid] cols_we_want <- c(\"mcid\", \"term\", \"cip6\") DT <- term[rows_we_want, ..cols_we_want] DT <- unique(DT) DT #>               mcid  term   cip6 #>     1: MID25783178 19946 140102 #>     2: MID25783178 19951 140102 #>     3: MID25783178 19953 140102 #>     4: MID25783178 19956 140102 #>     5: MID25783178 19961 140102 #>    ---                          #> 96564: MID26697447 20134 141001 #> 96565: MID26697447 20141 141001 #> 96566: MID26697447 20143 141001 #> 96567: MID26697447 20151 141001 #> 96568: MID26697447 20153 141001 # temporary object try_this <- filter_by_key(term,                            match_to = study_students,                            key_col = \"mcid\",                            select = c(\"mcid\", \"term\", \"cip6\"))  # compare to the DT we obtained above all.equal(DT, try_this) #> [1] TRUE # set keys for ordering rows  keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT #>               mcid  term   cip6 #>     1: MID25783178 19946 140102 #>     2: MID25783178 19951 140102 #>     3: MID25783178 19953 140102 #>     4: MID25783178 19956 140102 #>     5: MID25783178 19961 140102 #>    ---                          #> 96564: MID26697447 20134 141001 #> 96565: MID26697447 20141 141001 #> 96566: MID26697447 20143 141001 #> 96567: MID26697447 20151 141001 #> 96568: MID26697447 20153 141001 # first term of each student DT <- DT[, .SD[1], by = \"mcid\"]  # keys no longer required setkey(DT, NULL)  # examine the result DT #>               mcid  term   cip6 #>     1: MID25783178 19946 140102 #>     2: MID25783197 19871 140102 #>     3: MID25783388 19871 140102 #>     4: MID25783441 19921 140102 #>     5: MID25783491 19961 140102 #>    ---                          #> 10131: MID26696967 20101 141901 #> 10132: MID26696979 20154 141901 #> 10133: MID26697163 20101 140101 #> 10134: MID26697444 20101 141901 #> 10135: MID26697447 20111 140701 # filter for case study programs only  DT <- filter_by_key(DT,                      match_to = study_programs,                      key_col = \"cip6\",                      select = c(\"mcid\", \"cip6\"))  # examine the result DT #>              mcid   cip6 #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 5347: MID26687969 143501 #> 5348: MID26690944 143501 #> 5349: MID26692128 143501 #> 5350: MID26692594 143501 #> 5351: MID26696429 143501 # summarize by CIP code DT_no_fye <- DT[, .N, by = \"cip6\"]  # join program names  DT_no_fye <- merge(DT_no_fye, study_programs, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want] DT_no_fye #>                   program    N #> 1: Mechanical Engineering 1992 #> 2: Electrical Engineering 1763 #> 3:      Civil Engineering 1120 #> 4: Industrial Engineering  476 # subset predicted FYE start programs  setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_by_key(fye_start,                             match_to = study_programs,                             key_col = \"cip6\",                             select = c(\"mcid\", \"cip6\"))  # examine the result study_fye #>              mcid   cip6 #>    1: MID25783162 140801 #>    2: MID25783441 140801 #>    3: MID25783553 140801 #>    4: MID25783648 140801 #>    5: MID25783753 140801 #>   ---                    #> 3109: MID26641136 143501 #> 3110: MID26641265 143501 #> 3111: MID26642173 143501 #> 3112: MID26642851 143501 #> 3113: MID26643299 143501 # combine the two data frames  DT <- rbindlist(list(DT, study_fye))  # examine the result DT #>              mcid   cip6 #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 8460: MID26641136 143501 #> 8461: MID26641265 143501 #> 8462: MID26642173 143501 #> 8463: MID26642851 143501 #> 8464: MID26643299 143501  # check that the IDs are unique length(unique(DT[, mcid])) #> [1] 8464 # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"]  # examine the result DT_with_fye #>      cip6    N #> 1: 140801 1911 #> 2: 141001 2422 #> 3: 141901 3273 #> 4: 143501  858 # join program names DT_with_fye <- merge(DT_with_fye, study_programs, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\")  DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # examine the result DT_with_fye #>                   program    N #> 1: Mechanical Engineering 3273 #> 2: Electrical Engineering 2422 #> 3:      Civil Engineering 1911 #> 4: Industrial Engineering  858 # earlier summary for comparison DT_no_fye #>                   program    N #> 1: Mechanical Engineering 1992 #> 2: Electrical Engineering 1763 #> 3:      Civil Engineering 1120 #> 4: Industrial Engineering  476"},{"path":"/articles/art-06-fye-programs.html","id":"using-condition_fye","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using condition_fye()","title":"FYE programs","text":"section shows details preparing data imputation using mice package perform imputation. procedure results prepared fye_start data set used . main preparation work done condition_fye(). first argument condition_fye() data frame available degree-seeking engineering students, required variables student ID, race, sex. Regardless programs happen studying, impute starting majors FYE students, include engineering programs point. collect students, start obtaining CIP codes start “14” (Engineering). obtain IDs students ever enrolled programs, access term table. students must degree-seeking, want subset rows engr keep values mcid match values mcid student data table. use filter_by_key() . case, change data frame students degree-seeking. Lastly, add demographic information add_race_sex(). ’re starting 19,036 engineers total. data frame ready use first argument condition_fye(). remaining arguments default settings optional. Arguments condition_fye(): dframe data frame variables mcid, race, sex midfield_table term table, default term fye_codes CIP code(s) FYE, default \"140102\" Using default settings, engineering students, 5033 enrolled FYE program least . FYE students, NA cip6 column indicates students impute starting major. number NAs CIP code column can found using sum(). Thus 1931 starting programs impute. (works applying sum() logical vector, R coerces TRUE/FALSE values numerical values 1 0.)","code":"# get engineering CIP codes engr_cip <- filter_text(cip, keep_text = \"^14\")  # examine the result engr_cip #>     cip2    cip2name cip4 #>  1:   14 Engineering 1401 #>  2:   14 Engineering 1401 #>  3:   14 Engineering 1402 #>  4:   14 Engineering 1403 #>  5:   14 Engineering 1404 #> ---                       #> 50:   14 Engineering 1442 #> 51:   14 Engineering 1443 #> 52:   14 Engineering 1444 #> 53:   14 Engineering 1445 #> 54:   14 Engineering 1499 #>                                                    cip4name   cip6 #>  1:                                    Engineering, General 140101 #>  2:                                    Engineering, General 140102 #>  3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>  4: Agricultural, Biological Engineering and Bioengineering 140301 #>  5:                               Architectural Engineering 140401 #> ---                                                                #> 50:       Mechatronics, Robotics and Automation Engineering 144201 #> 51:                                 Biochemical Engineering 144301 #> 52:                                   Engineering Chemistry 144401 #> 53:                      Biological, Biosystems Engineering 144501 #> 54:                                      Engineering, Other 149999 #>                                                         cip6name #>  1:                                         Engineering, General #>  2:                                              Pre-Engineering #>  3: Aerospace, Aeronautical and Astronautical, Space Engineering #>  4:      Agricultural, Biological Engineering and Bioengineering #>  5:                                    Architectural Engineering #> ---                                                              #> 50:            Mechatronics, Robotics and Automation Engineering #> 51:                                      Biochemical Engineering #> 52:                                        Engineering Chemistry #> 53:                           Biological, Biosystems Engineering #> 54:                                           Engineering, Other # get IDs of all engineering students engr <- filter_by_key(term,                        match_to = engr_cip,                        key_col = \"cip6\",                         select = \"mcid\")  # examine the result engr #>               mcid #>     1: MID25853474 #>     2: MID25864225 #>     3: MID25864273 #>     4: MID25864554 #>     5: MID25864996 #>    ---             #> 19032: MID26346976 #> 19033: MID26355610 #> 19034: MID26529140 #> 19035: MID26544796 #> 19036: MID26550059 # limit the population to degree-seeking students  engr <- filter_by_key(engr,                       match_to = student,                       key_col = \"mcid\")  # examine the result engr #>               mcid #>     1: MID25783162 #>     2: MID25783166 #>     3: MID25783167 #>     4: MID25783178 #>     5: MID25783197 #>    ---             #> 19032: MID26697295 #> 19033: MID26697298 #> 19034: MID26697367 #> 19035: MID26697444 #> 19036: MID26697447 # add race and sex variables  engr <- add_race_sex(engr)  # examine the result engr #>               mcid            race  sex #>     1: MID25783162           White Male #>     2: MID25783166           White Male #>     3: MID25783167           White Male #>     4: MID25783178           Black Male #>     5: MID25783197           White Male #>    ---                                  #> 19032: MID26697295           White Male #> 19033: MID26697298           Asian Male #> 19034: MID26697367 Hispanic/Latinx Male #> 19035: MID26697444           White Male #> 19036: MID26697447           Asian Male # set up a data frame for imputation  fye <- condition_fye(engr)  # view the result fye #>              mcid   institution            race    sex   cip6 #>    1: MID26060301 Institution C           Asian Female   <NA> #>    2: MID25995980 Institution C Hispanic/Latinx Female   <NA> #>    3: MID25997636 Institution C Hispanic/Latinx Female   <NA> #>    4: MID26086310 Institution C Hispanic/Latinx Female   <NA> #>    5: MID26000057 Institution C           White Female   <NA> #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 # number of NA values in cip6 column  sum(is.na(fye[, cip6])) #> [1] 1931"},{"path":"/articles/art-06-fye-programs.html","id":"using-the-mice-package","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using the mice package","title":"FYE programs","text":"mice package (van Buuren Groothuis-Oudshoorn, 2011) implements multivariate imputation chained equations (MICE). MICE also known “fully conditional specification” “sequential regression multiple imputation” suitable categorical variables (Azur et al., 2011). computational procedure follows approach suggested Dhana (2017). procedure assumes missing CIP data—NA values prepared data frame—“missing random” (MAR), , independent variables used impute missing values. rationale using data FYE institutions impute missing values—existence missing data depend institution type, FYE non-FYE. Within FYE data , however, assume imputed starting majors missing random. first use mice examine framework calling function zero iterations. (warning may appear console. can ignored.) look closely two elements framework. first imputation method variables method applied. case, correct. “polyreg” imputation method (polytomous logistic regression) appropriate data comprised unordered categorical variables. method correctly assigned, assign follows, second element review predictor matrix. row predictor matrix identifies predictors used predict variable row name—variables prediction method assigned . Since variable predicted cip6, really examine last row matrix, zeros ones tell us cip6 going predicted institution, race, sex (mcid). correct. default setting incorrect, can set manually ready imputation. default seed argument NULL, setting seed shown vignette results reproducible. Setting printFlag = TRUE displays progress console. mice() produces calls mids object: “multiply-imputed data set”. complete() function extracts completed data frame mids object, convert data.table. use result, need two columns, predicted starting program keyed ID. program codes still factors. change back characters. program codes data frame predicted, change variable name start distinguish cip6 variables data tables. process built-data set fye_start constructed, using random number seed used . confirm identical, Lastly, mice package masks base R rbind() cbind() functions, use following unload package ’re done .","code":"# imputation framework <- mice(fye, maxit = 0)  # examine the results framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 #> Number of logged events:  1  #>   it im dep     meth  out #> 1  0  0     constant mcid method <- framework[[\"method\"]] method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # variable(s) being imputed method[c(\"cip6\")] <- \"polyreg\"  # variable(s) not being imputed method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\"  #examine the result method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" predictors <- framework[[\"predictorMatrix\"]] predictors #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 predictors[\"cip6\", , drop = FALSE] #>      mcid institution race sex cip6 #> cip6    0           1    1   1    0 # set individual columns of the predictor matrix predictors[, c(\"mcid\", \"cip6\")] <- 0  # we need a one only in the last row for these three predictors predictors[, c(\"institution\", \"race\", \"sex\")]  <- c(0, 0, 0, 0, 1)  # examine the result predictors #>             mcid institution race sex cip6 #> mcid           0           0    0   0    0 #> institution    0           0    0   0    0 #> race           0           0    0   0    0 #> sex            0           0    0   0    0 #> cip6           0           1    1   1    0 # imputation fye_mids <- mice(     data = fye,     method = method,     predictorMatrix = predictors,     seed = 20180624,     printFlag = TRUE )  # output in console with printFlag = TRUE #>  iter imp variable #>   1   1  cip6 #>   1   2  cip6 #>   1   3  cip6 #>   1   4  cip6 #>   1   5  cip6 #>   ---    #>   5   1  cip6 #>   5   2  cip6 #>   5   3  cip6 #>   5   4  cip6 #>   5   5  cip6 fye <- complete(fye_mids) setDT(fye)  # examine the result fye #>              mcid   institution            race    sex   cip6 #>    1: MID26060301 Institution C           Asian Female 140801 #>    2: MID25995980 Institution C Hispanic/Latinx Female 141901 #>    3: MID25997636 Institution C Hispanic/Latinx Female 140701 #>    4: MID26086310 Institution C Hispanic/Latinx Female 141901 #>    5: MID26000057 Institution C           White Female 140701 #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: Factor w/ 17 levels \"140201\",\"140301\",..: 6 13 5 13 5 5 6 5 3 13 ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye[, cip6 := as.character(cip6)] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: chr  \"140801\" \"141901\" \"140701\" \"141901\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\") fye #>              mcid  start #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701 all.equal(fye, fye_start) #> [1] \"Different column names\" detach(\"package:mice\", unload = TRUE)"},{"path":"/articles/art-06-fye-programs.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"FYE programs","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"mice\")  # prepared predictions DT <- filter_by_key(term,                      match_to = study_students,                      key_col = \"mcid\",                      select = c(\"mcid\", \"term\", \"cip6\")) keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT <- DT[, .SD[1], by = \"mcid\"] setkey(DT, NULL) DT <- filter_by_key(DT,                      match_to = study_programs,                      key_col = \"cip6\",                      select = c(\"mcid\", \"cip6\"))  # summarize for later DT_no_fye <- DT[, .N, by = \"cip6\"] DT_no_fye <- merge(DT_no_fye, study_programs, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want]  # subset predicted FYE start programs  setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_by_key(fye_start,                             match_to = study_programs,                             key_col = \"cip6\",                             select = c(\"mcid\", \"cip6\")) DT <- rbindlist(list(DT, study_fye))  # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"] DT_with_fye <- merge(DT_with_fye, study_programs, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\")  DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # perform your own prediction engr_cip <- filter_text(cip, keep_text = \"^14\") engr <- filter_by_key(term,                        match_to = engr_cip,                        key_col = \"cip6\",                         select = \"mcid\") engr <- filter_by_key(engr,                       match_to = student,                       key_col = \"mcid\") engr <- add_race_sex(engr) fye <- condition_fye(engr)  # mice framework <- mice(fye, maxit = 0) method <- framework[[\"method\"]] method[c(\"cip6\")] <- \"polyreg\" method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\" predictors <- framework[[\"predictorMatrix\"]] predictors[, c(\"mcid\", \"cip6\")] <- 0 predictors[, c(\"institution\", \"race\", \"sex\")]  <- c(0, 0, 0, 0, 1) fye_mids <- mice(     data = fye,     method = method,     predictorMatrix = predictors,     seed = 20180624,     printFlag = TRUE ) fye <- complete(fye_mids)  # prepare for use setDT(fye) cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] fye[, cip6 := as.character(cip6)] fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\")"},{"path":"/articles/art-06-timely-completion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Timely completion","text":"Students generally expect complete program within span years entry. IPEDS defines timely completion one three values: 100%, 150%, 200% “normal” time completion institution. 4-year institution, 150% model (6 years) common use. However, span program completion might considered “timely” highly dependent choices student makes transferring institutions changing majors. example, figure illustrates history two students enter Fall 2010 graduate Spring 2015. assume basis 6 years timely completion. Student first-time--college student timely completion (TC) term Spring 2016. completion timely degree term comes TC term. Student B transfer student, entering junior. already satisfied 2 years program requirements, TC term Spring 2014. completion timely degree term comes TC term.  entry term Term student enters institution. timely completion span (TC span) Span years entry program completion considered timely. Depends heuristic used evaluate student’s history data record. timely completion term (TC term) Last term program completion considered timely. end TC span. degree term Term student completes program.","code":""},{"path":"/articles/art-06-timely-completion.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Timely completion","text":"Start Result ","code":""},{"path":"/articles/art-06-timely-completion.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Timely completion","text":"midfieldr functions add_completion_timely() add_data_sufficiency() add_institution() add_timely_term() filter_match() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term, degree)"},{"path":"/articles/art-06-timely-completion.html","id":"estimate-the-timely-completion-term","dir":"Articles","previous_headings":"","what":"Estimate the timely completion term","title":"Timely completion","text":"illustrate estimate apply timely completion term, start case study students. confirm pool students degree-seeking, use filter_match() match IDs student table. use add_timely_term() estimate timely completion term. View help page running add_timely_term() accesses term table adds new column, timely_term, data frame input. example, timely_term column contains estimate timely completion term student. basic heuristic starts span number years student (default 6 years) adjusts span subtracting whole number years based level student admitted. example, student admitted second-year level assumed completed one year program, span reduced one year. Similarly, spans reduced two years students admitted 3rd-year level three years students admitted fourth-year level. adjusted span years added starting term; result timely completion reported timely_term column added data frame. Optional arguments include details span. span argument default setting 6 years can reset user, e.g., including argument span = 4 details argument default FALSE. set TRUE, additional columns provided providing information timely_term based. Setting details TRUE yields additional columns term_i level_i adj_span input data frame existing columns matching new added columns, existing columns overwritten. Thus, can repeat running function still obtain expected results, can run function , effectively removing details columns effect main outcome,","code":"# case study IDs and CIP codes study_students #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783197 140801 #>    3: MID25783388 141901 #>    4: MID25783441 140801 #>    5: MID25783491 141001 #>   ---                    #> 8215: MID26696958 141901 #> 8216: MID26696967 141901 #> 8217: MID26697163 141901 #> 8218: MID26697444 141901 #> 8219: MID26697447 141001 # limit population to degree-seeking students DT <- filter_match(study_students,   match_to = student,   by_col = \"mcid\" )  # examine the result DT #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783197 140801 #>    3: MID25783388 141901 #>    4: MID25783441 140801 #>    5: MID25783491 141001 #>   ---                    #> 8215: MID26696958 141901 #> 8216: MID26696967 141901 #> 8217: MID26697163 141901 #> 8218: MID26697444 141901 #> 8219: MID26697447 141001 ? add_timely_term # estimate the timely completion term DT <- add_timely_term(DT, midfield_term = term) DT #>              mcid   cip6 timely_term #>            <char> <char>      <char> #>    1: MID25783178 143501       20003 #>    2: MID25783197 140801       19923 #>    3: MID25783388 141901       19923 #>    4: MID25783441 140801       19973 #>    5: MID25783491 141001       20013 #>   ---                                #> 8215: MID26696958 141901       20163 #> 8216: MID26696967 141901       20153 #> 8217: MID26697163 141901       20143 #> 8218: MID26697444 141901       20153 #> 8219: MID26697447 141001       20163 add_timely_term(dframe,                 midfield_term,                 ...,                 details = NULL,                 span = NULL) # estimate the timely completion term with details shown DT <- add_timely_term(DT,   midfield_term = term,   details = TRUE ) DT #>              mcid   cip6 term_i      level_i adj_span timely_term #>            <char> <char> <char>       <char>    <num>      <char> #>    1: MID25783178 143501  19946  01 Freshman        6       20003 #>    2: MID25783197 140801  19871  01 Freshman        6       19923 #>    3: MID25783388 141901  19871  01 Freshman        6       19923 #>    4: MID25783441 140801  19921  01 Freshman        6       19973 #>    5: MID25783491 141001  19961  01 Freshman        6       20013 #>   ---                                                             #> 8215: MID26696958 141901  20111  01 Freshman        6       20163 #> 8216: MID26696967 141901  20101  01 Freshman        6       20153 #> 8217: MID26697163 141901  20101 02 Sophomore        5       20143 #> 8218: MID26697444 141901  20101  01 Freshman        6       20153 #> 8219: MID26697447 141001  20111  01 Freshman        6       20163 # repeat DT <- add_timely_term(DT,   midfield_term = term,   details = TRUE ) DT #>              mcid   cip6 term_i      level_i adj_span timely_term #>            <char> <char> <char>       <char>    <num>      <char> #>    1: MID25783178 143501  19946  01 Freshman        6       20003 #>    2: MID25783197 140801  19871  01 Freshman        6       19923 #>    3: MID25783388 141901  19871  01 Freshman        6       19923 #>    4: MID25783441 140801  19921  01 Freshman        6       19973 #>    5: MID25783491 141001  19961  01 Freshman        6       20013 #>   ---                                                             #> 8215: MID26696958 141901  20111  01 Freshman        6       20163 #> 8216: MID26696967 141901  20101  01 Freshman        6       20153 #> 8217: MID26697163 141901  20101 02 Sophomore        5       20143 #> 8218: MID26697444 141901  20101  01 Freshman        6       20153 #> 8219: MID26697447 141001  20111  01 Freshman        6       20163 # remove details DT <- add_timely_term(DT,   midfield_term = term,   details = FALSE ) DT #>              mcid   cip6 timely_term #>            <char> <char>      <char> #>    1: MID25783178 143501       20003 #>    2: MID25783197 140801       19923 #>    3: MID25783388 141901       19923 #>    4: MID25783441 140801       19973 #>    5: MID25783491 141001       20013 #>   ---                                #> 8215: MID26696958 141901       20163 #> 8216: MID26696967 141901       20153 #> 8217: MID26697163 141901       20143 #> 8218: MID26697444 141901       20153 #> 8219: MID26697447 141001       20163"},{"path":"/articles/art-06-timely-completion.html","id":"assess-timely-completion","dir":"Articles","previous_headings":"","what":"Assess timely completion","title":"Timely completion","text":"Depends timely_term mcid column input, Accesses degree table. Untimely graduation? Grad reclassified nongrad","code":"DT <- add_completion_timely(DT,   midfield_degree = degree,   details = TRUE ) DT #>              mcid   cip6 timely_term term_degree completion completion_timely #>            <char> <char>      <char>      <char>     <lgcl>            <lgcl> #>    1: MID25783178 143501       20003       20001       TRUE              TRUE #>    2: MID25783197 140801       19923       19911       TRUE              TRUE #>    3: MID25783388 141901       19923        <NA>      FALSE             FALSE #>    4: MID25783441 140801       19973       19963       TRUE              TRUE #>    5: MID25783491 141001       20013       20001       TRUE              TRUE #>   ---                                                                         #> 8215: MID26696958 141901       20163        <NA>      FALSE             FALSE #> 8216: MID26696967 141901       20153       20141       TRUE              TRUE #> 8217: MID26697163 141901       20143       20133       TRUE              TRUE #> 8218: MID26697444 141901       20153       20151       TRUE              TRUE #> 8219: MID26697447 141001       20163       20154       TRUE              TRUE  # no details DT <- add_completion_timely(DT,   midfield_degree = degree,   details = FALSE ) DT #>              mcid   cip6 timely_term completion_timely #>            <char> <char>      <char>            <lgcl> #>    1: MID25783178 143501       20003              TRUE #>    2: MID25783197 140801       19923              TRUE #>    3: MID25783388 141901       19923             FALSE #>    4: MID25783441 140801       19973              TRUE #>    5: MID25783491 141001       20013              TRUE #>   ---                                                  #> 8215: MID26696958 141901       20163             FALSE #> 8216: MID26696967 141901       20153              TRUE #> 8217: MID26697163 141901       20143              TRUE #> 8218: MID26697444 141901       20153              TRUE #> 8219: MID26697447 141001       20163              TRUE"},{"path":"/articles/art-06-timely-completion.html","id":"assess-data-sufficiency","dir":"Articles","previous_headings":"","what":"Assess data sufficiency","title":"Timely completion","text":"step requires timely_term institution column input. get institution TC exceeds data limit? Omit students study","code":"DT <- add_institution(DT,   midfield_term = term ) DT #>              mcid   institution   cip6 timely_term completion_timely #>            <char>        <char> <char>      <char>            <lgcl> #>    1: MID25783178 Institution M 143501       20003              TRUE #>    2: MID25783197 Institution M 140801       19923              TRUE #>    3: MID25783388 Institution M 141901       19923             FALSE #>    4: MID25783441 Institution M 140801       19973              TRUE #>    5: MID25783491 Institution M 141001       20013              TRUE #>   ---                                                                #> 8215: MID26696958 Institution L 141901       20163             FALSE #> 8216: MID26696967 Institution L 141901       20153              TRUE #> 8217: MID26697163 Institution L 141901       20143              TRUE #> 8218: MID26697444 Institution L 141901       20153              TRUE #> 8219: MID26697447 Institution L 141001       20163              TRUE # add column with details DT <- add_data_sufficiency(DT,   midfield_term = term,   details = TRUE ) DT #>              mcid   institution   cip6 timely_term completion_timely inst_limit #>            <char>        <char> <char>      <char>            <lgcl>     <char> #>    1: MID25783178 Institution M 143501       20003              TRUE      20096 #>    2: MID25783197 Institution M 140801       19923              TRUE      20096 #>    3: MID25783388 Institution M 141901       19923             FALSE      20096 #>    4: MID25783441 Institution M 140801       19973              TRUE      20096 #>    5: MID25783491 Institution M 141001       20013              TRUE      20096 #>   ---                                                                           #> 8215: MID26696958 Institution L 141901       20163             FALSE      20164 #> 8216: MID26696967 Institution L 141901       20153              TRUE      20164 #> 8217: MID26697163 Institution L 141901       20143              TRUE      20164 #> 8218: MID26697444 Institution L 141901       20153              TRUE      20164 #> 8219: MID26697447 Institution L 141001       20163              TRUE      20164 #>       data_sufficiency #>                 <lgcl> #>    1:             TRUE #>    2:             TRUE #>    3:             TRUE #>    4:             TRUE #>    5:             TRUE #>   ---                  #> 8215:             TRUE #> 8216:             TRUE #> 8217:             TRUE #> 8218:             TRUE #> 8219:             TRUE   # add column without details DT <- add_data_sufficiency(DT,   midfield_term = term,   details = FALSE ) DT #>              mcid   institution   cip6 timely_term completion_timely #>            <char>        <char> <char>      <char>            <lgcl> #>    1: MID25783178 Institution M 143501       20003              TRUE #>    2: MID25783197 Institution M 140801       19923              TRUE #>    3: MID25783388 Institution M 141901       19923             FALSE #>    4: MID25783441 Institution M 140801       19973              TRUE #>    5: MID25783491 Institution M 141001       20013              TRUE #>   ---                                                                #> 8215: MID26696958 Institution L 141901       20163             FALSE #> 8216: MID26696967 Institution L 141901       20153              TRUE #> 8217: MID26697163 Institution L 141901       20143              TRUE #> 8218: MID26697444 Institution L 141901       20153              TRUE #> 8219: MID26697447 Institution L 141001       20163              TRUE #>       data_sufficiency #>                 <lgcl> #>    1:             TRUE #>    2:             TRUE #>    3:             TRUE #>    4:             TRUE #>    5:             TRUE #>   ---                  #> 8215:             TRUE #> 8216:             TRUE #> 8217:             TRUE #> 8218:             TRUE #> 8219:             TRUE     DT[, c(\"timely_term\", \"institution\") := NULL] DT #>              mcid   cip6 completion_timely data_sufficiency #>            <char> <char>            <lgcl>           <lgcl> #>    1: MID25783178 143501              TRUE             TRUE #>    2: MID25783197 140801              TRUE             TRUE #>    3: MID25783388 141901             FALSE             TRUE #>    4: MID25783441 140801              TRUE             TRUE #>    5: MID25783491 141001              TRUE             TRUE #>   ---                                                       #> 8215: MID26696958 141901             FALSE             TRUE #> 8216: MID26696967 141901              TRUE             TRUE #> 8217: MID26697163 141901              TRUE             TRUE #> 8218: MID26697444 141901              TRUE             TRUE #> 8219: MID26697447 141001              TRUE             TRUE"},{"path":"/articles/art-06-timely-completion.html","id":"evaluate","dir":"Articles","previous_headings":"","what":"Evaluate","title":"Timely completion","text":"","code":"# limit population to data sufficient DT <- DT[data_sufficiency == TRUE] DT[] #>              mcid   cip6 completion_timely data_sufficiency #>            <char> <char>            <lgcl>           <lgcl> #>    1: MID25783178 143501              TRUE             TRUE #>    2: MID25783197 140801              TRUE             TRUE #>    3: MID25783388 141901             FALSE             TRUE #>    4: MID25783441 140801              TRUE             TRUE #>    5: MID25783491 141001              TRUE             TRUE #>   ---                                                       #> 8215: MID26696958 141901             FALSE             TRUE #> 8216: MID26696967 141901              TRUE             TRUE #> 8217: MID26697163 141901              TRUE             TRUE #> 8218: MID26697444 141901              TRUE             TRUE #> 8219: MID26697447 141001              TRUE             TRUE   DT <- DT[, grad_status := fifelse(completion_timely, \"grad\", \"nongrad\")] DT[] #>              mcid   cip6 completion_timely data_sufficiency grad_status #>            <char> <char>            <lgcl>           <lgcl>      <char> #>    1: MID25783178 143501              TRUE             TRUE        grad #>    2: MID25783197 140801              TRUE             TRUE        grad #>    3: MID25783388 141901             FALSE             TRUE     nongrad #>    4: MID25783441 140801              TRUE             TRUE        grad #>    5: MID25783491 141001              TRUE             TRUE        grad #>   ---                                                                   #> 8215: MID26696958 141901             FALSE             TRUE     nongrad #> 8216: MID26696967 141901              TRUE             TRUE        grad #> 8217: MID26697163 141901              TRUE             TRUE        grad #> 8218: MID26697444 141901              TRUE             TRUE        grad #> 8219: MID26697447 141001              TRUE             TRUE        grad  DT <- DT[, .(mcid, cip6, grad_status)] DT[] #>              mcid   cip6 grad_status #>            <char> <char>      <char> #>    1: MID25783178 143501        grad #>    2: MID25783197 140801        grad #>    3: MID25783388 141901     nongrad #>    4: MID25783441 140801        grad #>    5: MID25783491 141001        grad #>   ---                                #> 8215: MID26696958 141901     nongrad #> 8216: MID26696967 141901        grad #> 8217: MID26697163 141901        grad #> 8218: MID26697444 141901        grad #> 8219: MID26697447 141001        grad  DT <- merge(DT, study_programs, by = \"cip6\", all.x = TRUE) DT[, cip6 := NULL] setcolorder(DT, c(\"mcid\", \"program\")) DT #>              mcid                program grad_status #>            <char>                 <char>      <char> #>    1: MID25783197      Civil Engineering        grad #>    2: MID25783441      Civil Engineering        grad #>    3: MID25783553      Civil Engineering     nongrad #>    4: MID25784209      Civil Engineering     nongrad #>    5: MID25784489      Civil Engineering        grad #>   ---                                                #> 8215: MID26692926 Industrial Engineering        grad #> 8216: MID26693368 Industrial Engineering     nongrad #> 8217: MID26695626 Industrial Engineering        grad #> 8218: MID26696116 Industrial Engineering        grad #> 8219: MID26696429 Industrial Engineering        grad"},{"path":"/articles/art-06-timely-completion.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Timely completion","text":"vignette code chunks collected single, condensed script.","code":""},{"path":"/articles/art-07-fye-programs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"FYE programs","text":"US institutions first year engineering (FYE) programs—typically common first-year curriculum prerequisite acceptance degree-granting engineering major. persistence metrics computed program level, FYE programs can problematic. example, graduation rate conventionally defined ratio number students complete program (specified span years) number students entering cohort [1]. FYE students don’t transition particular engineering program easily overlooked potential members program’s entering cohort—reducing size cohort artificially increasing graduation rate. FYE students admitted Engineering (CIP 14)—status neither “undecided” “unknown.” simply don’t know degree-granting program intend transition. Therefore, include FYE students persistence metric requiring degree-granting “starting” program, predict engineering program FYE student declared required enroll FYE. vignette describes prediction process results used.","code":""},{"path":"/articles/art-07-fye-programs.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"FYE programs","text":"Two approaches described vignette. Use prepared predictions fye_start, built-data set midfieldr predicted starting programs FYE students midfielddata practice data tables. Perform imputation. Use condition_fye() construct data frame appropriate predictor variables formatted can used input argument mice() function R package “mice” (multivariate imputation chained equations).","code":""},{"path":"/articles/art-07-fye-programs.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"FYE programs","text":"midfieldr functions add_race_sex() filter_match() filter_search() condition_fye() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # only if performing your own imputation library(\"mice\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term)"},{"path":"/articles/art-07-fye-programs.html","id":"use-prepared-predictions","dir":"Articles","previous_headings":"","what":"Use prepared predictions","title":"FYE programs","text":"set predicted starting programs degree-seeking FYE students midfielddata provided midfieldr data set fye_start. View help page running, Examine data.","code":"? fye_start # prepared starting programs of FYE students fye_start #>              mcid  start #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701"},{"path":"/articles/art-07-fye-programs.html","id":"example-using-fye_start","dir":"Articles","previous_headings":"Use prepared predictions","what":"Example using fye_start","title":"FYE programs","text":"illustrate using data, let’s suppose trying determine number students four majors case study (Civil, Electrical, Industrial, Mechanical Engineering) start first year, second year, third year, etc. FYE students transition majors appear term data second year beyond, first year. example, therefore, focus determining include FYE students first-year count. use two additional prepared data sets, study_programs case-study CIP codes program names, study_students, students ever enrolled programs. see help pages, run Examine two data sets. student data include predicted starting majors FYE students. subset term table rows matching student IDs. matching IDs, obtain terms students ever enrolled programs. set keys organize rows block ID ordered terms. Now, use ID key subset first row student’s block. now one row per unique student. data subset matching program codes study_programs, thereby omitting students enrolled one four programs first term. adding FYE students, can group summarize comparison later. Now, turn FYE students. subset fye_start four programs. using filter_match(), change name key column start cip6. Bind two data frames. Now can group CIP count. Adding program names study_programs helpful interpreting results. Compare earlier results, summarized without FYE students, course, imputation, counts estimates. However, ignored FYE students, starting term counts programs artificially low—leading unreliable comparisons totals subsequent years.","code":"# case study data sets  ? study_programs ? study_students # case study programs study_programs #>       cip6                program #>     <char>                 <char> #>  1: 140801      Civil Engineering #>  2: 140802      Civil Engineering #>  3: 140803      Civil Engineering #>  4: 140804      Civil Engineering #>  5: 140805      Civil Engineering #> ---                               #>  8: 141003 Electrical Engineering #>  9: 141004 Electrical Engineering #> 10: 141099 Electrical Engineering #> 11: 141901 Mechanical Engineering #> 12: 143501 Industrial Engineering  # students ever enrolled in the case study programs study_students #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783197 140801 #>    3: MID25783388 141901 #>    4: MID25783441 140801 #>    5: MID25783491 141001 #>   ---                    #> 8215: MID26696958 141901 #> 8216: MID26696967 141901 #> 8217: MID26697163 141901 #> 8218: MID26697444 141901 #> 8219: MID26697447 141001 # subset term table by ID of case study students DT <- filter_match(term,   match_to = study_students,   by_col = \"mcid\",   select = c(\"mcid\", \"term\", \"cip6\") ) # set keys for ordering rows keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT #>               mcid   term   cip6 #>             <char> <char> <char> #>     1: MID25783178  19946 140102 #>     2: MID25783178  19951 140102 #>     3: MID25783178  19953 140102 #>     4: MID25783178  19956 140102 #>     5: MID25783178  19961 140102 #>    ---                           #> 80864: MID26697447  20134 141001 #> 80865: MID26697447  20141 141001 #> 80866: MID26697447  20143 141001 #> 80867: MID26697447  20151 141001 #> 80868: MID26697447  20153 141001 # first term of each student DT <- DT[, .SD[1], by = \"mcid\"]  # keys no longer required setkey(DT, NULL)  # examine the result DT #>              mcid   term   cip6 #>            <char> <char> <char> #>    1: MID25783178  19946 140102 #>    2: MID25783197  19871 140102 #>    3: MID25783388  19871 140102 #>    4: MID25783441  19921 140102 #>    5: MID25783491  19961 140102 #>   ---                           #> 7680: MID26696958  20111 141901 #> 7681: MID26696967  20101 141901 #> 7682: MID26697163  20101 140101 #> 7683: MID26697444  20101 141901 #> 7684: MID26697447  20111 140701 # filter for case study programs only DT <- filter_match(DT,   match_to = study_programs,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") )  # ensure rows are unique DT <- unique(DT)  # examine the result DT #>              mcid   cip6 #>            <char> <char> #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 3895: MID26687969 143501 #> 3896: MID26690944 143501 #> 3897: MID26692128 143501 #> 3898: MID26692594 143501 #> 3899: MID26696429 143501 # summarize by CIP code DT_no_fye <- DT[, .N, by = \"cip6\"]  # join program names DT_no_fye <- merge(DT_no_fye, study_programs, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want] DT_no_fye #>                   program     N #>                    <char> <int> #> 1: Electrical Engineering  1422 #> 2: Mechanical Engineering  1350 #> 3:      Civil Engineering   807 #> 4: Industrial Engineering   320 # subset predicted FYE start programs setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_match(fye_start,   match_to = study_programs,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") )  # examine the result study_fye #>              mcid   cip6 #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783441 140801 #>    3: MID25783553 140801 #>    4: MID25783648 140801 #>    5: MID25783753 140801 #>   ---                    #> 3109: MID26641136 143501 #> 3110: MID26641265 143501 #> 3111: MID26642173 143501 #> 3112: MID26642851 143501 #> 3113: MID26643299 143501 # combine the two data frames DT <- rbindlist(list(DT, study_fye))  # examine the result DT #>              mcid   cip6 #>            <char> <char> #>    1: MID25787414 140801 #>    2: MID25794372 140801 #>    3: MID25796088 140801 #>    4: MID25801036 140801 #>    5: MID25801582 140801 #>   ---                    #> 7008: MID26641136 143501 #> 7009: MID26641265 143501 #> 7010: MID26642173 143501 #> 7011: MID26642851 143501 #> 7012: MID26643299 143501  # check that the IDs are unique length(unique(DT[, mcid])) #> [1] 7012 # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"]  # examine the result DT_with_fye #>      cip6     N #>    <char> <int> #> 1: 140801  1598 #> 2: 141001  2081 #> 3: 141901  2631 #> 4: 143501   702 # join program names DT_with_fye <- merge(DT_with_fye, study_programs, by = \"cip6\", all.x = TRUE)  # order columns and rows for display cols_we_want <- c(\"program\", \"N\") DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # examine the result DT_with_fye #>                   program     N #>                    <char> <int> #> 1: Mechanical Engineering  2631 #> 2: Electrical Engineering  2081 #> 3:      Civil Engineering  1598 #> 4: Industrial Engineering   702 # earlier summary for comparison DT_no_fye #>                   program     N #>                    <char> <int> #> 1: Electrical Engineering  1422 #> 2: Mechanical Engineering  1350 #> 3:      Civil Engineering   807 #> 4: Industrial Engineering   320"},{"path":"/articles/art-07-fye-programs.html","id":"using-condition_fye","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using condition_fye()","title":"FYE programs","text":"section shows details preparing data imputation using mice package perform imputation. procedure results prepared fye_start data set used . main preparation work done condition_fye(). View help page running first argument condition_fye() data frame available degree-seeking engineering students, required variables student ID, race, sex. Regardless programs happen studying, impute starting majors FYE students, include engineering programs point. collect students, start obtaining CIP codes start “14” (Engineering). obtain IDs students ever enrolled programs, access term table. students must degree-seeking, want subset rows engr keep values mcid match values mcid student data table. use filter_match() . case, change data frame students degree-seeking. Lastly, add demographic information add_race_sex(). View help page running Next use engr data frame first argument condition_fye() function. second argument term data table midfielddata (equivalent). third argument fye_codes optional default assignment (“140102”). engineering students, 5033 enrolled FYE program least . FYE students, NA cip6 column indicates students impute starting major. number NAs CIP code column can found using sum(). Thus 1931 starting programs impute. (works applying sum() logical vector, R coerces TRUE/FALSE values numerical values 1 0.)","code":"? condition_fye() # get engineering CIP codes engr_cip <- filter_search(cip, keep_text = \"^14\")  # examine the result engr_cip #>       cip2    cip2name   cip4 #>     <char>      <char> <char> #>  1:     14 Engineering   1401 #>  2:     14 Engineering   1401 #>  3:     14 Engineering   1402 #>  4:     14 Engineering   1403 #>  5:     14 Engineering   1404 #> ---                           #> 50:     14 Engineering   1442 #> 51:     14 Engineering   1443 #> 52:     14 Engineering   1444 #> 53:     14 Engineering   1445 #> 54:     14 Engineering   1499 #>                                                    cip4name   cip6 #>                                                      <char> <char> #>  1:                                    Engineering, General 140101 #>  2:                                    Engineering, General 140102 #>  3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>  4: Agricultural, Biological Engineering and Bioengineering 140301 #>  5:                               Architectural Engineering 140401 #> ---                                                                #> 50:       Mechatronics, Robotics and Automation Engineering 144201 #> 51:                                 Biochemical Engineering 144301 #> 52:                                   Engineering Chemistry 144401 #> 53:                      Biological, Biosystems Engineering 144501 #> 54:                                      Engineering, Other 149999 #>                                                         cip6name #>                                                           <char> #>  1:                                         Engineering, General #>  2:                                              Pre-Engineering #>  3: Aerospace, Aeronautical and Astronautical, Space Engineering #>  4:      Agricultural, Biological Engineering and Bioengineering #>  5:                                    Architectural Engineering #> ---                                                              #> 50:            Mechatronics, Robotics and Automation Engineering #> 51:                                      Biochemical Engineering #> 52:                                        Engineering Chemistry #> 53:                           Biological, Biosystems Engineering #> 54:                                           Engineering, Other # get IDs of all engineering students in all terms engr <- filter_match(term,   match_to = engr_cip,   by_col = \"cip6\",   select = \"mcid\" )  # all terms, so there will be duplictae IDs engr #>                mcid #>              <char> #>      1: MID25853474 #>      2: MID25853474 #>      3: MID25864225 #>      4: MID25864225 #>      5: MID25864273 #>     ---             #> 129718: MID26529140 #> 129719: MID26529140 #> 129720: MID26544796 #> 129721: MID26544796 #> 129722: MID26550059  # omit duplicate rows engr <- unique(engr)  # examine the result engr #>               mcid #>             <char> #>     1: MID25853474 #>     2: MID25864225 #>     3: MID25864273 #>     4: MID25864554 #>     5: MID25864996 #>    ---             #> 19032: MID26346976 #> 19033: MID26355610 #> 19034: MID26529140 #> 19035: MID26544796 #> 19036: MID26550059 # limit the population to degree-seeking students engr <- filter_match(engr,   match_to = student,   by_col = \"mcid\" )  # examine the result engr #>               mcid #>             <char> #>     1: MID25783162 #>     2: MID25783166 #>     3: MID25783167 #>     4: MID25783178 #>     5: MID25783197 #>    ---             #> 19032: MID26697295 #> 19033: MID26697298 #> 19034: MID26697367 #> 19035: MID26697444 #> 19036: MID26697447 ? add_race_sex # add race and sex variables engr <- add_race_sex(engr, midfield_student = student)  # examine the result engr #>               mcid            race    sex #>             <char>          <char> <char> #>     1: MID25783162           White   Male #>     2: MID25783166           White   Male #>     3: MID25783167           White   Male #>     4: MID25783178           Black   Male #>     5: MID25783197           White   Male #>    ---                                    #> 19032: MID26697295           White   Male #> 19033: MID26697298           Asian   Male #> 19034: MID26697367 Hispanic/Latinx   Male #> 19035: MID26697444           White   Male #> 19036: MID26697447           Asian   Male # set up a data frame for imputation fye <- condition_fye(engr, midfield_term = term)  # view the result fye #>              mcid   institution            race    sex   cip6 #>            <char>        <fctr>          <fctr> <fctr> <fctr> #>    1: MID26060301 Institution C           Asian Female   <NA> #>    2: MID25995980 Institution C Hispanic/Latinx Female   <NA> #>    3: MID25997636 Institution C Hispanic/Latinx Female   <NA> #>    4: MID26086310 Institution C Hispanic/Latinx Female   <NA> #>    5: MID26000057 Institution C           White Female   <NA> #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 # number of NA values in cip6 column sum(is.na(fye[, cip6])) #> [1] 1931"},{"path":"/articles/art-07-fye-programs.html","id":"using-the-mice-package","dir":"Articles","previous_headings":"Perform your own imputation (optional)","what":"Using the mice package","title":"FYE programs","text":"mice package [2] implements multivariate imputation chained equations (MICE). MICE also known “fully conditional specification” “sequential regression multiple imputation” suitable categorical variables [3]. computational procedure follows approach suggested Dhana [4]. procedure assumes missing CIP data—NA values prepared data frame—“missing random” (MAR), , independent variables used impute missing values. rationale using data FYE institutions impute missing values—existence missing data depend institution type, FYE non-FYE. Within FYE data , however, assume imputed starting majors missing random. first use mice examine framework calling function zero iterations fye data frame. (warning may appear console. can ignored.) look closely two elements framework. first imputation method variables method applied. case, correct. “polyreg” imputation method (polytomous logistic regression) appropriate data comprised unordered categorical variables. method correctly assigned, assign follows, second element review predictor matrix. row predictor matrix identifies predictors used predict variable row name—variables prediction method assigned . Since variable predicted cip6, really examine last row matrix, zeros ones tell us cip6 going predicted institution, race, sex (mcid). correct. default setting incorrect, can set manually ready imputation. default seed argument NULL, setting seed shown vignette results reproducible. Setting printFlag = TRUE displays progress console. mice() produces calls mids object: “multiply-imputed data set.” complete() function extracts completed data frame mids object, convert data.table. use result, need two columns, predicted starting program keyed ID. program codes still factors. change back characters. program codes data frame predicted, change variable name start distinguish cip6 variables data tables. process built-data set fye_start constructed, using random number seed used . confirm identical, Lastly, mice package masks base R rbind() cbind() functions, use following unload package ’re done .","code":"# imputation framework <- mice(fye, maxit = 0)  # examine the results framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 #> Number of logged events:  1  #>   it im dep     meth  out #> 1  0  0     constant mcid method <- framework[[\"method\"]] method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # variable(s) being imputed method[c(\"cip6\")] <- \"polyreg\"  # variable(s) not being imputed method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\"  # examine the result method #>        mcid institution        race         sex        cip6  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" predictors <- framework[[\"predictorMatrix\"]] predictors #>             mcid institution race sex cip6 #> mcid           0           1    1   1    1 #> institution    0           0    1   1    1 #> race           0           1    0   1    1 #> sex            0           1    1   0    1 #> cip6           0           1    1   1    0 predictors[\"cip6\", , drop = FALSE] #>      mcid institution race sex cip6 #> cip6    0           1    1   1    0 # set individual columns of the predictor matrix predictors[, c(\"mcid\", \"cip6\")] <- 0  # we need a one only in the last row for these three predictors predictors[, c(\"institution\", \"race\", \"sex\")] <- c(0, 0, 0, 0, 1)  # examine the result predictors #>             mcid institution race sex cip6 #> mcid           0           0    0   0    0 #> institution    0           0    0   0    0 #> race           0           0    0   0    0 #> sex            0           0    0   0    0 #> cip6           0           1    1   1    0 # imputation fye_mids <- mice(   data = fye,   method = method,   predictorMatrix = predictors,   seed = 20180624,   printFlag = TRUE )  # output in console with printFlag = TRUE # >  iter imp variable # >   1   1  cip6 # >   1   2  cip6 # >   1   3  cip6 # >   1   4  cip6 # >   1   5  cip6 # >   --- # >   5   1  cip6 # >   5   2  cip6 # >   5   3  cip6 # >   5   4  cip6 # >   5   5  cip6 fye <- complete(fye_mids) setDT(fye)  # examine the result fye #>              mcid   institution            race    sex   cip6 #>            <char>        <fctr>          <fctr> <fctr> <fctr> #>    1: MID26060301 Institution C           Asian Female 140801 #>    2: MID25995980 Institution C Hispanic/Latinx Female 141901 #>    3: MID25997636 Institution C Hispanic/Latinx Female 140701 #>    4: MID26086310 Institution C Hispanic/Latinx Female 141901 #>    5: MID26000057 Institution C           White Female 140701 #>   ---                                                         #> 5029: MID25846316 Institution M           White   Male 143501 #> 5030: MID25847220 Institution M           White   Male 143501 #> 5031: MID25848589 Institution M           White   Male 143501 #> 5032: MID25852023 Institution M           White   Male 143501 #> 5033: MID25828870 Institution M           White   Male 149999 cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: Factor w/ 17 levels \"140201\",\"140301\",..: 6 13 5 13 5 5 6 5 3 13 ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye[, cip6 := as.character(cip6)] str(fye) #> Classes 'data.table' and 'data.frame':   5033 obs. of  2 variables: #>  $ mcid: chr  \"MID26060301\" \"MID25995980\" \"MID25997636\" \"MID26086310\" ... #>  $ cip6: chr  \"140801\" \"141901\" \"140701\" \"141901\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\") fye #>              mcid  start #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783166 141001 #>    3: MID25783167 140901 #>    4: MID25783178 140701 #>    5: MID25783197 140701 #>   ---                    #> 5029: MID26648422 141901 #> 5030: MID26648484 140901 #> 5031: MID26648508 140201 #> 5032: MID26648517 140201 #> 5033: MID26648553 140701 all.equal(fye, fye_start) #> [1] \"Different column names\" detach(\"package:mice\", unload = TRUE) set.seed(NULL)"},{"path":"/articles/art-07-fye-programs.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"FYE programs","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"mice\")  # prepared predictions DT <- filter_match(term,   match_to = study_students,   by_col = \"mcid\",   select = c(\"mcid\", \"term\", \"cip6\") ) keys <- c(\"mcid\", \"term\") setkeyv(DT, keys) DT <- DT[, .SD[1], by = \"mcid\"] setkey(DT, NULL) DT <- filter_match(DT,   match_to = study_programs,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) DT <- unique(DT)  # summarize for later DT_no_fye <- DT[, .N, by = \"cip6\"] DT_no_fye <- merge(DT_no_fye, study_programs, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\") DT_no_fye <- DT_no_fye[order(-N), ..cols_we_want]  # subset predicted FYE start programs setnames(fye_start, old = \"start\", new = \"cip6\") study_fye <- filter_match(fye_start,   match_to = study_programs,   by_col = \"cip6\",   select = c(\"mcid\", \"cip6\") ) DT <- rbindlist(list(DT, study_fye))  # group and summarize with FYE included DT_with_fye <- DT[, .N, by = \"cip6\"] DT_with_fye <- merge(DT_with_fye, study_programs, by = \"cip6\", all.x = TRUE) cols_we_want <- c(\"program\", \"N\") DT_with_fye <- DT_with_fye[order(-N), ..cols_we_want]  # perform your own prediction engr_cip <- filter_search(cip, keep_text = \"^14\") engr <- filter_match(term,   match_to = engr_cip,   by_col = \"cip6\",   select = \"mcid\" ) engr <- unique(engr) engr <- filter_match(engr,   match_to = student,   by_col = \"mcid\" ) engr <- add_race_sex(engr, midfield_student = student) fye <- condition_fye(engr, midfield_term = term)  # mice framework <- mice(fye, maxit = 0) method <- framework[[\"method\"]] method[c(\"cip6\")] <- \"polyreg\" method[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\" predictors <- framework[[\"predictorMatrix\"]] predictors[, c(\"mcid\", \"cip6\")] <- 0 predictors[, c(\"institution\", \"race\", \"sex\")] <- c(0, 0, 0, 0, 1) fye_mids <- mice(   data = fye,   method = method,   predictorMatrix = predictors,   seed = 20180624,   printFlag = TRUE ) fye <- complete(fye_mids)  # prepare for use setDT(fye) cols_we_want <- c(\"mcid\", \"cip6\") fye <- fye[, ..cols_we_want] fye[, cip6 := as.character(cip6)] fye <- fye[order(mcid)] setnames(fye, old = \"cip6\", new = \"start\")  # reinitialize random number seed set.seed(NULL)"},{"path":"/articles/art-07-graduation-rate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Graduation rate","text":"US, Integrated Postsecondary Education Data System (IPEDS) defines “graduation rate” fraction cohort full-time, first-time, degree-seeking undergraduates complete program within percentage (100%, 150%, 200%) “normal” time (typically 4 years) defined institution (NCES-IPEDS, 2020). MIDFIELD team typically uses 150% (6-year) definition. IPEDS definition excludes students attend college part-time, transfer one institution another, start college term Fall term. Moreover, IPEDS policy extend time limit students change majors (switchers) even student institution satisfied student graduated new major timely fashion. American Council Education (ACE) estimates definition graduation rate may exclude 60% students 4-year institutions (Cook Hartle, 2011). use metric ? graduation rates really matter? Cook Hartle say, yes … … eyes public, policy makers, media, provide clear, simple, logical—often misleading—number.","code":""},{"path":"/articles/art-07-graduation-rate.html","id":"using-less-restrictive-criteria","dir":"Articles","previous_headings":"Introduction","what":"Using less-restrictive criteria","title":"Graduation rate","text":"definition, graduation rate program-based outcome. Thus, one defines program affects outcome. example, consider student matriculating mechanical engineering (CIP code 141901) graduating 6 years industrial engineering (CIP code 143501). Applying IPEDS definition graduation rate, student counted graduate either program CIPs two programs match. contrast, MIDFIELD defines program 2-digit CIP computing graduation rate. example , mechanical industrial engineering programs Engineering (CIP code 14). Applying MIDFIELD definition graduation rate, student example counted Engineering graduate. MIDFIELD also includes transfer students, part-time students, students start college term. IPEDS-MIDFIELD comparison summarized table. Comparing graduation rate criteria","code":""},{"path":"/articles/art-07-graduation-rate.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Graduation rate","text":"midfieldr functions f() f() f() packages","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # print max 20 rows, otherwise 10 rows each head/tail options(datatable.print.nrows = 20, datatable.print.topn = 10)"},{"path":"/articles/art-07-graduation-rate.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Graduation rate","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")"},{"path":"/articles/art-07-timely-completion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Timely completion","text":"Students generally expect complete program within span years entry. Institutions typically use 6 year span, based IPEDS convention using 150% “normal time” 4-year institution define gradation rate. However, span program completion might considered “timely” highly dependent choices student makes transferring institutions changing majors. example, figure illustrates history two students enter Fall 2010 graduate Spring 2015. assume basis 6 years timely completion. Student first-time--college student timely completion (TC) term Spring 2016. completion timely degree term comes TC term. Student B transfer student, entering junior. already satisfied 2 years program requirements, TC term Spring 2014. completion timely degree term comes TC term.  entry term Term student enters institution earn first degree. degree, term student enters last institution record. timely completion span (TC span) Span years entry program completion considered timely. Depends heuristic used evaluate student’s history data record. timely completion term (TC term) Last term program completion considered timely. end TC span. degree term Term student earns first degree completing program.","code":""},{"path":"/articles/art-07-timely-completion.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Timely completion","text":"midfieldr functions () packages","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(datatable.print.nrows = 10, datatable.print.topn = 5)"},{"path":"/articles/art-07-timely-completion.html","id":"estimating-the-timely-completion-term","dir":"Articles","previous_headings":"","what":"Estimating the timely completion term","title":"Timely completion","text":"Simple heuristic: 6 years minus level entry Better: wold account students like , transfer, level, switchers","code":""},{"path":"/articles/art-07-timely-completion.html","id":"applying-the-timely-completion-term","dir":"Articles","previous_headings":"","what":"Applying the timely completion term","title":"Timely completion","text":"Untimely graduation? Grad reclassified nongrad TC exceeds data limit? Omit students study","code":""},{"path":"/articles/art-07-timely-completion.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Timely completion","text":"vignette code chunks collected single, condensed script.","code":""},{"path":"/articles/art-08-graduation-rate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Graduation rate","text":"US, Integrated Postsecondary Education Data System (IPEDS) defines “graduation rate” fraction cohort full-time, first-time, degree-seeking undergraduates complete program within percentage (100%, 150%, 200%) “normal” time (typically 4 years) defined institution [1]. MIDFIELD team typically uses 150% (6-year) definition. IPEDS definition excludes students attend college part-time, transfer one institution another, start college term Fall term. Moreover, IPEDS policy extend time limit students change majors (switchers) even student institution satisfied student graduated new major timely fashion. American Council Education (ACE) estimates definition graduation rate may exclude 60% students 4-year institutions [2]. use metric ? graduation rates really matter? Cook Hartle say, yes … … eyes public, policy makers, media, provide clear, simple, logical—often misleading—number.","code":""},{"path":"/articles/art-08-graduation-rate.html","id":"using-less-restrictive-criteria","dir":"Articles","previous_headings":"Introduction","what":"Using less-restrictive criteria","title":"Graduation rate","text":"definition, graduation rate program-based outcome. Thus, one defines program affects outcome. example, consider student matriculating mechanical engineering (CIP code 141901) graduating 6 years industrial engineering (CIP code 143501). Applying IPEDS definition graduation rate, student counted graduate either program CIPs two programs match. contrast, MIDFIELD defines program 2-digit CIP computing graduation rate. example , mechanical industrial engineering programs Engineering (CIP code 14). Applying MIDFIELD definition graduation rate, student example counted Engineering graduate. MIDFIELD also includes transfer students, part-time students, students start college term. IPEDS-MIDFIELD comparison summarized table. Comparing graduation rate criteria","code":""},{"path":"/articles/art-08-graduation-rate.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline","title":"Graduation rate","text":"Start Result ","code":""},{"path":"/articles/art-08-graduation-rate.html","id":"this-vignette-uses","dir":"Articles","previous_headings":"Introduction","what":"This vignette uses","title":"Graduation rate","text":"midfieldr functions f() f() f() packages data","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")  # optional code to control data.table printing options(   datatable.print.nrows = 10,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # load data tables from midfielddata data(student, term, degree)"},{"path":"/articles/art-08-graduation-rate.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Graduation rate","text":"vignette code chunks collected single, condensed script.","code":"# packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors","text":"Richard Layton. Maintainer, author, copyright holder. Russell Long. Data manager, author, copyright holder. Matthew Ohland. Author, copyright holder. Marisa Orr. Contributor, copyright holder. Susan Lord. Contributor, copyright holder. US National Science Foundation. Funder.","code":""},{"path":"/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our pledge","title":"Contributor code of conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Contributor code of conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement responsibilities","title":"Contributor code of conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor code of conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor code of conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement midfield@purdue.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement guidelines","title":"Contributor code of conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement guidelines","what":"1. Correction","title":"Contributor code of conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement guidelines","what":"2. Warning","title":"Contributor code of conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement guidelines","what":"3. Temporary Ban","title":"Contributor code of conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement guidelines","what":"4. Permanent Ban","title":"Contributor code of conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor code of conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/index.html","id":"midfieldr","dir":"","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Tools Studying MIDFIELD Student Unit Record Data R goal midfieldr provide tools working MIDFIELD data, resource longitudinal, de-identified, individual student unit records.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 33 US institutions (June 2021). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework major) institution time. midfieldr R package provides tools working MIDFIELD SURs. tools midfieldr work equally well research data MIDFIELD practice data midfielddata. midfielddata R package provides practice data (proportionate stratified sample MIDFIELD) longitudinal SURs nearly 98,000 undergraduates 12 institutions 1987–2016 organized four data tables:","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"brief usage example, compare counts engineering students race/ethnicity, sex, graduation status. Data manipulation performed using data.table package.","code":"# packages used  library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # Load the data tables data(student, term, degree)  # Filter for engineering programs  DT <- term[cip6 %like% \"^14\", .(mcid, institution, cip6)] DT <- unique(DT)  # Ensure students are degree-seeking  DT <- filter_match(DT, match_to = student, by_col = \"mcid\")  # Estimate timely completion terms  DT <- add_timely_term(DT, midfield_term = term)  # Determine graduation status   DT <- add_completion_timely(DT, midfield_degree = degree) DT[, grad_status := fifelse(completion_timely, \"grad\", \"non-grad\")]  # Apply the data sufficiency criterion  DT <- add_data_sufficiency(DT, midfield_term = term) DT <- DT[data_sufficiency == TRUE]  # Obtain race/ethnicity and sex DT <- add_race_sex(DT, midfield_student = student)  # Count by grouping variables result <- DT[, .N, by = .(grad_status, sex, race)] result[order(grad_status, sex, race)] #>     grad_status    sex            race     N #>          <char> <char>          <char> <int> #>  1:        grad Female           Asian   182 #>  2:        grad Female           Black   433 #>  3:        grad Female Hispanic/Latinx    85 #>  4:        grad Female   International    30 #>  5:        grad Female Native American    14 #> ---                                          #> 24:    non-grad   Male Hispanic/Latinx   176 #> 25:    non-grad   Male   International   157 #> 26:    non-grad   Male Native American    38 #> 27:    non-grad   Male   Other/Unknown   113 #> 28:    non-grad   Male           White  4423"},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"R (>= 3.5.0) midfielddata practice working student unit records. data.table recommended data manipulation, required. ggplot2 recommended data graphics, required.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"install development version midfieldr GitHub, type Console: can confirm successful installation running following lines bring package help page Help window.  size, installing practice data takes time; please patient wait prompt “>” reappear. Console, run: can confirm successful installation running following lines bring package help page Help window.","code":"# install remotes if (!require(remotes)) install.packages(\"remotes\")  # install midfieldr remotes::install_github(\"MIDFIELDR/midfieldr\") library(\"midfieldr\") help(\"midfieldr-package\") # install midfielddata   install.packages(\"midfielddata\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") # be patient library(\"midfielddata\") help(\"midfielddata-package\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"contribute midfieldr, clone repo locally commit code separate branch. Please include runtime argument checks functions using checkmate write unit tests code using tinytest. Please use GitHub Issues page report bugs provide feedback. Participation open source project subject Code Conduct.","code":""},{"path":"/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfielddata Sample MIDFIELD student unit record data. MIDFIELD partnership US institutions. MIDFIELD workshops additional information tutorials.","code":""},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr licensed GPL (>= 2) © 2018 Richard Layton, Russell Long, Matthew Ohland, Susan Lord, Marisa Orr","code":""},{"path":"/LICENSE.html","id":"gnu-general-public-license","dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"/reference/add_completion_timely.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column to evaluate program completion — add_completion_timely","title":"Add a column to evaluate program completion — add_completion_timely","text":"Add column logical values (TRUE/FALSE) data frame indicating whether student completes program timely manner. Based information MIDFIELD degree data table equivalent.","code":""},{"path":"/reference/add_completion_timely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column to evaluate program completion — add_completion_timely","text":"","code":"add_completion_timely(dframe, midfield_degree, ..., details = NULL)"},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"dframe Data frame required variables mcid timely_term.","code":""},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-midfield_degree","dir":"Reference","previous_headings":"","what":"midfield_degree (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"midfield_degree MIDFIELD degree data table equivalent required variables mcid term.","code":""},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/add_completion_timely.html","id":"pkg-arg-details","dir":"Reference","previous_headings":"","what":"details (argument)","title":"Add a column to evaluate program completion — add_completion_timely","text":"details Optional flag add columns reporting information evaluation based, default FALSE.","code":""},{"path":"/reference/add_completion_timely.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column to evaluate program completion — add_completion_timely","text":"data.table following properties: Rows modified. Column completion_timely added option add           columns completion term_degree. Grouping structures preserved.","code":""},{"path":"/reference/add_completion_timely.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column to evaluate program completion — add_completion_timely","text":"Program completion typically considered timely occurs within specific span years admission. persistence metric depends program completion (graduation), students whose program completion timely counted graduates; students whose program completion untimely (taking longer specific span complete) counted non-graduates. input data frame dframe must include timely_term column obtained using add_timely_term() function. Completion considered timely : 1) student completed program; 2) degree term later estimated timely completion term. function performs subsetting. details TRUE, additional column(s) support finding returned well. extra columns completion indicating TRUE/FALSE student completed program term_degree degree table giving first term degree(s), , earned. Existing columns names added columns overwritten.","code":""},{"path":"/reference/add_data_sufficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column to evaluate data sufficiency — add_data_sufficiency","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"Add column logical values (TRUE/FALSE) data frame indicating whether available data include sufficient range years justify including student analysis. Based information MIDFIELD term data table equivalent.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"","code":"add_data_sufficiency(dframe, midfield_term, ..., details = NULL)"},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"dframe Data frame required variables institution timely_term.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"midfield_term MIDFIELD term data table equivalent required variables institution term.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"pkg-arg-details","dir":"Reference","previous_headings":"","what":"details (argument)","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"details Optional flag add columns reporting information evaluation based, default FALSE.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"data.table  following properties: Rows modified. Column data_sufficiency added option add           column inst_limit. Grouping structures preserved.","code":""},{"path":"/reference/add_data_sufficiency.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column to evaluate data sufficiency — add_data_sufficiency","text":"Program completion typically considered timely occurs within specific span years admission. Students admitted near last term available data generally excluded study data insufficient range fairly assess records. input data frame dframe must include timely_term column obtained using add_timely_term() function. Students can retained study estimated timely completion term later last term institution's data. result data_sufficiency column TRUE, student included research. FALSE, student excluded calculating persistence metric involving program completion (graduation). function performs subsetting. details TRUE, additional column(s) support finding returned well. extra column inst_limit, latest term reported institution available data. Existing columns names added columns overwritten.","code":""},{"path":"/reference/add_institution.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column of institution names — add_institution","title":"Add a column of institution names — add_institution","text":"Add column character values institution names (labels) using student ID join-variable. MIDFIELD practice data, labels anonymized. Institution names pulled MIDFIELD term data table equivalent.","code":""},{"path":"/reference/add_institution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column of institution names — add_institution","text":"","code":"add_institution(dframe, midfield_term)"},{"path":"/reference/add_institution.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column of institution names — add_institution","text":"dframe Data frame required variable mcid.","code":""},{"path":"/reference/add_institution.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Add a column of institution names — add_institution","text":"midfield_term MIDFIELD term data table equivalent required variables mcid, institutiion, term.","code":""},{"path":"/reference/add_institution.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column of institution names — add_institution","text":"data.table  following properties: Rows modified. Column institution added. Grouping structures preserved.","code":""},{"path":"/reference/add_institution.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column of institution names — add_institution","text":"student associated one institution, institution completed terms returned. existing column name added column overwritten.","code":""},{"path":"/reference/add_race_sex.html","id":null,"dir":"Reference","previous_headings":"","what":"Add one column each for student race/ethnicity and sex — add_race_sex","title":"Add one column each for student race/ethnicity and sex — add_race_sex","text":"Add two columns character values students' self-reported race/ethnicity sex using student ID join-variable. Based information MIDFIELD student data table equivalent.","code":""},{"path":"/reference/add_race_sex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add one column each for student race/ethnicity and sex — add_race_sex","text":"","code":"add_race_sex(dframe, midfield_student)"},{"path":"/reference/add_race_sex.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add one column each for student race/ethnicity and sex — add_race_sex","text":"dframe Data frame required variable mcid.","code":""},{"path":"/reference/add_race_sex.html","id":"pkg-arg-midfield_student","dir":"Reference","previous_headings":"","what":"midfield_student (argument)","title":"Add one column each for student race/ethnicity and sex — add_race_sex","text":"midfield_student MIDFIELD student data table equivalent required variables mcid, race, sex.","code":""},{"path":"/reference/add_race_sex.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add one column each for student race/ethnicity and sex — add_race_sex","text":"data.table  following properties: Rows modified. Columns race sex added. Grouping structures preserved.","code":""},{"path":"/reference/add_race_sex.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add one column each for student race/ethnicity and sex — add_race_sex","text":"Existing columns names added columns overwritten.","code":""},{"path":"/reference/add_timely_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column of timely completion terms — add_timely_term","title":"Add a column of timely completion terms — add_timely_term","text":"Add column academic term values data frame indicating latest term student can graduate considered timely completion. Student ID join-variable; terms encoded character strings YYYYT. Based information MIDFIELD term data table equivalent.","code":""},{"path":"/reference/add_timely_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column of timely completion terms — add_timely_term","text":"","code":"add_timely_term(   dframe,   midfield_term,   ...,   details = NULL,   span = NULL,   sched_span = NULL )"},{"path":"/reference/add_timely_term.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"dframe Data frame required variable mcid.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"midfield_term MIDFIELD term data table equivalent required variables mcid, term, level.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-details","dir":"Reference","previous_headings":"","what":"details (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"details Optional flag add columns reporting information evaluation based, default FALSE.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-span","dir":"Reference","previous_headings":"","what":"span (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"span Optional numeric scalar, number years define timely completion. Values 100 span\" (sched_span) commonly used. Default 6 years.","code":""},{"path":"/reference/add_timely_term.html","id":"pkg-arg-sched_span","dir":"Reference","previous_headings":"","what":"sched_span (argument)","title":"Add a column of timely completion terms — add_timely_term","text":"sched_span Optional numeric scalar, number years institution officially schedules completing program. Default 4 years.","code":""},{"path":"/reference/add_timely_term.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column of timely completion terms — add_timely_term","text":"data.table  following properties: Rows modified. Column timely_term added option add           columns term_i, level_i, adj_span. Grouping structures preserved.","code":""},{"path":"/reference/add_timely_term.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a column of timely completion terms — add_timely_term","text":"basic heuristic starts span number years student (default 6 years). span students admitted higher level first year reduced one year full year student assumed completed. example, student admitted second-year level assumed completed one year program, span reduced one year. Similarly, spans reduced two years students admitted 3rd-year level three years students admitted fourth-year level. adjusted span years added starting term; result timely completion term reported timely_term column. timely completion term used two evaluations: filtering data sufficiency (see add_data_sufficiency()) assessing completion timeliness (add_completion_timely()). details TRUE, additional column(s) support finding returned well. extra columns student's initial (admission) term term_i, initial level level_i, adjusted span adj_span. Existing columns names added columns overwritten.","code":""},{"path":"/reference/cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of academic programs — cip","title":"Table of academic programs — cip","text":"data table based US National Center Education Statistics (NCES), Integrated Postsecondary Education Data System (IPEDS), 2020 CIP, https://nces.ed.gov/ipeds/cipcode. data codes names 1582 instructional programs organized three levels: 2-digit series, 4-digit series, 6-digit series.","code":""},{"path":"/reference/cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of academic programs — cip","text":"","code":"cip"},{"path":"/reference/cip.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of academic programs — cip","text":"data.table 1582 rows 6 columns keyed 6-digit CIP code: cip6 Character 6-digit code representing \"specific   instructional programs\" (US National Center Education Statistics) cip6name Character program name 6-digit level cip4 Character 4-digit code (first 4 digits cip6)   representing \"intermediate groupings programs   comparable content objectives\" cip4name Character program name 4-digit level cip2 Character 2-digit code (first 2 digits cip6)   representing \"general groupings related programs\" cip2name Character program name 2-digit level","code":""},{"path":"/reference/cip.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of academic programs — cip","text":"midfielddata taxonomy includes one non-IPEDS code: 999999 Undecided Unspecified. instances   institutions reported program information students   enrolled program.","code":""},{"path":"/reference/condition_fye.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition FYE data for multiple imputation — condition_fye","title":"Condition FYE data for multiple imputation — condition_fye","text":"Filter first-year-engineering (FYE) students prepare variables predicting unknown starting majors. prepared variables institution, race, sex (predictors) cip6 (missing values imputed). function returns data frame formatted multiple imputation using mice package.","code":""},{"path":"/reference/condition_fye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition FYE data for multiple imputation — condition_fye","text":"","code":"condition_fye(dframe, midfield_term, ..., fye_codes = NULL)"},{"path":"/reference/condition_fye.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"dframe Data frame degree-seeking engineering students database, required variables mcid, race, sex.","code":""},{"path":"/reference/condition_fye.html","id":"pkg-arg-midfield_term","dir":"Reference","previous_headings":"","what":"midfield_term (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"midfield_term MIDFIELD term data table equivalent required variables mcid, institution, term, cip6.","code":""},{"path":"/reference/condition_fye.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/condition_fye.html","id":"pkg-arg-fye_codes","dir":"Reference","previous_headings":"","what":"fye_codes (argument)","title":"Condition FYE data for multiple imputation — condition_fye","text":"fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default 140102. Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes---start 14\"---ignored.","code":""},{"path":"/reference/condition_fye.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition FYE data for multiple imputation — condition_fye","text":"data.table following properties: One row every FYE student. Columns ID, institution, race, sex, CIP code,     except ID converted factors. Additional columns dframe     dropped. Grouping structures preserved.","code":""},{"path":"/reference/condition_fye.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition FYE data for multiple imputation — condition_fye","text":"US institutions first year engineering (FYE) programs, typically common first year curriculum prerequisite declaring engineering major. FYE programs problematic persistence metrics. example, conventional graduation rate metric, students count graduates complete program admitted. students graduate FYE; instead, upon completing FYE, transition degree-granting engineering program. Therefore, include FYE students persistence metric requiring degree-granting \"starting\" program, predict engineering program FYE student declared required enroll FYE. predict_fye() sorts students two categories: Students complete FYE declare engineering major.     easy case--student's first opportunity,     enrolled engineering program choosing. use     program predicted  starting program. Students , FYE, declare engineering major.     complicated case---data provide information     regarding engineering program student declared     originally institution required enroll FYE.     students, treat starting program missing data     predicted using multiple imputation. function extracts terms FYE students midfield_term. cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. first () post-FYE program identified. program engineering, CIP retained predicted starting major. , CIP replaced NA treated missing data imputation. Lastly, predictor variables (institution, race, sex) imputed variable (cip6) converted unordered factors. resulting data frame ready use input mice package.","code":""},{"path":"/reference/condition_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition multiway data for graphing — condition_multiway","title":"Condition multiway data for graphing — condition_multiway","text":"Transform data frame two categorical variables factors levels ordered medians quantitative variable. Rows columns data frame otherwise unaffected. primary goal structure data display Cleveland \"multiway dot plot,\" ordering levels panels crucial perception effects.","code":""},{"path":"/reference/condition_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition multiway data for graphing — condition_multiway","text":"","code":"condition_multiway(dframe, ..., details = NULL)"},{"path":"/reference/condition_multiway.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"dframe Data frame multiway data.","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"... used, forces later arguments used name.","code":""},{"path":"/reference/condition_multiway.html","id":"pkg-arg-details","dir":"Reference","previous_headings":"","what":"details (argument)","title":"Condition multiway data for graphing — condition_multiway","text":"details Optional flag add columns reporting medians order levels based, default FALSE.","code":""},{"path":"/reference/condition_multiway.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition multiway data for graphing — condition_multiway","text":"data.table following properties: Rows modified. Quantitative column modified. Categorical columns factors levels ordered median         quantitative values option add columns group medians. Grouping structures preserved.","code":""},{"path":"/reference/condition_multiway.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition multiway data for graphing — condition_multiway","text":"multiway data---defined Cleveland (1993) ---single quantitative value (response) every combination levels two categorical variables. condition_multiway() converts columns categorical variables factors orders factor levels increasing medians quantitative response variable. Note \"multiway\" context refers data structure graph design defined Cleveland, methods analysis described Kroonenberg (2008) . multiway dot plot, panels, individual dot plots display, levels, rows panel. One category encoded panels; rows. panels quantitative scale x-axis organization category levels y-axis. Panels rows ordered medians increase \"graph order\", , left right bottom top. Hence importance medians reported details argument. implementation, dframe argument must three columns : two categorical columns (type character factor) one quantitative column (type numeric).","code":""},{"path":"/reference/condition_multiway.html","id":"section-references","dir":"Reference","previous_headings":"","what":"References","title":"Condition multiway data for graphing — condition_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley, Hoboken, NJ.","code":""},{"path":"/reference/filter_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows by matching values in shared key columns — filter_match","title":"Subset rows by matching values in shared key columns — filter_match","text":"Subset rows one data frame values key column match values similar key column second data frame. Columns subset unless selected optional argument.","code":""},{"path":"/reference/filter_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"filter_match(dframe, match_to, by_col, ..., select = NULL)"},{"path":"/reference/filter_match.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"dframe Data frame subset returned. Must contain key column named by_col.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-match_to","dir":"Reference","previous_headings":"","what":"match_to (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"match_to Data frame key column values matched . column used required key column named by_col.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-by_col","dir":"Reference","previous_headings":"","what":"by_col (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"by_col Character scalar, name key column. Values key column must character strings.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"... used, force later arguments used name.","code":""},{"path":"/reference/filter_match.html","id":"pkg-arg-select","dir":"Reference","previous_headings":"","what":"select (argument)","title":"Subset rows by matching values in shared key columns — filter_match","text":"select Optional character vector dframe column names retain, default columns.","code":""},{"path":"/reference/filter_match.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows by matching values in shared key columns — filter_match","text":"data.table following properties: Rows matching values. columns specified select. Grouping structures preserved.","code":""},{"path":"/reference/filter_match.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows by matching values in shared key columns — filter_match","text":"Two data frames input. match_to data frame subset retain key column .  result merged dframe inner-join, returning rows dframe values matching key values match_to. Column subsetting occurs inner join, key column included vector column names select.","code":""},{"path":"/reference/filter_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_search","title":"Subset rows that include matches to search strings — filter_search","text":"Subset data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument. commonly used searching CIP data set.","code":""},{"path":"/reference/filter_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"filter_search(dframe, keep_text = NULL, ..., drop_text = NULL, select = NULL)"},{"path":"/reference/filter_search.html","id":"pkg-arg-dframe","dir":"Reference","previous_headings":"","what":"dframe (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"dframe Data frame searched.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-keep_text","dir":"Reference","previous_headings":"","what":"keep_text (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"keep_text Optional character vector search text retaining rows, default NULL.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"... used, force later arguments used name.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-drop_text","dir":"Reference","previous_headings":"","what":"drop_text (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"drop_text Optional character vector search text dropping rows, default NULL.","code":""},{"path":"/reference/filter_search.html","id":"pkg-arg-select","dir":"Reference","previous_headings":"","what":"select (argument)","title":"Subset rows that include matches to search strings — filter_search","text":"select Optional character vector column names return, default columns.","code":""},{"path":"/reference/filter_search.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_search","text":"data.table following properties: Rows matching elements keep_text excluding rows           matching elements drop_text. columns specified select. Grouping structures preserved.","code":""},{"path":"/reference/filter_search.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_search","text":"Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":"/reference/fye_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting programs imputed for FYE students — fye_start","title":"Starting programs imputed for FYE students — fye_start","text":"Degree-granting, engineering CIP codes can substituted First-Year-Engineering (FYE) codes required persistence metric.","code":""},{"path":"/reference/fye_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting programs imputed for FYE students — fye_start","text":"","code":"fye_start"},{"path":"/reference/fye_start.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting programs imputed for FYE students — fye_start","text":"data.table 5033 rows 2 columns keyed student ID. variables : mcid Character, anonymized student identifier start Character, 6-digit CIP code predicted          starting program","code":""},{"path":"/reference/fye_start.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting programs imputed for FYE students — fye_start","text":"FYE different non-degree-granting CIP designations \"undecided\" \"undeclared\". FYE students neither undecided undeclared---accepted institutions Engineering majors. Starting programs fye_start engineering programs predict students declared required enroll FYE. prediction based first post-FYE program imputation suitable multiple categorical variables using mice package. predictor variables institution, race, sex. predicted variable 6-digit CIP code degree-granting engineering program institution. fye_start holds practice data midfielddata---values commingled research database available MIDFIELD partners.","code":""},{"path":"/reference/midfieldr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"goal midfieldr provide tools working MIDFIELD data, resource longitudinal, de-identified, individual student unit records.","code":""},{"path":"/reference/midfieldr-package.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"MIDFIELD contains individual Student Unit Record (SUR) data 1.7M students 33 US institutions (June 2021). MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework major) institution time. proportionate stratified sample data (practice) available midfielddata, R data package longitudinal student unit-records 98,000 undergraduates 12 institutions  1987--2016 organized four data tables: student course term degree tools midfieldr work equally well practice data midfielddata research data MIDFIELD. work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"/reference/study_grad_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study graduation rate results — study_grad_rate","title":"Case-study graduation rate results — study_grad_rate","text":"Graduation rate metric results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results grouped program, race/ethnicity, sex. Used case study developed vignettes.","code":""},{"path":"/reference/study_grad_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study graduation rate results — study_grad_rate","text":"","code":"study_grad_rate"},{"path":"/reference/study_grad_rate.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study graduation rate results — study_grad_rate","text":"data.table 32 rows 3 columns keyed program, race/ethnicity, sex. program Character, instructional programs selected study race_sex Character, student race/ethnicity sex grad_rate Numerical, program graduation rate, persistence metric","code":""},{"path":"/reference/study_grad_rate.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study graduation rate results — study_grad_rate","text":"Graduation rate program fraction students starting program graduate program. Data also subset remove ambiguous levels race/ethnicity.","code":""},{"path":"/reference/study_programs.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study programs — study_programs","title":"Case-study programs — study_programs","text":"Data frame 6-digit CIP codes custom program names Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Used case study developed vignettes.","code":""},{"path":"/reference/study_programs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study programs — study_programs","text":"","code":"study_programs"},{"path":"/reference/study_programs.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study programs — study_programs","text":"data.table 12 rows 2 columns keyed 6-digit CIP code. variables : cip6 Character 6-digit code representing \"specific instructional        programs\" (US National Center Education Statistics) program Program name assigned grouping, summarizing,   joining","code":""},{"path":"/reference/study_programs.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study programs — study_programs","text":"program names shortened convenience creating graphs.","code":""},{"path":"/reference/study_stickiness.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness results — study_stickiness","title":"Case-study stickiness results — study_stickiness","text":"Stickiness metric results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results grouped program, race/ethnicity, sex. Used case study developed vignettes.","code":""},{"path":"/reference/study_stickiness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness results — study_stickiness","text":"","code":"study_stickiness"},{"path":"/reference/study_stickiness.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness results — study_stickiness","text":"data.table 31 rows 3 columns keyed program, race/ethnicity, sex. program Character, instructional programs selected study race_sex Character, student race/ethnicity sex stick Numerical, program stickiness, persistence metric","code":""},{"path":"/reference/study_stickiness.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study stickiness results — study_stickiness","text":"Stickiness program ratio number students graduating program number students ever enrolled program. quantitative response value combination levels two categorical variables, multiway data. However, responses NA observations exist removed small population size. Data also subset remove ambiguous levels race/ethnicity.","code":""},{"path":"/reference/study_students.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study students — study_students","title":"Case-study students — study_students","text":"Data frame student IDs program codes students ever enrolled Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata.","code":""},{"path":"/reference/study_students.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study students — study_students","text":"","code":"study_students"},{"path":"/reference/study_students.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study students — study_students","text":"data.table 8219 rows 2 columns keyed student ID. variables : mcid Character, anonymized student identifier cip6 Character 6-digit code representing \"specific instructional        programs\" (US National Center Education Statistics)","code":""},{"path":"/reference/study_students.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study students — study_students","text":"Data subset data sufficiency. include predicted starting programs FYE students.","code":""},{"path":"/reference/toy_course.html","id":null,"dir":"Reference","previous_headings":"","what":"Course data for examples — toy_course","title":"Course data for examples — toy_course","text":"small subset row column MIDFIELD course table use package examples.","code":""},{"path":"/reference/toy_course.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Course data for examples — toy_course","text":"","code":"toy_course"},{"path":"/reference/toy_course.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Course data for examples — toy_course","text":"data.table 4616 rows 6 columns keyed student ID. mcid Character, anonymized student identifier institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. term character, academic year term, format YYYYT abbrev character, course alpha identifier, e.g. ENGR, MATH,  ENGL, composite key (see id) number character, course numeric identifier, e.g. 101, 3429,  composite key (see id) grade character, course grade, e.g., +, , -, B+, , NG, etc.","code":""},{"path":"/reference/toy_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree data for examples — toy_degree","title":"Degree data for examples — toy_degree","text":"small subset row column MIDFIELD degree table use package examples.","code":""},{"path":"/reference/toy_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree data for examples — toy_degree","text":"","code":"toy_degree"},{"path":"/reference/toy_degree.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Degree data for examples — toy_degree","text":"data.table 64 rows 5 columns keyed student ID. mcid Character, anonymized student identifier institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. term character, academic year term, format YYYYT,  student completes program cip6 character, 6-digit CIP code program student  earns degree degree character, type degree awarded, e.g., Bachelor's  Degree, Bachelor Arts, Bachelor Science, etc.","code":""},{"path":"/reference/toy_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data for examples — toy_student","title":"Student data for examples — toy_student","text":"small subset row column MIDFIELD student table use package examples.","code":""},{"path":"/reference/toy_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data for examples — toy_student","text":"","code":"toy_student"},{"path":"/reference/toy_student.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data for examples — toy_student","text":"data.table 100 rows 6 columns keyed student ID. mcid Character, anonymized student identifier institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. transfer Character, stating whether student First-Time       College students First-Time Transfer student hours_transfer Numeric, transfer hours accepted institution race Character, race/ethnicity self-reported student,       e.g., Asian, Black, Hispanic/LatinX, etc. sex character, sex self-reported student, values       Female, Male, Unknown","code":""},{"path":"/reference/toy_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Term data for examples — toy_term","title":"Term data for examples — toy_term","text":"small subset row column MIDFIELD term table use package examples.","code":""},{"path":"/reference/toy_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term data for examples — toy_term","text":"","code":"toy_term"},{"path":"/reference/toy_term.html","id":"section-format","dir":"Reference","previous_headings":"","what":"Format","title":"Term data for examples — toy_term","text":"data.table 169 rows 6 columns keyed student ID. mcid Character, anonymized student identifier institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. term character, academic year term, format YYYYT cip6 character, 6-digit CIP code program student  enrolled term level character, 01 Freshman, 02 Sophomore, etc. hours_term numeric, credit hours earned term","code":""},{"path":"/news/index.html","id":"midfieldr-1009017--2021-06","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9017 / 2021-06","title":"midfieldr 1.0.0.9017 / 2021-06","text":"Significant changes earlier versions, backwards compatibility, prompting version number change 1.0.0 Change practice data names match research data: student, course, term, degree Edit practice data values consistency research data values Revise built-data sets use vignettes Rd examples Switch wrapr coalesce %?% assigning default arguments Initial round runtime assertions unit tests complete Make function names arguments internally consistent Edit functions depend data.table functionality Make MIDFIELD data arguments explicit functions Remove dependency dplyr related packages Replace Travis CI GitHub Actions CI Use package checkmate runtime assertions Remove dependency installing midfielddata Switch package tinytest unit testing Overhaul midfieldr functions completely Update README midfielddata README","code":""},{"path":"/news/index.html","id":"midfieldr-010--2018-06","dir":"Changelog","previous_headings":"","what":"midfieldr 0.1.0 / 2018-06","title":"midfieldr 0.1.0 / 2018-06","text":"Development version public GitHub","code":""}]
