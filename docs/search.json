[{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Getting started","text":"student-level data Data “student-level” refers information individual students including, example, demographics, programs, academic standing, courses, grades, degrees. Also called Student Unit Records (SURs). MIDFIELD student-level data provided four data tables (student, course, term, degree) compiled institutions anonymized curated MIDFIELD data steward. observation Row data frame (student, course, term, degree) keyed student ID. variable Column data frame","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Getting started","text":"article: Overview dataset Summary variables typically encountered using midfieldr functions Closer look: one student, records datasets Introduce helper function select_required() wrapr check_equiv_frames() Reminder.   midfielddata suitable learning work student-level data drawing inferences program attributes student experiences. midfielddata supplies practice data, research data.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Getting started","text":"Start.   writing script follow along, use packages article: Load data tables.   Data tables can loaded individually collectively needed. View data dictionaries via ?student, ?course, ?term, ?degree.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load one table as needed data(student)  # Or load multiple tables data(course, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"student","dir":"Articles","previous_headings":"","what":"student","title":"Getting started","text":"Contains one observation per student. Data assumed current time student admitted institution. Student IDs institution names anonymized remove identifiable information. Race/ethnicity sex often used grouping variables. Counts category.","code":"student #>                  mcid   institution              transfer hours_transfer #>                <char>        <char>                <char>          <num> #>     1: MCID3111142225 Institution B   First-Time Transfer             NA #>     2: MCID3111142283 Institution J   First-Time Transfer             NA #>     3: MCID3111142290 Institution J   First-Time Transfer             NA #>    ---                                                                   #> 97553: MCID3112898894 Institution B First-Time in College             NA #> 97554: MCID3112898895 Institution B First-Time in College             NA #> 97555: MCID3112898940 Institution B First-Time in College             NA #>                 race    sex age_desc us_citizen home_zip high_school sat_math #>               <char> <char>   <char>     <char>   <char>      <char>    <num> #>     1:         Asian   Male Under 25        Yes     <NA>        <NA>       NA #>     2:         Asian Female Under 25        Yes    22020        <NA>      560 #>     3:         Asian   Male Under 25        Yes    23233      471872      510 #>    ---                                                                        #> 97553:         White Female Under 25        Yes    53716      501160      510 #> 97554:         White Female Under 25        Yes    53029      500853      420 #> 97555: Other/Unknown   Male Under 25        Yes    20016      090073      470 #>        sat_verbal act_comp #>             <num>    <num> #>     1:         NA       NA #>     2:        230       NA #>     3:        380       NA #>    ---                     #> 97553:        590       24 #> 97554:        590       32 #> 97555:        540       32 # Anonymized IDs sample(student$mcid, 8) #> [1] \"MCID3111478315\" \"MCID3111363338\" \"MCID3111216590\" \"MCID3111876789\" #> [5] \"MCID3112383444\" \"MCID3111948721\" \"MCID3111381575\" \"MCID3112827958\"  # Anonymized institutions sort(unique(student$institution)) #> [1] \"Institution B\" \"Institution C\" \"Institution J\" # Possible values sort(unique(student$race)) #> [1] \"Asian\"           \"Black\"           \"International\"   \"Latine\"          #> [5] \"Native American\" \"Other/Unknown\"   \"White\"  # Possible values sort(unique(student$sex)) #> [1] \"Female\"  \"Male\"    \"Unknown\" # N by institution student[order(institution), .N, by = \"institution\"] #>      institution     N #>           <char> <int> #> 1: Institution B 45660 #> 2: Institution C 26712 #> 3: Institution J 25183  # N by race student[order(race), .N, by = \"race\"] #>               race     N #>             <char> <int> #> 1:           Asian  4193 #> 2:           Black  1860 #> 3:   International  7354 #> 4:          Latine  5386 #> 5: Native American   403 #> 6:   Other/Unknown  4509 #> 7:           White 73850  # N by sex student[order(sex), .N, by = \"sex\"] #>        sex     N #>     <char> <int> #> 1:  Female 46403 #> 2:    Male 51151 #> 3: Unknown     1"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"course","dir":"Articles","previous_headings":"","what":"course","title":"Getting started","text":"Contains one observation per student per course. abbrev, number, discipline_midfield columns NA values, might useful one filtering specific course types. course column, hand, high number NA values.","code":"course #>                    mcid   institution term_course                   course #>                  <char>        <char>      <char>                   <char> #>       1: MCID3111142225 Institution B       19881       Microprocessor Lab #>       2: MCID3111142225 Institution B       19881           Neural Signals #>       3: MCID3111142225 Institution B       19881      Engineering Economy #>      ---                                                                   #> 3289530: MCID3112898940 Institution B       20181     Beginning Japanese 1 #> 3289531: MCID3112898940 Institution B       20181  Precalculus Mathematics #> 3289532: MCID3112898940 Institution B       20181 Deviance In U S  Society #>          abbrev number section         type faculty_rank hours_course  grade #>          <char> <char>  <char>       <char>       <char>        <num> <char> #>       1:   ECEN   2230     005         <NA>         <NA>            1      C #>       2:   ECEN   4811     001         <NA>         <NA>            3      C #>       3:   MCEN   4147     001         <NA>         <NA>            3     B+ #>      ---                                                                     #> 3289530:   JPNS   1010     009 Face-to-Face     Lecturer            5      C #> 3289531:   MATH   1150     012 Face-to-Face     Lecturer            4     C- #> 3289532:   SOCY   1004     100 Face-to-Face   Instructor            3      B #>                           discipline_midfield #>                                        <char> #>       1: Engineering: Electrical and Computer #>       2: Engineering: Electrical and Computer #>       3:              Engineering: Mechanical #>      ---                                      #> 3289530:    Language and Literature: Japanese #> 3289531:                          Mathematics #> 3289532:           Social Sciences: Sociology # Many NA values in this column sum(is.na(course$course)) #> [1] 1003976  # No NA values in these columns. sum(is.na(course$abbrev)) #> [1] 0 sum(is.na(course$number)) #> [1] 0 sum(is.na(course$discipline_midfield)) #> [1] 0"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"term","dir":"Articles","previous_headings":"","what":"term","title":"Getting started","text":"Contains one observation per student per term. Terms encoded YYYYT, YYYY year start academic year, T encodes semester quarter—Fall (1), Winter (2), Spring (3), Summer (4, 5, 6)—within academic year example, academic year 1995–96, 19951 encodes Fall 95–96 19953 encodes Spring 95–96 19954 encodes Summer 95–96 (first session) Different institutions supply data different time spans. Programs encoded cip6 variable, 6-digit character based 2010 Classification Instructional Programs (CIP) (NCES 2010). Student level used determining timely completion terms transfer students.","code":"term #>                   mcid   institution   term   cip6         level #>                 <char>        <char> <char> <char>        <char> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year #>      2: MCID3111142283 Institution J  19881 240102 01 First-year #>      3: MCID3111142283 Institution J  19883 240102 01 First-year #>     ---                                                          #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year #>                   standing   coop hours_term hours_term_attempt hours_cumul #>                     <char> <char>      <num>              <num>       <num> #>      1:      Good Standing     No          7                  7           7 #>      2: Academic Probation     No          6                  6           6 #>      3: Academic Probation     No         12                 12          18 #>     ---                                                                     #> 639913:      Good Standing     No         13                 13          13 #> 639914:      Good Standing     No         18                 18          18 #> 639915:      Good Standing     No         15                 15          15 #>         hours_cumul_attempt gpa_term gpa_cumul #>                       <num>    <num>     <num> #>      1:                   7     2.56      2.56 #>      2:                   6     1.85      1.85 #>      3:                  18     1.93      1.90 #>     ---                                        #> 639913:                  13     3.52      3.52 #> 639914:                  18     3.50      3.50 #> 639915:                  15     2.18      2.18 # Range of data by institution term[, .(min_term = min(term), max_term = max(term)), by = \"institution\"] #>      institution min_term max_term #>           <char>   <char>   <char> #> 1: Institution B    19881    20181 #> 2: Institution J    19881    20096 #> 3: Institution C    19901    20154 # A sample of cip6 values sort(unique(sample(term$cip6, 8))) #> [1] \"110101\" \"140102\" \"240102\" \"520201\" \"521401\" # Possible values sort(unique(term$level)) #> [1] \"01 First-year\"      \"02 Second-year\"     \"03 Third-year\"      #> [4] \"04 Fourth-year\"     \"05 Fifth-year Plus\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"degree","dir":"Articles","previous_headings":"","what":"degree","title":"Getting started","text":"Contains one observation per student per degree. dataset contains records graduates , thus number observations degree (49,665) less number observations student (97,555). term_degree cip6 variables indicate program student graduates. Number degrees earned per student.","code":"degree #>                  mcid   institution term_degree   cip6 #>                <char>        <char>      <char> <char> #>     1: MCID3111142225 Institution B       19881 141001 #>     2: MCID3111142290 Institution J       19921 141001 #>     3: MCID3111142294 Institution J       19903 141001 #>    ---                                                 #> 49663: MCID3112839623 Institution B       20181 160102 #> 49664: MCID3112845220 Institution B       20181 270101 #> 49665: MCID3112845673 Institution B       20174 090101 #>                                                          degree #>                                                          <char> #>     1:            Bachelor of Science in Electrical Engineering #>     2:            Bachelor of Science in Electrical Engineering #>     3:            Bachelor of Science in Electrical Engineering #>    ---                                                          #> 49663:                       Bachelor of Science in Linguistics #> 49664:                       Bachelor of Science in Mathematics #> 49665: Bachelor of Science in Speech Communication and Rhetoric # Count students by number of degrees by_id <- degree[, .(degree_count = .N), by = \"mcid\"] by_id[, .(N_students = .N), by = \"degree_count\"] #>    degree_count N_students #>           <int>      <int> #> 1:            1      49421 #> 2:            2        122"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"closer-look","dir":"Articles","previous_headings":"","what":"Closer look","title":"Getting started","text":"display records one specific student, using ID subset dataset. Student.   expected, student yields one row per student. Course.   student, records span 47 rows, one row per course. Term.   , records span 10 rows, one row per term. Degree.   example, records span 2 rows, one row per degree. degrees earned term, Spring 2009. students one degree earn term. example, next student earned degree 1996 second degree 1999. analyses, first baccalaureate degree used.","code":"# One student ID id_we_want <- \"MCID3112192438\" # Observations for a selected ID student[mcid == id_we_want] #>              mcid   institution              transfer hours_transfer   race #>            <char>        <char>                <char>          <num> <char> #> 1: MCID3112192438 Institution C First-Time in College             NA  White #>       sex age_desc us_citizen home_zip high_school sat_math sat_verbal act_comp #>    <char>   <char>     <char>   <char>      <char>    <num>      <num>    <num> #> 1: Female Under 25        Yes    80521        <NA>      580        390       27 # Observations for a selected ID course[mcid == id_we_want] #>               mcid   institution term_course                         course #>             <char>        <char>      <char>                         <char> #>  1: MCID3112192438 Institution C       20051 Key Academic Community Seminar #>  2: MCID3112192438 Institution C       20051       Humans and Other Animals #>  3: MCID3112192438 Institution C       20051            Health and Wellness #> ---                                                                         #> 45: MCID3112192438 Institution C       20093            Health and the Mind #> 46: MCID3112192438 Institution C       20093   Social Psychology Laboratory #> 47: MCID3112192438 Institution C       20093                    Group Study #>     abbrev number section         type              faculty_rank hours_course #>     <char> <char>  <char>       <char>                    <char>        <num> #>  1:     KA    192     009         <NA>                Instructor            3 #>  2:   BZCC    101     002         <NA>       Assistant Professor            3 #>  3:   EXCC    145     004         <NA> Non-Academic Professional            3 #> ---                                                                           #> 45:    PSY    121     001 Face-to-Face Non-Academic Professional            1 #> 46:    PSY    317     L02 Face-to-Face        Graduate Assistant            2 #> 47:    PSY    496     004 Face-to-Face                Instructor            3 #>      grade                        discipline_midfield #>     <char>                                     <char> #>  1:      A                           Academic Support #>  2:      B Biological and Biomedical Sciences: Botany #>  3:      A           Education: Physical and Coaching #> ---                                                   #> 45:     A+                                 Psychology #> 46:      A                                 Psychology #> 47:     A+                                 Psychology # Observations for a selected ID term[mcid == id_we_want] #>               mcid   institution   term   cip6              level      standing #>             <char>        <char> <char> <char>             <char>        <char> #>  1: MCID3112192438 Institution C  20051 451101      01 First-year Good Standing #>  2: MCID3112192438 Institution C  20053 190701      01 First-year Good Standing #>  3: MCID3112192438 Institution C  20061 451101     02 Second-year Good Standing #>  4: MCID3112192438 Institution C  20063 451101     02 Second-year Good Standing #>  5: MCID3112192438 Institution C  20071 451101      03 Third-year Good Standing #>  6: MCID3112192438 Institution C  20073 451101      03 Third-year Good Standing #>  7: MCID3112192438 Institution C  20081 451101      03 Third-year Good Standing #>  8: MCID3112192438 Institution C  20083 451101     04 Fourth-year Good Standing #>  9: MCID3112192438 Institution C  20091 451101     04 Fourth-year Good Standing #> 10: MCID3112192438 Institution C  20093 451101 05 Fifth-year Plus Good Standing #>       coop hours_term hours_term_attempt hours_cumul hours_cumul_attempt #>     <char>      <num>              <num>       <num>               <num> #>  1:     No         15                 15          15                  15 #>  2:     No         11                 11          26                  26 #>  3:     No         16                 16          42                  42 #>  4:     No          8                  8          50                  50 #>  5:     No         12                 12          62                  62 #>  6:     No         13                 13          75                  75 #>  7:    Yes         14                 14          89                  89 #>  8:     No         16                 16         105                 105 #>  9:     No         13                 13         118                 118 #> 10:     No         12                 12         130                 130 #>     gpa_term gpa_cumul #>        <num>     <num> #>  1:     3.80      3.80 #>  2:     3.40      3.63 #>  3:     3.25      3.49 #>  4:     3.81      3.54 #>  5:     3.75      3.58 #>  6:     3.38      3.54 #>  7:     3.79      3.58 #>  8:     3.75      3.61 #>  9:     4.00      3.65 #> 10:     4.00      3.68 # Observations for a selected ID degree[mcid == id_we_want] #>              mcid   institution term_degree   cip6 #>            <char>        <char>      <char> <char> #> 1: MCID3112192438 Institution C       20093 420101 #> 2: MCID3112192438 Institution C       20093 451101 #>                               degree #>                               <char> #> 1: Bachelor of Science in Psychology #> 2:     Bachelor of Arts in Sociology # Observations for a different ID degree[mcid == \"MCID3111315508\"] #>              mcid   institution term_degree   cip6 #>            <char>        <char>      <char> <char> #> 1: MCID3111315508 Institution C       19961 260101 #> 2: MCID3111315508 Institution C       19994 260701 #>                                        degree #>                                        <char> #> 1: Bachelor of Science in Biological Sciences #> 2:      Bachelor of Science in Animal Biology"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"select_required","dir":"Articles","previous_headings":"","what":"select_required()","title":"Getting started","text":"midfieldr convenience function reduce number columns MIDFIELD data table loading. Using function optional. select_required() selects columns typically required midfieldr functions. Operates data frame retain columns names match partially match search terms. Rows unaffected. primary benefit reducing screen clutter viewing data frames interactive session. disadvantage deleted columns unavailable unless first set aside copy source file reload using data() need . Arguments. midfield_x   MIDFIELD data frame, typically student, term, degree. select_add   Optional character vector search terms add default vector given c(\"mcid\", \"institution\", \"race\", \"sex\", \"^term\", \"cip6\", \"level\"). Argument, used, must used name. example, term records significantly compact select minimum set columns. can add columns need .","code":"# Select variables required by midfieldr functions select_required(term) #>                   mcid   institution   term   cip6         level #>                 <char>        <char> <char> <char>        <char> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year #>      2: MCID3111142283 Institution J  19881 240102 01 First-year #>      3: MCID3111142283 Institution J  19883 240102 01 First-year #>     ---                                                          #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year # Select additional columns select_required(term, select_add = c(\"gpa_term\")) #>                   mcid   institution   term   cip6         level gpa_term #>                 <char>        <char> <char> <char>        <char>    <num> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year     2.56 #>      2: MCID3111142283 Institution J  19881 240102 01 First-year     1.85 #>      3: MCID3111142283 Institution J  19883 240102 01 First-year     1.93 #>     ---                                                                   #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year     3.52 #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year     3.50 #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year     2.18"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"check_equiv_frames","dir":"Articles","previous_headings":"","what":"check_equiv_frames()","title":"Getting started","text":"function imported wrapr package confirms two data frames equivalent reordering columns rows. Accessible loading midfieldr. Example.   Demonstrate following implementations select_required() yield identical results. Demonstrate row column order ignored. two data tables content, return FALSE. explore differences non-equivalent data frames, janitor::compare_df_cols() returns comparison column names class.","code":"# Required argument explicitly named x <- select_required(midfield_x = term)  # Required argument not named y <- select_required(term)  # Optional argument, if used, must be named. NULL yields the default columns. z <- select_required(term, select_add = NULL)  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE check_equiv_frames(x, z) #> [1] TRUE # Two columns from student, use key to order rows x <- student[, .(mcid, institution)] setkey(x, mcid) x #> Key: <mcid> #>                  mcid   institution #>                <char>        <char> #>     1: MCID3111142225 Institution B #>     2: MCID3111142283 Institution J #>     3: MCID3111142290 Institution J #>    ---                              #> 97553: MCID3112898894 Institution B #> 97554: MCID3112898895 Institution B #> 97555: MCID3112898940 Institution B  # Same information with different row order, column order, and key y <- student[, .(institution, mcid)] setkey(y, institution) y #> Key: <institution> #>          institution           mcid #>               <char>         <char> #>     1: Institution B MCID3111142225 #>     2: Institution B MCID3111142689 #>     3: Institution B MCID3111142729 #>    ---                              #> 97553: Institution J MCID3112447751 #> 97554: Institution J MCID3112447753 #> 97555: Institution J MCID3112447754  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE # Demonstrate non-equivalence check_equiv_frames(student, degree) #> [1] FALSE library(janitor) compare_df_cols(student, degree) #>       column_name   student    degree #> 1        act_comp   numeric      <NA> #> 2        age_desc character      <NA> #> 3            cip6      <NA> character #> 4          degree      <NA> character #> 5     high_school character      <NA> #> 6        home_zip character      <NA> #> 7  hours_transfer   numeric      <NA> #> 8     institution character character #> 9            mcid character character #> 10           race character      <NA> #> 11       sat_math   numeric      <NA> #> 12     sat_verbal   numeric      <NA> #> 13            sex character      <NA> #> 14    term_degree      <NA> character #> 15       transfer character      <NA> #> 16     us_citizen character      <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Getting started","text":"Preparation.   immediate prerequisites “intake” required reusable code chunk source data tables. Initial data processing.   summary code chunk ready reference. copy() function ensures “-reference” changes student, example, effect source_student (Dowle Srinivasan 2022). Thus source_* objects retain original columns, needed later.","code":"# Load source data data(student, term, degree) # Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Case study: Goals","text":"student-level data Data “student-level” refers information individual students including, example, demographics, programs, academic standing, courses, grades, degrees. Also called Student Unit Records (SURs). MIDFIELD student-level data provided four data tables (student, course, term, degree) compiled institutions anonymized curated MIDFIELD data steward. stickiness Program “stickiness” $\\small\\left(S\\right)$ ratio number graduates program $\\small\\left(N_g\\right)$ number ever enrolled program $\\small\\left(N_e\\right)$. $$   \\small S = \\frac{N_g}{N_e} = \\frac{\\mathrm{number\\ \\ graduates\\ \\ \\ program}}{\\mathrm{number\\ ever\\ enrolled\\ \\ \\ program}}   $$ Stickiness -inclusive alternative graduation rate measure program’s success attracting, keeping, graduating undergraduates. Stickiness includes many students excluded graduation rate part-time students, transfers, students admitted term, migrators (Ohland et al. 2012).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"goals","dir":"Articles","previous_headings":"","what":"Goals","title":"Case study: Goals","text":"Task Compute compare stickiness Civil, Electrical, Industrial, Mechanical Engineering programs students grouped race/ethnicity sex. Purpose case study illustrates work student-level data. Starting curated data concluding chart metric, focus throughout process underlying rationale. Constraint provide necessary code, limit discussion code (functions, arguments, syntax, etc.) meet constraint providing brief, yet complete, case study. discussions left later articles. One can always use R help system read data set function.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Case study: Data","text":"data processing goal reduce source data tables specific observations needed compute metrics. data processing tasks include filtering observations, creating, renaming, recoding variables, joining data frames. analysis organized produce two data frames—students ever enrolled programs students graduating programs—joined written file starting point developing results. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Case study: Data","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term, ?degree.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load practice data data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Case study: Data","text":"Select (optional).   Reduce number columns minimum needed midfieldr functions. Initialize.   Assign working data frame. often start term dataset. result 639,915 observations. case study, typically note number observations change.","code":"# Work with required midfieldr variables only student <- select_required(student) term <- select_required(term) degree <- select_required(degree) # Working data frame DT <- copy(term) DT #>                   mcid   institution   term   cip6         level #>                 <char>        <char> <char> <char>        <char> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year #>      2: MCID3111142283 Institution J  19881 240102 01 First-year #>      3: MCID3111142283 Institution J  19883 240102 01 First-year #>     ---                                                          #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Filter for data sufficiency","title":"Case study: Data","text":"student records near lower upper terms bound available data must excluded prevent false summaries involving timely degree completion. apply filter, first determine timely completion term. timely completion term last term student’s degree completion considered timely. many cases timely completion (TC) term 6 years admission. TC term can adjusted account transfer credits. (Currently, mechanism extending TC term co-ops migrators.) Add variables.   Using information term, add timely_term variable well supporting variables used construction. Add variables.   Using information term, add data_sufficiency variable well supporting variables used construction. data sufficiency criterion Student records limited available data sufficient assess timely completion without biased counts completers non-completers. Filter. filter retain observations data sufficient drop ID variable. result 76,875 observations.","code":"# Determine a timely completion term for every student DT <- add_timely_term(DT, term) DT #>                   mcid   institution   term   cip6         level term_i #>                 <char>        <char> <char> <char>        <char> <char> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year  19881 #>      2: MCID3111142283 Institution J  19881 240102 01 First-year  19881 #>      3: MCID3111142283 Institution J  19883 240102 01 First-year  19881 #>     ---                                                                 #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year  20181 #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year  20181 #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year  20181 #>               level_i adj_span timely_term #>                <char>    <num>      <char> #>      1: 01 First-year        6       19933 #>      2: 01 First-year        6       19933 #>      3: 01 First-year        6       19933 #>     ---                                    #> 639913: 01 First-year        6       20233 #> 639914: 01 First-year        6       20233 #> 639915: 01 First-year        6       20233 # Determine data sufficiency for every student DT <- add_data_sufficiency(DT, term) DT #>                   mcid   institution   term   cip6         level       level_i #>                 <char>        <char> <char> <char>        <char>        <char> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year 01 First-year #>      2: MCID3111142283 Institution J  19881 240102 01 First-year 01 First-year #>      3: MCID3111142283 Institution J  19883 240102 01 First-year 01 First-year #>     ---                                                                        #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year 01 First-year #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year 01 First-year #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year 01 First-year #>         adj_span timely_term term_i lower_limit upper_limit data_sufficiency #>            <num>      <char> <char>      <char>      <char>           <char> #>      1:        6       19933  19881       19881       20181    exclude-lower #>      2:        6       19933  19881       19881       20096    exclude-lower #>      3:        6       19933  19881       19881       20096    exclude-lower #>     ---                                                                      #> 639913:        6       20233  20181       19881       20181    exclude-upper #> 639914:        6       20233  20181       19881       20181    exclude-upper #> 639915:        6       20233  20181       19881       20181    exclude-upper # Retain observations having sufficient data DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid)] DT <- unique(DT) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-degree-seeking","dir":"Articles","previous_headings":"","what":"Filter for degree seeking","title":"Case study: Data","text":"inner join merge operation two data frames X Y returns observations (rows) match specified conditions . data.table syntax Y[X, j, ] j can used select columns. Filter.   Use inner join student retain degree-seeking students . Select ID column. result 76,875 observations. (change expected example students midfielddata practice data degree-seeking.) preserve data frame baseline set IDs used .","code":"# Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"identify-programs","dir":"Articles","previous_headings":"","what":"Identify programs","title":"Case study: Data","text":"MIDFIELD datasets, cip6 variable identifies 6-digit code program student enrolled given term. CIP Classification Instructional Programs, taxonomy academic programs curated US Department Education (NCES 2010). 2010 codes included midfieldr data set cip. already searched cip obtain codes four programs case study. first four digits 6-digit CIP codes : Civil Engineering 1408 Electrical Engineering 1410 Mechanical Engineering 1419 Industrial/Systems Engineering 1427, 1435, 1436, 1437. cip, obtain codes start selected 4-digit codes. Add variable.   User-defined program names nearly always required. Add variable label 15 programs one four conventional program abbreviations use comparing metrics, .e., Civil (CE), Electrical (EE), Mechanical (), Industrial/Systems Engineering (ISE). Confirm abbreviations match original 4-digit CIP names. also illustrate using options() change number data.table rows print. checked new abbreviations correctly represent programs, can finalize data frame program CIPs names.","code":"# Four engineering programs using 4-digit CIP codes selected_programs <- filter_cip(c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) selected_programs #>       cip2    cip2name   cip4                  cip4name   cip6 #>     <char>      <char> <char>                    <char> <char> #>  1:     14 Engineering   1408         Civil Engineering 140801 #>  2:     14 Engineering   1408         Civil Engineering 140802 #>  3:     14 Engineering   1408         Civil Engineering 140803 #> ---                                                            #> 13:     14 Engineering   1435    Industrial Engineering 143501 #> 14:     14 Engineering   1436 Manufacturing Engineering 143601 #> 15:     14 Engineering   1437       Operations Research 143701 #>                       cip6name #>                         <char> #>  1: Civil Engineering, General #>  2:   Geotechnical Engineering #>  3:     Structural Engineering #> ---                            #> 13:     Industrial Engineering #> 14:  Manufacturing Engineering #> 15:        Operations Research # Recode program labels. Edit as required. selected_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] # Preserve settings op <- options() # Edit number of rows to print options(datatable.print.nrows = 15)  # Confirm that abbreviations match the longer program names selected_programs[, .(cip4name, program)] #>                                                   cip4name program #>                                                     <char>  <char> #>  1:                                      Civil Engineering      CE #>  2:                                      Civil Engineering      CE #>  3:                                      Civil Engineering      CE #>  4:                                      Civil Engineering      CE #>  5:                                      Civil Engineering      CE #>  6:                                      Civil Engineering      CE #>  7: Electrical, Electronics and Communications Engineering      EE #>  8: Electrical, Electronics and Communications Engineering      EE #>  9: Electrical, Electronics and Communications Engineering      EE #> 10: Electrical, Electronics and Communications Engineering      EE #> 11:                                 Mechanical Engineering      ME #> 12:                                    Systems Engineering     ISE #> 13:                                 Industrial Engineering     ISE #> 14:                              Manufacturing Engineering     ISE #> 15:                                    Operations Research     ISE selected_programs <- selected_programs[, .(cip6, program)] selected_programs #>       cip6 program #>     <char>  <char> #>  1: 140801      CE #>  2: 140802      CE #>  3: 140803      CE #>  4: 140804      CE #>  5: 140805      CE #>  6: 140899      CE #>  7: 141001      EE #>  8: 141003      EE #>  9: 141004      EE #> 10: 141099      EE #> 11: 141901      ME #> 12: 142701     ISE #> 13: 143501     ISE #> 14: 143601     ISE #> 15: 143701     ISE  # Restore original settings options(op)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-ever-enrolled","dir":"Articles","previous_headings":"","what":"Gather ever-enrolled","title":"Case study: Data","text":"Reset   data frame baseline IDs intake section. result 76,875 observations. left join merge operation two data frames X Y returns observations (rows) X matching rows Y. data.table syntax Y[X, j, ] j can used select columns. Left join (add variable).   Returns rows DT rows term match mcid—effect, adding cip6 variable DT. Additionally, term contains multiple rows per ID, merged data frame also possibility multiple rows per ID. result 127,349 observations. Inner join (add variable, filter observations).   Returns rows DT study_programs match cip6. effect, add column program labels DT simultaneously filter DT retain rows match four case study programs . result 5657 observations. Filter.   students can change CIP codes remain within labeled group (e.g., ISE), drop cip6 code filter unique combinations ID program label. result 5653 observations. Copy.   Set aside ever enrolled information new name use later joining graduates.","code":"# IDs of data-sufficient, degree-seeking students DT <- copy(baseline) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Left-outer join from term to DT DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] DT <- unique(DT) DT #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142881 450601 #>     ---                       #> 127347: MCID3112800920 240102 #> 127348: MCID3112800920 240199 #> 127349: MCID3112870009 240102 # Join program names and retain desired programs only DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT #>         cip6 program           mcid #>       <char>  <char>         <char> #>    1: 141001      EE MCID3111142965 #>    2: 141001      EE MCID3111145102 #>    3: 141001      EE MCID3111146537 #>   ---                               #> 5655: 141901      ME MCID3112641399 #> 5656: 141901      ME MCID3112641535 #> 5657: 141901      ME MCID3112698681 # Filter for unique ID-program combinations DT[, cip6 := NULL] DT <- unique(DT) DT #>       program           mcid #>        <char>         <char> #>    1:      EE MCID3111142965 #>    2:      EE MCID3111145102 #>    3:      EE MCID3111146537 #>   ---                        #> 5651:      ME MCID3112641399 #> 5652:      ME MCID3112641535 #> 5653:      ME MCID3112698681 # Prepare for joining setcolorder(DT, c(\"mcid\", \"program\")) ever_enrolled <- copy(DT) ever_enrolled #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 5651: MCID3112641399      ME #> 5652: MCID3112641535      ME #> 5653: MCID3112698681      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-graduates","dir":"Articles","previous_headings":"","what":"Gather graduates","title":"Case study: Data","text":"Reset   data frame baseline IDs intake section. , result 76,875 observations. Add variables.   use term add timely_term variable supporting variables. Add variables.   use degree add completion_status variable supporting variables. timely completion criterion Completing program specified span years, many cases, within 6 years admission (150% “normal” 4-year span), possibly less transfer students. Filter.   Retain observations timely completers . Drop unnecessary variables. result 40,440 observations. Left join (add variables).   use left-join degree add CIP codes terms degrees earned. result 40,540 observations. Inner join (add variable, filter observations)   , add column program labels filter program. result 3266 observations. Filter.   Students may earned multiple degrees different terms. retain degrees earned first degree term . result 3264 observations. Filter.   Drop unnecessary variables filter unique observations ID program label. Copy.   Set aside graduates information new name use joining ever enrolled.","code":"# IDs of data-sufficient, degree-seeking students DT <- copy(baseline) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Add timely completion term DT <- add_timely_term(DT, term) DT #>                  mcid term_i       level_i adj_span timely_term #>                <char> <char>        <char>    <num>      <char> #>     1: MCID3111142689  19883 01 First-year        6       19941 #>     2: MCID3111142782  19883 01 First-year        6       19941 #>     3: MCID3111142881  19893 01 First-year        6       19951 #>    ---                                                          #> 76873: MCID3112785480  20071 01 First-year        6       20123 #> 76874: MCID3112800920  20101 01 First-year        6       20153 #> 76875: MCID3112870009  19951 01 First-year        6       20003 # Add completion status DT <- add_completion_status(DT, degree) DT #>                  mcid term_i       level_i adj_span timely_term term_degree #>                <char> <char>        <char>    <num>      <char>      <char> #>     1: MCID3111142689  19883 01 First-year        6       19941       19913 #>     2: MCID3111142782  19883 01 First-year        6       19941       19903 #>     3: MCID3111142881  19893 01 First-year        6       19951       19894 #>    ---                                                                      #> 76873: MCID3112785480  20071 01 First-year        6       20123        <NA> #> 76874: MCID3112800920  20101 01 First-year        6       20153        <NA> #> 76875: MCID3112870009  19951 01 First-year        6       20003        <NA> #>        completion_status #>                   <char> #>     1:            timely #>     2:            timely #>     3:            timely #>    ---                   #> 76873:              <NA> #> 76874:              <NA> #> 76875:              <NA> # Retain timely completers DT <- DT[completion_status == \"timely\"] DT <- DT[, .(mcid)] DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 40438: MCID3112692944 #> 40439: MCID3112694738 #> 40440: MCID3112730841 DT <- degree[DT, .(mcid, term_degree, cip6), on = c(\"mcid\")] DT #>                  mcid term_degree   cip6 #>                <char>      <char> <char> #>     1: MCID3111142689       19913 090401 #>     2: MCID3111142782       19903 260101 #>     3: MCID3111142881       19894 450601 #>    ---                                   #> 40538: MCID3112692944       20153 090101 #> 40539: MCID3112694738       20143 230101 #> 40540: MCID3112730841       20164 040401 # Join programs DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT #>         cip6 program           mcid term_degree #>       <char>  <char>         <char>      <char> #>    1: 141001      EE MCID3111142965       19901 #>    2: 141001      EE MCID3111145102       19893 #>    3: 141001      EE MCID3111146537       19913 #>   ---                                           #> 3264: 141901      ME MCID3112618976       20153 #> 3265: 141001      EE MCID3112619484       20133 #> 3266: 141901      ME MCID3112641535       20143 DT <- DT[, .SD[which.min(term_degree)], by = \"mcid\"] DT #>                 mcid   cip6 program term_degree #>               <char> <char>  <char>      <char> #>    1: MCID3111142965 141001      EE       19901 #>    2: MCID3111145102 141001      EE       19893 #>    3: MCID3111146537 141001      EE       19913 #>   ---                                           #> 3262: MCID3112618976 141901      ME       20153 #> 3263: MCID3112619484 141001      EE       20133 #> 3264: MCID3112641535 141901      ME       20143 # Filter for unique ID-program combinations DT[, c(\"cip6\", \"term_degree\") := NULL] DT <- unique(DT) DT #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 3262: MCID3112618976      ME #> 3263: MCID3112619484      EE #> 3264: MCID3112641535      ME # Prepare for joining setcolorder(DT, c(\"mcid\", \"program\")) graduates <- copy(DT) graduates #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 3262: MCID3112618976      ME #> 3263: MCID3112619484      EE #> 3264: MCID3112641535      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"add-groupings","dir":"Articles","previous_headings":"","what":"Add groupings","title":"Case study: Data","text":"plan group data program, bloc, race/ethnicity, sex. Program already present. Bloc labels added next. bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. Add variable.   add bloc variable ever enrolled graduates data frames joining. Join.   Combine two data frames rows, binding matching column names. result 8917 observations. grouping variables Detailed information student-level data characterize bloc records, typically used create bloc subsets comparison, example, program, race/ethnicity, sex, age, grade level, grades, etc. Add variables.   Use left join, matching mcid, add race/ethnicity sex data frame. Verify prepared data.   study_observations, included midfieldr, contains case study information developed . verify two data frames content. form, observations starting point part 3 case study.","code":"ever_enrolled[, bloc := \"ever_enrolled\"] graduates[, bloc := \"graduates\"] # Combine two data frames DT <- rbindlist(list(ever_enrolled, graduates), use.names = TRUE) DT #>                 mcid program          bloc #>               <char>  <char>        <char> #>    1: MCID3111142965      EE ever_enrolled #>    2: MCID3111145102      EE ever_enrolled #>    3: MCID3111146537      EE ever_enrolled #>   ---                                      #> 8915: MCID3112618976      ME     graduates #> 8916: MCID3112619484      EE     graduates #> 8917: MCID3112641535      ME     graduates # Join race/ethnicity and sex cols_we_want <- student[, .(mcid, race, sex)] DT <- cols_we_want[DT, on = c(\"mcid\")] DT #>                 mcid          race    sex program          bloc #>               <char>        <char> <char>  <char>        <char> #>    1: MCID3111142965 International   Male      EE ever_enrolled #>    2: MCID3111145102         White   Male      EE ever_enrolled #>    3: MCID3111146537         Asian Female      EE ever_enrolled #>   ---                                                           #> 8915: MCID3112618976         White   Male      ME     graduates #> 8916: MCID3112619484         White   Male      EE     graduates #> 8917: MCID3112641535         White   Male      ME     graduates # Demonstrate equivalence check_equiv_frames(DT, study_observations) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"closer-look","dir":"Articles","previous_headings":"","what":"Closer look","title":"Case study: Data","text":"examine study observations specific students better illustrate structure data. Example 1.   ID yields one observation . student enrolled Electrical Engineering complete one four case study programs. closer look student’s term record confirms result: student enrolled CIP 141001 (Electrical Engineering) switched CIP 110701 (Computer Science). degree record indicates student graduated Computer Science. Example 2.   ID yields two observations indicating student enrolled Industrial/Systems Engineering timely graduate program. term degree excerpts confirm observations. Example 3.   ID yields two observations indicating student enrolled Electrical Engineering Civil Engineering timely graduate neither program. term excerpt agrees; degree record shows graduated CIP 261399 (Biological Biomedical Sciences). Example 4.   ID yields four observations indicating student enrolled Civil, Electrical, Mechanical Engineering timely graduate Mechanical. term degree excerpts confirm observations.","code":"# Display one student by ID mcid_we_want <- \"MCID3111171519\" DT[mcid == mcid_we_want] #>              mcid   race    sex program          bloc #>            <char> <char> <char>  <char>        <char> #> 1: MCID3111171519  White   Male      EE ever_enrolled # Closer look at term term[mcid == mcid_we_want] #>              mcid   institution   term   cip6              level #>            <char>        <char> <char> <char>             <char> #> 1: MCID3111171519 Institution B  19883 149999     02 Second-year #> 2: MCID3111171519 Institution B  19891 141001     02 Second-year #> 3: MCID3111171519 Institution B  19893 141001      03 Third-year #> 4: MCID3111171519 Institution B  19901 141001      03 Third-year #> 5: MCID3111171519 Institution B  19903 110701     04 Fourth-year #> 6: MCID3111171519 Institution B  19913 110701     04 Fourth-year #> 7: MCID3111171519 Institution B  19921 110701 05 Fifth-year Plus #> 8: MCID3111171519 Institution B  19923 110701 05 Fifth-year Plus #> 9: MCID3111171519 Institution B  19924 110701 05 Fifth-year Plus  # Closer look at degree degree[mcid == mcid_we_want] #>              mcid   institution term_degree   cip6 #>            <char>        <char>      <char> <char> #> 1: MCID3111171519 Institution B       19924 110701 #>                                     degree #>                                     <char> #> 1: Bachelor of Science in Computer Science # Display one student by ID mcid_we_want <- \"MCID3111150194\" DT[mcid == mcid_we_want] #>              mcid   race    sex program          bloc #>            <char> <char> <char>  <char>        <char> #> 1: MCID3111150194  Black   Male     ISE ever_enrolled #> 2: MCID3111150194  Black   Male     ISE     graduates # Closer look at terms term[mcid == mcid_we_want] #>              mcid   institution   term   cip6              level #>            <char>        <char> <char> <char>             <char> #> 1: MCID3111150194 Institution J  19883 140102      01 First-year #> 2: MCID3111150194 Institution J  19891 140102     02 Second-year #> 3: MCID3111150194 Institution J  19893 140102     02 Second-year #> 4: MCID3111150194 Institution J  19903 143501      03 Third-year #> 5: MCID3111150194 Institution J  19911 143501     04 Fourth-year #> 6: MCID3111150194 Institution J  19913 143501     04 Fourth-year #> 7: MCID3111150194 Institution J  19921 143501 05 Fifth-year Plus #> 8: MCID3111150194 Institution J  19923 143501 05 Fifth-year Plus  # Closer look at degree degree[mcid == mcid_we_want] #>              mcid   institution term_degree   cip6 #>            <char>        <char>      <char> <char> #> 1: MCID3111150194 Institution J       19923 143501 #>                                           degree #>                                           <char> #> 1: Bachelor of Science in Industrial Engineering # Display one student by ID mcid_we_want <- \"MCID3111264877\" DT[mcid == mcid_we_want] #>              mcid   race    sex program          bloc #>            <char> <char> <char>  <char>        <char> #> 1: MCID3111264877  White   Male      EE ever_enrolled #> 2: MCID3111264877  White   Male      CE ever_enrolled # Closer look at term term[mcid == mcid_we_want] #>               mcid   institution   term   cip6              level #>             <char>        <char> <char> <char>             <char> #>  1: MCID3111264877 Institution B  19901 141001      01 First-year #>  2: MCID3111264877 Institution B  19903 140201     02 Second-year #>  3: MCID3111264877 Institution B  19911 140201     02 Second-year #>  4: MCID3111264877 Institution B  19913 140801      03 Third-year #>  5: MCID3111264877 Institution B  19914 140801      03 Third-year #>  6: MCID3111264877 Institution B  19921 240199      03 Third-year #>  7: MCID3111264877 Institution B  19923 261399     04 Fourth-year #>  8: MCID3111264877 Institution B  19931 261399     04 Fourth-year #>  9: MCID3111264877 Institution B  19933 261399 05 Fifth-year Plus #> 10: MCID3111264877 Institution B  19941 261399 05 Fifth-year Plus  # Closer look at degree degree[mcid == mcid_we_want] #>              mcid   institution term_degree   cip6 #>            <char>        <char>      <char> <char> #> 1: MCID3111264877 Institution B       19941 261399 #>                                                     degree #>                                                     <char> #> 1: Bachelor of Science in Evolution and Population Biology # Display one student by ID mcid_we_want <- \"MCID3112470255\" DT[mcid == mcid_we_want] #>              mcid   race    sex program          bloc #>            <char> <char> <char>  <char>        <char> #> 1: MCID3112470255  White   Male      CE ever_enrolled #> 2: MCID3112470255  White   Male      EE ever_enrolled #> 3: MCID3112470255  White   Male      ME ever_enrolled #> 4: MCID3112470255  White   Male      ME     graduates # Closer look at term term[mcid == mcid_we_want] #>               mcid   institution   term   cip6              level #>             <char>        <char> <char> <char>             <char> #>  1: MCID3112470255 Institution C  20101 140801      01 First-year #>  2: MCID3112470255 Institution C  20103 141001      01 First-year #>  3: MCID3112470255 Institution C  20111 141901     02 Second-year #>  4: MCID3112470255 Institution C  20113 141901     02 Second-year #>  5: MCID3112470255 Institution C  20121 141901      03 Third-year #>  6: MCID3112470255 Institution C  20123 141901      03 Third-year #>  7: MCID3112470255 Institution C  20124 141901      03 Third-year #>  8: MCID3112470255 Institution C  20131 141901     04 Fourth-year #>  9: MCID3112470255 Institution C  20133 141901     04 Fourth-year #> 10: MCID3112470255 Institution C  20141 141901 05 Fifth-year Plus #> 11: MCID3112470255 Institution C  20143 141901 05 Fifth-year Plus  # Closer look at degree degree[mcid == mcid_we_want] #>              mcid   institution term_degree   cip6 #>            <char>        <char>      <char> <char> #> 1: MCID3112470255 Institution C       20143 141901 #>                                           degree #>                                           <char> #> 1: Bachelor of Science in Mechanical Engineering"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Case study: Results","text":"goal segment group summarize observations saved previously, calculate stickiness metric, display results. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Case study: Results","text":"Start.   writing script follow along, use packages article: Loads midfieldr.   Prepared data. View data dictionary via ?study_observations. study_observations (derived Case study: Data).","code":"library(midfieldr) library(data.table) library(ggplot2)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"group-and-summarize","dir":"Articles","previous_headings":"","what":"Group and summarize","title":"Case study: Results","text":"Initialize.   Assign working data frame. study observations data frame designed one column grouping variable: race, sex, program, bloc. grouping variables Detailed information student-level data characterize bloc records, typically used create bloc subsets comparison, example, program, race/ethnicity, sex, age, grade level, grades, etc. Summarize.   Count numbers observations combination grouping variables.","code":"# Working data frame DT <- copy(study_observations) DT #>                 mcid          race    sex program          bloc #>               <char>        <char> <char>  <char>        <char> #>    1: MCID3111142965 International   Male      EE ever_enrolled #>    2: MCID3111142965 International   Male      EE     graduates #>    3: MCID3111145102         White   Male      EE ever_enrolled #>   ---                                                           #> 8915: MCID3112641535         White   Male      ME ever_enrolled #> 8916: MCID3112641535         White   Male      ME     graduates #> 8917: MCID3112698681         White   Male      ME ever_enrolled # Group and summarize DT <- DT[, .N, by = c(\"bloc\", \"program\", \"race\", \"sex\")] DT #>              bloc program            race    sex     N #>            <char>  <char>          <char> <char> <int> #>  1: ever_enrolled      EE   International   Male   195 #>  2:     graduates      EE   International   Male    90 #>  3: ever_enrolled      EE           White   Male   864 #> ---                                                    #> 96: ever_enrolled      CE Native American Female     1 #> 97:     graduates      CE Native American Female     1 #> 98:     graduates      EE   Other/Unknown Female     3"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"reshape","dir":"Articles","previous_headings":"","what":"Reshape","title":"Case study: Results","text":"Reshape.   Transform block-record form row-record form set stickiness metric calculation. Transforms N column two columns, one ever-enrolled one graduates. operation essentially transformation block records row records—process known number different names, e.g., pivot, crosstab, unstack, spread, widen (Mount Zumel 2019). step leaves graphing variables (program, race/ethnicity, sex) place.","code":"# Prepare to compute metric DT <- dcast(DT, program + sex + race ~ bloc, value.var = \"N\", fill = 0) DT #> Key: <program, sex, race> #>     program    sex            race ever_enrolled graduates #>      <char> <char>          <char>         <int>     <int> #>  1:      CE Female           Asian            15        10 #>  2:      CE Female           Black             4         1 #>  3:      CE Female   International            23        13 #> ---                                                        #> 48:      ME   Male Native American             5         1 #> 49:      ME   Male   Other/Unknown            80        41 #> 50:      ME   Male           White          1596       953"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"compute-the-metric","dir":"Articles","previous_headings":"","what":"Compute the metric","title":"Case study: Results","text":"metric quantitative measure derived student-level data. Includes statistical measures counts program starters graduates well comparative ratios graduation rate stickiness. Typically involves comparisons specific blocs students programs. stickiness Program “stickiness” $\\small\\left(S\\right)$ ratio number graduates program $\\small\\left(N_g\\right)$ number ever enrolled program $\\small\\left(N_e\\right)$. S=NgNe S = \\frac{N_g}{N_e} Create variable.   Compute stickiness. Verify built-data. avoid deriving data frame time needed articles, information provided study_results data frame included midfieldr. verify two data frames identical.","code":"# Compute the metric DT[, stickiness := round(100 * graduates / ever_enrolled, 1)] setkey(DT, NULL) DT #>     program    sex            race ever_enrolled graduates stickiness #>      <char> <char>          <char>         <int>     <int>      <num> #>  1:      CE Female           Asian            15        10       66.7 #>  2:      CE Female           Black             4         1       25.0 #>  3:      CE Female   International            23        13       56.5 #> ---                                                                   #> 48:      ME   Male Native American             5         1       20.0 #> 49:      ME   Male   Other/Unknown            80        41       51.2 #> 50:      ME   Male           White          1596       953       59.7 # Demonstrate equivalence check_equiv_frames(DT, study_results) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Case study: Results","text":"take several additional steps prepare data dissemination tables charts. Filtering. preserve anonymity people involved, remove observations fewer 10 graduates. Note.   MIDFIELD research findings regularly grouped program, race/ethnicity, sex. However, applied practice data groupings produce several groups totals threshold impose preserve anonymity, introducing number NA values resulting charts tables. NAs largely artifact applying groupings practice data. Filtering. Let us assume study focuses “domestic” students known race/ethnicity. case, omit observations labeled “International” /Unknown”. Creating variables. found useful report data variable combines race/ethnicity sex. Recoding values. Readers can readily interpret charts tables programs unabbreviated. one quantitative variable (stickiness) every combination levels two categorical variables (program race/ethnicity/sex), data multiway data (Cleveland 1993). one orders categorical variables critical visualizing effects. multiway data data set three variables: category m levels; second independent category n levels; quantitative variable (response) length mn value response combination levels two categorical variables. Conditioning. Convert two categorical variables ordered factors support ordering rows panels chart. column program_stickiness determines order programs chart; people_stickiness determines order race/ethnicity/sex groupings; values stickiness quantitative values graphed.","code":"# Preserve anonymity DT <- DT[graduates >= 10]  # Display the result DT #>     program    sex          race ever_enrolled graduates stickiness #>      <char> <char>        <char>         <int>     <int>      <num> #>  1:      CE Female         Asian            15        10       66.7 #>  2:      CE Female International            23        13       56.5 #>  3:      CE Female         White           263       162       61.6 #> ---                                                                 #> 27:      ME   Male        Latine            79        42       53.2 #> 28:      ME   Male Other/Unknown            80        41       51.2 #> 29:      ME   Male         White          1596       953       59.7 # Filter by study design DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")]  # Display the result DT #>     program    sex   race ever_enrolled graduates stickiness #>      <char> <char> <char>         <int>     <int>      <num> #>  1:      CE Female  Asian            15        10       66.7 #>  2:      CE Female  White           263       162       61.6 #>  3:      CE   Male  Asian            30        25       83.3 #> ---                                                          #> 18:      ME   Male  Black            30        19       63.3 #> 19:      ME   Male Latine            79        42       53.2 #> 20:      ME   Male  White          1596       953       59.7 # Create a variable DT[, people := paste(race, sex)] DT[, c(\"race\", \"sex\") := NULL] setcolorder(DT, c(\"program\", \"people\"))  # Display the result DT #>     program       people ever_enrolled graduates stickiness #>      <char>       <char>         <int>     <int>      <num> #>  1:      CE Asian Female            15        10       66.7 #>  2:      CE White Female           263       162       61.6 #>  3:      CE   Asian Male            30        25       83.3 #> ---                                                         #> 18:      ME   Black Male            30        19       63.3 #> 19:      ME  Latine Male            79        42       53.2 #> 20:      ME   White Male          1596       953       59.7 # Recode values for charts and tables DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )]  # Display the result DT #>        program       people ever_enrolled graduates stickiness #>         <char>       <char>         <int>     <int>      <num> #>  1:      Civil Asian Female            15        10       66.7 #>  2:      Civil White Female           263       162       61.6 #>  3:      Civil   Asian Male            30        25       83.3 #> ---                                                            #> 18: Mechanical   Black Male            30        19       63.3 #> 19: Mechanical  Latine Male            79        42       53.2 #> 20: Mechanical   White Male          1596       953       59.7 # Convert categorical variables to factors DT <- order_multiway(DT,   quantity = \"stickiness\",   categories = c(\"program\", \"people\"),   method = \"percent\",   ratio_of = c(\"graduates\", \"ever_enrolled\") )  # Display the result DT #>        program       people graduates ever_enrolled stickiness #>         <fctr>       <fctr>     <num>         <num>      <num> #>  1:      Civil Asian Female        10            15       66.7 #>  2:      Civil White Female       162           263       61.6 #>  3:      Civil   Asian Male        25            30       83.3 #> ---                                                            #> 18: Mechanical   Black Male        19            30       63.3 #> 19: Mechanical  Latine Male        42            79       53.2 #> 20: Mechanical   White Male       953          1596       59.7 #>     program_stickiness people_stickiness #>                  <num>             <num> #>  1:               63.5              62.7 #>  2:               63.5              60.5 #>  3:               63.5              62.8 #> ---                                      #> 18:               60.0              61.0 #> 19:               60.0              47.4 #> 20:               60.0              59.3"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"charts","dir":"Articles","previous_headings":"","what":"Charts","title":"Case study: Results","text":"first multiway chart, rows programs panels people, facilitating comparisons different program single group. Rows panels ordered bottom top order increasing stickiness. multiway chart multi-panel dot plot: horizontal, quantitative scales; rows encode one category; panels encode second category. panels identical axes. ordering rows panels crucial perception effects. Figure 1: Stickiness programs rows. vertical reference line overall stickiness people panel. Alternatively, can consider dual chart, swapping roles panels rows. rows people panels programs, facilitating comparisons different people within program. many years publishing research using MIDFIELD data, placing people rows multiway chart perhaps frequently used design. Figure 1: Stickiness programs panels. vertical reference line overall stickiness program panel. chart illustrates importance ordering rows panels. conclude Industrial/Systems Engineering stickiest program four, followed Civil, Mechanical, Electrical descending order. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. example, Asian students asymmetrically lower Industrial/Systems Engineering.","code":"ggplot(DT, aes(x = stickiness, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = people_stickiness), linetype = 2, color = \"gray60\") +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\") ggplot(DT, aes(x = stickiness, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_stickiness), linetype = 2, color = \"gray60\") +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"Case study: Results","text":"Data tables often needed publication. example, format data conventional row-record form groups people first column labeling rows program names labeling remaining columns. Groups numbers reporting threshold denoted NA omitted. Table 1. Progrm stickiness (%)","code":"# Select the columns I want for the table tbl <- DT[, .(program, people, stickiness)]  # Change factors to characters so rows/columns can be alphabetized tbl[, people := as.character(people)] tbl[, program := as.character(program)]  # Transform from block records to row records tbl <- dcast(tbl, people ~ program, value.var = \"stickiness\")  # Edit one column header setnames(tbl, old = \"people\", new = \"People\", skip_absent = TRUE)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Planning","text":"Working MIDFIELD data iterative—intermediate results often cause us revisit earlier assumption select different bloc student attributes work . Nevertheless, completed analysis usually comprises following steps roughly sequence given . Accented entries indicate topics open article. Records Programs Metrics, blocs, groupings Data sufficiency Degree seeking Identify programs Ever-enrolled FYE proxies Starters Graduates Program labels Demographics variables Graduation rate Stickiness Multiway charts Tables","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Planning","text":"student-level data Data “student-level” refers information individual students including, example, demographics, programs, academic standing, courses, grades, degrees. Also called Student Unit Records (SURs). MIDFIELD student-level data provided four data tables (student, course, term, degree) compiled institutions anonymized curated MIDFIELD data steward. program US academic field study. Can used indicate specialty within field collection fields within Department, College, University. Programs denoted Classification Instructional Programs (CIP), taxonomy academic programs curated US Department Education (NCES 2010). metric quantitative measure derived student-level data. Includes statistical measures counts program starters graduates well comparative ratios graduation rate stickiness. Typically involves comparisons specific blocs students programs. bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. grouping variables Detailed information student-level data characterize bloc records, typically used create bloc subsets comparison, example, program, race/ethnicity, sex, age, grade level, grades, etc.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-records","dir":"Articles","previous_headings":"","what":"Which records?","title":"Planning","text":"currently two points access MIDFIELD data: MIDFIELD.   database anonymized student-level records approximately 2.4M undergraduates 21 US institutions 1987-2022. Access database requires confidentiality agreement Institutional Review Board (IRB) approval human subjects research. midfielddata.   R data package supplies anonymized student-level records 98,000 undergraduates three US institutions 1988-2018. sample MIDFIELD database, midfielddata provides practice data tools methods midfieldr package. load research data.   users access MIDFIELD database, data imported using “read” function, e.g., load practice data.   Load midfielddata package. variables practice data subset research data. researcher transitioning working practice data research data find scripts need little () modification. Reminder.   midfielddata datasets practice, research.","code":"# Not run student <- fread(\"local_path_to_student_research_data\") course <- fread(\"local_path_to_course_research_data\") term <- fread(\"local_path_to_term_research_data\") degree <- fread(\"local_path_to_degree_research_data\") # Load practice data library(midfielddata) data(student, course, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-programs","dir":"Articles","previous_headings":"","what":"Which programs?","title":"Planning","text":"Identify programs general terms, example, Engineering Engineering, Business, Social Sciences, Arts Humanities Electrical Engineering Computer Engineering Search cip data set included midfieldr identify 6-digit CIP codes relevant study. Note.   examples involve engineering programs. However, MIDFIELD research data contain student-level records undergraduates programs institution time spans given.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-metrics-blocs-and-groupings","dir":"Articles","previous_headings":"","what":"Which metrics, blocs, and groupings?","title":"Planning","text":"data processing starts, decide metrics want compare among blocs students grouped variables. Metrics can include bloc counts comparative ratios, example: Blocs, e.g., counts starters, graduates, migrators, etc. Four-year persistence Six-year graduation rate Six-year stickiness metric determines blocs gather, example: Graduation rate requires bloc starters subset graduate starting program. Stickiness requires bloc ever enrolled program subset graduate program. research study design determines grouping variables, example, Completion status critical variable whenever graduation (program completion) involved. Programs, race/ethnicity, sex important grouping variables many studies. student-level variables institution, GPA, grade level, etc., can also used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Data sufficiency","text":"data range overall span academic terms student unit record data provided institution. particularly interested lower upper limits continuous range. timely completion term last term student’s degree completion considered timely. many cases timely completion (TC) term 6 years admission. TC term can adjusted account transfer credits. (Currently, mechanism extending TC term co-ops migrators.) data sufficiency criterion Student records limited available data sufficient assess timely completion without biased counts completers non-completers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"upper-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Upper-limit data sufficiency","title":"Data sufficiency","text":"students admitted near upper limit institution’s data range, available data cover insufficient number years know completion timely. illustrate, figure compare two students admitted different terms representative time spans shown timely completion. scenario, assume institution data available 1986 1996.  Figure 1: Upper limit data sufficiency. Student Student enters 1988 timely completion (TC) term 1994. following cases, data sufficiency criterion satisfied records included study. -1: First time college (FTIC), know first term entry term (.e., continuing student) can determine TC term. -2: Transfer student, know first term MIDFIELD institution. knowledge much time spent accumulating pre-MIDFIELD credit hours, can estimate TC term respect “level” entry, , entering first-year student, second-year student, etc. Student B Student B enters 1993 TC term 1998, two years beyond range data. several possible cases, B-1: data limit, student completes program (timely completion, known record) B-2: data limit, student leaves data base (non-completion, known record) B-3: data limit, student completes TC term (timely completion, record) B-4: data limit, student completes TC term fails complete (late completion non-completion, record) outcomes cases B-3 B-4 record, include case B-1 B-2 invariably produces miscount timely completers, late completers, non-completers. Thus student B records excluded study.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"lower-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Lower-limit data sufficiency","title":"Data sufficiency","text":"determine data sufficiency record exclusions lower limit data range, compare student’s first term (non-summer) first term data range (also non-summer). two terms identical, complete unit record excluded. illustrate three scenarios described .  Figure 2: Lower limit data sufficiency. Student Like Student Figure 1, enter dataset term following data lower limit included study. Student C Student C enters institution lower limit data range (“continuing” student) enter institution lower limit precisely. C-1: student C continuing, regardless status (FTIC transfer), making estimate TC term invariably leads false counts knowledge much time spent accumulating credit hours MIDFIELD institution lower data limit. Including C-1 also produce false counts student D (discussed ). C-2: student C continuing, , first time entry MIDFIELD institution lower data limit (, 1986), include study . Unfortunately, distinguish continuing students. exclude C-1 inherently excludes C-2 well. Student D Student D enters institution time continuing student C leaves database data lower limit term. D-1: Student D timely-complete program. case, include student C count non-completers low (D-1 cases missing), resulting inflated ratio completers non-completers. D-2: Student D timely-complete program. , include student C count completers low (D-2 cases missing), resulting diminished ratio completers non-completers. balance two effects unknowable. Since student D possibly included, Student C must also excluded.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Data sufficiency","text":"Specific student unit records upper lower limits institution’s data range must excluded prevent false counts due insufficient data. Based discussion , two specific filters implemented: Lower limit. IDs extant non-summer lower limit institution’s data range labeled possible exclusion. Upper limit. IDs timely completion term exceeds upper limit institution’s data range labeled possible exclusion. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Data sufficiency","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionary via ?term.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load data data(term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Data sufficiency","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Assign working data frame. Select.   ID column required. institution column , convenient taking closer look results. Filter.   Retain unique IDs.","code":"# Copy of source files with all variables source_term <- copy(term)  # Select variables required by midfieldr functions term <- select_required(source_term) # Working data frame DT <- copy(term) DT #>                   mcid   institution   term   cip6         level #>                 <char>        <char> <char> <char>        <char> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year #>      2: MCID3111142283 Institution J  19881 240102 01 First-year #>      3: MCID3111142283 Institution J  19883 240102 01 First-year #>     ---                                                          #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year # Retain the minimum number of columns DT <- DT[, .(mcid, institution)] # Filter for unique IDs DT <- unique(DT) DT #>                  mcid   institution #>                <char>        <char> #>     1: MCID3111142225 Institution B #>     2: MCID3111142283 Institution J #>     3: MCID3111142290 Institution J #>    ---                              #> 97553: MCID3112898894 Institution B #> 97554: MCID3112898895 Institution B #> 97555: MCID3112898940 Institution B"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"add_timely_term","dir":"Articles","previous_headings":"","what":"add_timely_term()","title":"Data sufficiency","text":"Add column data frame student-level data indicates latest term degree completion considered timely every student. Arguments. dframe   Data frame student-level records keyed student ID. Required variable (column) mcid. midfield_term   Data frame student-level term observations keyed student ID. Default term. Required variables (columns) mcid, term, level. span   Optional integer scalar, number years define timely completion. Commonly used values 100%, 150%, 200% sched_span. Default 6 years. Argument used name. sched_span   Optional integer scalar, number years institution officially schedules completing program. Default 4 years. Argument used name. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_i   Student initial term, encoded YYYYT. level_i   Student level (01 Freshman, 02 Sophomore, etc.) initial term. adj_span   Integer span years timely completion, adjusted student’s initial level timely_term   Latest term degree completion considered timely. Encoded YYYYT.","code":"# Required arguments in order and explicitly named x <- add_timely_term(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_timely_term(DT, term)  # Using the implicit default for the midfield_term argument z <- add_timely_term(DT)  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE check_equiv_frames(x, z) #> [1] TRUE # Add timely term column and supporting variables DT <- add_timely_term(DT, term) DT #>                  mcid   institution term_i       level_i adj_span timely_term #>                <char>        <char> <char>        <char>    <num>      <char> #>     1: MCID3111142225 Institution B  19881 01 First-year        6       19933 #>     2: MCID3111142283 Institution J  19881 01 First-year        6       19933 #>     3: MCID3111142290 Institution J  19881 01 First-year        6       19933 #>    ---                                                                        #> 97553: MCID3112898894 Institution B  20181 01 First-year        6       20233 #> 97554: MCID3112898895 Institution B  20181 01 First-year        6       20233 #> 97555: MCID3112898940 Institution B  20181 01 First-year        6       20233"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"closer-look","dir":"Articles","previous_headings":"add_timely_term()","what":"Closer look","title":"Data sufficiency","text":"Examining records selected students detail. Example 1.   student’s initial term Fall 2007 (encoded 20071) initial level 01 First-year. number years timely completion 6 years, , academic years 2007–08, 08–09, 09–10, 10–11, 11–12, 12–13. Thus timely completion term Spring 2013 (encoded 20123). Example 2.   student’s initial term Spring 2002 (encoded 20013) initial level 03 Third-year infer completed two years program, yielding adjusted span 4 years. four years encompass terms 20013–20021, 20023–20031, 20033–20041, 20043–20051, yielding timely completion term Fall 2005.","code":"# Display one student by ID DT[mcid == \"MCID3112785480\"] #>              mcid   institution term_i       level_i adj_span timely_term #>            <char>        <char> <char>        <char>    <num>      <char> #> 1: MCID3112785480 Institution C  20071 01 First-year        6       20123 # Display one student by ID DT[mcid == \"MCID3111860641\"] #>              mcid   institution term_i       level_i adj_span timely_term #>            <char>        <char> <char>        <char>    <num>      <char> #> 1: MCID3111860641 Institution J  20013 03 Third-year        4       20051"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"alternate-source-names","dir":"Articles","previous_headings":"add_timely_term()","what":"Alternate source names","title":"Data sufficiency","text":"Arguments midfieldr functions accept alternate names, source-data file names workspace named something student, term, etc. example, working “toy” (exercise) data sets included midfieldr, might write something like ,","code":"# A toy set of IDs toy_mcid <- toy_student[, .(mcid)]  # Source data table names that differ from the defaults toy_DT <- add_timely_term(dframe = toy_mcid, midfield_term = toy_term)  # Equivalently toy_DT <- add_timely_term(toy_mcid, toy_term) toy_DT #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #> ---                                                      #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"silent-overwriting","dir":"Articles","previous_headings":"add_timely_term()","what":"Silent overwriting","title":"Data sufficiency","text":"Existing columns names one added columns deleted replaced. Using toy data illustrate, drop columns added timely term except adj_span. Reapplying function, adj_span column silently deleted replaced.","code":"# Drop three columns toy_DT <- toy_DT[, c(\"term_i\", \"level_i\", \"timely_term\") := NULL] toy_DT # Demonstrate overwriting toy_DT <- add_timely_term(toy_DT, toy_term) toy_DT #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #> ---                                                      #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"add_data_sufficiency","dir":"Articles","previous_headings":"","what":"add_data_sufficiency()","title":"Data sufficiency","text":"Add column data frame Student Unit Record (SUR) observations labels row inclusion exclusion based data sufficiency near upper lower bounds institution’s data range. Arguments. dframe   Data frame student-level records keyed student ID. Required variables mcid timely_term. midfield_term   Data frame student-level term observations keyed student ID. Default term. Required variables mcid, institution, term. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_i   Student initial term, encoded YYYYT. lower_limit   Initial term institution’s data range, encoded YYYYT. upper_limit   Final term institution’s data range, encoded YYYYT. data_sufficiency   Label observation inclusion exclusion based data sufficiency: “include”, indicating available data sufficient estimating timely degree completion; “exclude-upper”, indicating data insufficient upper limit data range; “exclude-lower”, indicating data insufficient lower limit. Similar details described previous section, add_data_sufficiency() accepts Alternate source names uses Silent overwriting existing columns name one added columns.","code":"# Required arguments in order and explicitly named x <- add_data_sufficiency(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_data_sufficiency(DT, term)  # Using the implicit default for the midfield_term argument z <- add_data_sufficiency(DT)  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE check_equiv_frames(x, z) #> [1] TRUE # Un-clutter the printout DT <- DT[, .(mcid, institution, timely_term)]  # Add data sufficiency column and supporting variables DT <- add_data_sufficiency(DT, term) DT #>                  mcid   institution timely_term term_i lower_limit upper_limit #>                <char>        <char>      <char> <char>      <char>      <char> #>     1: MCID3111142225 Institution B       19933  19881       19881       20181 #>     2: MCID3111142283 Institution J       19933  19881       19881       20096 #>     3: MCID3111142290 Institution J       19933  19881       19881       20096 #>    ---                                                                         #> 97553: MCID3112898894 Institution B       20233  20181       19881       20181 #> 97554: MCID3112898895 Institution B       20233  20181       19881       20181 #> 97555: MCID3112898940 Institution B       20233  20181       19881       20181 #>        data_sufficiency #>                  <char> #>     1:    exclude-lower #>     2:    exclude-lower #>     3:    exclude-lower #>    ---                  #> 97553:    exclude-upper #> 97554:    exclude-upper #> 97555:    exclude-upper"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"closer-look-1","dir":"Articles","previous_headings":"add_data_sufficiency()","what":"Closer look","title":"Data sufficiency","text":"data range institutions : Example 3.   Exemplifies “Student ” Figure 1 Figure 2. student attends Institution C data range 1990–2015. student’s initial term Fall 2007 1990 lower-limit exclusion apply; student’s timely completion term Spring 2013, 2015 upper-limit exclusion apply. Example 4.   Exemplifies “Student B” Figure 1. student attends Institution B data range 1988–2018. student’s initial term Spring 2013 1988 lower-limit exclusion apply; student’s timely completion term Fall 2019, 2018 upper-limit exclusion apply. Example 5.   Exemplifies “Student C” Figure 2. student attends Institution B data range 1988–2009. student’s initial term Fall 1988 1988 lower-limit exclusion applies.","code":"# Data range by institution term[order(institution), .(min_term = min(term), max_term = max(term)), by = \"institution\"] #>      institution min_term max_term #>           <char>   <char>   <char> #> 1: Institution B    19881    20181 #> 2: Institution C    19901    20154 #> 3: Institution J    19881    20096 # Display one student by ID DT[mcid == \"MCID3112785480\"] #>              mcid   institution timely_term term_i lower_limit upper_limit #>            <char>        <char>      <char> <char>      <char>      <char> #> 1: MCID3112785480 Institution C       20123  20071       19901       20154 #>    data_sufficiency #>              <char> #> 1:          include # Display one student by ID DT[mcid == \"MCID3111170322\"] #>              mcid   institution timely_term term_i lower_limit upper_limit #>            <char>        <char>      <char> <char>      <char>      <char> #> 1: MCID3111170322 Institution B       20191  20133       19881       20181 #>    data_sufficiency #>              <char> #> 1:    exclude-upper # Display one student by ID DT[mcid == \"MCID3112056754\"] #>              mcid   institution timely_term term_i lower_limit upper_limit #>            <char>        <char>      <char> <char>      <char>      <char> #> 1: MCID3112056754 Institution J       19933  19881       19881       20096 #>    data_sufficiency #>              <char> #> 1:    exclude-lower"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Data sufficiency","text":"Preparation.   term data table intake section. Data sufficiency.   summary code chunk ready reference.","code":"DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Degree seeking","text":"degree-seeking Describes students advancing toward bachelor’s degree, accumulating credit hours program goal graduating institution.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Degree seeking","text":"design, student data table contains records degree-seeking students . use inner join student filter working data frame degree-seeking students. Filter source SURs data sufficiency. Filter degree seeking. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Degree seeking","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load practice data data(student, term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Degree seeking","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Assign working data frame. Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. preserve data frame baseline examples article.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"inner-joins","dir":"Articles","previous_headings":"","what":"Inner joins","title":"Degree seeking","text":"inner join merge operation returns observations (rows) two data frames match specified conditions . Using data.table syntax, two approaches: merge(X, Y, ) (similar base R) Y[X, j, ] (native data.table).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"using-mergex-y-by","dir":"Articles","previous_headings":"Inner joins","what":"Using merge(X, Y, by)","title":"Degree seeking","text":"general form inner join X data frame, matching rows returned Y data frame, matching rows returned vector shared column names merge = FALSE ensures inner join example, Y data frame student, extract ID column joining. Otherwise, columns data frames returned.","code":"merge(X, Y, by, all = FALSE) # Select columns in Y cols_we_want <- student[, .(mcid)]  # merge(X, Y) inner join merge(DT, cols_we_want, by = c(\"mcid\"), all = FALSE) #> Key: <mcid> #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"using-yx-j-on","dir":"Articles","previous_headings":"Inner joins","what":"Using Y[X, j, on]","title":"Degree seeking","text":"second approach—native data.table computationally efficient—form X data frame, matching rows returned Y data frame, matching rows returned j selects columns joined data frame retain (default columns) vector shared column names merge nomatch = NULL ensures inner join Demonstrate equivalence.   Showing two approaches produce result , inner joins, X Y interchangeable.","code":"Y[X, j, on, nomatch = NULL] # Y[X] inner join DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # merge(X, Y) w <- merge(DT, cols_we_want, by = c(\"mcid\"), all = FALSE) # merge(Y, X) x <- merge(cols_we_want, DT, by = c(\"mcid\"), all = FALSE) # X[Y] y <- DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] # Y[X] z <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL]  # Demonstrate equivalence check_equiv_frames(w, x) #> [1] TRUE check_equiv_frames(w, y) #> [1] TRUE check_equiv_frames(w, z) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"selecting-columns","dir":"Articles","previous_headings":"Inner joins","what":"Selecting columns","title":"Degree seeking","text":"either method, can select columns data frames. Using merge() select columns explicitly subsetting two data frames. X[Y, j] syntax, however, can list columns returned data frames j list, , .(var1, var2, etc.), without subsetting original two data frames. Demonstrate equivalence.   Showing two approaches produce result.","code":"# Selecting columns from both data frames, merge() inner join x <- merge(DT[, .(mcid)], student[, .(mcid, institution)], by = c(\"mcid\"), all = FALSE) setkey(x, NULL) x #>                  mcid   institution #>                <char>        <char> #>     1: MCID3111142689 Institution B #>     2: MCID3111142782 Institution J #>     3: MCID3111142881 Institution B #>    ---                              #> 76873: MCID3112785480 Institution C #> 76874: MCID3112800920 Institution B #> 76875: MCID3112870009 Institution B # Selecting columns from both data frames, X[Y] inner join y <- DT[student, .(mcid, institution), on = c(\"mcid\"), nomatch = NULL] y #>                  mcid   institution #>                <char>        <char> #>     1: MCID3111142689 Institution B #>     2: MCID3111142782 Institution J #>     3: MCID3111142881 Institution B #>    ---                              #> 76873: MCID3112785480 Institution C #> 76874: MCID3112800920 Institution B #> 76875: MCID3112870009 Institution B # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"degree-seeking","dir":"Articles","previous_headings":"","what":"Degree seeking","title":"Degree seeking","text":"Continue.   baseline data frame preserved earlier intake section. Filter. Use inner join student filter DT retain degree-seeking students. Filter.   Filter ensure IDs unique.","code":"# Reusable starting state DT <- copy(baseline) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Inner join for degree seeking DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] # One observation per ID DT <- unique(DT) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Degree seeking","text":"Preparation.   baseline data frame preserved earlier intake section. Degree seeking.   summary code chunk ready reference.","code":"DT <- copy(baseline) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Programs","text":"program US academic field study. Can used indicate specialty within field collection fields within Department, College, University. Programs denoted Classification Instructional Programs (CIP), taxonomy academic programs curated US Department Education (NCES 2010). CIP Classification Instructional Programs, taxonomy academic programs curated US Department Education (NCES 2010). 2010 codes included midfieldr data set cip. cip6 Character variable term degree data tables program observations. Values 6-digit CIP codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Programs","text":"search cip data set included midfieldr using variety techniques obtain set 6-digit CIP codes programs study. assign custom program names codes groups codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"taxonomy","dir":"Articles","previous_headings":"","what":"Taxonomy","title":"Programs","text":"Academic programs three levels codes names: 6-digit code, specific program 4-digit code, group 6-digit programs comparable content 2-digit code, grouping 4-digit groups related content Specialties within discipline encoded 6-digit level, discipline represented one 4-digit codes (roughly corresponding academic department), collection disciplines represented one 2-digit codes (roughly corresponding academic college). example, Geotechnical Engineering (140802) specialty Civil Engineering (1408) department college Engineering (14). illustrate taxonomy little detail, show table programs assigned 2-digit code 41, “Science Technologies, Technicians”. 2-digit grouping subdivided 5 groups 4-digit level (codes 4100–4199) subdivided 9 programs 6-digit level (codes 410000–419999). Table 1. CIP taxonomy 2-digit program can include anywhere four 4-digit programs (e.g., code 24 Liberal Arts Sciences, General Studies Humanities) 238 4-digit programs (e.g., code 51 Health Professions Related Clinical Sciences). 4-digit programs include anywhere one 6-digit program (e.g., code 4100 ) 37 6-digit programs (e.g., code 1313 Education). Unfortunately, disciplines can comprise one 4-digit code. example, programs comprise broad discipline Industrial Systems Engineering encompass four distinct 4-digit codes: 1427 Systems Engineering, 1435 Industrial Engineering, 1436 Manufacturing Engineering, 1437 Operations Research. Hence importance able search CIP data programs interest.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Programs","text":"Start.   writing script follow along, use packages article: Loads midfieldr.   Prepared data, adapted (NCES 2010). View data dictionary via ?cip. cip","code":"library(midfieldr) library(data.table)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"inspect-the-cip-data","dir":"Articles","previous_headings":"","what":"Inspect the cip data","title":"Programs","text":"First glance. variables cip character strings, protects leading zeros CIP codes. number unique programs. sample program names uses random number generator, result differ shown.","code":"# Loads with midfieldr cip #> Index: <cip6> #>         cip2                                                  cip2name   cip4 #>       <char>                                                    <char> <char> #>    1:     01 Agriculture, Agricultural Operations and Related Sciences   0100 #>    2:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    3:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>   ---                                                                         #> 1580:     54                                                   History   5401 #> 1581:     54                                                   History   5401 #> 1582:     99                         NonIPEDS - Undecided, Unspecified   9999 #>                                   cip4name   cip6 #>                                     <char> <char> #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>   ---                                             #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>                                               <char> #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>   ---                                                #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified # Names and class of the CIP variables cip[, lapply(.SD, class)] #>         cip2  cip2name      cip4  cip4name      cip6  cip6name #>       <char>    <char>    <char>    <char>    <char>    <char> #> 1: character character character character character character # 2-digit level sort(unique(cip$cip2)) #>  [1] \"01\" \"03\" \"04\" \"05\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"19\" \"22\" \"23\" #> [16] \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" #> [31] \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"54\" #> [46] \"99\"  # 4-digit level length(unique(cip$cip4)) #> [1] 394  # 6-digit level length(unique(cip$cip6)) #> [1] 1582 # 2-digit name sample sample(cip[, cip2name], 10) #>  [1] \"Education\"                                                    #>  [2] \"Foreign Languages, Literatures and Linguistics\"               #>  [3] \"Business, Management, Marketing and Related Support Services\" #>  [4] \"Engineering\"                                                  #>  [5] \"Family and Consumer Sciences, Human Sciences\"                 #>  [6] \"Engineering Technology\"                                       #>  [7] \"Health Professions and Related Clinical Sciences\"             #>  [8] \"Business, Management, Marketing and Related Support Services\" #>  [9] \"Health Professions and Related Clinical Sciences\"             #> [10] \"Physical Sciences\"  # 4-digit name sample sample(cip[, cip4name], 10) #>  [1] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [2] \"Applied Horticulture, Horticultural Business Services\"                  #>  [3] \"Ophthalmic and Optometric Support Services and Allied Professions\"      #>  [4] \"Specialized Sales, Merchandising and Marketing Operations\"              #>  [5] \"Engineering-Related Fields\"                                             #>  [6] \"Teacher Education and Professional Development, Specific Subject Areas\" #>  [7] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [8] \"Leatherworking and Upholstery\"                                          #>  [9] \"Health, Medical Preparatory Programs\"                                   #> [10] \"Research and Experimental Psychology\"  # 6-digit name sample sample(cip[, cip6name], 10) #>  [1] \"Soil Sciences, Other\"                                  #>  [2] \"Health, Medical Physics\"                               #>  [3] \"Adult Literacy Tutor, Instructor\"                      #>  [4] \"Environmental Design, Architecture\"                    #>  [5] \"Advanced, Graduate Dentistry and Oral Sciences, Other\" #>  [6] \"Dental Materials (MS, PhD)\"                            #>  [7] \"Drafting and Design Technology, Technician, General\"   #>  [8] \"Chemical Engineering Technology, Technician\"           #>  [9] \"Social Science Teacher Education\"                      #> [10] \"Sports and Exercise\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"filter_cip","dir":"Articles","previous_headings":"","what":"filter_cip()","title":"Programs","text":"Subset cip data frame, retaining rows match partially match vector character strings. Arguments. keep_text   Character vector search text retaining rows, case-sensitive. Can empty drop_text used. drop_text   Character vector search text dropping rows, case-sensitive, default NULL. Argument used name. cip   Data frame subset, default cip. Argument used name. select   Character vector column names search return, default columns. Argument used name. Equivalent usage.   following implementations yield identical results, Output.   Subset cip rows matching elements keep_text. Additional subsetting optional arguments specified. Examples follow.","code":"# First argument named, CIP argument if used must be named x <- filter_cip(keep_text = c(\"engineering\"), cip = cip)  # First argument unnamed, use default CIP argument y <- filter_cip(\"engineering\")  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-keyword-search","dir":"Articles","previous_headings":"","what":"Using a keyword search","title":"Programs","text":"Filtering CIP data programs containing word “engineering” yields 119 observations. drop_text select arguments named explicitly. Columns select subset filtering keep_text drop_text. Suppose want find CIP codes names programs Civil Engineering. search insensitive case, start following code chunk. Table 2. Search results search returns programs Civilization names well Engineering Technology. wanted Civil Engineering , can use sequence function calls, outcome one operation assigned first argument next operation. following code chunk read , “Start default cip data frame, keep rows ‘civil’ detected, keep rows ‘engineering’ detected, drop rows ‘technology’ detected.” first pass operates cip, successive passes . used, cip argument must named. Table 3. Search results Equivalent usage.   Seeing Civil Engineering programs cip4name, used keep_text = c(\"civil engineering\") narrow search rows match full phrase. following implementations yield identical results,","code":"# Filter basics filter_cip(\"engineering\") #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>  ---                                                                #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                   cip4name   cip6 #>                                                     <char> <char> #>   1:                                  Engineering, General 140101 #>   2:                                  Engineering, General 140102 #>   3: Aerospace, Aeronautical and Astronautical Engineering 140201 #>  ---                                                              #> 117:                             Military Applied Sciences 290301 #> 118:                             Military Applied Sciences 290303 #> 119:            Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>  ---                                                                  #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering # Optional arguments drop_text and select filter_cip(\"engineering\",   drop_text = c(\"related\", \"technology\", \"technologies\"),   select = c(\"cip6\", \"cip6name\") ) #>       cip6                                                     cip6name #>     <char>                                                       <char> #>  1: 140101                                         Engineering, General #>  2: 140102                                              Pre-Engineering #>  3: 140201 Aerospace, Aeronautical and Astronautical, Space Engineering #> ---                                                                     #> 52: 144401                                        Engineering Chemistry #> 53: 144501                           Biological, Biosystems Engineering #> 54: 149999                                           Engineering, Other # Example 1 filter using keywords filter_cip(\"civil\") # First search first_pass <- filter_cip(\"civil\")  # Refine the search second_pass <- filter_cip(\"engineering\", cip = first_pass)  # Refine further third_pass <- filter_cip(drop_text = \"technology\", cip = second_pass) # Three passes x <- filter_cip(\"civil\") x <- filter_cip(\"engineering\", cip = x) x <- filter_cip(drop_text = \"technology\", cip = x)  # Combined search y <- filter_cip(\"civil engineering\", drop_text = \"technology\")  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-numerical-code-search","dir":"Articles","previous_headings":"","what":"Using a numerical code search","title":"Programs","text":"Suppose want study programs relating German culture, language, literature. Using “german” keep_text value yields Table 4. Search results 6-digit program names find two interest, German Studies (050125) German Language Literature (160501). use character vector assign two codes keep_text argument. Table 5. Search results 6-digit codes entered integers, produce error.","code":"# Search on text filter_cip(\"german\") # Search on codes filter_cip(c(\"050125\", \"160501\")) # Search that produces an error filter_cip(c(050125, 160501)) #> Error in filter_cip(c(50125, 160501)): Assertion on 'keep_text' failed. Must be of class 'string', not 'double'."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-regular-expression-search","dir":"Articles","previous_headings":"","what":"Using a regular expression search","title":"Programs","text":"Specifying 4-digit codes yields data frame 6-digit programs containing 4-digit string. use regular expression notation ^ match start strings. Table 6. Search results 2-digit series represent general groupings related programs. , result includes History programs. Table 7. Search results series argument can include combination 2, 4, 6-digit codes. can also passed function character vector. Table 8. Search results","code":"# example 3 filter using regular expressions filter_cip(c(\"^1410\", \"^1419\")) # Search on 2-digit code filter_cip(\"^54\") # Search on vector of codes codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_cip(codes_we_want)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"when-search-terms-cannot-be-found","dir":"Articles","previous_headings":"","what":"When search terms cannot be found","title":"Programs","text":"keep_text argument includes terms found CIP data frame, unsuccessful terms identified message successful terms produce usual output. example, following keep_text argument includes three search terms present CIP data (“111111”, “^55”, “Bogus”) two (“050125” “160501”). However, seen earlier, none search terms found, error occurs.","code":"# Unsuccessful terms produce a message sub_cip <- filter_cip(c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) #> Can't find these terms: 111111, Bogus, ^55  # But the successful terms are returned sub_cip #>      cip2                                            cip2name   cip4 #>    <char>                                              <char> <char> #> 1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #> 2:     16      Foreign Languages, Literatures and Linguistics   1605 #>                                       cip4name   cip6 #>                                         <char> <char> #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #>                            <char> #> 1:                 German Studies #> 2: German Language and Literature # When none of the search terms are found filter_cip(c(\"111111\", \"Bogus\", \"^55\")) #> Error: The search result is empty. Possible causes are: #>  * 'cip' contained no matches to terms in 'keep_text'. #>  * 'drop_text' eliminated all remaining rows."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"cip-data-from-another-source","dir":"Articles","previous_headings":"","what":"CIP data from another source","title":"Programs","text":"use CIP data set another source, must structure cip: six character columns named follows,","code":"# Name and class of variables (columns) in cip unlist(lapply(cip, FUN = class)) #>        cip2    cip2name        cip4    cip4name        cip6    cip6name  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"assigning-program-names","dir":"Articles","previous_headings":"","what":"Assigning program names","title":"Programs","text":"Programs MIDFIELD data sets encoded 6-digit CIP codes. ’ve shown, multiple 6-digit codes can considered specialties within larger program 4-digit code even set distinct 4-digit codes. Thus program names cip generally inadequate grouping summarizing. User-defined program names nearly always required. studies require deliberate assignment user-defined program names CIP codes groups CIP codes. demonstrate creation data frame 6-digit CIP codes study plus user-defined names. searching cip, can find 4-digit codes four engineering programs : Civil (1408), Electrical (1410), Mechanical (1419), Industrial/Systems (1427, 1435, 1436, 1437). obtain 6-digit CIP codes. 4-digit names appropriate . task create variable custom program names. make assignments clear, approach assign new program column NA values, edit new column values.","code":"# Changing the number of rows to print options(datatable.print.nrows = 15)  # Four engineering programs four_programs <- filter_cip(c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\"))  # Retain the needed columns four_programs <- four_programs[, .(cip6, cip4name)] four_programs #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 142701                                    Systems Engineering #> 13: 143501                                 Industrial Engineering #> 14: 143601                              Manufacturing Engineering #> 15: 143701                                    Operations Research # Assign a new column four_programs[, program := NA_character_] four_programs #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering    <NA> #>  8: 141003 Electrical, Electronics and Communications Engineering    <NA> #>  9: 141004 Electrical, Electronics and Communications Engineering    <NA> #> 10: 141099 Electrical, Electronics and Communications Engineering    <NA> #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-cip4name-ilike-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"1. Use cip4name %ilike% to recode one value","title":"Programs","text":"%like% function essentially wrapper function around base R grepl() function. %ilike% version case-insensitive. can view help page running (back-ticks facilitate help search terms starting symbol): approach, search one distinctive term . ’re using abbreviations compact output.","code":"# Run in Console ? `%like%` # Recode program using the 4-digit name four_programs[cip4name %ilike% \"electrical\", program := \"EE\"] four_programs #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-cip6-like-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"2. Use cip6 %like% to recode one value","title":"Programs","text":"second approach, use %like% function , apply CIP code. use regular expression ^1408 meaning “starts 1408.”","code":"# Recode program using the 4-digit code four_programs[cip6 %like% \"^1408\", program := \"CE\"] four_programs #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering      CE #>  2: 140802                                      Civil Engineering      CE #>  3: 140803                                      Civil Engineering      CE #>  4: 140804                                      Civil Engineering      CE #>  5: 140805                                      Civil Engineering      CE #>  6: 140899                                      Civil Engineering      CE #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-program-fcase-to-edit-all-values","dir":"Articles","previous_headings":"Assigning program names","what":"3. Use program := fcase() to edit all values","title":"Programs","text":"approach, use data.table function fcase(), implementation SQL CASE statement. data.table function %chin% like %%, character vectors. Verify prepared data.   study_programs, included midfieldr, contains case study information developed . verify two data frames content.","code":"# Recode all program values four_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] four_programs <- four_programs[, .(cip6, program)] four_programs #>       cip6 program #>     <char>  <char> #>  1: 140801      CE #>  2: 140802      CE #>  3: 140803      CE #>  4: 140804      CE #>  5: 140805      CE #>  6: 140899      CE #>  7: 141001      EE #>  8: 141003      EE #>  9: 141004      EE #> 10: 141099      EE #> 11: 141901      ME #> 12: 142701     ISE #> 13: 143501     ISE #> 14: 143601     ISE #> 15: 143701     ISE # Demonstrate equivalence check_equiv_frames(four_programs, study_programs) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Programs","text":"Preparation.   provide working example, select four engineering programs case study used throughout articles (Civil, Electrical, Industrial/Systems, Mechanical Engineering). assume prior search cip yielded relevant codes used . Requires editing reuse different programs. Programs.   summary code chunk ready reference. Requires editing reuse different programs.","code":"# Edit as required for different programs selected_programs <- filter_cip(c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) # Recode program labels. Edit as required. selected_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] selected_programs <- selected_programs[, .(cip6, program)]"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Blocs","text":"bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. degree-seeking Describes students advancing toward bachelor’s degree, accumulating credit hours program goal graduating institution. ever-enrolled Bloc students whose term records include specified program least one term. migrators Bloc students leave one program enroll another. Also called switchers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Blocs","text":"use left joins add variables working data frame filter students ever-enrolled case study programs. Migrators () yield one observation (program) ID. Filter source student-level data data sufficiency degree-seeking. Gather ever-enrolled Filter program. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Blocs","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term, ?degree. Loads midfieldr.   Prepared data. View data dictionary via ?study_programs. study_programs (derived Programs).","code":"library(midfieldr) library(midfielddata) library(data.table) # Load practice data data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Blocs","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Assign working data frame. Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. Degree seeking.   Filter retain degree seeking students via inner join student. Code reproduced Degree seeking. Verify prepared data.   Many analyses begin, , filtering data sufficiency degree-seeking. convenience subsequent articles, set IDs included midfieldr data set baseline_mcid. verify two data frames content. preserve data frame baseline examples article.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT) # Demonstrate equivalence check_equiv_frames(DT, baseline_mcid) #> [1] TRUE baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"left-joins","dir":"Articles","previous_headings":"","what":"Left joins","title":"Blocs","text":"left join merge operation two data frames returns observations (rows) “left” data frame X matching rows “right” data frame Y. Using data.table syntax, two approaches: merge(X, Y, ) (similar base R) Y[X, j, ] (native data.table).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"using-mergex-y-by","dir":"Articles","previous_headings":"Left joins","what":"Using merge(X, Y, by)","title":"Blocs","text":"general form left join X “left” data frame, rows returned Y “right” data frame, matching rows returned vector shared column names merge .x = TRUE ensures left join example, Y data frame term, extract ID CIP columns join. Alternatively, one can select Y columns within merge operation.","code":"merge(X, Y, by, all.x = TRUE) # Subset of term data frame to join cols_we_want <- term[, .(mcid, cip6)]  # merge(X, Y, by) left join merge(DT, cols_we_want, by = c(\"mcid\"), all.x = TRUE) #> Key: <mcid> #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142782 260101 #>     ---                       #> 531417: MCID3112870009 240102 #> 531418: MCID3112870009 240102 #> 531419: MCID3112870009 240102 # merge(X, Y, by) left join merge(DT, term[, .(mcid, cip6)], by = c(\"mcid\"), all.x = TRUE) #> Key: <mcid> #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142782 260101 #>     ---                       #> 531417: MCID3112870009 240102 #> 531418: MCID3112870009 240102 #> 531419: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"using-yx-j-on","dir":"Articles","previous_headings":"Left joins","what":"Using Y[X, j, on]","title":"Blocs","text":"second approach—native data.table computationally efficient—form X “left” data frame, rows returned Y “right” data frame, matching rows returned j selects columns joined data frame retain vector shared column names merge Demonstrate equivalence. Showing two approaches produce result.","code":"Y[X, j, on] # Y[X, j, on] left join (data.table native syntax) term[DT, .(mcid, cip6), on = c(\"mcid\")] #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142782 260101 #>     ---                       #> 531417: MCID3112870009 240102 #> 531418: MCID3112870009 240102 #> 531419: MCID3112870009 240102 # merge(X, Y, by) left join x <- merge(DT, term[, .(mcid, cip6)], by = c(\"mcid\"), all.x = TRUE) setkey(x, NULL)  # Y[X, j, on] left join y <- term[DT, .(mcid, cip6), on = c(\"mcid\")]  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"left-join-matching-rules","dir":"Articles","previous_headings":"Left joins","what":"Left join matching rules","title":"Blocs","text":"Rows X match Y   NA values columns normally filled Y values. example, students DT earn degree. left join (degree DT), rows DT returned. IDs DT match degree NA term_degree column (variable degree source table). result 76,875 unique IDs 43,903 degrees. Rows X multiple matches Y   yields new row X every matching row Y. example, students DT enrolled multiple terms. left join (term DT), rows DT returned. IDs DT multiple matches term multiple rows result, differentiated values term column (variable term source table). result 76,875 unique IDs distributed 531,419 observations. “Left” “right” matter.   left joins (unlike inner joins), X[Y] Y[X] return different results: Y[X, j, ] returns rows X X[Y, j, ] returns rows Y","code":"x <- degree[DT, .(mcid, term_degree), on = c(\"mcid\")] setkeyv(x, c(\"mcid\")) x[] #> Key: <mcid> #>                  mcid term_degree #>                <char>      <char> #>     1: MCID3111142689       19913 #>     2: MCID3111142782       19903 #>     3: MCID3111142881       19894 #>     4: MCID3111142884        <NA> #>     5: MCID3111142893        <NA> #>    ---                            #> 76988: MCID3112727985        <NA> #> 76989: MCID3112730841       20164 #> 76990: MCID3112785480        <NA> #> 76991: MCID3112800920        <NA> #> 76992: MCID3112870009        <NA> x <- term[DT, .(mcid, term), on = c(\"mcid\")] setkeyv(x, c(\"mcid\", \"term\")) x[] #> Key: <mcid, term> #>                   mcid   term #>                 <char> <char> #>      1: MCID3111142689  19883 #>      2: MCID3111142782  19883 #>      3: MCID3111142782  19885 #>      4: MCID3111142782  19893 #>      5: MCID3111142782  19895 #>     ---                       #> 531415: MCID3112800920  20163 #> 531416: MCID3112870009  19951 #> 531417: MCID3112870009  19953 #> 531418: MCID3112870009  19954 #> 531419: MCID3112870009  19983 # What we want x <- degree[DT, .(mcid, term_degree), on = c(\"mcid\")]  # Not what we want y <- DT[degree, .(mcid, term_degree), on = c(\"mcid\")]  # Same content? check_equiv_frames(x, y) #> [1] FALSE  # Compare N rows nrow(x) #> [1] 76992 nrow(y) #> [1] 49665"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"ever-enrolled","dir":"Articles","previous_headings":"","what":"Ever-enrolled","title":"Blocs","text":"Work.   baseline data frame preserved earlier intake section. Add variable.   Use left join term DT add CIP variable. Filter.   Filter retain unique combinations ID CIP code.","code":"# Reusable starting state DT <- copy(baseline) DT[] #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Left-outer join from term to DT DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] # One observation per ID-CIP combination DT <- unique(DT) DT #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142881 450601 #>     ---                       #> 127347: MCID3112800920 240102 #> 127348: MCID3112800920 240199 #> 127349: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Blocs","text":"Filter.   “ever-enrolled” usually means “ever-enrolled specific programs,” bloc concludes filter program. Code reproduced Groupings.","code":"# Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT #>       program           mcid #>        <char>         <char> #>    1:      EE MCID3111142965 #>    2:      EE MCID3111145102 #>    3:      EE MCID3111146537 #>   ---                        #> 5651:      ME MCID3112641399 #> 5652:      ME MCID3112641535 #> 5653:      ME MCID3112698681"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Blocs","text":"Preparation.   baseline data frame preserved earlier intake section. Ever-enrolled.   summary code chunk ready reference. Requires editing study_programs reuse different programs.","code":"DT <- copy(baseline) # Ever-enrolled bloc DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] DT <- unique(DT)  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"potential-for-starter-miscounts","dir":"Articles","previous_headings":"","what":"Potential for starter miscounts","title":"FYE proxies","text":"US institutions, engineering students required complete First-Year Engineering (FYE) program prerequisite declaring engineering major. Administratively, degree-granting engineering programs Electrical Engineering Mechanical Engineering treat incoming post-FYE students “starting” cohorts. However, computing metric graduation rate requires count starters, FYE records must treated special care avoid miscount. illustrate potential miscounting starters, suppose wish calculate Mechanical Engineering () graduation rate. Students starting constitute starting pool fraction pool graduating graduation rate. FYE institutions, program typically define starting pool post-FYE cohort entering program. may best information available, invariably undercounts starters failing account FYE students leave institution switch non-engineering majors. absence FYE requirement students starters. neglecting students, count starters artificially low resulting graduation rate artificially high. true every degree-granting engineering major FYE institution. special nature FYE programs, address starter miscounts grouping FYE students admitted “undecided” “unknown” CIP codes—FYE students neither. admitted Engineering majors (2-digit CIP 14). simply don’t know degree-granting program (6-digit CIP) intended transition. Therefore, avoid miscounting starters FYE institutions, estimate 6-digit CIP codes degree-granting engineering programs FYE students declared required enroll FYE.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"FYE proxies","text":"FYE First-Year Engineering program, common-first-year curriculum prerequisite declaring engineering major US institutions. Denoted CIP code, FYE degree-granting program. FYE proxy estimate degree-granting engineering program FYE student enrolled required enroll FYE. proxy, 6-digit CIP code, denotes program FYE student can considered starter. bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. starters Bloc degree-seeking students initial terms enrolled degree-granting programs. migrators Bloc students leave one program enroll another. Also called switchers. multiple imputation Method imputing missing categorical data, case, imputing FYE proxy 6-digit CIP codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"FYE proxies","text":"apply prep_fye_mice() student term source files construct data frame suitable imputation using mice R package. procedure four steps: Use prep_fye_mice() midfieldr package estimate FYE proxy CIPs, treat remainder missing values, structure data frame imputation. Optional. default predictor variables (institution, race/ethnicity, sex) meet needs study, can define . Use mice() mice package impute 6-digit CIP missing values. Post-processing convert results useful form remove migrators. Three outcomes possible, depending goals available data: Use midfielddata practice data recreate fye_proxy data set included midfieldr—vignette. Use midfielddata practice data create alternate set FYE proxies based different random number seed different predictor variables. result IDs fye_proxy different ID-proxy pairings. Use MIDFIELD research data construct FYE proxies. given set source files, FYE proxies need created written file. result can used needed unless source files change. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"FYE proxies","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term. Loads midfieldr.   Prepared data, derived Programs. View data dictionary via ?study_programs. study_programs","code":"library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\") library(\"mice\") # Load practice data data(student, term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"FYE proxies","text":"Unlike initial processing previous articles, filter data sufficiency degree seeking. Select (optional).   Reduce number columns. Code reproduced Getting started.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"prep_fye_mice","dir":"Articles","previous_headings":"","what":"prep_fye_mice()","title":"FYE proxies","text":"purpose prep_fye_mice() preparing data frame mice R package. Operates complete, unfiltered student term source data create data frame three predictor variables FYE proxy variable. values proxy determined student’s first post-FYE program code, follows: Post-FYE Engineering.   student completes FYE enrolls engineering major. outcome, know student’s first opportunity, enrolled engineering major choosing. CIP code program returned student’s FYE proxy. Post-FYE Engineering.   student migrates non-engineering major post-FYE records database. data provide indication student’s preferred degree-granting engineering major. Thus FYE proxy value returned NA, treated missing data imputed. Arguments. midfield_student   Data frame student observations, keyed student ID. Default student. Required variables mcid, race, sex. Use rows source student data table. midfield_term   Data frame term observations keyed student ID. Default term. Required variables mcid, institution, term, cip6. Use rows source term data table. fye_codes   Optional character vector 6-digit CIP codes assigned FYE programs. Default “140102”. Argument used name. Implicit arguments.   following implementations yield identical results. Output.   function returns one row per FYE student keyed student ID. variables except ID returned factors meet requirements mice().","code":"# Required arguments in order and explicitly named x <- prep_fye_mice(midfield_student = student, midfield_term = term)  # Required arguments in order, but not named y <- prep_fye_mice(student, term)  # Using the implicit defaults z <- prep_fye_mice()  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE check_equiv_frames(x, z) #> [1] TRUE # Working data frame DT <- prep_fye_mice(student, term) DT #>                 mcid   race    sex   institution  proxy #>               <char> <fctr> <fctr>        <fctr> <fctr> #>    1: MCID3111190643  Asian Female Institution J   <NA> #>    2: MCID3111190747  Asian Female Institution J   <NA> #>    3: MCID3111288144  Asian Female Institution J   <NA> #>   ---                                                   #> 5787: MCID3112328635  White   Male Institution J 143501 #> 5788: MCID3112328655  White   Male Institution J 143501 #> 5789: MCID3112382784  White   Male Institution J 143501"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"missing-data","dir":"Articles","previous_headings":"","what":"Missing data","title":"FYE proxies","text":"output prep_fye_mive() contain missing values proxy column . variables complete. race/ethnicity sex value “unknown” treated observed value, missing data. values ID institution unknown missing example, observations (existed) removed. Checking variables except proxy complete. Number missing observations proxy. Missing random (MAR).   missing proxy data caused student’s decision migrate non-engineering major leave database. time making decision, FYE student yet enrolled degree-granting engineering major, thus decision unlikely related specific engineering major. CIP missing, therefore, unlikely related specific CIP value—may related observations institution, race/ethnicity, sex. Missing data type classified “missing random” (MAR) suitable multiple imputation yield unbiased results (Grace-Martin 2012). Multiple imputation.   Lastly, 5–10 imputations generally considered adequate unbiasedness, Bodner (2008) recommends many imputations percentage missing data. shown , overall percentage missing data 37.17%, suggesting set number imputations 37. Chart.   chart displays percent missing data category. institution category isn’t used practice data contain FYE students one institution . vertical dashed line indicates 37% percent missing data overall. Figure 1: Percent missing data category.","code":"# Number of unique IDs x <- length(unique(DT$mcid))  # Number of complete cases on four variables y <- sum(complete.cases(DT[, .(mcid, race, sex, institution)]))  # Demonstrate equivalence all.equal(x, y) #> [1] TRUE # Number NAs in proxy sum(is.na(DT$proxy)) #> [1] 2152  # Percentage NAs in proxy 100 * round(sum(is.na(DT$proxy)) / nrow(DT), 3) #> [1] 37.2 # Number of proxies to be imputed (N_impute <- sum(is.na(DT$proxy))) #> [1] 2152  # Number of observations with complete predictor information (N_complete <- sum(complete.cases(DT[, .(mcid, race, sex, institution)]))) #> [1] 5789  # Percent missing proxies (percent_missing <- round(100 * N_impute / N_complete, 3)) #> [1] 37.174 # For the \"m\" argument in mice() (m_imputations <- round(percent_missing, 0)) #> [1] 37"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"setting-up-mice","dir":"Articles","previous_headings":"","what":"Setting up mice()","title":"FYE proxies","text":"mice package (van Buuren Groothuis-Oudshoorn 2011) implements multiple imputation chained equations (MICE). MICE also known “fully conditional specification” “sequential regression multiple imputation” suitable categorical variables (Azur et al. 2011). computational procedure follows approach suggested Dhana (2017).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"standard-predictors","dir":"Articles","previous_headings":"Setting up mice()","what":"Standard predictors","title":"FYE proxies","text":"Framework.   first use mice() examine imputation framework calling function zero iterations DT data frame. mice() produces “multiply-imputed data set”, R object class “mids”. Logged events warning.   printout includes warning two “logged events”—indication two variables used predictors. can isolate warning closer look, two variables mcid institution. mcid never intended predictor variable. retain ID column imputed CIP values assigned specific IDs. institution usually predictor. case, however, FYE students institution—characteristic midfielddata practice data . Imputation methods.   look closely two elements framework. first imputation method vector. “polyreg” imputation method (polytomous logistic regression) appropriate data, like , comprising unordered categorical variables. Variable proxy imputed using polyreg method; variables, predictors, imputed, thus methods empty. method correctly assigned, assign follows, Predictor matrix.   second element review predictor matrix. row label identifies variable predicted; columns indicate predictor variables. However, variables assigned method imputed. case, variable imputed proxy, row matrix gets used last row. zeros ones tell us proxy going predicted race sex. , institution variable predictor practice data contain one FYE institution . (case one using MIDFIELD research database.) default setting incorrect, can set manually. , note bottom row row need proxy variable imputed. data included one FYE institution, manual assignment ,","code":"# Imputation framework framework <- mice(DT, maxit = 0) #> Warning: Number of logged events: 2 framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid        race         sex institution       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid race sex institution proxy #> mcid           0    1   1           0     1 #> race           0    0   1           0     1 #> sex            0    1   0           0     1 #> institution    0    1   1           0     1 #> proxy          0    1   1           0     0 #> Number of logged events:  2  #>   it im dep     meth         out #> 1  0  0     constant        mcid #> 2  0  0     constant institution # Examine the warning framework$loggedEvents #>   it im dep     meth         out #> 1  0  0     constant        mcid #> 2  0  0     constant institution # Imputation method method_vector <- framework[[\"method\"]] method_vector #>        mcid        race         sex institution       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # Manually assign the variable(s) being imputed method_vector[c(\"proxy\")] <- \"polyreg\"  # Manually assign the variable(s) not being imputed method_vector[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\" method_vector #>        mcid        race         sex institution       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # Imputation predictor matrix predictor_matrix <- framework[[\"predictorMatrix\"]] predictor_matrix #>             mcid race sex institution proxy #> mcid           0    1   1           0     1 #> race           0    0   1           0     1 #> sex            0    1   0           0     1 #> institution    0    1   1           0     1 #> proxy          0    1   1           0     0 # Predictor row for this example predictor_matrix[\"proxy\", ] #>        mcid        race         sex institution       proxy  #>           0           1           1           0           0 # Manually assign zero columns predictor_matrix[, c(\"mcid\", \"proxy\", \"institution\")] <- 0  # Manually assign predictor columns predictor_matrix[, c(\"race\", \"sex\")] <- c(0, 0, 0, 0, 1) predictor_matrix #>             mcid race sex institution proxy #> mcid           0    0   0           0     0 #> race           0    0   0           0     0 #> sex            0    0   0           0     0 #> institution    0    0   0           0     0 #> proxy          0    1   1           0     0 # Not run predictor_matrix[, c(\"mcid\", \"proxy\")] <- 0 predictor_matrix[, c(\"race\", \"sex\", \"institution\")] <- c(0, 0, 0, 0, 1)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"optional-predictors","dir":"Articles","previous_headings":"Setting up mice()","what":"Optional predictors","title":"FYE proxies","text":"default predictors set prep_fye_mice() institution (required), race/ethnicity, sex. acceptable, can skip next section, Imputing missing values. Predictors can edited added invoking mice(). , ensure missing values proxy column. variables expected complete (NA values). value “unknown” predictor column, e.g., race/ethnicity sex, acceptable value, missing data. Observations missing unknown values ID institution columns removed. example, suppose wish replace race/ethnicity sex people variable four possible values (Domestic Female, Domestic Male, International Female, International Male) “domestic” means US citizen; want add variable encodes year student’s first term FYE. Creating variables.   Remove unknown observations race/ethnicity sex create desired people variable. Check unique values. Adding variable.   Obtain student’s first term data set term data table using left-outer join. Filtering.   Ensure complete cases except proxy. Framework   optional predictors. Imputation method   optional predictors. Predictor matrix   optional predictors. Percent missing data   setting number multiple imputations.","code":"# Data frame to illustrate optional predictors opt_DT <- copy(DT)  # Factor to character cols_to_edit <- c(\"race\", \"sex\") opt_DT[, (cols_to_edit) := lapply(.SD, as.character), .SDcols = cols_to_edit]  # Filter unknown race and sex opt_DT <- opt_DT[sex != \"Unknown\"] opt_DT <- opt_DT[race != \"Other/Unknown\"]  # Create origin variable opt_DT[, origin := fcase(   race != \"International\", \"Domestic\",   race == \"International\", \"International\",   default = NA_character_ )] opt_DT <- opt_DT[!is.na(origin)]  # Create people variable opt_DT[, people := paste(origin, sex)] opt_DT[, people := as.factor(people)] opt_DT[, c(\"race\", \"sex\", \"origin\") := NULL]  # Display result setcolorder(opt_DT, c(\"mcid\", \"people\", \"institution\", \"proxy\")) opt_DT #>                 mcid          people   institution  proxy #>               <char>          <fctr>        <fctr> <fctr> #>    1: MCID3111190643 Domestic Female Institution J   <NA> #>    2: MCID3111190747 Domestic Female Institution J   <NA> #>    3: MCID3111288144 Domestic Female Institution J   <NA> #>   ---                                                     #> 5569: MCID3112328635   Domestic Male Institution J 143501 #> 5570: MCID3112328655   Domestic Male Institution J 143501 #> 5571: MCID3112382784   Domestic Male Institution J 143501 # Display unique people sort(unique(opt_DT$people)) #> [1] Domestic Female      Domestic Male        International Female #> [4] International Male   #> 4 Levels: Domestic Female Domestic Male ... International Male # Add all term variables by ID cols_to_join <- term[, .(mcid, term)] opt_DT <- cols_to_join[opt_DT, on = c(\"mcid\")]  # Filter for first term setkeyv(opt_DT, c(\"mcid\", \"term\")) opt_DT <- opt_DT[, .SD[1], by = c(\"mcid\")]  # Create year variable opt_DT[, year := substr(term, 1, 4)] opt_DT[, year := as.factor(year)] opt_DT[, term := NULL]  # Display result setcolorder(opt_DT, c(\"mcid\", \"people\", \"institution\", \"year\", \"proxy\")) opt_DT #> Key: <mcid> #>                 mcid             people   institution   year  proxy #>               <char>             <fctr>        <fctr> <fctr> <fctr> #>    1: MCID3111142290      Domestic Male Institution J   1988 141001 #>    2: MCID3111142294      Domestic Male Institution J   1988 141001 #>    3: MCID3111142961 International Male Institution J   1988 142101 #>   ---                                                               #> 5569: MCID3112447659      Domestic Male Institution J   2009   <NA> #> 5570: MCID3112447663      Domestic Male Institution J   2009   <NA> #> 5571: MCID3112447664      Domestic Male Institution J   2009   <NA> # Identify complete cases in predictor variables rows_we_want <- complete.cases(opt_DT[, .(mcid, people, institution, year)])  # Filter for complete predictors opt_DT <- opt_DT[rows_we_want] opt_DT #> Key: <mcid> #>                 mcid             people   institution   year  proxy #>               <char>             <fctr>        <fctr> <fctr> <fctr> #>    1: MCID3111142290      Domestic Male Institution J   1988 141001 #>    2: MCID3111142294      Domestic Male Institution J   1988 141001 #>    3: MCID3111142961 International Male Institution J   1988 142101 #>   ---                                                               #> 5569: MCID3112447659      Domestic Male Institution J   2009   <NA> #> 5570: MCID3112447663      Domestic Male Institution J   2009   <NA> #> 5571: MCID3112447664      Domestic Male Institution J   2009   <NA> # Imputation framework opt_framework <- mice(opt_DT, maxit = 0) #> Warning: Number of logged events: 2 opt_framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid      people institution        year       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid people institution year proxy #> mcid           0      1           0    1     1 #> people         0      0           0    1     1 #> institution    0      1           0    1     1 #> year           0      1           0    0     1 #> proxy          0      1           0    1     0 #> Number of logged events:  2  #>   it im dep     meth         out #> 1  0  0     constant        mcid #> 2  0  0     constant institution # Imputation framework opt_method_vector <- opt_framework[[\"method\"]] opt_method_vector #>        mcid      people institution        year       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # Imputation predictor matrix opt_predictor_matrix <- opt_framework[[\"predictorMatrix\"]] opt_predictor_matrix #>             mcid people institution year proxy #> mcid           0      1           0    1     1 #> people         0      0           0    1     1 #> institution    0      1           0    1     1 #> year           0      1           0    0     1 #> proxy          0      1           0    1     0 N_impute <- sum(is.na(opt_DT$proxy)) N_fye <- nrow(opt_DT)  # Percent missing data round(100 * N_impute / N_fye, 0) #> [1] 37"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"imputing-missing-values","dir":"Articles","previous_headings":"","what":"Imputing missing values","title":"FYE proxies","text":"three essential arguments mice() DT data frame, method_vector, predictor_matrix. number multiple imputations m set 37 discussed Missing data. default seed argument NULL, setting seed shown vignette results reproducible. Setting printFlag = TRUE displays progress console. practice data, 5 iterations 37 imputations takes 3 minutes (depending machine). MIDFIELD research data, however, imputation runs significantly longer.","code":"# Impute missing proxy data DT_mids <- mice(   data = DT,   m = m_imputations,   maxit = 5, # default   method = method_vector,   predictorMatrix = predictor_matrix,   seed = 20180624,   printFlag = TRUE ) # output in console with printFlag = TRUE # >  iter imp variable # >   1   1  proxy # >   1   2  proxy # >   1   3  proxy # >   1   4  proxy # >   1   5  proxy # >   --- # >   5  33  proxy # >   5  34  proxy # >   5  35  proxy # >   5  36  proxy # >   5  37  proxy"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"post-processing","dir":"Articles","previous_headings":"","what":"Post-processing","title":"FYE proxies","text":"Extracting result.   apply mice::complete() extract data mids object. missing data replaced imputed values. Selecting columns.   use result, need two columns: IDs predicted starting programs. Recoding.   convert CIP codes factor character. Filtering.   Proxies substitutes students starting FYE. Thus filter remove migrators, retaining proxies first-term FYE students . Verify prepared data.   avoid deriving data frame time needed vignettes, information provided fye_proxy data frame included midfieldr. verify two data frames content.","code":"# Revert to default random number generation set.seed(NULL)  # Extract data from the mids object DT <- mice::complete(DT_mids)  # Convert to data.table structure setDT(DT) DT <- DT[order(mcid)] DT #>                 mcid          race    sex   institution  proxy #>               <char>        <fctr> <fctr>        <fctr> <fctr> #>    1: MCID3111142290         Asian   Male Institution J 141001 #>    2: MCID3111142294         Asian   Male Institution J 141001 #>    3: MCID3111142961 International   Male Institution J 142101 #>   ---                                                          #> 5787: MCID3112447659         White   Male Institution J 141901 #> 5788: MCID3112447663         White   Male Institution J 140201 #> 5789: MCID3112447664         White   Male Institution J 141001 # Subset the data DT <- DT[, .(mcid, proxy)] DT #>                 mcid  proxy #>               <char> <fctr> #>    1: MCID3111142290 141001 #>    2: MCID3111142294 141001 #>    3: MCID3111142961 142101 #>   ---                       #> 5787: MCID3112447659 141901 #> 5788: MCID3112447663 140201 #> 5789: MCID3112447664 141001 # Convert factors DT[, proxy := as.character(proxy)] DT #>                 mcid  proxy #>               <char> <char> #>    1: MCID3111142290 141001 #>    2: MCID3111142294 141001 #>    3: MCID3111142961 142101 #>   ---                       #> 5787: MCID3112447659 141901 #> 5788: MCID3112447663 140201 #> 5789: MCID3112447664 141001 # Order term data by ID and term ordered_term <- term[, .(mcid, term, cip6)] setorderv(ordered_term, cols = c(\"mcid\", \"term\"))  # Obtain first term of all students first_term <- ordered_term[, .SD[1], by = c(\"mcid\")]  # Reduce to first term in FYE first_term_fye_mcid <- first_term[cip6 == \"140102\", .(mcid)]  # Inner join to remove migrators from working data frame DT <- first_term_fye_mcid[DT, on = c(\"mcid\"), nomatch = NULL] setkey(DT, NULL) DT #>                 mcid  proxy #>               <char> <char> #>    1: MCID3111142290 141001 #>    2: MCID3111142294 141001 #>    3: MCID3111142961 142101 #>   ---                       #> 4621: MCID3112447659 141901 #> 4622: MCID3112447663 140201 #> 4623: MCID3112447664 141001 # Demonstrate equivalence check_equiv_frames(DT, fye_proxy) #> [1] TRUE"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"credibility","dir":"Articles","previous_headings":"Assessing FYE proxies","what":"Credibility","title":"FYE proxies","text":"summarize FYE proxy data set see many students algorithm assigned engineering majors. Start extracting unique set CIP codes proxy data set. Obtain program names cip data set (provided midfieldr). use 4-digit names engineering generally represent department-level programs. Join names proxy data set, summarize program, order rows descending N. comparison, National Science Foundation (NSF) reports 2012, top seven US engineering majors ranked enrollment (SEI dashboard 2014): Mechanical Electrical Civil Chemical Industrial Aerospace Materials Table 1, show FYE proxy programs indicate equivalent NSF ranking cited . assignment proxies fairly consistent NSF results, though practice data higher frequency aerospace proxies expected. Recall practice data contain three institutions NSF information based nearly 3000 US undergraduate institutions (SEI report 2014). Table 1: Frequency FYE proxies using practice data conclude imputation credible least extent ranking majors generally consistent expectations.","code":"# Identify unique CIP codes in the proxy data proxy_cips <- sort(unique(fye_proxy$proxy)) proxy_cips #>  [1] \"140201\" \"140301\" \"140701\" \"140801\" \"140901\" \"141001\" \"141101\" \"141401\" #>  [9] \"141801\" \"141901\" \"142101\" \"143301\" \"143501\" # Obtain the 4-digit program names corresponding to these codes proxy_program_names <- filter_cip(keep_text = proxy_cips) proxy_program_names <- proxy_program_names[, .(cip6, program = cip4name)] proxy_program_names #>       cip6                                                 program #>     <char>                                                  <char> #>  1: 140201   Aerospace, Aeronautical and Astronautical Engineering #>  2: 140301 Agricultural, Biological Engineering and Bioengineering #>  3: 140701                                    Chemical Engineering #>  4: 140801                                       Civil Engineering #>  5: 140901                           Computer Engineering, General #>  6: 141001  Electrical, Electronics and Communications Engineering #>  7: 141101                                   Engineering Mechanics #>  8: 141401         Environmental, Environmental Health Engineering #>  9: 141801                                   Materials Engineering #> 10: 141901                                  Mechanical Engineering #> 11: 142101                          Mining and Mineral Engineering #> 12: 143301                                Construction Engineering #> 13: 143501                                  Industrial Engineering # Join these program names to the proxy data proxy_programs <- proxy_program_names[fye_proxy[, .(cip6 = proxy)], .(program), on = c(\"cip6\")]  # Count by program and order rows in descending magnitude proxy_programs <- proxy_programs[, .N, by = c(\"program\")] setorderv(proxy_programs, order = -1, cols = c(\"N\")) proxy_programs #>                                                     program     N #>                                                      <char> <int> #>  1:                                  Mechanical Engineering  1053 #>  2:  Electrical, Electronics and Communications Engineering   668 #>  3:                                       Civil Engineering   598 #>  4:                           Computer Engineering, General   566 #>  5:   Aerospace, Aeronautical and Astronautical Engineering   516 #>  6:                                  Industrial Engineering   393 #>  7:                                    Chemical Engineering   358 #>  8:                          Mining and Mineral Engineering   134 #>  9:                                   Engineering Mechanics   133 #> 10:                                   Materials Engineering   104 #> 11: Agricultural, Biological Engineering and Bioengineering    82 #> 12:                                Construction Engineering    17 #> 13:         Environmental, Environmental Health Engineering     1"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"quantifying-potential-miscounts","dir":"Articles","previous_headings":"Assessing FYE proxies","what":"Quantifying potential miscounts","title":"FYE proxies","text":"main goal estimating FYE proxies prevent starter miscounts. , assess potential miscounts FYE records treated recommended. start first_term data frame created earlier (Post-processing) containing initial term information students practice data. Identify starters, including FYE proxies, four case study programs. (procedure fully developed Starters vignette.) data frame contains direct-matriculation starters case study programs plus FYE students one programs estimated proxy. Grouping program type matriculation, can determine FYE percentage starters. results indicate (case study data) potential -count 45% 97% FYE proxies excluded counting starters.","code":"# First term of all students first_term #> Index: <cip6> #>                  mcid   term   cip6 #>                <char> <char> <char> #>     1: MCID3111142225  19881 140901 #>     2: MCID3111142283  19881 240102 #>     3: MCID3111142290  19881 140102 #>    ---                              #> 97553: MCID3112898894  20181 451001 #> 97554: MCID3112898895  20181 302001 #> 97555: MCID3112898940  20181 050103 # Join proxies by ID (left join) to first-term data start <- fye_proxy[first_term, .(mcid, cip6, proxy), on = c(\"mcid\")]  # Distinguish FYE from direct matriculants start[, matric := fcase(   is.na(proxy), \"direct\",   !is.na(proxy), \"fye\" )]  # Create start variable start[, start := fcase(   matric == \"fye\", proxy,   matric == \"direct\", cip6 )]  # Filter to retain case study program starters join_labels <- copy(study_programs) setnames(join_labels, old = \"cip6\", new = \"start\") start <- join_labels[start, on = c(\"start\")] start <- start[!is.na(program)]  # Display result start[order(matric, start)] #>        start program           mcid   cip6  proxy matric #>       <char>  <char>         <char> <char> <char> <char> #>    1: 140801      CE MCID3111170903 140801   <NA> direct #>    2: 140801      CE MCID3111170949 140801   <NA> direct #>    3: 140801      CE MCID3111174233 140801   <NA> direct #>   ---                                                    #> 5386: 143501     ISE MCID3112441692 140102 143501    fye #> 5387: 143501     ISE MCID3112447596 140102 143501    fye #> 5388: 143501     ISE MCID3112447600 140102 143501    fye # Summarize start <- start[, .N, by = c(\"matric\", \"program\")]  # Transform to row-record form start <- dcast(start, program ~ matric, value.var = \"N\")  # Compute FYE as fraction of total start[, N_starters := direct + fye] start[, fye_pct := round(100 * fye / N_starters, 1)] start #> Key: <program> #>    program direct   fye N_starters fye_pct #>     <char>  <int> <int>      <int>   <num> #> 1:      CE    714   598       1312    45.6 #> 2:      EE    669   668       1337    50.0 #> 3:     ISE     12   393        405    97.0 #> 4:      ME   1281  1053       2334    45.1"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"FYE proxies","text":"Given number lines code number case-specific parameters involved, reusable code section provided.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"special-cases","dir":"Articles","previous_headings":"","what":"Special cases","title":"Starters","text":"two special cases, entering student’s CIP code correspond degree-granting program. procedure identifying starters accommodate special cases. first case includes records CIP unspecified reported “undecided”. MIDFIELD data, conditions encoded CIP 999999. Students may enter CIP consider starters enroll degree-granting program. (midfielddata practice datasets contain undecided CIP codes.) second case nuanced. US institutions, engineering students required complete First-Year Engineering (FYE) program prerequisite declaring engineering major. students admitted Engineering majors don’t know degree-granting program intended transition. 2-digit CIP level, FYE students starters Engineering (CIP 14). restrict study 2-digit CIPs, however, use FYE proxies—estimates degree-granting engineering programs (6-digit CIP level) FYE students declared required enroll FYE.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Starters","text":"bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. degree-seeking Describes students advancing toward bachelor’s degree, accumulating credit hours program goal graduating institution. starters Bloc degree-seeking students initial terms enrolled degree-granting programs. entry term student’s first term database. start term first term student can considered starter. Identical entry term unless student enters undecided/unspecified. undecided/unspecified MIDFIELD taxonomy includes non-IPEDS code (CIP 999999) Undecided Unspecified indicating instances student declared major institution recorded program. FYE First-Year Engineering program, common-first-year curriculum prerequisite declaring engineering major US institutions. Denoted CIP code, FYE degree-granting program. FYE proxy estimate degree-granting engineering program FYE student enrolled required enroll FYE. proxy, 6-digit CIP code, denotes program FYE student can considered starter.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Starters","text":"use student term identify starters. Filter source student-level records data sufficiency degree-seeking. Filter student’s first term assigned undecided/unknown CIP code. Identify program(s) student can considered starter. Substitute FYE proxy starting program FYE. Filter program. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Starters","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term. Loads midfieldr.   Prepared data. View data dictionaries via ?study_programs, ?baseline_mcid, ?fye_proxy. study_programs (derived Programs). baseline_mcid (derived Blocs). fye_proxy (derived FYE proxies).","code":"library(midfieldr) library(midfielddata) library(data.table) # Load practice data data(student, term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Starters","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Use term student data tables obtain data frame student IDs meeting data sufficiency degree-seeking criteria. Appled practice data, procedure yields baseline_mcid data frame derived Blocs included midfieldr.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) # Working data frame DT <- copy(baseline_mcid)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"isolate-the-start-term","dir":"Articles","previous_headings":"","what":"Isolate the start term","title":"Starters","text":"start term first term student can considered starter, , degree-seeking recorded undecided/unspecified. Add variables.   Left join add terms CIPs students. Filter.   remove observations undecided/unspecified (CIP 999999). rows remaining IDs CIPs degree-granting program (FYE), allowing us infer preferred starting programs. (required step completeness, unnecessary using practice data.) Filter.   Order rows ID term, filter retain start term observation. data contain students enrolled one major first term, replace .SD[1] (slower) .SD[.min(term)]. Filter.   Remove unnecessary variables filter unique observations.","code":"# Term into DT left join DT <- term[DT, .(mcid, term, cip6), on = c(\"mcid\")] DT #>                   mcid   term   cip6 #>                 <char> <char> <char> #>      1: MCID3111142689  19883 090401 #>      2: MCID3111142782  19883 260101 #>      3: MCID3111142782  19885 260101 #>     ---                              #> 531417: MCID3112870009  19953 240102 #> 531418: MCID3112870009  19954 240102 #> 531419: MCID3112870009  19983 240102 # Remove undecided/unspecified DT <- DT[!cip6 %like% \"999999\"] DT #>                   mcid   term   cip6 #>                 <char> <char> <char> #>      1: MCID3111142689  19883 090401 #>      2: MCID3111142782  19883 260101 #>      3: MCID3111142782  19885 260101 #>     ---                              #> 531417: MCID3112870009  19953 240102 #> 531418: MCID3112870009  19954 240102 #> 531419: MCID3112870009  19983 240102 # Retain observations of the earliest remaining terms by ID setorderv(DT, cols = c(\"mcid\", \"term\")) DT <- DT[, .SD[1], by = \"mcid\"] DT #>                  mcid   term   cip6 #>                <char> <char> <char> #>     1: MCID3111142689  19883 090401 #>     2: MCID3111142782  19883 260101 #>     3: MCID3111142881  19893 450601 #>    ---                              #> 76873: MCID3112785480  20071 240102 #> 76874: MCID3112800920  20101 240102 #> 76875: MCID3112870009  19951 240102 # Unique combinations of ID and CIP DT <- DT[, .(mcid, cip6)] DT <- unique(DT) DT #>                  mcid   cip6 #>                <char> <char> #>     1: MCID3111142689 090401 #>     2: MCID3111142782 260101 #>     3: MCID3111142881 450601 #>    ---                       #> 76873: MCID3112785480 240102 #> 76874: MCID3112800920 240102 #> 76875: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"starters-without-fye","dir":"Articles","previous_headings":"","what":"Starters without FYE","title":"Starters","text":"study excluded Engineering programs require FYE, data frame just derived desired bloc starters. case, rename cip6 start make explicit CIP codes column represent programs students can considered starters. code form retains ID variable changes name CIP variable.","code":"# Not run DT <- DT[, .(mcid, start = cip6)]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"starters-with-fye","dir":"Articles","previous_headings":"","what":"Starters with FYE","title":"Starters","text":"Add variable.   Merge fye_proxy working data frame. left join introduces NA proxy column students assigned FYE proxy. Create variable.   Estimated starting programs FYE students proxy column. Actual, recorded starting programs non-FYE students cip6 column. Create start column combine two. Select.   Omit unnecessary columns.","code":"# Join the proxies to the working data frame DT <- fye_proxy[DT, on = c(\"mcid\")] DT #>                  mcid  proxy   cip6 #>                <char> <char> <char> #>     1: MCID3111142689   <NA> 090401 #>     2: MCID3111142782   <NA> 260101 #>     3: MCID3111142881   <NA> 450601 #>    ---                              #> 76873: MCID3112785480   <NA> 240102 #> 76874: MCID3112800920   <NA> 240102 #> 76875: MCID3112870009   <NA> 240102 # Combine all starting CIPs DT[, start := fcase(   cip6 == \"140102\", proxy,   cip6 != \"140102\", cip6 )] DT #>                  mcid  proxy   cip6  start #>                <char> <char> <char> <char> #>     1: MCID3111142689   <NA> 090401 090401 #>     2: MCID3111142782   <NA> 260101 260101 #>     3: MCID3111142881   <NA> 450601 450601 #>    ---                                     #> 76873: MCID3112785480   <NA> 240102 240102 #> 76874: MCID3112800920   <NA> 240102 240102 #> 76875: MCID3112870009   <NA> 240102 240102 # Omit unnecessary columns. DT <- DT[, .(mcid, start)] DT #>                  mcid  start #>                <char> <char> #>     1: MCID3111142689 090401 #>     2: MCID3111142782 260101 #>     3: MCID3111142881 450601 #>    ---                       #> 76873: MCID3112785480 240102 #> 76874: MCID3112800920 240102 #> 76875: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"closer-look","dir":"Articles","previous_headings":"Starters with FYE","what":"Closer look","title":"Starters","text":"Examining records selected students detail. Example 1.   results, student starter CIP 143501 (Industrial Engineering). excerpt record term shows enrolled CIP 140102 (FYE) three terms followed CIP 143501 transitioned post-FYE Industrial Engineering consider starter program. Example 2.   results, student starter CIP 141801 (Materials Engineering). excerpt record term shows enrolled CIP 140102 (FYE) three terms followed CIP 270101 (Mathematics)—transitioned FYE non-engineering major. Thus consider starter proxy program, Materials Engineering. Example 3.   results, student starter CIP 140701 (Chemical Engineering). excerpt record term shows enrolled CIP 140102 (FYE) two terms leaving database. , consider starter proxy program, Chemical Engineering.","code":"# Analysis result DT[mcid == \"MCID3111150194\"] #>              mcid  start #>            <char> <char> #> 1: MCID3111150194 143501 # Sequence of term records term[mcid == \"MCID3111150194\"] #>              mcid   institution   term   cip6              level #>            <char>        <char> <char> <char>             <char> #> 1: MCID3111150194 Institution J  19883 140102      01 First-year #> 2: MCID3111150194 Institution J  19891 140102     02 Second-year #> 3: MCID3111150194 Institution J  19893 140102     02 Second-year #> 4: MCID3111150194 Institution J  19903 143501      03 Third-year #> 5: MCID3111150194 Institution J  19911 143501     04 Fourth-year #> 6: MCID3111150194 Institution J  19913 143501     04 Fourth-year #> 7: MCID3111150194 Institution J  19921 143501 05 Fifth-year Plus #> 8: MCID3111150194 Institution J  19923 143501 05 Fifth-year Plus # Analysis result DT[mcid == \"MCID3111161837\"] #>              mcid  start #>            <char> <char> #> 1: MCID3111161837 141801 # Sequence of term records term[mcid == \"MCID3111161837\"] #>               mcid   institution   term   cip6              level #>             <char>        <char> <char> <char>             <char> #>  1: MCID3111161837 Institution J  19883 140102      01 First-year #>  2: MCID3111161837 Institution J  19891 140102     02 Second-year #>  3: MCID3111161837 Institution J  19893 140102     02 Second-year #>  4: MCID3111161837 Institution J  19905 270101     02 Second-year #>  5: MCID3111161837 Institution J  19906 270101     02 Second-year #>  6: MCID3111161837 Institution J  19913 270101      03 Third-year #>  7: MCID3111161837 Institution J  19921 270101      03 Third-year #>  8: MCID3111161837 Institution J  19923 270101     04 Fourth-year #>  9: MCID3111161837 Institution J  19931 270101     04 Fourth-year #> 10: MCID3111161837 Institution J  19933 270101     04 Fourth-year #> 11: MCID3111161837 Institution J  19935 270101 05 Fifth-year Plus # Analysis result DT[mcid == \"MCID3111303095\"] #>              mcid  start #>            <char> <char> #> 1: MCID3111303095 140701 term[mcid == \"MCID3111303095\"] #>              mcid   institution   term   cip6         level #>            <char>        <char> <char> <char>        <char> #> 1: MCID3111303095 Institution J  19911 140102 01 First-year #> 2: MCID3111303095 Institution J  19913 140102 01 First-year"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Starters","text":"Filter.   “starter” usually means “starter specific programs,” bloc concludes filter program. Select.   Omit unnecessary variables.","code":"# Rename cip6 as start join_labels <- copy(study_programs) join_labels <- join_labels[, .(program, start = cip6)]  # Filter by program DT <- join_labels[DT, on = c(\"start\"), nomatch = NULL] DT #>       program  start           mcid #>        <char> <char>         <char> #>    1:      EE 141001 MCID3111142965 #>    2:      EE 141001 MCID3111145102 #>    3:     ISE 143501 MCID3111150194 #>   ---                               #> 4051:      EE 141001 MCID3112619118 #> 4052:      EE 141001 MCID3112619484 #> 4053:      ME 141901 MCID3112619666 DT <- DT[, .(mcid, program)] DT <- unique(DT) DT #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111150194     ISE #>   ---                        #> 4051: MCID3112619118      EE #> 4052: MCID3112619484      EE #> 4053: MCID3112619666      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Starters","text":"Preparation.   data frame baseline IDs intake section. Starters.   Summary code chunks ready reference. starters without FYE, finish renaming cip6 starters FYE, continue FYE proxies.","code":"DT <- copy(baseline_mcid) # Isolate starting term DT <- term[DT, .(mcid, term, cip6), on = c(\"mcid\")] DT <- DT[!cip6 %like% \"999999\"] setorderv(DT, cols = c(\"mcid\", \"term\")) DT <- DT[, .SD[1], by = \"mcid\"] # Alternatively # DT <- DT[, .SD[which.min(term)], by = \"mcid\"] DT <- DT[, .(mcid, cip6)] DT <- unique(DT) # Not run DT <- DT[, .(mcid, start = cip6)] DT <- fye_proxy[DT, .(mcid, cip6, proxy), on = c(\"mcid\")] DT[, start := fcase(   cip6 == \"140102\", proxy,   cip6 != \"140102\", cip6 )] DT <- DT[, .(mcid, start)]  # Filter by program on start join_labels <- copy(study_programs) join_labels <- join_labels[, .(program, start = cip6)] DT <- join_labels[DT, on = c(\"start\"), nomatch = NULL] DT <- DT[, .(mcid, program)] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Graduates","text":"bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. degree-seeking Describes students advancing toward bachelor’s degree, accumulating credit hours program goal graduating institution. completers Bloc degree-seeking students complete baccalaureate programs, earning first degrees. timely completion criterion Completing program specified span years, many cases, within 6 years admission (150% “normal” 4-year span), possibly less transfer students. completion status derived midfieldr variable indicating whether student completes degree, , whether completion timely. Possible values “timely”, “late”, “NA”. Late completers often excluded count “graduates.” graduates Bloc graduates (timely completers) program, without regard starting programs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Graduates","text":"bloc graduates (timely completers) can determined independent blocs. Filter source student-level records data sufficiency degree-seeking. Determine completion status. Filter graduates (timely completers). Filter degree program. next step might subset graduates necessary meet needs metric. example, graduation rate metric requires graduates subset starters program. postpone step treating metrics. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Graduates","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term, ?degree. Loads midfieldr.   Prepared data. View data dictionaries via ?study_programs, ?baseline_mcid. study_programs (derived Programs). baseline_mcid (derived Blocs).","code":"library(midfieldr) library(midfielddata) library(data.table) # Load practice data data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Graduates","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Use term student data tables obtain data frame student IDs meeting data sufficiency degree-seeking criteria. Appled practice data, procedure yields baseline_mcid data frame derived Blocs included midfieldr.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(baseline_mcid)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"add_completion_status","dir":"Articles","previous_headings":"","what":"add_completion_status()","title":"Graduates","text":"Add columns data frame student-level records indicate whether student completed degree, , whether completion timely. input data frame must columns ID timely completion term. use add_timely_term() , though alternatively retained timely_term variable previous code chunks. Arguments. dframe   Data frame student-level records keyed student ID. Required variables mcid timely_term. midfield_degree   Data frame student-level degree observations keyed student ID. Default degree. Required variables mcid term_degree. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_degree   Character. Term program completed. Encoded YYYYT. NA indicates non-completion. completion_status   Character. Completion status: “timely”, indicating degree completion later timely completion term; “late”, indicating completion timely completion term; “NA” indicating non-completion. Similar details described data sufficiency vignette, add_completion_status() accepts Alternate source names uses Silent overwriting existing columns name one added columns.","code":"# Timely term required before completion status DT <- add_timely_term(DT, term)  # Drop unnecessary columns DT[, c(\"term_i\", \"level_i\", \"adj_span\") := NULL] # Required arguments in order and explicitly named x <- add_completion_status(dframe = DT, midfield_degree = degree)  # Required arguments in order, but not named y <- add_completion_status(DT, degree)  # Using the implicit default for the midfield_degree argument z <- add_completion_status(DT)  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE check_equiv_frames(x, z) #> [1] TRUE # Add completion status and supporting variables DT <- add_completion_status(DT, degree) DT #>                  mcid timely_term term_degree completion_status #>                <char>      <char>      <char>            <char> #>     1: MCID3111142689       19941       19913            timely #>     2: MCID3111142782       19941       19903            timely #>     3: MCID3111142881       19951       19894            timely #>    ---                                                          #> 76873: MCID3112785480       20123        <NA>              <NA> #> 76874: MCID3112800920       20153        <NA>              <NA> #> 76875: MCID3112870009       20003        <NA>              <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"closer-look","dir":"Articles","previous_headings":"add_completion_status()","what":"Closer look","title":"Graduates","text":"Examining records selected students detail. Example 1.   student degree term, Spring 1997 (encoded 19963) indicating successful completion. degree term exceed timely completion term, Spring 1998 (encoded 19973), completion status “timely”. Example 2.   student degree term, Spring 2017 (encoded 20163) indicating successful completion. degree term exceeds timely completion term, Spring 2016 (encoded 20153), completion status “late”. Example 3.   student’s degree term NA, indicating complete program. Thus completion status NA well.","code":"# Display one student by ID DT[mcid == \"MID25783162\"] #> Empty data.table (0 rows and 4 cols): mcid,timely_term,term_degree,completion_status # Display one student by ID DT[mcid == \"MID26696871\"] #> Empty data.table (0 rows and 4 cols): mcid,timely_term,term_degree,completion_status # Display one student by ID DT[mcid == \"MID26697615\"] #> Empty data.table (0 rows and 4 cols): mcid,timely_term,term_degree,completion_status"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"graduates","dir":"Articles","previous_headings":"","what":"Graduates","title":"Graduates","text":"Defining “graduates” timely completers, filter retain records completion status “timely”. data set comprises timely graduates practice data.","code":"# Graduates DT <- DT[completion_status == \"timely\"]  # Filter for unique IDs DT <- DT[, .(mcid)] DT <- unique(DT) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 40438: MCID3112692944 #> 40439: MCID3112694738 #> 40440: MCID3112730841"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Graduates","text":"case, “filter program” means filter degree program. Hence join variables degree obtain CIP codes graduates. Add variables.   Left join selected variables degree. IDs graduates, NA values CIP column joining. check follows, result integer number rows incomplete case, .e., NA either column. result zero. Filter.   Join program labels filter retain desired programs. Filter.   Filter retain observations first degree term . Multiple degrees allowed occur first degree term. Filter.   Drop unnecessary variables filter unique observations ID degree program label.","code":"# Add degree CIP codes and terms cols_we_want <- degree[, .(mcid, term_degree, cip6)] DT <- cols_we_want[DT, on = c(\"mcid\")] DT #>                  mcid term_degree   cip6 #>                <char>      <char> <char> #>     1: MCID3111142689       19913 090401 #>     2: MCID3111142782       19903 260101 #>     3: MCID3111142881       19894 450601 #>    ---                                   #> 40538: MCID3112692944       20153 090101 #> 40539: MCID3112694738       20143 230101 #> 40540: MCID3112730841       20164 040401 # Verify no NAs in CIP column sum(!complete.cases(DT)) #> [1] 0 # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT #>         cip6 program           mcid term_degree #>       <char>  <char>         <char>      <char> #>    1: 141001      EE MCID3111142965       19901 #>    2: 141001      EE MCID3111145102       19893 #>    3: 141001      EE MCID3111146537       19913 #>   ---                                           #> 3264: 141901      ME MCID3112618976       20153 #> 3265: 141001      EE MCID3112619484       20133 #> 3266: 141901      ME MCID3112641535       20143 # Filter by first degree term DT <- DT[, .SD[which.min(term_degree)], by = \"mcid\"] DT #>                 mcid   cip6 program term_degree #>               <char> <char>  <char>      <char> #>    1: MCID3111142965 141001      EE       19901 #>    2: MCID3111145102 141001      EE       19893 #>    3: MCID3111146537 141001      EE       19913 #>   ---                                           #> 3262: MCID3112618976 141901      ME       20153 #> 3263: MCID3112619484 141001      EE       20133 #> 3264: MCID3112641535 141901      ME       20143 DT[, c(\"cip6\", \"term_degree\") := NULL] DT <- unique(DT) DT #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 3262: MCID3112618976      ME #> 3263: MCID3112619484      EE #> 3264: MCID3112641535      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Graduates","text":"Preparation.   data frame baseline IDs intake section. Graduates.   summary code chunk ready reference.","code":"DT <- copy(baseline_mcid) # Gather graduates, degree CIPs and terms DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"timely\"] DT <- degree[DT, .(mcid, term_degree, cip6), on = c(\"mcid\")]  # Filter by programs and first degree terms DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT <- DT[, .SD[which.min(term_degree)], by = \"mcid\"] DT[, c(\"cip6\", \"term_degree\") := NULL] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Groupings","text":"bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. grouping variables Detailed information student-level data characterize bloc records, typically used create bloc subsets comparison, example, program, race/ethnicity, sex, age, grade level, grades, etc.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Groupings","text":"join grouping variables bloc initial processing (data sufficiency degree seeking) subsetting criteria define bloc. two common join operations add grouping variables : Program labels   using inner join CIPs. Demographics   using left join IDs. variables can usefully joined grouping operations. include examples student, term, degree. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Groupings","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term, ?degree. Loads midfieldr.   Prepared data. View data dictionaries via ?study_programs, ?baseline_mcid. study_programs (derived Programs). baseline_mcid (derived Blocs).","code":"library(midfieldr) library(midfielddata) library(data.table) # Load practice data data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Groupings","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Use term student data tables obtain data frame student IDs meeting data sufficiency degree-seeking criteria. Appled practice data, procedure yields baseline_mcid data frame derived Blocs included midfieldr. join CIP variable examples join CIP.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(baseline_mcid) # Reusable starting state with CIP baseline_cip <- term[DT, .(mcid, cip6), on = c(\"mcid\")] baseline_cip <- unique(baseline_cip) baseline_cip #>                   mcid   cip6 #>                 <char> <char> #>      1: MCID3111142689 090401 #>      2: MCID3111142782 260101 #>      3: MCID3111142881 450601 #>     ---                       #> 127347: MCID3112800920 240102 #> 127348: MCID3112800920 240199 #> 127349: MCID3112870009 240102"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"program-labels","dir":"Articles","previous_headings":"","what":"Program labels","title":"Groupings","text":"point typical workflow, bloc student-level records progress data frame program labels (similar study_programs). data frames 6-digit CIP variable join . Program labels serve two main functions: Filtering variable   finalize bloc. example, “starters” “graduates” usually mean starters graduates specific programs. Thus bloc procedure typically concludes program filter Ever-enrolled, Starters, Graduates. Grouping variable   summarizing data. filtered bloc retain records specific programs, program label retained used grouping variables race/ethnicity sex computing comparing metrics. role groupings, program label join developed detail vignette. Rationale inner join.   inner join accomplishes two tasks: adds column program labels bloc; filters bloc retain observations CIPs matching desired programs. Reset   CIP baseline data frame preserved earlier intake section. Filter.   inner join adds program label filters matching CIPs. can see filtering effect noting baseline data frame 127,349 observations inner join selected programs returned 5657 observations. can also verify selected programs, e.g., Students can migrate majors different 6-digit CIP codes, codes might grouped single program label. common example Engineering “Industrial/Systems Engineering” label assign following CIP codes: 142701 Systems Engineering 143501 Industrial Engineering 143601 Manufacturing Engineering 143701 Operations Research student migrating among CIPs appear multiple rows current bloc, yet consider change CIP change major. next step addresses anomaly. Select.   Drop CIP code. Filter.   Filter unique observations. difference number observations indicates example includes one student ISE two CIPs. examine student’s record .","code":"# Reusable starting state DT <- copy(baseline_cip) # Join program labels via inner join DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT #>         cip6 program           mcid #>       <char>  <char>         <char> #>    1: 141001      EE MCID3111142965 #>    2: 141001      EE MCID3111145102 #>    3: 141001      EE MCID3111146537 #>   ---                               #> 5655: 141901      ME MCID3112641399 #> 5656: 141901      ME MCID3112641535 #> 5657: 141901      ME MCID3112698681 # Verify program labels sort(unique(DT$program)) #> [1] \"CE\"  \"EE\"  \"ISE\" \"ME\"  # Verify program CIP codes sort(unique(DT$cip6)) #> [1] \"140801\" \"141001\" \"141901\" \"142701\" \"143501\" # Prepare to filter DT[, cip6 := NULL] DT #>       program           mcid #>        <char>         <char> #>    1:      EE MCID3111142965 #>    2:      EE MCID3111145102 #>    3:      EE MCID3111146537 #>   ---                        #> 5655:      ME MCID3112641399 #> 5656:      ME MCID3112641535 #> 5657:      ME MCID3112698681 # Case study ever enrolled DT <- unique(DT) DT #>       program           mcid #>        <char>         <char> #>    1:      EE MCID3111142965 #>    2:      EE MCID3111145102 #>    3:      EE MCID3111146537 #>   ---                        #> 5651:      ME MCID3112641399 #> 5652:      ME MCID3112641535 #> 5653:      ME MCID3112698681"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"closer-look","dir":"Articles","previous_headings":"Program labels","what":"Closer look","title":"Groupings","text":"Examining records selected students detail. Example 1.   student’s term record includes CIP 142701 (Systems Engineering) CIP 143501 (Industrial Engineering), majors combined Industrial/Systems Engineering (ISE) major, illustrating rationale filtering unique observations ID/program pairs ID/CIP pairs.","code":"# All terms, one ID x <- term[mcid == \"MCID3111251565\", .(mcid, cip6)]  # Join case study program labels x <- study_programs[x, on = c(\"cip6\"), nomatch = NULL]  # Unique CIPs for this student unique(x) #>      cip6 program           mcid #>    <char>  <char>         <char> #> 1: 143501     ISE MCID3111251565 #> 2: 142701     ISE MCID3111251565"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"demographics","dir":"Articles","previous_headings":"","what":"Demographics","title":"Groupings","text":"Demographic variables (race/ethnicity sex) regularly left-joined blocs grouping summarizing. Reset   data frame baseline IDs intake section. Select.   student, select join-variable (student ID) variables want add. selecting columns , don’t select columns join operation follow. Add variables.   Left join two data frames, retaining variables .","code":"# Reusable starting state DT <- copy(baseline_mcid) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Extract desired columns cols_we_want <- student[, .(mcid, race, sex)] cols_we_want #>                  mcid          race    sex #>                <char>        <char> <char> #>     1: MCID3111142225         Asian   Male #>     2: MCID3111142283         Asian Female #>     3: MCID3111142290         Asian   Male #>    ---                                     #> 97553: MCID3112898894         White Female #> 97554: MCID3112898895         White Female #> 97555: MCID3112898940 Other/Unknown   Male # Add demographics DT <- cols_we_want[DT, on = c(\"mcid\")] DT #>                  mcid          race    sex #>                <char>        <char> <char> #>     1: MCID3111142689        Latine Female #>     2: MCID3111142782        Latine Female #>     3: MCID3111142881 International   Male #>    ---                                     #> 76873: MCID3112785480         White   Male #> 76874: MCID3112800920         White Female #> 76875: MCID3112870009         White   Male"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"unknown-race-or-sex","dir":"Articles","previous_headings":"Demographics","what":"Unknown race or sex","title":"Groupings","text":"often want remove records race/ethnicity sex “unknown”. Filter.   data.table syntax, can use x %ilike% pattern case-insensitive wrapper around grepl() find matches partial matches. Removing unknown race observations similar. Alternatively, statements can combined. “unknowns” removed, race sex values :","code":"# Display values unique(DT$race) #> [1] \"Latine\"          \"International\"   \"White\"           \"Asian\"           #> [5] \"Black\"           \"Native American\" \"Other/Unknown\" unique(DT$sex) #> [1] \"Female\"  \"Male\"    \"Unknown\" # Remove records with unknown sex, if any x <- copy(DT) x <- x[!sex %ilike% \"unknown\"] x #>                  mcid          race    sex #>                <char>        <char> <char> #>     1: MCID3111142689        Latine Female #>     2: MCID3111142782        Latine Female #>     3: MCID3111142881 International   Male #>    ---                                     #> 76872: MCID3112785480         White   Male #> 76873: MCID3112800920         White Female #> 76874: MCID3112870009         White   Male # Remove records with unknown sex, if any x <- x[!race %ilike% \"unknown\"] x #>                  mcid          race    sex #>                <char>        <char> <char> #>     1: MCID3111142689        Latine Female #>     2: MCID3111142782        Latine Female #>     3: MCID3111142881 International   Male #>    ---                                     #> 73774: MCID3112785480         White   Male #> 73775: MCID3112800920         White Female #> 73776: MCID3112870009         White   Male # Remove unknowns in either of two columns DT <- DT[!(sex %ilike% \"unknown\" | race %ilike% \"unknown\")]  # Verify equivalence check_equiv_frames(x, DT) #> [1] TRUE sort(unique(DT$race)) #> [1] \"Asian\"           \"Black\"           \"International\"   \"Latine\"          #> [5] \"Native American\" \"White\" sort(unique(DT$sex)) #> [1] \"Female\" \"Male\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"add-origin","dir":"Articles","previous_headings":"Demographics","what":"Add origin","title":"Groupings","text":"origin demographic variable use distinguish “domestic” students “international” students. variable recoding race variable. Add variable.   Assuming race/ethnicity “unknown” removed, use conditional assignment create “origin” variable. “unknowns” removed, origin values :","code":"# Two values for origin x <- copy(DT) x <- x[, origin := fifelse(race == \"International\", \"International\", \"Domestic\")] x[] #>                  mcid          race    sex        origin #>                <char>        <char> <char>        <char> #>     1: MCID3111142689        Latine Female      Domestic #>     2: MCID3111142782        Latine Female      Domestic #>     3: MCID3111142881 International   Male International #>    ---                                                   #> 73774: MCID3112785480         White   Male      Domestic #> 73775: MCID3112800920         White Female      Domestic #> 73776: MCID3112870009         White   Male      Domestic sort(unique(x$origin)) #> [1] \"Domestic\"      \"International\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"add-people","dir":"Articles","previous_headings":"Demographics","what":"Add people","title":"Groupings","text":"people demographic variable use many summaries. variable combines race sex variables. Add variable.   combine race/ethnicity sex create grouping variable. “unknowns” removed, people values :","code":"x <- copy(DT) x <- x[, people := paste(race, sex)] x sort(unique(x$people)) #>  [1] \"Asian Female\"           \"Asian Male\"             \"Black Female\"           #>  [4] \"Black Male\"             \"International Female\"   \"International Male\"     #>  [7] \"Latine Female\"          \"Latine Male\"            \"Native American Female\" #> [10] \"Native American Male\"   \"White Female\"           \"White Male\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"add-people-by-origin","dir":"Articles","previous_headings":"Demographics","what":"Add people by origin","title":"Groupings","text":"Combining two ideas , assuming observations unknown race/ethnicity sex removed, possible people values :","code":"# Two values for origin x <- copy(DT) x <- x[, origin := fifelse(race == \"International\", \"International\", \"Domestic\")]  # Combine with sex x[, people := paste(origin, sex)]  # Omit unnecessary variables x <- x[, .(mcid, people)] x #>                  mcid             people #>                <char>             <char> #>     1: MCID3111142689    Domestic Female #>     2: MCID3111142782    Domestic Female #>     3: MCID3111142881 International Male #>    ---                                   #> 73774: MCID3112785480      Domestic Male #> 73775: MCID3112800920    Domestic Female #> 73776: MCID3112870009      Domestic Male sort(unique(x$people)) #> [1] \"Domestic Female\"      \"Domestic Male\"        \"International Female\" #> [4] \"International Male\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"other-variables","dir":"Articles","previous_headings":"","what":"Other variables","title":"Groupings","text":"Depending one’s research question, number MIDFIELD variables might used grouping records. section illustrate joining variables student, term, degree working data frame. use original source files copied earlier variables want use removed applied select_required().","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"from-student","dir":"Articles","previous_headings":"Other variables","what":"From student","title":"Groupings","text":"Reset   Reset working data frame. available variables source student data : Select.   Select variables key (ID). Add variables.   Left join add new columns.","code":"# Reusable starting state DT <- copy(baseline_mcid) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Variables in the practice data set names(source_student) #>  [1] \"mcid\"           \"institution\"    \"transfer\"       \"hours_transfer\" #>  [5] \"race\"           \"sex\"            \"age_desc\"       \"us_citizen\"     #>  [9] \"home_zip\"       \"high_school\"    \"sat_math\"       \"sat_verbal\"     #> [13] \"act_comp\" # Extract desired columns cols_we_want <- source_student[, .(mcid, transfer, hours_transfer)] # Add desired columns cols_we_want[DT, on = c(\"mcid\")] #>                  mcid            transfer hours_transfer #>                <char>              <char>          <num> #>     1: MCID3111142689 First-Time Transfer             NA #>     2: MCID3111142782 First-Time Transfer             NA #>     3: MCID3111142881 First-Time Transfer             NA #>    ---                                                   #> 76873: MCID3112785480 First-Time Transfer              1 #> 76874: MCID3112800920 First-Time Transfer             15 #> 76875: MCID3112870009 First-Time Transfer             80"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"from-term","dir":"Articles","previous_headings":"Other variables","what":"From term","title":"Groupings","text":"Reset   Reset working data frame. available variables source term data : Select.   Select variables key (ID). Add variables.   Left join add new columns. Rows X multiple matches Y.   Consistent left join matching rules, students enrolled multiple terms multiple rows joined data frame. Thus result 531,419 observations 76,875 unique students.","code":"# Reusable starting state DT <- copy(baseline_mcid) # Variables in the practice data set names(source_term) #>  [1] \"mcid\"                \"institution\"         \"term\"                #>  [4] \"cip6\"                \"level\"               \"standing\"            #>  [7] \"coop\"                \"hours_term\"          \"hours_term_attempt\"  #> [10] \"hours_cumul\"         \"hours_cumul_attempt\" \"gpa_term\"            #> [13] \"gpa_cumul\" # Extract desired columns cols_we_want <- source_term[, .(mcid, term, hours_term, gpa_term)] # Add desired columns cols_we_want[DT, on = c(\"mcid\")] #>                   mcid   term hours_term gpa_term #>                 <char> <char>      <num>    <num> #>      1: MCID3111142689  19883          9     3.33 #>      2: MCID3111142782  19883         16     2.80 #>      3: MCID3111142782  19885          4     3.00 #>     ---                                           #> 531417: MCID3112870009  19953         12     3.57 #> 531418: MCID3112870009  19954          1     4.00 #> 531419: MCID3112870009  19983          7     4.00"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"from-degree","dir":"Articles","previous_headings":"Other variables","what":"From degree","title":"Groupings","text":"Reset   Reset working data frame. available variables source degree data : Select.   Select two variables key (ID). Add variables.   Left join add new columns. Rows X match Y.   Consistent left join matching rules, students DT graduate NA values term_degree cip6 columns joined data tables. Thus result 76,875 unique students 43,786 earned degrees.","code":"# Reusable starting state DT <- copy(baseline_mcid) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009 # Variables in the practice data set names(source_degree) #> [1] \"mcid\"        \"institution\" \"term_degree\" \"cip6\"        \"degree\" # Extract desired columns cols_we_want <- source_degree[, .(mcid, cip6, degree)] # Add desired columns cols_we_want[DT, on = c(\"mcid\")] #>                  mcid   cip6                                     degree #>                <char> <char>                                     <char> #>     1: MCID3111142689 090401             Bachelor of Arts in Journalism #>     2: MCID3111142782 260101 Bachelor of Science in Biological Sciences #>     3: MCID3111142881 450601              Bachelor of Arts in Economics #>    ---                                                                  #> 76990: MCID3112785480   <NA>                                       <NA> #> 76991: MCID3112800920   <NA>                                       <NA> #> 76992: MCID3112870009   <NA>                                       <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"reusable-code","dir":"Articles","previous_headings":"","what":"Reusable code","title":"Groupings","text":"Program labels preparation.   CIP baseline data frame preserved earlier intake section. Program labels.   summary code chunk ready reference. gathering bloc starters, join-variable might start instead cip6. Demographics preparation.   data frame baseline IDs intake section. Demographics.   summary code chunk ready reference.","code":"DT <- copy(baseline_cip) # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT <- copy(baseline_mcid) # Join race/ethnicity and sex cols_we_want <- student[, .(mcid, race, sex)] DT <- cols_we_want[DT, on = c(\"mcid\")]"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Graduation rate","text":"graduation rate Graduation rate (G)(G) ratio number program “starter-graduates” (Nsg)(N_{sg}) (.e., graduates program started) number program starters (Ns)(N_s). G=NsgNs G=\\frac{N_{sg}}{N_s} bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. starters Bloc degree-seeking students initial terms enrolled degree-granting programs. starter-graduates Subset starters bloc graduates (timely completers) starting programs. timely completion criterion Completing program specified span years, many cases, within 6 years admission (150% “normal” 4-year span), possibly less transfer students. migrators Bloc students leave one program enroll another. Also called switchers. undecided/unspecified MIDFIELD taxonomy includes non-IPEDS code (CIP 999999) Undecided Unspecified indicating instances student declared major institution recorded program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"starters-and-migrators","dir":"Articles","previous_headings":"","what":"Starters and migrators","title":"Graduation rate","text":"pertain graduation rate metric, relationships among starters, migrators, graduates (timely completers) given program P illustrated Figure 1. overall rectangle represents set students ever enrolled program P. interior rectangle represents set graduates (timely completers) program P. Region 1 (shaded) represents graduation rate denominator (Ns)(N_s), set starters program P. Region 2 (shaded) represents graduation rate numerator (Nsg)(N_{sg}), subset starters also graduates program P. Region 3 (unshaded) represents set students excluded graduation rate metric, depending “program” defined discussed . Figure 1. Graduation rate metric. Starters, migrators, timely completers. calculating graduation rate, whether migrator-graduates included count graduates depends program defined terms CIP codes. Institution level. Graduation rate computed institution level includes migrators within institution. example, starters Engineering (CIP 14) graduate Business (CIP 52) starters timely completers institution level. IPEDS defines rate institution completion rate. 2-digit CIP. Graduation rate includes migrator graduates within 2-digit CIP. example, starters Engineering (CIP 14) graduating Business (CIP 52) excluded count Business graduates, migrators within Engineering (6-digit CIP codes starting 14) starters timely completers Engineering. 4-digit CIP. Similar 2-digit case. example, starters Electrical Engineering (CIP 1410) graduating Mechanical Engineering (CIP 1419) excluded count Mechanical Engineering graduates, migrators within Electrical Engineering (6-digit CIP codes starting 1410) starters timely completers Electrical Engineering. 6-digit CIP. Rarely used. Graduation rate CIP level excludes migrators count graduates. Multiple CIPs. cases, single program major includes different 4-digit CIPs. example, migrators Systems Engineering (CIP 1427), Industrial Engineering (CIP 1435), Manufacturing Engineering (CIP 1436), Operations Research (CIP 1437) might considered starters timely completers general program Industrial & Systems Engineering.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"who-is-a-starter","dir":"Articles","previous_headings":"","what":"Who is a starter?","title":"Graduation rate","text":"US, predominant definition graduation rate established US Department Education, Integrated Postsecondary Education Data System (IPEDS). IPEDS definition underlies finding cited earlier graduation rate metric may exclude 60% students. Many IPEDS exclusions relate starters defined. expanding starters definition, MIDFIELD proposes graduation rate definition includes conventionally excluded students except migrators. graduation rate (IPEDS) fraction cohort full-time, first-time, degree-seeking undergraduates complete program within percentage (100%, 150%, 200%) “normal” time (typically 4 years) defined institution. IPEDS excludes students attend college part-time, transfer institutions, start Winter Spring terms (NCES-IPEDS 2020). graduation rate (MIDFIELD) fraction cohort degree-seeking undergraduates complete program timely manner (typically 6 years). MIDFIELD includes students attend college part-time, transfer institutions, start term. Table 1 summarizes comparison IPEDS MIDFIELD graduation rate definitions. Table 1. Comparing graduation rate definitions  First-Year Engineering (FYE) starters estimate degree-granting engineering program FYE student enrolled required enroll FYE. FYE proxy, 6-digit CIP code, denotes program FYE student can considered starter. additional details, see vignette FYE proxies.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Graduation rate","text":"Demonstrating following elements MIDFIELD workflow. Planning.   metric graduation rate. Required blocs starters subset starters graduate starting major. Grouping variables program, race/ethnicity, sex. Programs four Engineering programs used throughout. Initial processing.   Filter student-level records data sufficiency degree-seeking. Blocs.   Gather starters, filter program. Gather graduates, filter program, filter starters’ IDs programs. Groupings.   Add grouping variables. Metrics   Summarize grouping variables compute graduation rate. Displays   Create multiway chart results table. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Graduation rate","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term, ?degree. Loads midfieldr.   Prepared data. View data dictionaries via ?study_programs, ?baseline_mcid, ?fye_proxy. study_programs (derived Programs). baseline_mcid (derived Blocs). fye_proxy (derived FYE proxies).","code":"library(midfieldr) library(midfielddata) library(data.table) library(ggplot2) # Load practice data data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Graduation rate","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Use term student data tables obtain data frame student IDs meeting data sufficiency degree-seeking criteria. Appled practice data, procedure yields baseline_mcid data frame derived Blocs included midfieldr.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(baseline_mcid) DT #>                  mcid #>                <char> #>     1: MCID3111142689 #>     2: MCID3111142782 #>     3: MCID3111142881 #>    ---                #> 76873: MCID3112785480 #> 76874: MCID3112800920 #> 76875: MCID3112870009"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"starters","dir":"Articles","previous_headings":"","what":"Starters","title":"Graduation rate","text":"Starters.   summary code chunk Starters Copy.   prepare joining graduates.","code":"# Isolate starting term DT <- term[DT, .(mcid, term, cip6), on = c(\"mcid\")] DT <- DT[!cip6 %like% \"999999\"] setorderv(DT, cols = c(\"mcid\", \"term\")) DT <- DT[, .SD[which.min(term)], by = \"mcid\"] DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # Continue for starters with FYE DT <- fye_proxy[DT, .(mcid, cip6, proxy), on = c(\"mcid\")] DT[, start := fcase(   cip6 == \"140102\", proxy,   cip6 != \"140102\", cip6 )] DT <- DT[, .(mcid, start)]  # Filter by program on start join_labels <- copy(study_programs) join_labels <- join_labels[, .(program, start = cip6)] DT <- join_labels[DT, on = c(\"start\"), nomatch = NULL] DT[, start := NULL] DT <- unique(DT) # Prepare for joining setcolorder(DT, c(\"mcid\")) starters <- copy(DT) starters #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111150194     ISE #>   ---                        #> 4051: MCID3112619118      EE #> 4052: MCID3112619484      EE #> 4053: MCID3112619666      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"graduates","dir":"Articles","previous_headings":"","what":"Graduates","title":"Graduation rate","text":"Initialize.   data frame baseline IDs intake section. Graduates   summary code chunk Graduates","code":"# Working data frame DT <- copy(baseline_mcid) # Gather graduates, degree CIPs and terms DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"timely\"] DT <- degree[DT, .(mcid, term_degree, cip6), on = c(\"mcid\")]  # Filter by programs and first degree terms DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT <- DT[, .SD[which.min(term_degree)], by = \"mcid\"] DT[, c(\"cip6\", \"term_degree\") := NULL] DT <- unique(DT) DT #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 3262: MCID3112618976      ME #> 3263: MCID3112619484      EE #> 3264: MCID3112641535      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"starter-graduates","dir":"Articles","previous_headings":"","what":"Starter-graduates","title":"Graduation rate","text":"section introduces new material—adapted reusable code sections vignettes. graduation rate metric, timely completer counted among graduates start complete program. Filter.   Use inner join filter graduates ID program match IDs programs starters. Copy.   prepare joining starters.","code":"# Starter-graduates DT <- starters[DT, on = c(\"mcid\", \"program\"), nomatch = NULL] # Prepare for joining setcolorder(DT, c(\"mcid\")) graduates <- copy(DT) graduates #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111150194     ISE #>   ---                        #> 1787: MCID3112617717      ME #> 1788: MCID3112618976      ME #> 1789: MCID3112619484      EE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"closer-look","dir":"Articles","previous_headings":"Starter-graduates","what":"Closer look","title":"Graduation rate","text":"Examining records selected students detail. Example 1.   student starter timely completer Industrial/Systems Engineering (ISE). appear blocs. Example 2.   student starter Electrical Engineering (EE). excluded graduation rate starter-graduate bloc complete EE. degree find completed CIP 143501 (ISE), one study programs. also excluded count ISE graduates weren’t ISE starter. Example 3.   student starter Civil Engineering (CE). excluded graduation rate starter-graduate bloc complete CE. degree find completed CIP 521401 (Marketing). also excluded count Marketing graduates weren’t Marketing starter.","code":"# Same ID in different blocs mcid_we_want <- \"MCID3111150194\" starters[mcid == mcid_we_want] #>              mcid program #>            <char>  <char> #> 1: MCID3111150194     ISE  graduates[mcid == mcid_we_want] #>              mcid program #>            <char>  <char> #> 1: MCID3111150194     ISE # Same ID in different blocs mcid_we_want <- \"MCID3111235261\" starters[mcid == mcid_we_want] #>              mcid program #>            <char>  <char> #> 1: MCID3111235261      EE  graduates[mcid == mcid_we_want] #> Empty data.table (0 rows and 2 cols): mcid,program  degree[mcid == mcid_we_want, .(mcid, cip6)] #>              mcid   cip6 #>            <char> <char> #> 1: MCID3111235261 143501 # Same ID in different blocs mcid_we_want <- \"MCID3111158691\" starters[mcid == mcid_we_want] #>              mcid program #>            <char>  <char> #> 1: MCID3111158691      CE  graduates[mcid == mcid_we_want] #> Empty data.table (0 rows and 2 cols): mcid,program  degree[mcid == mcid_we_want, .(mcid, cip6)] #>              mcid   cip6 #>            <char> <char> #> 1: MCID3111158691 521401"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"groupings","dir":"Articles","previous_headings":"","what":"Groupings","title":"Graduation rate","text":"One grouping variables (program) already included data frames. next grouping variable bloc distinguish starters graduates two data frames combined. Add variable.   Label starters graduates. Join.   Combine two blocs prepare summarizing. student starting graduating program now two observations data: one starter one graduate. Add variables.   Demographics Groupings Note.   MIDFIELD research findings regularly grouped program, race/ethnicity, sex. However, applied practice data groupings produce several groups totals threshold impose preserve anonymity, introducing number NA values resulting charts tables. NAs largely artifact applying groupings practice data.","code":"# For grouping by bloc starters[, bloc := \"starters\"] graduates[, bloc := \"graduates\"] # Prepare for summarizing DT <- rbindlist(list(starters, graduates)) DT #>                 mcid program      bloc #>               <char>  <char>    <char> #>    1: MCID3111142965      EE  starters #>    2: MCID3111145102      EE  starters #>    3: MCID3111150194     ISE  starters #>   ---                                  #> 5840: MCID3112617717      ME graduates #> 5841: MCID3112618976      ME graduates #> 5842: MCID3112619484      EE graduates # Join race/ethnicity and sex cols_we_want <- student[, .(mcid, race, sex)] DT <- cols_we_want[DT, on = c(\"mcid\")] DT #>                 mcid          race    sex program      bloc #>               <char>        <char> <char>  <char>    <char> #>    1: MCID3111142965 International   Male      EE  starters #>    2: MCID3111145102         White   Male      EE  starters #>    3: MCID3111150194         Black   Male     ISE  starters #>   ---                                                       #> 5840: MCID3112617717 International   Male      ME graduates #> 5841: MCID3112618976         White   Male      ME graduates #> 5842: MCID3112619484         White   Male      EE graduates"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"graduation-rate","dir":"Articles","previous_headings":"","what":"Graduation rate","title":"Graduation rate","text":"Summarize.   Count numbers observations combination grouping variables. Reshape.   Transform row-record form set graduation rate calculation. Transform N column two columns, one starters one graduates. Create variable.   Compute metric.","code":"# Count observations by group grouping_variables <- c(\"bloc\", \"program\", \"race\", \"sex\") DT <- DT[, .N, by = grouping_variables] setorderv(DT, grouping_variables) DT #>          bloc program          race    sex     N #>        <char>  <char>        <char> <char> <int> #>  1: graduates      CE         Asian Female     4 #>  2: graduates      CE         Asian   Male     9 #>  3: graduates      CE         Black Female     1 #> ---                                              #> 94:  starters      ME Other/Unknown   Male    53 #> 95:  starters      ME         White Female   146 #> 96:  starters      ME         White   Male  1225 # Prepare to compute metric DT <- dcast(DT, program + race + sex ~ bloc, value.var = \"N\", fill = 0) DT #> Key: <program, race, sex> #>     program          race    sex graduates starters #>      <char>        <char> <char>     <int>    <int> #>  1:      CE         Asian Female         4        7 #>  2:      CE         Asian   Male         9       17 #>  3:      CE         Black Female         1        2 #> ---                                                 #> 49:      ME Other/Unknown   Male        24       53 #> 50:      ME         White Female        71      146 #> 51:      ME         White   Male       566     1225 # Compute metric DT[, rate := round(100 * graduates / starters, 1)] DT #> Key: <program, race, sex> #>     program          race    sex graduates starters  rate #>      <char>        <char> <char>     <int>    <int> <num> #>  1:      CE         Asian Female         4        7  57.1 #>  2:      CE         Asian   Male         9       17  52.9 #>  3:      CE         Black Female         1        2  50.0 #> ---                                                       #> 49:      ME Other/Unknown   Male        24       53  45.3 #> 50:      ME         White Female        71      146  48.6 #> 51:      ME         White   Male       566     1225  46.2"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Graduation rate","text":"Filter.   preserve anonymity people involved, remove observations fewer N_threshold graduates. research data, typically set threshold 10; practice data, demonstrate procedure using threshold 5. Recode.   Readers can readily interpret charts tables programs unabbreviated. Add variable.   combine race/ethnicity sex create combined grouping variable.","code":"# Preserve anonymity N_threshold <- 5 # 10 for research data DT <- DT[graduates >= N_threshold] DT #> Key: <program, race, sex> #>     program          race    sex graduates starters  rate #>      <char>        <char> <char>     <int>    <int> <num> #>  1:      CE         Asian   Male         9       17  52.9 #>  2:      CE International Female         6       12  50.0 #>  3:      CE International   Male        28       56  50.0 #> ---                                                       #> 25:      ME Other/Unknown   Male        24       53  45.3 #> 26:      ME         White Female        71      146  48.6 #> 27:      ME         White   Male       566     1225  46.2 # Recode values for chart and table readability DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )] DT #>        program          race    sex graduates starters  rate #>         <char>        <char> <char>     <int>    <int> <num> #>  1:      Civil         Asian   Male         9       17  52.9 #>  2:      Civil International Female         6       12  50.0 #>  3:      Civil International   Male        28       56  50.0 #> ---                                                          #> 25: Mechanical Other/Unknown   Male        24       53  45.3 #> 26: Mechanical         White Female        71      146  48.6 #> 27: Mechanical         White   Male       566     1225  46.2 # Create a combined category DT[, people := paste(race, sex)] DT[, `:=`(race = NULL, sex = NULL)] setcolorder(DT, c(\"program\", \"people\")) DT #>        program               people graduates starters  rate #>         <char>               <char>     <int>    <int> <num> #>  1:      Civil           Asian Male         9       17  52.9 #>  2:      Civil International Female         6       12  50.0 #>  3:      Civil   International Male        28       56  50.0 #> ---                                                          #> 25: Mechanical   Other/Unknown Male        24       53  45.3 #> 26: Mechanical         White Female        71      146  48.6 #> 27: Mechanical           White Male       566     1225  46.2"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"chart","dir":"Articles","previous_headings":"","what":"Chart","title":"Graduation rate","text":"Order factors.   Order levels categories. Code adapted Multiway data charts. Multiway chart.   Code adapted Multiway data charts. vertical reference line aggregate graduation rate program, independent race/ethnicity sex. missing data marker missing group indicates number graduates threshold set preserve anonymity—largely artifact applying groupings practice data. Figure 2: Graduation rates four Engineering majors.","code":"# Order the categories DT <- order_multiway(DT,   quantity   = \"rate\",   categories = c(\"program\", \"people\"),   method     = \"percent\",   ratio_of   = c(\"graduates\", \"starters\") ) DT #>        program               people graduates starters  rate program_rate #>         <fctr>               <fctr>     <num>    <num> <num>        <num> #>  1:      Civil           Asian Male         9       17  52.9         46.9 #>  2:      Civil International Female         6       12  50.0         46.9 #>  3:      Civil   International Male        28       56  50.0         46.9 #> ---                                                                       #> 25: Mechanical   Other/Unknown Male        24       53  45.3         46.2 #> 26: Mechanical         White Female        71      146  48.6         46.2 #> 27: Mechanical           White Male       566     1225  46.2         46.2 #>     people_rate #>           <num> #>  1:        48.8 #>  2:        50.0 #>  3:        42.9 #> ---             #> 25:        37.5 #> 26:        46.6 #> 27:        45.6 ggplot(DT, aes(x = rate, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_rate), linetype = 2, color = \"gray60\") +   geom_point() +   labs(x = \"Graduation rate (%)\", y = \"\") +   scale_x_continuous(limits = c(20, 90), breaks = seq(0, 100, 10))"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"table","dir":"Articles","previous_headings":"","what":"Table","title":"Graduation rate","text":"Results table.   Code adapted Multiway data charts. (Optional) Format table nearer publication quality. use ‘gt’ package. Table 2: Graduation rates (%) four Engineering majors value NA indicates group removed number graduates threshold set preserve anonymity. noted earlier, largely artifact applying groupings practice data.","code":"# Select variables and remove factors display_table <- copy(DT) display_table <- display_table[, .(program, people, rate)] display_table[, people := as.character(people)] display_table[, program := as.character(program)]  # Construct table display_table <- dcast(display_table, people ~ program, value.var = \"rate\") setnames(display_table,   old = c(\"people\"),   new = c(\"People\"),   skip_absent = TRUE ) display_table #> Key: <People> #>                   People Civil Electrical Industrial/Systems Mechanical #>                   <char> <num>      <num>              <num>      <num> #>  1:         Asian Female    NA       33.3                 NA         NA #>  2:           Asian Male  52.9       41.2               42.9       59.3 #>  3:           Black Male    NA       20.7                 NA       33.3 #>  4: International Female  50.0         NA                 NA         NA #>  5:   International Male  50.0       39.7               47.1       42.3 #>  6:        Latine Female    NA         NA                 NA       71.4 #>  7:          Latine Male  27.8       34.3                 NA       35.4 #>  8:   Other/Unknown Male  27.3       31.0                 NA       45.3 #>  9:         White Female  46.5       41.9               47.7       48.6 #> 10:           White Male  48.3       41.1               49.3       46.2 library(gt) display_table |>   gt() |>   tab_caption(\"Table 2: Graduation rates (%) of four Engineering majors\")|>    tab_options(table.font.size = \"small\") |>   opt_stylize(style = 1, color = \"gray\") |>   tab_style(style = list(cell_fill(color = \"#c7eae5\")),             locations = cells_column_labels(columns = everything()))"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Stickiness","text":"stickiness Program “stickiness” $\\small\\left(S\\right)$ ratio number graduates program $\\small\\left(N_g\\right)$ number ever enrolled program $\\small\\left(N_e\\right)$. S=NgNe S = \\frac{N_g}{N_e} bloc grouping student-level data dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. ever-enrolled Bloc students whose term records include specified program least one term. graduates Bloc graduates (timely completers) program, without regard starting programs. timely completion criterion Completing program specified span years, many cases, within 6 years admission (150% “normal” 4-year span), possibly less transfer students. migrators Bloc students leave one program enroll another. Also called switchers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"a-more-inclusive-metric","dir":"Articles","previous_headings":"","what":"A more inclusive metric","title":"Stickiness","text":"Stickiness, comparison graduation rate, characteristics: Includes migrators, graduation rate . based bloc ever enrolled rather starters, need FYE proxies. Counts graduates (timely completers) program, eliminating need filter graduates based starting program. Like MIDFIELD definition graduation rate (contrast IPEDS definition), includes students attend college part-time, transfer institutions, start term. pertain stickiness metric, relationships among starters, migrators, graduates (timely completers) given program P illustrated Figure 1. interior rectangle represents stickiness numerator (Ng)(N_g), set graduates (timely completers) program P. overall rectangle represents stickiness denominator (Ne)(N_e), set students ever enrolled program P. Figure 1. Stickiness metric. Starters, migrators, timely completers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Stickiness","text":"Demonstrating following elements MIDFIELD workflow. Planning.   metric stickiness. Required blocs ever-enrolled graduates. Grouping variables program, race/ethnicity, sex. Programs four Engineering programs used throughout. Initial processing.   Filter student-level records data sufficiency degree-seeking. Blocs.   Gather ever enrolled, filter program. Gather graduates, filter program. Groupings.   Add grouping variables. Metrics   Summarize grouping variables compute stickiness. Displays   Create multiway chart results table. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Stickiness","text":"Start.   writing script follow along, use packages article: Load.   Practice datasets. View data dictionaries via ?student, ?term, ?degree. Loads midfieldr.   Prepared data. View data dictionary via ?study_programs, ?baseline_mcid. study_programs (derived Programs). baseline_mcid (derived Blocs).","code":"library(midfieldr) library(midfielddata) library(data.table) library(ggplot2) # Load practice data data(student, term, degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Stickiness","text":"Select (optional).   Reduce number columns. Code reproduced Getting started. Initialize.   Use term student data tables obtain data frame student IDs meeting data sufficiency degree-seeking criteria. Appled practice data, procedure yields baseline_mcid data frame derived Blocs included midfieldr.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(baseline_mcid)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"ever-enrolled","dir":"Articles","previous_headings":"","what":"Ever enrolled","title":"Stickiness","text":"Ever enrolled.   summary code chunk Blocs. Copy.   prepare joining graduates.","code":"# Ever-enrolled bloc DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] DT <- unique(DT)  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT #>       program           mcid #>        <char>         <char> #>    1:      EE MCID3111142965 #>    2:      EE MCID3111145102 #>    3:      EE MCID3111146537 #>   ---                        #> 5651:      ME MCID3112641399 #> 5652:      ME MCID3112641535 #> 5653:      ME MCID3112698681 # Prepare for joining setcolorder(DT, c(\"mcid\")) ever_enrolled <- copy(DT) ever_enrolled #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 5651: MCID3112641399      ME #> 5652: MCID3112641535      ME #> 5653: MCID3112698681      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"graduates","dir":"Articles","previous_headings":"","what":"Graduates","title":"Stickiness","text":"Initialize.   data frame baseline IDs intake section. Graduates   summary code chunk Graduates Copy.   prepare joining ever enrolled","code":"# Working data frame DT <- copy(baseline_mcid) # Gather graduates and their degree CIPs DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"timely\"] DT <- degree[DT, .(mcid, term_degree, cip6), on = c(\"mcid\")]  # Filter by program and first-degree terms only DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT <- DT[, .SD[which.min(term_degree)], by = \"mcid\"] DT[, c(\"cip6\", \"term_degree\") := NULL] DT <- unique(DT) DT #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 3262: MCID3112618976      ME #> 3263: MCID3112619484      EE #> 3264: MCID3112641535      ME # Prepare for joining setcolorder(DT, c(\"mcid\")) graduates <- copy(DT) graduates #>                 mcid program #>               <char>  <char> #>    1: MCID3111142965      EE #>    2: MCID3111145102      EE #>    3: MCID3111146537      EE #>   ---                        #> 3262: MCID3112618976      ME #> 3263: MCID3112619484      EE #> 3264: MCID3112641535      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"groupings","dir":"Articles","previous_headings":"","what":"Groupings","title":"Stickiness","text":"One grouping variables (program) already included data frames. next grouping variable bloc distinguish starters graduates two data frames combined. Add variable.   Label ever enrolled graduates. Join.   Combine two blocs prepare summarizing. graduate two observations data: one ever enrolled one graduate. Add variables.   Demographics Groupings Verify prepared data.   study_observations, included midfieldr, contains case study information developed . verify two data frames content. Note.   MIDFIELD research findings regularly grouped program, race/ethnicity, sex. However, applied practice data groupings produce several groups totals threshold impose preserve anonymity, introducing number NA values resulting charts tables. NAs largely artifact applying groupings practice data.","code":"# For grouping by bloc ever_enrolled[, bloc := \"ever_enrolled\"] graduates[, bloc := \"graduates\"] # Prepare for summarizing DT <- rbindlist(list(ever_enrolled, graduates)) DT #>                 mcid program          bloc #>               <char>  <char>        <char> #>    1: MCID3111142965      EE ever_enrolled #>    2: MCID3111145102      EE ever_enrolled #>    3: MCID3111146537      EE ever_enrolled #>   ---                                      #> 8915: MCID3112618976      ME     graduates #> 8916: MCID3112619484      EE     graduates #> 8917: MCID3112641535      ME     graduates # Join race/ethnicity and sex cols_we_want <- student[, .(mcid, race, sex)] DT <- cols_we_want[DT, on = c(\"mcid\")] DT #>                 mcid          race    sex program          bloc #>               <char>        <char> <char>  <char>        <char> #>    1: MCID3111142965 International   Male      EE ever_enrolled #>    2: MCID3111145102         White   Male      EE ever_enrolled #>    3: MCID3111146537         Asian Female      EE ever_enrolled #>   ---                                                           #> 8915: MCID3112618976         White   Male      ME     graduates #> 8916: MCID3112619484         White   Male      EE     graduates #> 8917: MCID3112641535         White   Male      ME     graduates # Demonstrate equivalence check_equiv_frames(DT, study_observations) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"stickiness","dir":"Articles","previous_headings":"","what":"Stickiness","title":"Stickiness","text":"Summarize.   Count numbers observations combination grouping variables. Reshape.   Transform row-record form set stickiness metric calculation. Transform N column two columns, one ever-enrolled one graduates. Create variable.   Compute metric. Verify prepared data.   study_results, included midfieldr, contains case study information developed . verify two data frames content.","code":"# Count observations by group grouping_variables <- c(\"bloc\", \"program\", \"sex\", \"race\") DT <- DT[, .N, by = grouping_variables] setorderv(DT, grouping_variables) DT #>              bloc program    sex            race     N #>            <char>  <char> <char>          <char> <int> #>  1: ever_enrolled      CE Female           Asian    15 #>  2: ever_enrolled      CE Female           Black     4 #>  3: ever_enrolled      CE Female   International    23 #> ---                                                    #> 96:     graduates      ME   Male Native American     1 #> 97:     graduates      ME   Male   Other/Unknown    41 #> 98:     graduates      ME   Male           White   953 # Prepare to compute metric DT <- dcast(DT, program + sex + race ~ bloc, value.var = \"N\", fill = 0) DT #> Key: <program, sex, race> #>     program    sex            race ever_enrolled graduates #>      <char> <char>          <char>         <int>     <int> #>  1:      CE Female           Asian            15        10 #>  2:      CE Female           Black             4         1 #>  3:      CE Female   International            23        13 #> ---                                                        #> 48:      ME   Male Native American             5         1 #> 49:      ME   Male   Other/Unknown            80        41 #> 50:      ME   Male           White          1596       953 # Compute metric DT[, stickiness := round(100 * graduates / ever_enrolled, 1)] DT #> Key: <program, sex, race> #>     program    sex            race ever_enrolled graduates stickiness #>      <char> <char>          <char>         <int>     <int>      <num> #>  1:      CE Female           Asian            15        10       66.7 #>  2:      CE Female           Black             4         1       25.0 #>  3:      CE Female   International            23        13       56.5 #> ---                                                                   #> 48:      ME   Male Native American             5         1       20.0 #> 49:      ME   Male   Other/Unknown            80        41       51.2 #> 50:      ME   Male           White          1596       953       59.7 # Demonstrate equivalence check_equiv_frames(DT, study_results) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Stickiness","text":"Filter.   preserve anonymity people involved, remove observations fewer N_threshold graduates. research data, typically set threshold 10; practice data, demonstrate procedure using threshold 5. Recode.   Readers can readily interpret charts tables programs unabbreviated. Add variable.   combine race/ethnicity sex create combined grouping variable.","code":"# Preserve anonymity N_threshold <- 5 # 10 for research data DT <- DT[graduates >= N_threshold] DT #> Key: <program, sex, race> #>     program    sex          race ever_enrolled graduates stickiness #>      <char> <char>        <char>         <int>     <int>      <num> #>  1:      CE Female         Asian            15        10       66.7 #>  2:      CE Female International            23        13       56.5 #>  3:      CE Female        Latine            13         6       46.2 #> ---                                                                 #> 33:      ME   Male        Latine            79        42       53.2 #> 34:      ME   Male Other/Unknown            80        41       51.2 #> 35:      ME   Male         White          1596       953       59.7 # Recode values for chart and table readability DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )] DT #>        program    sex          race ever_enrolled graduates stickiness #>         <char> <char>        <char>         <int>     <int>      <num> #>  1:      Civil Female         Asian            15        10       66.7 #>  2:      Civil Female International            23        13       56.5 #>  3:      Civil Female        Latine            13         6       46.2 #> ---                                                                    #> 33: Mechanical   Male        Latine            79        42       53.2 #> 34: Mechanical   Male Other/Unknown            80        41       51.2 #> 35: Mechanical   Male         White          1596       953       59.7 # Create a combined category DT[, people := paste(race, sex)] DT[, `:=`(race = NULL, sex = NULL)] setcolorder(DT, c(\"program\", \"people\")) DT #>        program               people ever_enrolled graduates stickiness #>         <char>               <char>         <int>     <int>      <num> #>  1:      Civil         Asian Female            15        10       66.7 #>  2:      Civil International Female            23        13       56.5 #>  3:      Civil        Latine Female            13         6       46.2 #> ---                                                                    #> 33: Mechanical          Latine Male            79        42       53.2 #> 34: Mechanical   Other/Unknown Male            80        41       51.2 #> 35: Mechanical           White Male          1596       953       59.7"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"chart","dir":"Articles","previous_headings":"","what":"Chart","title":"Stickiness","text":"Order factors.   Order levels categories. Code adapted Multiway data charts. Multiway chart.   Code adapted Multiway data charts. vertical reference line aggregate stickiness program, independent race/ethnicity sex. missing data marker missing group indicates number graduates threshold set preserve anonymity—largely artifact applying groupings practice data. Figure 2: Stickiness four Engineering majors.","code":"# Order the categories DT <- order_multiway(DT,   quantity   = \"stickiness\",   categories = c(\"program\", \"people\"),   method     = \"percent\",   ratio_of   = c(\"graduates\", \"ever_enrolled\") ) DT #>        program               people graduates ever_enrolled stickiness #>         <fctr>               <fctr>     <num>         <num>      <num> #>  1:      Civil         Asian Female        10            15       66.7 #>  2:      Civil International Female        13            23       56.5 #>  3:      Civil        Latine Female         6            13       46.2 #> ---                                                                    #> 33: Mechanical          Latine Male        42            79       53.2 #> 34: Mechanical   Other/Unknown Male        41            80       51.2 #> 35: Mechanical           White Male       953          1596       59.7 #>     program_stickiness people_stickiness #>                  <num>             <num> #>  1:               62.4              62.7 #>  2:               62.4              47.1 #>  3:               62.4              56.0 #> ---                                      #> 33:               59.0              47.4 #> 34:               59.0              45.6 #> 35:               59.0              59.3 ggplot(DT, aes(x = stickiness, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_stickiness), linetype = 2, color = \"gray60\") +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\") +   scale_x_continuous(limits = c(20, 90), breaks = seq(0, 100, 10))"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"table","dir":"Articles","previous_headings":"","what":"Table","title":"Stickiness","text":"Results table.   Code adapted Multiway data charts. (Optional) Format table nearer publication quality. use ‘gt’ package. Table 1: Stickiness (%) four Engineering majors value NA indicates group removed number graduates threshold set preserve anonymity. noted earlier, largely artifact applying groupings practice data.","code":"# Select variables and remove factors display_table <- copy(DT) display_table <- display_table[, .(program, people, stickiness)] display_table[, people := as.character(people)] display_table[, program := as.character(program)]  # Construct table display_table <- dcast(display_table, people ~ program, value.var = \"stickiness\") setnames(display_table,   old = c(\"people\"),   new = c(\"People\"),   skip_absent = TRUE ) display_table #> Key: <People> #>                 People Civil Electrical Industrial/Systems Mechanical #>                 <char> <num>      <num>              <num>      <num> #>  1:       Asian Female  66.7       57.1               66.7         NA #>  2:         Asian Male  83.3       57.7               58.3       64.5 #>  3:       Black Female    NA         NA               85.7         NA #> ---                                                                   #>  9: Other/Unknown Male  40.7       38.1                 NA       51.2 #> 10:       White Female  61.6       47.5               70.1       62.9 #> 11:         White Male  64.5       50.8               69.5       59.7 library(gt) display_table |>   gt() |>   tab_caption(\"Table 1: Stickiness (%) of four Engineering majors\")|>    tab_options(table.font.size = \"small\") |>   opt_stylize(style = 1, color = \"gray\") |>   tab_style(style = list(cell_fill(color = \"#c7eae5\")),             locations = cells_column_labels(columns = everything()))"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Multiway data and charts","text":"multiway data data set three variables: category m levels; second independent category n levels; quantitative variable (response) length mn value response combination levels two categorical variables. multiway chart multi-panel dot plot: horizontal, quantitative scales; rows encode one category; panels encode second category. panels identical axes. ordering rows panels crucial perception effects. multiway superposition Multiway data can extended include third category p levels; quantitative response length mnp, one combination levels three categories; rows panels encode first two categories usual; p data markers encode third category row. Clarity usually requires p = 2 . stickiness Program “stickiness” $\\small\\left(S\\right)$ ratio number graduates program $\\small\\left(N_g\\right)$ number ever enrolled program $\\small\\left(N_e\\right)$.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Multiway data and charts","text":"start results data frame Case study: Results vignette, containing data four engineering programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) grouped program, race/ethnicity, sex. data filtered data sufficiency, degree seeking, program, graduates filtered timely completion. prepare data use input order_multiway() use results construct multiway charts ordered category median values category percentage values. Reminder.   midfielddata datasets practice, research.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Multiway data and charts","text":"Start.   writing script follow along, use packages article: Loads midfieldr.   Prepared data. View data dictionary via ?study_results. study_results (derived Stickiness).","code":"library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Multiway data and charts","text":"Initialize.   Assign working data frame. Filter.   Human subject privacy potentially risk small populations even anonymized observations. Therefore, tabulating graphing data dissemination, omit observations fewer 10 graduates. magnitude bound (graduates >= 10) can vary depending one’s data. Note.   MIDFIELD research findings regularly grouped program, race/ethnicity, sex. However, applied practice data groupings produce several groups totals threshold impose preserve anonymity, introducing number NA values resulting charts tables. NAs largely artifact applying groupings practice data.","code":"# Working data frame DT <- copy(study_results) # Protecting privacy of small populations DT <- DT[graduates >= 10]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"preparing-the-categorical-variables","dir":"Articles","previous_headings":"","what":"Preparing the categorical variables","title":"Multiway data and charts","text":"apply order_multiway() function, edit categorical variables create forms want final charts tables. Recode.   first multiway categorical variable program. improve readability charts, recode program abbreviations. Create variable.   combine race sex single categorical variable (denoted people) second, independent categorical variable. point, multiway categories (programs people) “character” class.","code":"# Recode for panel and row labels DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )] # Create a new category DT[, people := paste(race, sex)] setcolorder(DT, c(\"program\", \"people\", \"race\", \"sex\")) DT #>        program               people          race    sex ever_enrolled #>         <char>               <char>        <char> <char>         <int> #>  1:      Civil         Asian Female         Asian Female            15 #>  2:      Civil International Female International Female            23 #>  3:      Civil         White Female         White Female           263 #> ---                                                                    #> 27: Mechanical          Latine Male        Latine   Male            79 #> 28: Mechanical   Other/Unknown Male Other/Unknown   Male            80 #> 29: Mechanical           White Male         White   Male          1596 #>     graduates stickiness #>         <int>      <num> #>  1:        10       66.7 #>  2:        13       56.5 #>  3:       162       61.6 #> ---                      #> 27:        42       53.2 #> 28:        41       51.2 #> 29:       953       59.7"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"order_multiway","dir":"Articles","previous_headings":"","what":"order_multiway()","title":"Multiway data and charts","text":"Converts categorical variables factors ordered quantitative variable. Arguments. dframe   Data frame multiway data columns. Two additional numeric columns required using percentage ordering method. quantity   Name (quotes) single multiway quantitative variable. categories   Vector names (quotes) two multiway categorical variables. method   “median” (default) “percent”, method ordering levels categories. Argument used name. ratio_of   Vector names (quotes) numerator denominator columns produced quantitative variable, required using percentage ordering method. Argument used name. Equivalent usage.   following implementations yield identical results, Output.   Adds two columns data frame containing computed values determine ordering factors. column names values depend ordering method: method = \"median\"   Yields medians quantitative variable grouped categorical variables. method = \"percent\"   Yields percentages based ratio produces quantitative variable grouped categorical variables.","code":"# Required arguments in order and explicitly named x <- order_multiway(   dframe = DT,   quantity = \"stickiness\",   categories = c(\"program\", \"people\"),   method = \"median\" )  # Required arguments in order, but not named y <- order_multiway(DT, \"stickiness\", c(\"program\", \"people\"), method = \"median\")  # Using the implicit default for method z <- order_multiway(DT, \"stickiness\", c(\"program\", \"people\"))  # Demonstrate equivalence check_equiv_frames(x, y) #> [1] TRUE check_equiv_frames(x, z) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"median-ordered-data","dir":"Articles","previous_headings":"","what":"Median-ordered data","title":"Multiway data and charts","text":"example, select count graduates (graduates) quantitative variable use order_multiway() order categories median numbers graduates. minimize number columns printout, select three multiway variables drop columns. Applying order_multiway(), specify \"graduates\" quantitative column, \"program\" \"people\" two categorical columns, \"median\" method ordering levels. function adds two columns (program_median people_median) display computed median values used order factors. median method, new column names combination category variable names (categories) plus median. example, results show median number Civil Engineering graduates 28 median number Asian Female graduates 10. confirm results computing median values independently. following values agree program_median variable , next result agrees values people_median. demonstrate categories “factor” class: program factor 4 levels; people factor 9 levels; neither ordered alphabetically—ordering increasing median value expected.","code":"# Select multiway variables when quantity is count DT_count <- copy(DT) DT_count <- DT_count[, .(program, people, graduates)] DT_count #>        program               people graduates #>         <char>               <char>     <int> #>  1:      Civil         Asian Female        10 #>  2:      Civil International Female        13 #>  3:      Civil         White Female       162 #> ---                                           #> 27: Mechanical          Latine Male        42 #> 28: Mechanical   Other/Unknown Male        41 #> 29: Mechanical           White Male       953 # Convert categories to factors ordered by median DT_count <- order_multiway(DT_count,   quantity = \"graduates\",   categories = c(\"program\", \"people\"),   method = \"median\" ) DT_count #>        program               people graduates program_median people_median #>         <fctr>               <fctr>     <num>          <num>         <num> #>  1:      Civil         Asian Female        10           28.0          10.0 #>  2:      Civil International Female        13           28.0          12.0 #>  3:      Civil         White Female       162           28.0          95.0 #> ---                                                                        #> 27: Mechanical          Latine Male        42           45.5          31.0 #> 28: Mechanical   Other/Unknown Male        41           45.5          16.0 #> 29: Mechanical           White Male       953           45.5         525.5 # Verify order_multiway() output temp <- DT_count[, lapply(.SD, median), .SDcols = c(\"graduates\"), by = c(\"program\")] temp #>               program graduates #>                <fctr>     <num> #> 1:              Civil      28.0 #> 2:         Electrical      36.5 #> 3: Industrial/Systems      14.0 #> 4:         Mechanical      45.5 # Verify order_multiway() output temp <- DT_count[, lapply(.SD, median), .SDcols = c(\"graduates\"), by = c(\"people\")] temp #>                  people graduates #>                  <fctr>     <num> #> 1:         Asian Female      10.0 #> 2: International Female      12.0 #> 3:         White Female      95.0 #> 4:           Asian Male      37.0 #> 5:   International Male      72.0 #> 6:          Latine Male      31.0 #> 7:   Other/Unknown Male      16.0 #> 8:           White Male     525.5 #> 9:           Black Male      18.0 # Verify first category is a factor class(DT_count$program) #> [1] \"factor\" levels(DT_count$program) #> [1] \"Industrial/Systems\" \"Civil\"              \"Electrical\"         #> [4] \"Mechanical\"  # Verify second category is a factor class(DT_count$people) #> [1] \"factor\" levels(DT_count$people) #> [1] \"Asian Female\"         \"International Female\" \"Other/Unknown Male\"   #> [4] \"Black Male\"           \"Latine Male\"          \"Asian Male\"           #> [7] \"International Male\"   \"White Female\"         \"White Male\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"median-ordered-charts","dir":"Articles","previous_headings":"","what":"Median-ordered charts","title":"Multiway data and charts","text":"use conventional ggplot2 functions create multiway graphs. create set axis labels scale specifications series median-ordered charts. use logarithmic scale case numbers span three orders magnitude. first two multiway charts encodes programs rows people panels. .table = FALSE argument places rows panels “graphical order”, , increasing left right bottom top. panel median value drawn vertical reference line panel. Figure 1. Rows columns ordered median values. programs assigned rows program medians increase bottom top. Industrial/Systems smallest median; Mechanical Engineering largest. drew chart two columns illustrate graph order panels. Asian Female students smallest median number graduates, followed International Female, /Unknown Male, Black Male, etc. space permits, however, laying panels single column can useful seeing effects. , redraw panels one column. Figure 2. Redraw panels one column. Reading multiway graph can effectively compare values within panel panels. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. interesting stories often visual anomalies. example, White Female panel shows clear separation two groupings majors, Mechanical Civil compared Electrical Industrial/Systems. However, chart permit us effectively compare eight values given program. create second multiway switch aesthetic roles categories—example encoding people rows programs panels. Figure 3. Switching row column assignments categorical variables. chart, visual asymmetry stands Electrical Engineering, White Female, low given overall rank.","code":"# Common x-scale and axis labels for median-ordered charts common_scale_x_log10 <- scale_x_log10(   limits = c(3, 1000),   breaks = c(3, 10, 30, 100, 300, 1000),   minor_breaks = c(seq(3, 10, 1), seq(20, 100, 10), seq(200, 1000, 100)) ) common_labs <- labs(   x = \"Number of graduates (log base 10 scale)\",   y = \"\",   title = \"Engineering graduates\" ) ref_line_color <- \"gray60\" # Two columns of panels ggplot(DT_count, aes(x = graduates, y = program)) +   facet_wrap(vars(people), ncol = 2, as.table = FALSE) +   geom_vline(aes(xintercept = people_median), linetype = 2, color = ref_line_color) +   common_scale_x_log10 +   common_labs +   geom_point() # Programs encoded by rows ggplot(DT_count, aes(x = graduates, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = people_median), linetype = 2, color = ref_line_color) +   common_scale_x_log10 +   common_labs +   geom_point() # People encoded by rows ggplot(DT_count, aes(x = graduates, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_median), linetype = 2, color = ref_line_color) +   common_scale_x_log10 +   common_labs +   geom_point()"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"avoid-alphabetical-order","dir":"Articles","previous_headings":"","what":"Avoid alphabetical order","title":"Multiway data and charts","text":"next figure, data plotted alphabetical order, reveals none effects seen previous chart. ordering scheme based values quantitative variable necessary multiway chart reveal response affected categories. Figure 4. Alphabetical ordering conceals patterns data.","code":"# Create alphabetical ordering DT_alpha <- copy(DT) DT_alpha[, people := factor(people, levels = sort(unique(people), decreasing = TRUE))]  # People encoded by rows, alphabetically ggplot(DT_alpha, aes(x = graduates, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = TRUE) +   common_scale_x_log10 +   common_labs +   geom_point()"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"multiway-superposition","dir":"Articles","previous_headings":"","what":"Multiway superposition","title":"Multiway data and charts","text":"illustrate superposing data, return data set separate columns race/ethnicity sex. Let’s use graduates quantitative variable omit unnecessary variables. superposed category sex. multiway data conditioned graduates, quantitative variable, program race, two categorical variables. example, program race factors, ordered median number graduates sex remains unordered character variable. Using conventional ggplot syntax, aesthetics include x y . superpose data markers sex rows assigning color = sex inside aes() function. Figure 5. Using superposition display three categories. superposing data sex, facilitate direct comparison Male Female students within program race. Swapping rows panels yields next chart, can directly compare Male Female students within race/ethnicity category across programs. men tend outnumber women engineering programs, chart clearly shows clusters sex. Figure 6. Switching row column assignments two categorical variables.","code":"# Select multiway variables with a superposed category DT_count <- copy(DT) DT_count <- DT_count[, .(program, race, sex, graduates)] DT_count #>        program          race    sex graduates #>         <char>        <char> <char>     <int> #>  1:      Civil         Asian Female        10 #>  2:      Civil International Female        13 #>  3:      Civil         White Female       162 #> ---                                           #> 27: Mechanical        Latine   Male        42 #> 28: Mechanical Other/Unknown   Male        41 #> 29: Mechanical         White   Male       953 # Convert categories to factors ordered by median DT_count <- order_multiway(DT_count,   quantity = \"graduates\",   categories = c(\"program\", \"race\") ) DT_count #>        program          race graduates    sex program_median race_median #>         <fctr>        <fctr>     <num> <char>          <num>       <num> #>  1:      Civil         Asian        10 Female           28.0          14 #>  2:      Civil International        13 Female           28.0          34 #>  3:      Civil         White       162 Female           28.0         148 #> ---                                                                      #> 27: Mechanical        Latine        42   Male           45.5          31 #> 28: Mechanical Other/Unknown        41   Male           45.5          16 #> 29: Mechanical         White       953   Male           45.5         148 # Race/ethnicity encoded by rows, sex superposed ggplot(DT_count, aes(x = graduates, y = race, color = sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_median), linetype = 2, color = ref_line_color) +   common_scale_x_log10 +   common_labs +   geom_point(size = 2) +   scale_color_manual(values = c(\"#004488\", \"#DDAA33\")) # Program encoded by rows, sex superposed ggplot(DT_count, aes(x = graduates, y = program, color = sex)) +   facet_wrap(vars(race), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = race_median), linetype = 2, color = ref_line_color) +   common_scale_x_log10 +   common_labs +   geom_point(size = 2) +   scale_color_manual(values = c(\"#004488\", \"#DDAA33\"))"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"percentage-ordered-data","dir":"Articles","previous_headings":"","what":"Percentage-ordered data","title":"Multiway data and charts","text":"persistence metrics stickiness graduation rate, quantitative variable ratio percentage. , return original case study results select stickiness (stickiness) quantitative variable. stickiness ratio, set method “percent” assign graduates ever_enrolled ratio_of argument. order_multiway() sums ever_enrolled graduates counts category produces grouped percentages order category levels. function converts categories factors adds two columns (program_stickiness people_stickiness) display computed percentages used order factors. percentage method, new column names combination category variable names (categories) plus quantitative column name (x). example, results show stickiness Civil Engineering (program_stickiness) 62.5%, Asian Females, 62.7% (people_stickiness). confirm results computing group stickiness values independently. following values agree program_stickiness variable , next result agrees values people_stickiness.","code":"# Select multiway variables when quantity is a percentage options(datatable.print.topn = 3) DT_ratio <- copy(DT) DT_ratio[, c(\"race\", \"sex\") := NULL] DT_ratio #>        program               people ever_enrolled graduates stickiness #>         <char>               <char>         <int>     <int>      <num> #>  1:      Civil         Asian Female            15        10       66.7 #>  2:      Civil International Female            23        13       56.5 #>  3:      Civil         White Female           263       162       61.6 #> ---                                                                    #> 27: Mechanical          Latine Male            79        42       53.2 #> 28: Mechanical   Other/Unknown Male            80        41       51.2 #> 29: Mechanical           White Male          1596       953       59.7 # Convert categories to factors ordered by group percentages DT_ratio <- order_multiway(DT_ratio,   quantity = \"stickiness\",   categories = c(\"program\", \"people\"),   method = \"percent\",   ratio_of = c(\"graduates\", \"ever_enrolled\") ) DT_ratio #>        program               people graduates ever_enrolled stickiness #>         <fctr>               <fctr>     <num>         <num>      <num> #>  1:      Civil         Asian Female        10            15       66.7 #>  2:      Civil International Female        13            23       56.5 #>  3:      Civil         White Female       162           263       61.6 #> ---                                                                    #> 27: Mechanical          Latine Male        42            79       53.2 #> 28: Mechanical   Other/Unknown Male        41            80       51.2 #> 29: Mechanical           White Male       953          1596       59.7 #>     program_stickiness people_stickiness #>                  <num>             <num> #>  1:               62.5              62.7 #>  2:               62.5              57.1 #>  3:               62.5              60.5 #> ---                                      #> 27:               58.9              47.4 #> 28:               58.9              45.6 #> 29:               58.9              59.3 # Verify order_multiway() output temp <- DT[, lapply(.SD, sum), .SDcols = c(\"ever_enrolled\", \"graduates\"), by = c(\"program\")] temp[, stickiness := round(100 * graduates / ever_enrolled, 1)] temp #>               program ever_enrolled graduates stickiness #>                <char>         <int>     <int>      <num> #> 1:              Civil          1470       919       62.5 #> 2:         Electrical          1437       718       50.0 #> 3: Industrial/Systems           325       220       67.7 #> 4:         Mechanical          2271      1338       58.9 # Verify order_multiway() output temp <- DT[, lapply(.SD, sum), .SDcols = c(\"ever_enrolled\", \"graduates\"), by = c(\"people\")] temp[, stickiness := round(100 * graduates / ever_enrolled, 1)] temp #>                  people ever_enrolled graduates stickiness #>                  <char>         <int>     <int>      <num> #> 1:         Asian Female            51        32       62.7 #> 2: International Female            42        24       57.1 #> 3:         White Female           671       406       60.5 #> 4:           Asian Male           253       159       62.8 #> 5:   International Male           492       246       50.0 #> 6:          Latine Male           190        90       47.4 #> 7:   Other/Unknown Male           149        68       45.6 #> 8:           White Male          3596      2134       59.3 #> 9:           Black Male            59        36       61.0"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"percentage-ordered-charts","dir":"Articles","previous_headings":"","what":"Percentage-ordered charts","title":"Multiway data and charts","text":"quantitative variable group stickiness. first chart encodes programs rows people panels. Row-order determined program stickiness computed students; panel order determined people stickiness computed programs. order rows panels changed earlier charts. Figure 7. Rows column ordered percentages. visual asymmetries chart stand Industrial/Systems, Asian Male, low stickiness given given program’s overall rank. Civil, White Female, low stickiness given program’s overall rank. , compare eight values given program effectively. done far better second chart encodes people rows programs panels. Figure 8. Switching row column assignments categorical variables. chart shows lot variability. visual asymmetries stand Asian Female, Mechanical Engineering, high given group’s overall rank Asian Male Female contrast, Civil","code":"# Programs encoded by rows ggplot(DT_ratio, aes(x = stickiness, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = people_stickiness), linetype = 2, color = ref_line_color) +   labs(x = \"Stickiness\", y = \"\", title = \"Engineering stickiness\") +   geom_point() # People encoded by rows ggplot(DT_ratio, aes(x = stickiness, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_stickiness), linetype = 2, color = ref_line_color) +   labs(x = \"Stickiness\", y = \"\", title = \"Engineering stickiness\") +   geom_point()"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"tabulating-counts","dir":"Articles","previous_headings":"","what":"Tabulating counts","title":"Multiway data and charts","text":"Readers reviewers charts often want see exact numbers represented data markers. serve need, tabulate multiway data transforming block-record form (convenient use ggplot2) row-record form—, “long” “wide” form. illustrate, let’s tabulate number graduates people program. Start selecting desired variables . Use dcast() transform block records row records. Edit one column name print table. Table 1: Number engineering graduates Multiway data structure lends tables type. levels one category first column; levels second category table header; quantitative variable fills cells—response value combination levels two categories.","code":"# Select the desired variables tbl <- copy(DT) tbl <- tbl[, .(program, people, graduates)] tbl #>        program               people graduates #>         <char>               <char>     <int> #>  1:      Civil         Asian Female        10 #>  2:      Civil International Female        13 #>  3:      Civil         White Female       162 #> ---                                           #> 27: Mechanical          Latine Male        42 #> 28: Mechanical   Other/Unknown Male        41 #> 29: Mechanical           White Male       953 # Transform shape to row-record form tbl <- dcast(tbl, people ~ program, value.var = \"graduates\") tbl #> Key: <people> #>                  people Civil Electrical Industrial/Systems Mechanical #>                  <char> <int>      <int>              <int>      <int> #> 1:         Asian Female    10         12                 10         NA #> 2:           Asian Male    25         71                 14         49 #> 3:           Black Male    NA         17                 NA         19 #> 4: International Female    13         NA                 NA         11 #> 5:   International Male    55         90                 12         89 #> 6:          Latine Male    31         17                 NA         42 #> 7:   Other/Unknown Male    11         16                 NA         41 #> 8:         White Female   162         56                 54        134 #> 9:           White Male   612        439                130        953 # Edit column header setnames(tbl, old = \"people\", new = \"Group\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"tabulating-percentages","dir":"Articles","previous_headings":"","what":"Tabulating percentages","title":"Multiway data and charts","text":"tabulating percentages, readers reviewers likely want percentage values well underlying ratios integers. example, suggest one way values can presented single table. step, concatenate character string number students ever enrolled parentheses followed percentage stickiness e.g., (16) 56.2. Now can perform transformation block records row records . Edit one column name print table. Table 2: Four programs (N ever enrolled) percent stickiness","code":"# Select the desired variables tbl <- copy(DT) tbl <- tbl[, .(program, people, graduates, ever_enrolled, stickiness)] tbl #>        program               people graduates ever_enrolled stickiness #>         <char>               <char>     <int>         <int>      <num> #>  1:      Civil         Asian Female        10            15       66.7 #>  2:      Civil International Female        13            23       56.5 #>  3:      Civil         White Female       162           263       61.6 #> ---                                                                    #> 27: Mechanical          Latine Male        42            79       53.2 #> 28: Mechanical   Other/Unknown Male        41            80       51.2 #> 29: Mechanical           White Male       953          1596       59.7 # Construct new cell values tbl[, results := paste0(\"\\u0028\", ever_enrolled, \"\\u0029\", \"\\u00A0\", round(stickiness, 1), \"%\")] tbl #>        program               people graduates ever_enrolled stickiness #>         <char>               <char>     <int>         <int>      <num> #>  1:      Civil         Asian Female        10            15       66.7 #>  2:      Civil International Female        13            23       56.5 #>  3:      Civil         White Female       162           263       61.6 #> ---                                                                    #> 27: Mechanical          Latine Male        42            79       53.2 #> 28: Mechanical   Other/Unknown Male        41            80       51.2 #> 29: Mechanical           White Male       953          1596       59.7 #>          results #>           <char> #>  1:   (15) 66.7% #>  2:   (23) 56.5% #>  3:  (263) 61.6% #> ---              #> 27:   (79) 53.2% #> 28:   (80) 51.2% #> 29: (1596) 59.7% # Transform shape to row-record form tbl <- dcast(tbl, people ~ program, value.var = \"results\", fill = NA_character_) tbl #> Key: <people> #>                  people       Civil  Electrical Industrial/Systems   Mechanical #>                  <char>      <char>      <char>             <char>       <char> #> 1:         Asian Female  (15) 66.7%  (21) 57.1%         (15) 66.7%         <NA> #> 2:           Asian Male  (30) 83.3% (123) 57.7%         (24) 58.3%   (76) 64.5% #> 3:           Black Male        <NA>  (29) 58.6%               <NA>   (30) 63.3% #> 4: International Female  (23) 56.5%        <NA>               <NA>   (19) 57.9% #> 5:   International Male  (97) 56.7% (195) 46.2%         (22) 54.5%    (178) 50% #> 6:          Latine Male    (66) 47%  (45) 37.8%               <NA>   (79) 53.2% #> 7:   Other/Unknown Male  (27) 40.7%  (42) 38.1%               <NA>   (80) 51.2% #> 8:         White Female (263) 61.6% (118) 47.5%         (77) 70.1%  (213) 62.9% #> 9:           White Male (949) 64.5% (864) 50.8%        (187) 69.5% (1596) 59.7% # Edit column header setnames(tbl, old = \"people\", new = \"Group\", skip_absent = TRUE)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Layton. Maintainer, author, copyright holder. Russell Long. Author, copyright holder, data manager. Matthew Ohland. Author, copyright holder. Marisa Orr. Author, copyright holder. Susan Lord. Author, copyright holder.","code":""},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Layton R, Long R, Ohland M, Orr M, Lord S (2024). midfieldr: Tools Methods Working MIDFIELD Data 'R'. R package version 1.0.2.9003, https://midfieldr.github.io/midfieldr/.","code":"@Manual{,   title = {midfieldr: Tools and Methods for Working with MIDFIELD Data in 'R'},   author = {Richard Layton and Russell Long and Matthew Ohland and Marisa Orr and Susan Lord},   year = {2024},   note = {R package version 1.0.2.9003},   url = {https://midfieldr.github.io/midfieldr/}, }"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"Provides tools demonstrates methods working individual undergraduate student-level records (registrar’s data) R. Tools include filters program codes, data sufficiency, timely completion. Methods include gathering blocs records, computing quantitative metrics graduation rate, creating charts visualize comparisons. midfieldr designed work data MIDFIELD research database, sample available midfielddata data package. midfieldr provides functions manipulating student-level data: add_completion_status() Determine completion status every student add_data_sufficiency() Determine data sufficiency every student add_timely_term() Calculate timely completion term every student filter_cip() Filter CIP data match search strings prep_fye_mice() Prepare FYE data multiple imputation select_required() Select required midfieldr variables Additional functions processing intermediate results: order_multiway() Order categorical variables multiway data R packages examples vignettes Data preparation.   use data.table system base R data manipulation (Dowle Srinivasan 2022). assist users might prefer systems, MIDFIELD Institute website (Lord et al. 2024) includes tutorials providing side--side base R, data.table, dplyr solutions common data shaping tasks using MIDFIELD practice data. Charts.   preferred package charts ggplot2 (Wickham 2016). lattice package (Sarkar 2008) also offers users comprehensive control graphical elements (though lattice experience longer current).","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"example, gather students ever enrolled Engineering summarize graduation status (major), grouping race/ethnicity sex. writing script follow along, use packages example: Load practice data. Reduce initial dimensions data tables. Filter data sufficiency. Filter degree-seeking students ever enrolled Engineering. Determine completion status. Aggregate observations groupings. Reshape display results. Table 1: Completion status engineering undergraduates practice data “Timely completion” count graduates completing programs 6 years; “Late completion” count graduating 6 years; “complete” count non-graduates. Reminder.   midfielddata suitable learning work student-level data drawing inferences program attributes student experiences. midfielddata supplies practice data, research data.","code":"library(midfieldr) library(midfielddata) library(data.table) # Load the practice data data(student, term, degree)  # Reduce dimensions of source data tables student <- select_required(student) term <- select_required(term) degree <- select_required(degree)  # View example result term #>                   mcid   institution   term   cip6         level #>                 <char>        <char> <char> <char>        <char> #>      1: MCID3111142225 Institution B  19881 140901 01 First-year #>      2: MCID3111142283 Institution J  19881 240102 01 First-year #>      3: MCID3111142283 Institution J  19883 240102 01 First-year #>     ---                                                          #> 639913: MCID3112898894 Institution B  20181 451001 01 First-year #> 639914: MCID3112898895 Institution B  20181 302001 01 First-year #> 639915: MCID3112898940 Institution B  20181 050103 01 First-year # Initialize the working data frame DT <- term[, .(mcid, cip6)]  # Filter observations for data sufficiency DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"] DT #>                   mcid   cip6       level_i adj_span timely_term term_i #>                 <char> <char>        <char>    <num>      <char> <char> #>      1: MCID3111142689 090401 01 First-year        6       19941  19883 #>      2: MCID3111142782 260101 01 First-year        6       19941  19883 #>      3: MCID3111142782 260101 01 First-year        6       19941  19883 #>     ---                                                                 #> 531417: MCID3112870009 240102 01 First-year        6       20003  19951 #> 531418: MCID3112870009 240102 01 First-year        6       20003  19951 #> 531419: MCID3112870009 240102 01 First-year        6       20003  19951 #>         lower_limit upper_limit data_sufficiency #>              <char>      <char>           <char> #>      1:       19881       20181          include #>      2:       19881       20096          include #>      3:       19881       20096          include #>     ---                                          #> 531417:       19881       20181          include #> 531418:       19881       20181          include #> 531419:       19881       20181          include # Inner join to filter observations for degree-seeking cols_we_want <- student[, .(mcid)] DT <- cols_we_want[DT, on = c(\"mcid\"), nomatch = NULL]  # Filter observations for engineering programs DT <- DT[cip6 %like% \"^14\"]  # Filter observations for unique students (first instance) DT <- DT[, .SD[1], by = c(\"mcid\")] DT #>                  mcid   cip6        level_i adj_span timely_term term_i #>                <char> <char>         <char>    <num>      <char> <char> #>     1: MCID3111142965 140102  01 First-year        6       19941  19883 #>     2: MCID3111145102 140102  01 First-year        6       19941  19883 #>     3: MCID3111146537 141001 02 Second-year        5       19931  19883 #>    ---                                                                  #> 10399: MCID3112641399 141901  01 First-year        6       20181  20123 #> 10400: MCID3112641535 141901  01 First-year        6       20173  20121 #> 10401: MCID3112698681 141901  01 First-year        6       20171  20113 #>        lower_limit upper_limit data_sufficiency #>             <char>      <char>           <char> #>     1:       19881       20096          include #>     2:       19881       20096          include #>     3:       19881       20096          include #>    ---                                          #> 10399:       19881       20181          include #> 10400:       19881       20181          include #> 10401:       19881       20181          include # Add completion status variable DT <- add_completion_status(DT, degree) DT #>                  mcid   cip6        level_i adj_span timely_term term_i #>                <char> <char>         <char>    <num>      <char> <char> #>     1: MCID3111142965 140102  01 First-year        6       19941  19883 #>     2: MCID3111145102 140102  01 First-year        6       19941  19883 #>     3: MCID3111146537 141001 02 Second-year        5       19931  19883 #>    ---                                                                  #> 10399: MCID3112641399 141901  01 First-year        6       20181  20123 #> 10400: MCID3112641535 141901  01 First-year        6       20173  20121 #> 10401: MCID3112698681 141901  01 First-year        6       20171  20113 #>        lower_limit upper_limit data_sufficiency term_degree completion_status #>             <char>      <char>           <char>      <char>            <char> #>     1:       19881       20096          include       19901            timely #>     2:       19881       20096          include       19893            timely #>     3:       19881       20096          include       19913            timely #>    ---                                                                        #> 10399:       19881       20181          include       20163            timely #> 10400:       19881       20181          include       20143            timely #> 10401:       19881       20181          include       20181              late # Left join to add race/ethnicity and sex variables (omit unknowns) cols_we_want <- student[, .(mcid, race, sex)] DT <- student[DT, on = c(\"mcid\")] DT <- DT[!(race %ilike% \"unknown\" | sex %ilike% \"unknown\")]  # Create a variable combining race/ethnicity and sex DT[, people := paste(race, sex)]  # Aggregate observations by groupings DT_display <- DT[, .N, by = c(\"completion_status\", \"people\")] setorderv(DT_display, c(\"completion_status\", \"people\")) DT_display #>     completion_status               people     N #>                <char>               <char> <int> #>  1:              <NA>         Asian Female    43 #>  2:              <NA>           Asian Male   163 #>  3:              <NA>         Black Female    39 #> ---                                              #> 33:            timely Native American Male    13 #> 34:            timely         White Female   985 #> 35:            timely           White Male  4100 # Transform to row-record form DT_display <- dcast(DT_display, people ~ completion_status, value.var = \"N\", fill = 0)  # Prepare the table for display setcolorder(DT_display, c(\"people\", \"timely\", \"late\")) setkeyv(DT_display, c(\"people\")) setnames(DT_display,   old = c(\"people\", \"timely\", \"late\", \"NA\"),   new = c(\"People\", \"Timely completion\", \"Late completion\", \"Did not complete\") )"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"Install CRAN : Install latest development version GitHub : midfieldr interacts practice data provided midfielddata data package. Install midfielddata repository : installed size midfielddata 24 Mb, installation takes time.","code":"install.packages(\"midfieldr\") install.packages(\"pak\") pak::pkg_install(\"MIDFIELDR/midfieldr\") install.packages(\"midfielddata\",   repos = \"https://MIDFIELDR.github.io/drat/\",   type = \"source\" )"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"more-information","dir":"","previous_headings":"","what":"More information","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"MIDFIELD.   database anonymized student-level records approximately 2.4M undergraduates 21 US institutions 1987-2022. Access database requires confidentiality agreement Institutional Review Board (IRB) approval human subjects research. midfielddata.   R data package supplies anonymized student-level records 98,000 undergraduates three US institutions 1988-2018. sample MIDFIELD database, midfielddata provides practice data tools methods midfieldr package.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools and Methods for Working with MIDFIELD Data in R","text":"work supported US National Science Foundation grant numbers 1545667 2142087.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 midfieldr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine completion status for every student — add_completion_status","title":"Determine completion status for every student — add_completion_status","text":"Add columns data frame student-level records indicate whether student completed degree, , whether completion timely.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine completion status for every student — add_completion_status","text":"","code":"add_completion_status(dframe, midfield_degree = degree)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine completion status for every student — add_completion_status","text":"dframe Working data frame student-level records completion-status columns added. Required variables mcid timely_term. See also add_timely_term(). midfield_degree MIDFIELD degree data table equivalent required variables mcid term_degree.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine completion status for every student — add_completion_status","text":"data frame data.table format following properties: rows preserved; columns preserved exception columns added function overwrite existing columns name (); grouping structures preserved. added columns : term_degree Character. Term first degree(s) completed. Encoded YYYYT. Joined midfield_degree data table. completion_status Character. Label observation indicate completion status. Possible values : \"timely\", indicating completion later timely completion term; \"late\", indicating completion timely completion term; \"NA\" indicating non-completion.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine completion status for every student — add_completion_status","text":"\"completion\" mean undergraduate earning first baccalaureate degree (degrees, students earning one degree term). Additional degrees, , earned later term first degree ignored. many studies, students must complete degree specified time span, example 4-, 6-, 8-years admission. , completion timely; , completion late grouped non-completers computing metric graduation rate. Completion status \"timely\" students completing degree later timely completion terms. See also add_timely_term().","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine completion status for every student — add_completion_status","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add completion status column dframe <- add_timely_term(dframe, toy_term)  # Add completion status column add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree #>          <char> <char>       <char>    <num>      <char>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943       19946 #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993       19963 #>  5: MID25828870  19881  01 Freshman        6       19933       19923 #>  6: MID25829749  19995    03 Junior        4       20033        <NA> #>  7: MID25841418  19981    03 Junior        4       20013       19993 #>  8: MID25845197  19905    03 Junior        4       19943       19921 #>  9: MID25846316  19911  01 Freshman        6       19963       19951 #> 10: MID25847220  19891  01 Freshman        6       19943       19933 #>     completion_status #>                <char> #>  1:              late #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely  # Existing completion_status column, if any, is overwritten dframe[, completion_status := NA_character_] #>            mcid term_i      level_i adj_span timely_term completion_status #>          <char> <char>       <char>    <num>      <char>            <char> #>  1: MID25784187  19885  01 Freshman        6       19943              <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931              <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923              <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993              <NA> #>  5: MID25828870  19881  01 Freshman        6       19933              <NA> #>  6: MID25829749  19995    03 Junior        4       20033              <NA> #>  7: MID25841418  19981    03 Junior        4       20013              <NA> #>  8: MID25845197  19905    03 Junior        4       19943              <NA> #>  9: MID25846316  19911  01 Freshman        6       19963              <NA> #> 10: MID25847220  19891  01 Freshman        6       19943              <NA> add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree #>          <char> <char>       <char>    <num>      <char>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943       19946 #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993       19963 #>  5: MID25828870  19881  01 Freshman        6       19933       19923 #>  6: MID25829749  19995    03 Junior        4       20033        <NA> #>  7: MID25841418  19981    03 Junior        4       20013       19993 #>  8: MID25845197  19905    03 Junior        4       19943       19921 #>  9: MID25846316  19911  01 Freshman        6       19963       19951 #> 10: MID25847220  19891  01 Freshman        6       19943       19933 #>     completion_status #>                <char> #>  1:              late #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine data sufficiency for every student — add_data_sufficiency","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"Add column data frame student-level records labels row inclusion exclusion based data sufficiency near upper lower bounds institution's data range.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"add_data_sufficiency(dframe, midfield_term = term)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"dframe Working data frame student-level records data-sufficiency columns added. Required variables mcid timely_term. See also add_timely_term(). midfield_term MIDFIELD term data table equivalent required variables mcid, institution, term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"data frame data.table format following properties: rows preserved; columns preserved exception columns added function overwrite existing columns name (); grouping structures preserved. added columns : term_i Character. Initial term student's longitudinal record, encoded YYYYT. overwritten present dframe. lower_limit Character. Initial term institution's data range, encoded YYYYT upper_limit Character. Final term institution's data range, encoded YYYYT data_sufficiency Character. Label observation inclusion exclusion based data sufficiency. Possible values : include, indicating available data sufficient estimating timely completion; exclude-upper, indicating data insufficient upper limit data range; exclude-lower, indicating data insufficient lower limit.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"time span MIDFIELD term data varies institution, lower upper bounds. student records, near bounds creates unavoidable ambiguity trying assess degree completion. records must identified cases excluded prevent false summary counts.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add data sufficiency column dframe <- add_timely_term(dframe, midfield_term = toy_term)  # Add data sufficiency column add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>          <char>       <char>    <num>      <char> <char>      <char> #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>          <char>           <char> #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include  # Existing data_sufficiency column, if any, is overwritten dframe[, data_sufficiency := NA_character_] #>            mcid term_i      level_i adj_span timely_term data_sufficiency #>          <char> <char>       <char>    <num>      <char>           <char> #>  1: MID25784187  19885  01 Freshman        6       19943             <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931             <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923             <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993             <NA> #>  5: MID25828870  19881  01 Freshman        6       19933             <NA> #>  6: MID25829749  19995    03 Junior        4       20033             <NA> #>  7: MID25841418  19981    03 Junior        4       20013             <NA> #>  8: MID25845197  19905    03 Junior        4       19943             <NA> #>  9: MID25846316  19911  01 Freshman        6       19963             <NA> #> 10: MID25847220  19891  01 Freshman        6       19943             <NA> add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>          <char>       <char>    <num>      <char> <char>      <char> #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>          <char>           <char> #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a timely completion term for every student — add_timely_term","title":"Calculate a timely completion term for every student — add_timely_term","text":"Add column data frame student-level records indicates latest term degree completion  considered timely every student.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"add_timely_term(   dframe,   midfield_term = term,   ...,   span = NULL,   sched_span = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a timely completion term for every student — add_timely_term","text":"dframe Working data frame student-level records timely-term columns added. Required variable mcid. midfield_term MIDFIELD term data table equivalent required variables mcid, term, level. ... used passing values; forces subsequent arguments referable name. span Optional integer scalar, number years define timely completion. Commonly used values 100, 150, 200 percent sched_span. Default 6 years. sched_span Optional integer scalar, number years institution officially schedules completing program. Default 4 years.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a timely completion term for every student — add_timely_term","text":"data frame data.table format following properties: rows preserved; columns preserved exception columns added function overwrite existing columns name (); grouping structures preserved. added columns : term_i Character. Initial term student's longitudinal record, encoded YYYYT level_i Character. Student level (01 Freshman, 02 Sophomore, etc.) initial term adj_span Numeric. Integer span years timely completion adjusted student's initial level. timely_term Character. Latest term program completion considered timely every student. Encoded YYYYT.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a timely completion term for every student — add_timely_term","text":"\"completion\" mean undergraduate earning first baccalaureate degree (degrees, students earning one degree term). many studies, students must complete programs specified time span, example 4-, 6-, 8-years admission. , completion timely; , completion late grouped non-completers computing metric graduation rate. heuristic assigns span number years (default 6 years) every student. students admitted second-year level higher, span reduced one year full year student assumed completed. example, student admitted second-year level assumed completed one year program, span reduced one year. adjusted span added initial term create timely completion term timely_term column.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Add timely completion term column add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943  # Define timely completion as 200% of scheduled span (8 years) add_timely_term(dframe, midfield_term = toy_term, span = 8) #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        8       19963 #>  2: MID25784974  19883 02 Sophomore        7       19951 #>  3: MID25816209  19881 02 Sophomore        7       19943 #>  4: MID25819358  19946 02 Sophomore        7       20013 #>  5: MID25828870  19881  01 Freshman        8       19953 #>  6: MID25829749  19995    03 Junior        6       20053 #>  7: MID25841418  19981    03 Junior        6       20033 #>  8: MID25845197  19905    03 Junior        6       19963 #>  9: MID25846316  19911  01 Freshman        8       19983 #> 10: MID25847220  19891  01 Freshman        8       19963  # Existing timely_term column, if any, is overwritten dframe[, timely_term := NA_character_] #>            mcid timely_term #>          <char>      <char> #>  1: MID25784187        <NA> #>  2: MID25784974        <NA> #>  3: MID25816209        <NA> #>  4: MID25819358        <NA> #>  5: MID25828870        <NA> #>  6: MID25829749        <NA> #>  7: MID25841418        <NA> #>  8: MID25845197        <NA> #>  9: MID25846316        <NA> #> 10: MID25847220        <NA> add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943"},{"path":"https://midfieldr.github.io/midfieldr/reference/baseline_mcid.html","id":null,"dir":"Reference","previous_headings":"","what":"Baseline ID bloc to start a typical analysis — baseline_mcid","title":"Baseline ID bloc to start a typical analysis — baseline_mcid","text":"Data frame IDs processing practice data data sufficiency degree seeking. Provides convenient bloc start many analysis illustrated package articles.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/baseline_mcid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Baseline ID bloc to start a typical analysis — baseline_mcid","text":"","code":"baseline_mcid"},{"path":"https://midfieldr.github.io/midfieldr/reference/baseline_mcid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Baseline ID bloc to start a typical analysis — baseline_mcid","text":"data.table 76875 rows 1 column: mcid Character, de-identified student ID. Key column.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of academic programs — cip","title":"Table of academic programs — cip","text":"data table based US National Center Education Statistics (NCES), Integrated Postsecondary Education Data System (IPEDS), 2010 CIP, http://nces.ed.gov/ipeds/cipcode/. data codes names 1582 instructional programs organized three levels: 2-digit series, 4-digit series, 6-digit series.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of academic programs — cip","text":"","code":"cip"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of academic programs — cip","text":"data.table 1582 rows 6 columns keyed 6-digit CIP code: cip6 Character 6-digit code representing \"specific instructional programs\" (US National Center Education Statistics). cip6name Character program name 6-digit level cip4 Character 4-digit code (first 4 digits cip6) representing \"intermediate groupings programs comparable content objectives.\" cip4name Character program name 4-digit level. cip2 Character 2-digit code (first 2 digits cip6) representing \"general groupings related programs.\" cip2name Character program name 2-digit level.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of academic programs — cip","text":"midfielddata taxonomy includes one non-IPEDS code (999999) Undecided Unspecified, instances institutions reported program information students enrolled program. MIDFIELD research database include CIPs undergraduate pre-majors pre-med (511102), pre-law (220001), pre-vet (511104).","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_cip","title":"Subset rows that include matches to search strings — filter_cip","text":"Subset CIP data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_cip","text":"","code":"filter_cip(keep_text = NULL, ..., drop_text = NULL, cip = NULL, select = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows that include matches to search strings — filter_cip","text":"keep_text Character vector search text retaining rows, case-sensitive. Can empty drop_text used. ... used passing values; forces subsequent arguments referable name. drop_text Optional character vector search text dropping rows, default NULL. cip Data frame searched. Default cip. select Optional character vector column names return, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_cip","text":"data frame data.table format, subset cip, following properties: exclude rows match elements drop_text; remaining rows, include match elements keep_text; select empty, columns preserved, otherwise columns included select retained; grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_cip","text":"Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows that include matches to search strings — filter_cip","text":"","code":"# Subset using keywords filter_cip(keep_text = \"engineering\") #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>   4:     14                                      Engineering   1403 #>   5:     14                                      Engineering   1404 #>  ---                                                                #> 115:     15                           Engineering Technology   1516 #> 116:     15                           Engineering Technology   1599 #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                     cip4name   cip6 #>                                                       <char> <char> #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering  # \\donttest{     # Multiple passes to narrow the results     first_pass <- filter_cip(\"civil\")     second_pass <- filter_cip(\"engineering\", cip = first_pass)     filter_cip(drop_text = \"technology\", cip = second_pass) #>      cip2    cip2name   cip4          cip4name   cip6 #>    <char>      <char> <char>            <char> <char> #> 1:     14 Engineering   1408 Civil Engineering 140801 #> 2:     14 Engineering   1408 Civil Engineering 140802 #> 3:     14 Engineering   1408 Civil Engineering 140803 #> 4:     14 Engineering   1408 Civil Engineering 140804 #> 5:     14 Engineering   1408 Civil Engineering 140805 #> 6:     14 Engineering   1408 Civil Engineering 140899 #>                                  cip6name #>                                    <char> #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other          # drop_text argument, when used, must be named     filter_cip(\"civil engineering\", drop_text = \"technology\") #>      cip2    cip2name   cip4          cip4name   cip6 #>    <char>      <char> <char>            <char> <char> #> 1:     14 Engineering   1408 Civil Engineering 140801 #> 2:     14 Engineering   1408 Civil Engineering 140802 #> 3:     14 Engineering   1408 Civil Engineering 140803 #> 4:     14 Engineering   1408 Civil Engineering 140804 #> 5:     14 Engineering   1408 Civil Engineering 140805 #> 6:     14 Engineering   1408 Civil Engineering 140899 #>                                  cip6name #>                                    <char> #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other          # Subset using numerical codes     filter_cip(keep_text = c(\"050125\", \"160501\")) #>      cip2                                            cip2name   cip4 #>    <char>                                              <char> <char> #> 1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #> 2:     16      Foreign Languages, Literatures and Linguistics   1605 #>                                       cip4name   cip6 #>                                         <char> <char> #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #>                            <char> #> 1:                 German Studies #> 2: German Language and Literature          # Subset using regular expressions     filter_cip(keep_text = \"^54\") #>      cip2 cip2name   cip4 cip4name   cip6 #>    <char>   <char> <char>   <char> <char> #> 1:     54  History   5401  History 540101 #> 2:     54  History   5401  History 540102 #> 3:     54  History   5401  History 540103 #> 4:     54  History   5401  History 540104 #> 5:     54  History   5401  History 540105 #> 6:     54  History   5401  History 540106 #> 7:     54  History   5401  History 540107 #> 8:     54  History   5401  History 540108 #> 9:     54  History   5401  History 540199 #>                                               cip6name #>                                                 <char> #> 1:                                    History, General #> 2:                    American History (United States) #> 3:                                    European History #> 4:    History and Philosophy of Science and Technology #> 5: Public, Applied History and Archival Administration #> 6:                                       Asian History #> 7:                                    Canadian History #> 8:                                    Military History #> 9:                                      History, Other     filter_cip(keep_text = c(\"^1407\", \"^1408\")) #>      cip2    cip2name   cip4             cip4name   cip6 #>    <char>      <char> <char>               <char> <char> #> 1:     14 Engineering   1407 Chemical Engineering 140701 #> 2:     14 Engineering   1407 Chemical Engineering 140702 #> 3:     14 Engineering   1407 Chemical Engineering 140799 #> 4:     14 Engineering   1408    Civil Engineering 140801 #> 5:     14 Engineering   1408    Civil Engineering 140802 #> 6:     14 Engineering   1408    Civil Engineering 140803 #> 7:     14 Engineering   1408    Civil Engineering 140804 #> 8:     14 Engineering   1408    Civil Engineering 140805 #> 9:     14 Engineering   1408    Civil Engineering 140899 #>                                  cip6name #>                                    <char> #> 1:                   Chemical Engineering #> 2:  Chemical and Biomolecular Engineering #> 3:            Chemical Engineering, Other #> 4:             Civil Engineering, General #> 5:               Geotechnical Engineering #> 6:                 Structural Engineering #> 7: Transportation and Highway Engineering #> 8:            Water Resources Engineering #> 9:               Civil Engineering, Other          # Select columns     filter_cip(keep_text = \"^54\", select = c(\"cip6\", \"cip4name\")) #>      cip6 cip4name #>    <char>   <char> #> 1: 540101  History #> 2: 540102  History #> 3: 540103  History #> 4: 540104  History #> 5: 540105  History #> 6: 540106  History #> 7: 540107  History #> 8: 540108  History #> 9: 540199  History # }"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting program proxies for FYE students — fye_proxy","title":"Starting program proxies for FYE students — fye_proxy","text":"Proxies degree-granting engineering programs estimate First-Year Engineering (FYE) students declared required enroll FYE. Keyed student ID. Proxies provided students midfielddata practice data enroll FYE first term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting program proxies for FYE students — fye_proxy","text":"","code":"fye_proxy"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting program proxies for FYE students — fye_proxy","text":"data.table 4623 rows 2 columns keyed student ID: mcid Character, de-identified student ID. Key column. proxy Character, 6-digit CIP code estimated proxy program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting program proxies for FYE students — fye_proxy","text":"proxy variable contains 6-digit CIP codes degree-granting engineering programs, e.g., Electrical Engineering, Mechanical Engineering, etc., substituted FYE CIP code analysis requires degree-granting starting programs. common application graduation rate calculation. estimation based students' first post-FYE programs multiple imputation suitable categorical variables using mice package. predictor variables institution, race, sex. estimated variable 6-digit CIP code degree-granting engineering program institution. fye_proxy holds practice data midfielddata—values commingled MIDFIELD research database.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/grade_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Grade scale — grade_scale","title":"Grade scale — grade_scale","text":"Data frame letter grades conventional point assignments used computing grade point averages.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/grade_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grade scale — grade_scale","text":"","code":"grade_scale"},{"path":"https://midfieldr.github.io/midfieldr/reference/grade_scale.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Grade scale — grade_scale","text":"data.table 12 rows 2 columns: letter_grade Character, letter grades using conventional US scale F. points Numerical, 4.0 scale points assigned letter grades.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package midfieldr — midfieldr-deprecated","title":"Deprecated functions in package midfieldr — midfieldr-deprecated","text":"functions listed deprecated. Alternative functions similar functionality mentioned. Help pages deprecated functions available help(\"<function>-deprecated\").","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package midfieldr — midfieldr-deprecated","text":"","code":"same_content(x, y)"},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-deprecated.html","id":"same-content","dir":"Reference","previous_headings":"","what":"same_content","title":"Deprecated functions in package midfieldr — midfieldr-deprecated","text":"same_content(), use check_equiv_frames()","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"midfieldr: Tools and Methods for Working with MIDFIELD Data in 'R' — midfieldr-package","title":"midfieldr: Tools and Methods for Working with MIDFIELD Data in 'R' — midfieldr-package","text":"Provides tools demonstrates methods working individual undergraduate student-level records (registrar's data) 'R'. Tools include filters program codes, data sufficiency, timely completion. Methods include gathering blocs records, computing quantitative metrics graduation rate, creating charts visualize comparisons. 'midfieldr' interacts practice data provided 'midfielddata', R data package available https://midfieldr.github.io/midfielddata/. 'midfieldr' also interacts full MIDFIELD database users access. work supported US National Science Foundation grant numbers 1545667 2142087.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"midfieldr: Tools and Methods for Working with MIDFIELD Data in 'R' — midfieldr-package","text":"Maintainer: Richard Layton graphdoctor@gmail.com [copyright holder] Authors: Russell Long ralong@purdue.edu [copyright holder, data manager] Matthew Ohland ohland@purdue.edu [copyright holder] Marisa Orr marisak@clemson.edu [copyright holder] Susan Lord slord@sandiego.edu [copyright holder]","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Order categorical variables of multiway data — order_multiway","title":"Order categorical variables of multiway data — order_multiway","text":"Transform data frame two independent categorical variables factors levels ordered display multiway dot plot. Multiway data comprise single quantitative value (response) every combination levels two categorical variables. ordering rows panels crucial perception effects (Cleveland, 1993).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order categorical variables of multiway data — order_multiway","text":"","code":"order_multiway(   dframe,   quantity,   categories,   ...,   method = NULL,   ratio_of = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order categorical variables of multiway data — order_multiway","text":"dframe Data frame containing single quantitative value (response) every combination levels two categorical variables. Categories may class character factor. Two additional numeric columns required using \"percent\" ordering method. quantity Character, name (quotes) single multiway quantitative variable categories Character, vector names (quotes) two multiway categorical variables ... used passing values; forces subsequent arguments referable name. method Character, “median” (default) “percent”, method ordering levels categories. median method computes medians quantitative column grouped category. percent method computes percentages based ratio underlying quantitative percentage variable except grouped category. ratio_of Character vector names (quotes) numerator denominator columns produced quantitative variable, required method \"percent\". Names can order; algorithm assumes parameter larger column sum denominator ratio.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order categorical variables of multiway data — order_multiway","text":"data frame data.table format following properties: rows preserved; columns specified categories converted factors ordered; column specified quantity converted type double; columns preserved exception columns added function overwrite existing columns name (); grouping structures preserved. added columns : CATEGORY_median columns (ordering method \"median\") Numeric. Two columns medians quantitative variable grouped categorical variables. CATEGORY placeholder column name replaced category name categories argument. example, suppose categories = c(\"program\", \"people\") method = \"median\". two new column names program_median people_median. CATEGORY_QUANTITY columns (ordering method \"percent\") Numeric. Two columns percentages based ratio produces quantitative variable except grouped categorical variables. CATEGORY placeholder column name replaced category name categories argument; QUANTITY placeholder replaced quantitative variable name quantity argument. example, suppose categories = c(\"program\", \"people\"), quantity = \"grad_rate\", method = \"percent\". two new column names  program_grad_rate people_grad_rate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Order categorical variables of multiway data — order_multiway","text":"context, \"multiway\" refers data structure graph design defined Cleveland (1993), methods analysis described Kroonenberg (2008). Multiway data comprise three variables: categorical variable m levels; second independent categorical variable n levels; quantitative variable (response) length mn cross-classifies categories, , value response combination levels two categorical variables. multiway dot plot, one category encoded panels, second category encoded rows panel, quantitative variable encoded along identical horizontal scales.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Order categorical variables of multiway data — order_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley, Hoboken, NJ.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order categorical variables of multiway data — order_multiway","text":"","code":"# Subset of built-in data set dframe <- study_results[program == \"EE\" | program == \"ME\"] dframe[, people := paste(race, sex)] #>     program    sex            race ever_enrolled graduates stickiness #>      <char> <char>          <char>         <int>     <int>      <num> #>  1:      EE Female           Asian            21        12       57.1 #>  2:      EE Female           Black             6         3       50.0 #>  3:      EE Female   International            28         9       32.1 #>  4:      EE Female          Latine             8         3       37.5 #>  5:      EE Female Native American             1         0        0.0 #>  6:      EE Female   Other/Unknown             7         3       42.9 #>  7:      EE Female           White           118        56       47.5 #>  8:      EE   Male           Asian           123        71       57.7 #>  9:      EE   Male           Black            29        17       58.6 #> 10:      EE   Male   International           195        90       46.2 #> 11:      EE   Male          Latine            45        17       37.8 #> 12:      EE   Male Native American             3         0        0.0 #> 13:      EE   Male   Other/Unknown            42        16       38.1 #> 14:      EE   Male           White           864       439       50.8 #> 15:      ME Female           Asian             7         1       14.3 #> 16:      ME Female           Black             3         2       66.7 #> 17:      ME Female   International            19        11       57.9 #> 18:      ME Female          Latine            12         8       66.7 #> 19:      ME Female   Other/Unknown             8         4       50.0 #> 20:      ME Female           White           213       134       62.9 #> 21:      ME   Male           Asian            76        49       64.5 #> 22:      ME   Male           Black            30        19       63.3 #> 23:      ME   Male   International           178        89       50.0 #> 24:      ME   Male          Latine            79        42       53.2 #> 25:      ME   Male Native American             5         1       20.0 #> 26:      ME   Male   Other/Unknown            80        41       51.2 #> 27:      ME   Male           White          1596       953       59.7 #>     program    sex            race ever_enrolled graduates stickiness #>                     people #>                     <char> #>  1:           Asian Female #>  2:           Black Female #>  3:   International Female #>  4:          Latine Female #>  5: Native American Female #>  6:   Other/Unknown Female #>  7:           White Female #>  8:             Asian Male #>  9:             Black Male #> 10:     International Male #> 11:            Latine Male #> 12:   Native American Male #> 13:     Other/Unknown Male #> 14:             White Male #> 15:           Asian Female #> 16:           Black Female #> 17:   International Female #> 18:          Latine Female #> 19:   Other/Unknown Female #> 20:           White Female #> 21:             Asian Male #> 22:             Black Male #> 23:     International Male #> 24:            Latine Male #> 25:   Native American Male #> 26:     Other/Unknown Male #> 27:             White Male #>                     people dframe[, c(\"race\", \"sex\") := NULL] #>     program ever_enrolled graduates stickiness                 people #>      <char>         <int>     <int>      <num>                 <char> #>  1:      EE            21        12       57.1           Asian Female #>  2:      EE             6         3       50.0           Black Female #>  3:      EE            28         9       32.1   International Female #>  4:      EE             8         3       37.5          Latine Female #>  5:      EE             1         0        0.0 Native American Female #>  6:      EE             7         3       42.9   Other/Unknown Female #>  7:      EE           118        56       47.5           White Female #>  8:      EE           123        71       57.7             Asian Male #>  9:      EE            29        17       58.6             Black Male #> 10:      EE           195        90       46.2     International Male #> 11:      EE            45        17       37.8            Latine Male #> 12:      EE             3         0        0.0   Native American Male #> 13:      EE            42        16       38.1     Other/Unknown Male #> 14:      EE           864       439       50.8             White Male #> 15:      ME             7         1       14.3           Asian Female #> 16:      ME             3         2       66.7           Black Female #> 17:      ME            19        11       57.9   International Female #> 18:      ME            12         8       66.7          Latine Female #> 19:      ME             8         4       50.0   Other/Unknown Female #> 20:      ME           213       134       62.9           White Female #> 21:      ME            76        49       64.5             Asian Male #> 22:      ME            30        19       63.3             Black Male #> 23:      ME           178        89       50.0     International Male #> 24:      ME            79        42       53.2            Latine Male #> 25:      ME             5         1       20.0   Native American Male #> 26:      ME            80        41       51.2     Other/Unknown Male #> 27:      ME          1596       953       59.7             White Male #>     program ever_enrolled graduates stickiness                 people data.table::setcolorder(dframe, c(\"program\", \"people\"))  # Class before ordering class(dframe$program) #> [1] \"character\" class(dframe$people) #> [1] \"character\"  # Class and levels after ordering mw1 <- order_multiway(dframe,                        quantity = \"stickiness\",                        categories = c(\"program\", \"people\")) class(mw1$program) #> [1] \"factor\" levels(mw1$program) #> [1] \"EE\" \"ME\" class(mw1$people) #> [1] \"factor\" levels(mw1$people) #>  [1] \"Native American Female\" \"Native American Male\"   \"Asian Female\"           #>  [4] \"Other/Unknown Male\"     \"International Female\"   \"Latine Male\"            #>  [7] \"Other/Unknown Female\"   \"International Male\"     \"Latine Female\"          #> [10] \"White Female\"           \"White Male\"             \"Black Female\"           #> [13] \"Black Male\"             \"Asian Male\"              # Display category medians  mw1 #>     program                 people stickiness ever_enrolled graduates #>      <fctr>                 <fctr>      <num>         <int>     <int> #>  1:      EE           Asian Female       57.1            21        12 #>  2:      EE           Black Female       50.0             6         3 #>  3:      EE   International Female       32.1            28         9 #>  4:      EE          Latine Female       37.5             8         3 #>  5:      EE Native American Female        0.0             1         0 #>  6:      EE   Other/Unknown Female       42.9             7         3 #>  7:      EE           White Female       47.5           118        56 #>  8:      EE             Asian Male       57.7           123        71 #>  9:      EE             Black Male       58.6            29        17 #> 10:      EE     International Male       46.2           195        90 #> 11:      EE            Latine Male       37.8            45        17 #> 12:      EE   Native American Male        0.0             3         0 #> 13:      EE     Other/Unknown Male       38.1            42        16 #> 14:      EE             White Male       50.8           864       439 #> 15:      ME           Asian Female       14.3             7         1 #> 16:      ME           Black Female       66.7             3         2 #> 17:      ME   International Female       57.9            19        11 #> 18:      ME          Latine Female       66.7            12         8 #> 19:      ME   Other/Unknown Female       50.0             8         4 #> 20:      ME           White Female       62.9           213       134 #> 21:      ME             Asian Male       64.5            76        49 #> 22:      ME             Black Male       63.3            30        19 #> 23:      ME     International Male       50.0           178        89 #> 24:      ME            Latine Male       53.2            79        42 #> 25:      ME   Native American Male       20.0             5         1 #> 26:      ME     Other/Unknown Male       51.2            80        41 #> 27:      ME             White Male       59.7          1596       953 #>     program                 people stickiness ever_enrolled graduates #>     program_median people_median #>              <num>         <num> #>  1:          44.55         35.70 #>  2:          44.55         58.35 #>  3:          44.55         45.00 #>  4:          44.55         52.10 #>  5:          44.55          0.00 #>  6:          44.55         46.45 #>  7:          44.55         55.20 #>  8:          44.55         61.10 #>  9:          44.55         60.95 #> 10:          44.55         48.10 #> 11:          44.55         45.50 #> 12:          44.55         10.00 #> 13:          44.55         44.65 #> 14:          44.55         55.25 #> 15:          57.90         35.70 #> 16:          57.90         58.35 #> 17:          57.90         45.00 #> 18:          57.90         52.10 #> 19:          57.90         46.45 #> 20:          57.90         55.20 #> 21:          57.90         61.10 #> 22:          57.90         60.95 #> 23:          57.90         48.10 #> 24:          57.90         45.50 #> 25:          57.90         10.00 #> 26:          57.90         44.65 #> 27:          57.90         55.25 #>     program_median people_median  # Existing factors (if any) are re-ordered mw2 <- dframe mw2$program <- factor(mw2$program, levels = c(\"ME\", \"EE\"))  # Levels before conditioning levels(mw2$program)  #> [1] \"ME\" \"EE\"  # Levels after conditioning mw2 <- order_multiway(dframe,                        quantity = \"stickiness\",                        categories = c(\"program\", \"people\")) levels(mw2$program)  #> [1] \"EE\" \"ME\"  # Ordering using percent method order_multiway(dframe,                 quantity = \"stickiness\",                 categories = c(\"program\", \"people\"),                 method = \"percent\",                 ratio_of = c(\"graduates\", \"ever_enrolled\")) #>     program                 people graduates ever_enrolled stickiness #>      <fctr>                 <fctr>     <num>         <num>      <num> #>  1:      EE           Asian Female        12            21       57.1 #>  2:      EE           Black Female         3             6       50.0 #>  3:      EE   International Female         9            28       32.1 #>  4:      EE          Latine Female         3             8       37.5 #>  5:      EE Native American Female         0             1        0.0 #>  6:      EE   Other/Unknown Female         3             7       42.9 #>  7:      EE           White Female        56           118       47.5 #>  8:      EE             Asian Male        71           123       57.7 #>  9:      EE             Black Male        17            29       58.6 #> 10:      EE     International Male        90           195       46.2 #> 11:      EE            Latine Male        17            45       37.8 #> 12:      EE   Native American Male         0             3        0.0 #> 13:      EE     Other/Unknown Male        16            42       38.1 #> 14:      EE             White Male       439           864       50.8 #> 15:      ME           Asian Female         1             7       14.3 #> 16:      ME           Black Female         2             3       66.7 #> 17:      ME   International Female        11            19       57.9 #> 18:      ME          Latine Female         8            12       66.7 #> 19:      ME   Other/Unknown Female         4             8       50.0 #> 20:      ME           White Female       134           213       62.9 #> 21:      ME             Asian Male        49            76       64.5 #> 22:      ME             Black Male        19            30       63.3 #> 23:      ME     International Male        89           178       50.0 #> 24:      ME            Latine Male        42            79       53.2 #> 25:      ME   Native American Male         1             5       20.0 #> 26:      ME     Other/Unknown Male        41            80       51.2 #> 27:      ME             White Male       953          1596       59.7 #>     program                 people graduates ever_enrolled stickiness #>     program_stickiness people_stickiness #>                  <num>             <num> #>  1:               49.4              46.4 #>  2:               49.4              55.6 #>  3:               49.4              42.6 #>  4:               49.4              55.0 #>  5:               49.4               0.0 #>  6:               49.4              46.7 #>  7:               49.4              57.4 #>  8:               49.4              60.3 #>  9:               49.4              61.0 #> 10:               49.4              48.0 #> 11:               49.4              47.6 #> 12:               49.4              12.5 #> 13:               49.4              46.7 #> 14:               49.4              56.6 #> 15:               58.7              46.4 #> 16:               58.7              55.6 #> 17:               58.7              42.6 #> 18:               58.7              55.0 #> 19:               58.7              46.7 #> 20:               58.7              57.4 #> 21:               58.7              60.3 #> 22:               58.7              61.0 #> 23:               58.7              48.0 #> 24:               58.7              47.6 #> 25:               58.7              12.5 #> 26:               58.7              46.7 #> 27:               58.7              56.6 #>     program_stickiness people_stickiness"},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare FYE data for multiple imputation — prep_fye_mice","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"Constructs data frame student-level records First-Year Engineering (FYE) programs conditions data later use input mice R package multiple imputation. Sets three variables predictors (institution, race/ethnicity, sex) one variable estimated (program CIP code).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"","code":"prep_fye_mice(   midfield_student = student,   midfield_term = term,   ...,   fye_codes = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"midfield_student MIDFIELD student data table equivalent required variables mcid, race, sex. midfield_term MIDFIELD term data table equivalent required variables mcid, institution, term, cip6. ... used passing values; forces subsequent arguments referable name. fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default \"140102\". Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes—start 14—produce error.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"data frame data.table format conditioned later use input mice R package multiple imputation. data frame comprises one row every FYE student, first-term migrator. Grouping structures preserved. columns returned : mcid Character, anonymized student identifier. Returned -. race Factor, race/ethnicity self-reported student. imputation predictor variable. sex Factor, sex self-reported student. imputation predictor variable. institution Factor, anonymized institution name. imputation predictor variable. proxy Factor, 6-digit CIP code student's known, post-FYE engineering program NA representing missing values imputed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"US institutions, engineering students required complete First-Year Engineering (FYE) program prerequisite declaring engineering major. Administratively, degree-granting engineering programs Electrical Engineering Mechanical Engineering treat incoming post-FYE students \"starting\" cohorts.  However, computing metric requires count starters—graduation rate, example—FYE records must treated special care avoid miscount. illustrate potential miscounting starters, suppose wish calculate Mechanical Engineering () graduation rate. Students starting constitute starting pool fraction pool graduating graduation rate. FYE institutions, program typically define starting pool post-FYE cohort entering program. may best information available, invariably undercounts starters failing account FYE students transition (post-FYE) degree-granting engineering programs—students may left institution switched non-engineering majors. either case, absence FYE requirement, students starters. neglecting students, count starters artificially low resulting graduation rate artificially high. true every degree-granting engineering discipline FYE institution. Therefore, avoid miscounting starters FYE institutions, estimate \"FYE proxy\", , 6-digit CIP codes degree-granting engineering programs FYE students declared required enroll FYE. purpose `prep_fye_mice()“ prepare data making estimation. running prep_fye_mice() running mice(), one can edit variables add variables create custom set predictors. mice package expects predictors proxy variables factors. delete institution variable ensures student's imputed program available institution. addition, ensure missing values proxy column. variables expected complete (NA values). value \"unknown\" predictor column, e.g., race/ethnicity sex, acceptable value, missing data. Observations missing unknown values ID institution columns () removed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"function extracts terms FYE students, including migrate enter Engineering first term, identifies first post-FYE program enroll, . treatment yields two possible outcomes values returned proxy column: student completes FYE enrolls engineering major. outcome, know student's first opportunity, enrolled engineering program choosing. CIP code program returned student's FYE proxy. student enroll post-FYE engineering major. students records database switched Engineering another program. outcome, data provide information regarding engineering program student declared originally institution required enroll FYE. students proxy value NA returned. data treated missing values imputed mice(). cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. resulting data frame ready use input mice package, variables except mcid returned factors.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"","code":"# Using toy data prep_fye_mice(toy_student, toy_term) #>            mcid   race    sex   institution  proxy #>          <char> <fctr> <fctr>        <fctr> <fctr> #>  1: MID26060301  Asian Female Institution C   <NA> #>  2: MID25995980 Latine Female Institution C   <NA> #>  3: MID25997636 Latine Female Institution C   <NA> #>  4: MID26086310 Latine Female Institution C   <NA> #>  5: MID26000057  White Female Institution C   <NA> #>  6: MID26614720  Asian   Male Institution J   <NA> #>  7: MID26593796  White   Male Institution J   <NA> #>  8: MID25848589  White   Male Institution M 143501 #>  9: MID25846316  White   Male Institution M 143501 #> 10: MID25847220  White   Male Institution M 143501 #> 11: MID25828870  White   Male Institution M 149999  # Other columns, if any, are dropped colnames(toy_student) #> [1] \"mcid\"        \"institution\" \"race\"        \"sex\"         colnames(prep_fye_mice(toy_student, toy_term)) #> [1] \"mcid\"        \"race\"        \"sex\"         \"institution\" \"proxy\"        # Optional argument permits multiple CIP codes for FYE prep_fye_mice(midfield_student = toy_student,                midfield_term =toy_term,                fye_codes = c(\"140101\", \"140102\")) #>            mcid   race    sex   institution  proxy #>          <char> <fctr> <fctr>        <fctr> <fctr> #>  1: MID25977316  White   Male Institution B   <NA> #>  2: MID26060301  Asian Female Institution C   <NA> #>  3: MID25995980 Latine Female Institution C   <NA> #>  4: MID25997636 Latine Female Institution C   <NA> #>  5: MID26086310 Latine Female Institution C   <NA> #>  6: MID26000057  White Female Institution C   <NA> #>  7: MID26614720  Asian   Male Institution J   <NA> #>  8: MID26593796  White   Male Institution J   <NA> #>  9: MID25848589  White   Male Institution M 143501 #> 10: MID25846316  White   Male Institution M 143501 #> 11: MID25847220  White   Male Institution M 143501 #> 12: MID25828870  White   Male Institution M 149999"},{"path":"https://midfieldr.github.io/midfieldr/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. wrapr check_equiv_frames","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for equal content between two data tables — same_content-deprecated","title":"Test for equal content between two data tables — same_content-deprecated","text":"function deprecated favor wrapr::check_equiv_frames() imported wrapr package, accessible loading 'midfieldr'.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for equal content between two data tables — same_content-deprecated","text":"","code":"same_content(x, y)"},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for equal content between two data tables — same_content-deprecated","text":"x Data frame compared. target argument .equal() y Data frame compared. current argument .equal()","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for equal content between two data tables — same_content-deprecated","text":"Either TRUE description differences x y.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for equal content between two data tables — same_content-deprecated","text":"Test data equality data.table objects. Convenience function used 'midfieldr' articles. Wrapper around .equal() class data.table ignores row order, column order, data.table keys. inputs must date frames. Equivalent : .equal(target, current, ignore.row.order = TRUE, ignore.col.order = TRUE)","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/sat_act_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"SAT-ACT conversion scale — sat_act_scale","title":"SAT-ACT conversion scale — sat_act_scale","text":"Data frame SAT total scores corresponding ACT composite scores. Converting SAT ACT, range SAT scores convert single ACT value. Converting ACT SAT, single-value SAT equivalent provided.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/sat_act_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SAT-ACT conversion scale — sat_act_scale","text":"","code":"sat_act_scale"},{"path":"https://midfieldr.github.io/midfieldr/reference/sat_act_scale.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SAT-ACT conversion scale — sat_act_scale","text":"data.table 28 rows 4 columns: sat_upper Numerical, total SAT, upper limit range corresponding ACT composite score. sat_equiv Numerical, total SAT, value use converting ACT score single SAT score. sat_lower Numerical, total SAT, lower limit range corresponding ACT composite score. act_comp Numerical, ACT composite score.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/sat_act_scale.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SAT-ACT conversion scale — sat_act_scale","text":"ACT/SAT Concordance (2018) ACT Education Corp. https://www.act.org/content/dam/act/unsecured/documents/ACT-SAT-Concordance-Tables.pdf","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":null,"dir":"Reference","previous_headings":"","what":"Select required midfieldr variables — select_required","title":"Select required midfieldr variables — select_required","text":"Subset data frame, selecting columns matching partially matching vector character strings. convenience function reduce dimensions MIDFIELD data table start session selecting columns required midfieldr functions required form composite key. Particularly useful interactive sessions viewing data tables various stages analysis.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select required midfieldr variables — select_required","text":"","code":"select_required(midfield_x, ..., select_add = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select required midfieldr variables — select_required","text":"midfield_x Data frame columns selected. ... used passing values; forces subsequent arguments referable name. select_add Character vector additional column names return.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select required midfieldr variables — select_required","text":"data frame data.table format following properties: rows preserved; columns names match partially match values default set plus select_add retained; grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select required midfieldr variables — select_required","text":"Several midfieldr functions require one variables mcid, institution, race, sex, ^term, cip6, level. one requires composite key uniquely identify rows, course variables abbrev, number degree variable degree also required. vector names comprises default subset. Additional column names partial names can included using select_add argument. column names midfield_x searched matches partial matches using grep(), thus search terms can include regular expressions. Variables names match partially match search terms returned; columns dropped. Rows unaffected. Search terms present silently ignored. One use function select columns non-MIDFIELD data frame, benefit user—conventional column selection syntax better suited task. , specialize column selection serve midfieldr functions.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select required midfieldr variables — select_required","text":"","code":"# Default character vector for selecting columns default_cols<- c(\"mcid\", \"institution\", \"race\", \"sex\", \"^term\", \"cip6\", \"level\")  # Create one string separated by OR search_pattern <- paste(default_cols, collapse = \"|\")  # Find names of columns matching or partially matching  x <- select_required(toy_student)  names(x) #> [1] \"mcid\"        \"institution\" \"race\"        \"sex\"         grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE  x <- select_required(toy_term)  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        \"cip6\"        \"level\"       grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE TRUE  x <- select_required(toy_degree)  names(x) #> [1] \"mcid\"        \"institution\" \"term_degree\" \"cip6\"        grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE  x <- select_required(toy_course)  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        \"abbrev\"      \"number\"      grepl(search_pattern, names(x)) #> [1]  TRUE  TRUE  TRUE FALSE FALSE  # Adding search terms x <- select_required(toy_course, select_add = c(\"abbrev\", \"number\", \"grade\"))  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        \"abbrev\"      \"number\"      #> [6] \"grade\""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study observations — study_observations","title":"Case-study observations — study_observations","text":"Data table post-processed observations students ever enrolled , students graduating , four programs case study. Keyed student ID. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study observations — study_observations","text":"","code":"study_observations"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study observations — study_observations","text":"data.table 8917 rows 5 columns. variables : mcid Character, de-identified student ID. Key column. race Character, race/ethnicity self-reported student, e.g., Asian, Black, Latine, etc. sex Character, sex self-reported student, possible values Female, Male, Unknown. program Character, academic program label. bloc Character, indicating grouping (ever_enrolled graduates) observation belongs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study observations — study_observations","text":"Starting case-study starting pool students ever enrolled four programs study (Civil, Electrical, Industrial/Systems, Mechanical Engineering), filtered data data sufficiency, degree seeking, program, timely completion. data frame \"ever enrolled\" data frame \"timely graduates\" bound using shared column names distinguished bloc variable. data structure facilitates grouping summarizing race, sex, program, group.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study program labels and codes — study_programs","title":"Case-study program labels and codes — study_programs","text":"Data table program CIP codes labels four programs case study. Keyed 6-digit CIPs. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study program labels and codes — study_programs","text":"","code":"study_programs"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study program labels and codes — study_programs","text":"data.table 15 rows 2 columns. variables : cip6 Character, 6-digit CIP code program student enrolled term. program Character, abbreviated labels four engineering programs. Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\" (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study program labels and codes — study_programs","text":"Starting midfieldr cip data set, extracted CIPs four programs case study assigned custom label used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study results — study_results","title":"Case-study results — study_results","text":"Data table longitudinal stickiness four programs case study (Civil, Electrical, Industrial/Systems, Mechanical Engineering) grouped program, race/ethnicity, sex. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study results — study_results","text":"","code":"study_results"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study results — study_results","text":"data.table 50 rows 6 columns: program Character, academic program label. sex Character, sex self-reported student, possible values Female, Male, Unknown. race Character, race/ethnicity self-reported student, e.g., Asian, Black, Latine, etc. ever_enrolled Numerical, number students ever enrolled program. graduates Numerical, number students completing program. stickiness Numerical, program stickiness, ratio graduates ever_enrolled, percent.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study results — study_results","text":"Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data. Results based data filtered data sufficiency, degree seeking, timely completion.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":null,"dir":"Reference","previous_headings":"","what":"Course data for examples — toy_course","title":"Course data for examples — toy_course","text":"Selected variables modeled course practice data use package examples articles. Sampled early version practice data, toy data current practice data sample.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Course data for examples — toy_course","text":"","code":"toy_course"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Course data for examples — toy_course","text":"data.table 4616 rows 6 columns keyed student ID: mcid Character, de-identified student ID. Key column. institution Character, de-identified institution name, e.g., Institution , Institution B, etc. term Character, academic year term, format YYYYT. Key column. abbrev Character, course alphabetical identifier, e.g. ENGR, MATH, ENGL. Key column. number Character, course numeric identifier, e.g. 101, 3429. Key column. grade Character, course grade, e.g., +, , -, B+, , NG, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree data for examples — toy_degree","title":"Degree data for examples — toy_degree","text":"Selected variables modeled degree practice data use package examples articles. Sampled early version practice data, toy data current practice data sample.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree data for examples — toy_degree","text":"","code":"toy_degree"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Degree data for examples — toy_degree","text":"data.table 65 rows 4 columns keyed student ID. variables : mcid Character, de-identified student ID. Key column. institution Character, de-identified institution name, e.g., Institution , Institution B, etc. term_degree Character, academic year term student completes program, format YYYYT. cip6 Character, 6-digit CIP code program student enrolled term.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data for examples — toy_student","title":"Student data for examples — toy_student","text":"Selected variables modeled student practice data use package examples articles. Sampled early version practice data, toy data current practice data sample.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data for examples — toy_student","text":"","code":"toy_student"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data for examples — toy_student","text":"data.table 99 rows 4 columns keyed student ID: mcid Character, de-identified student ID. Key column. institution Character, de-identified institution name, e.g., Institution , Institution B, etc. race Character, race/ethnicity self-reported student, e.g., Asian, Black, Latine, etc. sex Character, sex self-reported student, possible values Female, Male, Unknown.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Term data for examples — toy_term","title":"Term data for examples — toy_term","text":"Selected variables modeled term practice data use package examples articles. Sampled early version practice data, toy data current practice data sample.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term data for examples — toy_term","text":"","code":"toy_term"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Term data for examples — toy_term","text":"data.table 150 rows 5 columns keyed student ID. variables : mcid Character, de-identified student ID. Key column. institution Character, de-identified institution name, e.g., Institution , Institution B, etc. term Character, academic year term, format YYYYT. Key column. cip6 Character, 6-digit CIP code program student enrolled term. level Character, 01 Freshman, 02 Sophomore, etc. equivalent values current practice data 01 First-Year, 02-Second Year, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-102900x--development-version","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.2.900x / development version","title":"midfieldr 1.0.2.900x / development version","text":"Replace same_content() re-export wrapr check_equiv_frames() Add composite column keys select_required() course table Add grade_scale sat_act_scale datasets Add definition degree-seeking relevant vignettes Edit case study introduction. Clarify definitions. Add ‘Suggests’ package ‘gt’ vignette tables Add extra.css small format changes","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-102--20240516","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.2 / 2024–05–16","title":"midfieldr 1.0.2 / 2024–05–16","text":"Edit argument descriptions correct typos. Update midfieldr-package.R file change functionality.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-101--20230708","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.1 / 2023–07–08","title":"midfieldr 1.0.1 / 2023–07–08","text":"Initial CRAN submission","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009030--202212","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9030 / 2022–12","title":"midfieldr 1.0.0.9030 / 2022–12","text":"Cleanup data-raw file, embed figure code vignettes Edit consistent figure dimensions Minor text edits vignettes","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009029--2022-12","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9029 / 2022-12","title":"midfieldr 1.0.0.9029 / 2022-12","text":"Revise accommodate new data sample midfielddata Rework arguments filter_cip() ease use Add man/rmd/ shared .Rmd fragments Revise README pkgdown settings","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009028--202211","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9028 / 2022–11","title":"midfieldr 1.0.0.9028 / 2022–11","text":"Rename filter_search() filter_cip() better capture purpose. Made cip default data frame search. Edit vignettes consistent organization prose. Finished first complete draft “Graduation rate” vignette. Add same_content() convenience function. Add “Stickiness” vignette Add “Groupings” vignette.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009027--202210","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9027 / 2022–10","title":"midfieldr 1.0.0.9027 / 2022–10","text":"Separate vignettes FYE starters. starters, add case non-FYE institutions. Edit vignettes consistent organization prose. Add select_required(). Add planning blocs vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009026--202209","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9026 / 2022–09","title":"midfieldr 1.0.0.9026 / 2022–09","text":"Add FYE function vignette. Revise multiway function name. Add order_multiway() examples. Add initial graduation rate vignette. Add README tests directory. Consistent comments R code chunk commands.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009025--202107","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9025 / 2021–07","title":"midfieldr 1.0.0.9025 / 2021–07","text":"Editing functions names data names descriptive. Change name built-fye_start data set fye_predicted_start. New order_multiway_categories() replace condition_multiway(). Revised argument names. New preprocess_fye() replace condition_fye().","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009024--202107","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9024 / 2021–07","title":"midfieldr 1.0.0.9024 / 2021–07","text":"Revise add_completion_status(), changing three possible values “timely”, “late”, NA. Drop completion column (information available term_degree column). Revise vignettes consistent format.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009023--202107","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9023 / 2021–07","title":"midfieldr 1.0.0.9023 / 2021–07","text":"Updated condition_multiway(), unit tests, multiway vignette.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009022--20210629","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9022 / 2021–06–29","title":"midfieldr 1.0.0.9022 / 2021–06–29","text":"Revise add vignettes data sufficiency, degree seeking (inner joins), programs, completion, demographics (left outer joins). Correction condition_multiway() alphabetical ordering, revise unit tests. Remove dependency Rdpack.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009021--202106","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9021 / 2021–06","title":"midfieldr 1.0.0.9021 / 2021–06","text":"midfield_student argument, functions appears, assigned default value student instead NULL. argument can omitted unless intended data frame called something student. Similarly, midfield_course, midfield_term, midfield_degree arguments, occur, assigned default values course, term, degree. Reorganize logical flow data processing case study vignettes reflect latest thinking order filters applied. Functions return supporting variables, delete optional “details” arguments. Edit function names variable names, update unit tests. Temporarily remove vignettes updated. Make inner joins explicit, delete add_filter_match(). Revise data sufficiency include lower limit exclusions. Make left-outer joins explicit, delete add_race_sex().","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009020--202106","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9020 / 2021–06","title":"midfieldr 1.0.0.9020 / 2021–06","text":"Significant changes earlier versions, backwards compatibility, prompting version number change 1.0.0. Change names practice data tables match names research data Edit practice data values consistency research data values Revise built-data sets use vignettes Rd examples Switch wrapr coalesce %?% assigning default arguments Initial round runtime assertions unit tests complete Make function names arguments internally consistent Edit functions depend data.table functionality Make MIDFIELD data arguments explicit functions Remove dependency dplyr related packages Replace Travis CI GitHub Actions CI Use package checkmate runtime assertions Remove dependency installing midfielddata Switch package tinytest unit testing Separate case study detailed vignettes Completely overhaul midfieldr functions Update README midfielddata README Revise vignettes use new functions","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-010--201806","dir":"Changelog","previous_headings":"","what":"midfieldr 0.1.0 / 2018–06","title":"midfieldr 0.1.0 / 2018–06","text":"Initial development version public GitHub","code":""}]
