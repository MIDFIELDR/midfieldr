[{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"student-unit-records","dir":"Articles","previous_headings":"","what":"Student unit records","title":"Getting started","text":"MIDFIELD Student Unit Records (SUR) registrar’s student-level data compiled institution anonymized curated MIDFIELD data steward. SURs include personal information (e.g., age, sex, race/ethnicity), enrollment information (e.g., institution, program, grade level), academic information (e.g., courses, grades, degrees). MIDFIELD data organized four tables—student, course, term, degree—keyed student ID. MIDFIELD research data, ’ve taken proportionate stratified sample made available practice data set midfielddata—R data package containing anonymized SURs nearly 98,000 undergraduates 12 institutions 1987–2016. Table 1 briefly introduces four practice data tables. Table 1: Attributes practice data tables midfielddata","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Getting started","text":"required packages installed (per main page), start midfieldr : Reviewing R help functions Inspecting four practice data tables Introducing midfieldr functions Names source data tables.   source data table argument midfieldr function, default names student, course, term, degree. Alternate names can used desired. Names variables.   midfieldr functions designed work variables names given source data tables mechanism substitutions. Help pages denote variable names required. Caveat.   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"r-help","dir":"Articles","previous_headings":"","what":"R help","title":"Getting started","text":"section primarily users fairly new R. R’s built-help system essential part solving problems might encounter. provide short list R help features applied midfieldr content. start, load midfieldr package. Help function.   R Console can use ? help(). example, following commands yield result: help function can also used learn data sets included midfieldr midfielddata. Data.   Use data() function view names data sets included package. List functions.   Use lsf.str() list functions package arguments, Run examples.   Use example() function run function examples included package.","code":"# Type in the Console library(\"midfieldr\") # Type in the Console help(\"add_timely_term\") ? add_timely_term # Type in the Console ? cip # Type in the Console data(package = \"midfieldr\") #> Data sets in package 'midfieldr': #> #> cip #> fye_proxy #> study_ever #> ... # Type in the Console lsf.str(\"package:midfieldr\") #> add_completion_status : function (dframe, midfield_degree = degree)   #> add_data_sufficiency : function (dframe, midfield_term = term)   #> add_timely_term : function (dframe, midfield_term = term, ..., span = NULL, sched_span = NULL)   #> filter_cip : function (dframe = cip, keep_text = NULL, ..., drop_text = NULL, select = NULL)   #> order_multiway : function (dframe, quantity, categories, ..., method = NULL, ratio_of = NULL)   #> prep_fye_mice : function (midfield_student = student, midfield_term = term, ..., fye_codes = NULL)   #> same_content : function (x, y)   #> select_required : function (midfield_x, ..., select_add = NULL) # Type in the Console example(\"add_timely_term\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Getting started","text":"Open.   writing script follow along, use packages vignette: Load data tables.   Use data() load practice data tables memory use. example, loading package library(\"midfielddata\") , can run ls() see environment contains zero objects, load student data midfielddata memory, run Checking environment , look RStudio Environment pane, see student listed. typically load data sets need top script just loading midfielddata package. need load script. Checking environment ,","code":"# Getting started # midfieldr vignette  # Packages used library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # Names of objects in the environment ls() #> character(0) # Load practice data data(student, package = \"midfielddata\") # Names of objects in the environment ls() #> [1] \"student\" # Load remaining practice data data(course, term, degree, package = \"midfielddata\") # Names of objects in the environment ls() #> [1] \"course\"  \"degree\"  \"student\" \"term\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-student-data","dir":"Articles","previous_headings":"","what":"Inspect the student data","title":"Getting started","text":"student table 13 student-related variables degree-seeking students time admitted institutions. can view help page (data dictionary) running observation unique student keyed student ID. Student IDs institution names de-identified consistent across four data sets. see data structure, run student 97,640 observations occupies approximately 19 MB memory. can confirm student IDs unique running, Summarize quantitative variables. Examine categorical variables values.","code":"# Run in Console ? student # View the structure of the data set str(student) #> Classes 'data.table' and 'data.frame':   97640 obs. of  13 variables: #>  $ mcid          : chr  \"MID25783135\" \"MID25783147\" \"MID25783156\" \"MID25783162\" ... #>  $ institution   : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ transfer      : chr  \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" \"First-Time in College\" ... #>  $ hours_transfer: num  NA NA NA NA NA NA NA NA NA NA ... #>  $ race          : chr  \"White\" \"White\" \"White\" \"White\" ... #>  $ sex           : chr  \"Male\" \"Female\" \"Female\" \"Male\" ... #>  $ age           : num  17 17 18 17 18 18 17 18 18 18 ... #>  $ us_citizen    : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ home_zip      : chr  \"29485\" \"29072\" \"43026\" \"29572\" ... #>  $ high_school   : chr  \"411900\" \"410825\" \"210568\" \"411465\" ... #>  $ sat_math      : num  580 470 750 560 670 620 642 590 492 620 ... #>  $ sat_verbal    : num  505 530 627 395 530 500 486 620 594 456 ... #>  $ act_comp      : num  21 19 29 18 26 22 24 25 21 21 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) nrow(student) #> [1] 97640  length(unique(student$mcid)) #> [1] 97640 summary(student$sat_math) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   200.0   520.0   580.0   578.1   640.0   800.0   31705  summary(student$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   16.00   18.00   18.00   18.47   18.00   75.00   22916 sort(unique(student$sex)) #> [1] \"Female\"  \"Male\"    \"Unknown\"  sort(unique(student$race)) #> [1] \"Asian\"           \"Black\"           \"International\"   \"Latine\"          #> [5] \"Native American\" \"Other/Unknown\"   \"White\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises","dir":"Articles","previous_headings":"Inspect the student data","what":"Exercises","title":"Getting started","text":"Determine possible values institution column. Determine possible values transfer column. Determine median sat_verbal score.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-course-data","dir":"Articles","previous_headings":"","what":"Inspect the course data","title":"Getting started","text":"course data frame 12 course-related variables observations students complete course remain course beyond institution’s course-withdrawal deadline. can view help page (data dictionary) running observation one course one term one student keyed student ID. see data structure, run four practice data sets midfielddata, course far largest, 3,439,936 observations occupying 349 MB memory. Depending machine, loading course can cause noticeable delay execution time, probably want load needed. recorded course (unlike student), students can non-degree-seeking must complete course. number unique students course given , Summarize quantitative variable. Examine categorical variable values.","code":"# Run in Console ? course # View the structure of the data set str(course) #> Classes 'data.table' and 'data.frame':   3439936 obs. of  12 variables: #>  $ mcid        : chr  \"MID25783135\" \"MID25783135\" \"MID25783135\" \"MID25783135\" ... #>  $ institution : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term        : chr  \"19911\" \"19911\" \"19911\" \"19911\" ... #>  $ course      : chr  \"\" \"\" \"\" \"\" ... #>  $ abbrev      : chr  \"SPCH\" \"CH\" \"ED\" \"ENGL\" ... #>  $ number      : chr  \"363\" \"101\" \"103\" \"101\" ... #>  $ section     : chr  \"001\" \"005\" \"002\" \"050\" ... #>  $ type        : chr  \"Lecture\" \"Lecture\" \"Lecture\" \"Lecture\" ... #>  $ faculty_rank: chr  \"\" \"\" \"\" \"\" ... #>  $ hours_course: num  3 4 1 3 5 3 3 3 3 4 ... #>  $ pass_fail   : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ grade       : chr  \"A\" \"C\" \"A\" \"B\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> length(unique(course$mcid)) #> [1] 95633 summary(course$hours_course) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    3.00    3.00    2.71    3.00   99.50   60742 sort(unique(course$type)) #>  [1] \"\"                         \"Academic Redemption\"      #>  [3] \"Blended\"                  \"Directed Study\"           #>  [5] \"Duplicate Credit\"         \"Exemption Credit\"         #>  [7] \"Grade History\"            \"Honors\"                   #>  [9] \"Individual Study\"         \"Ineigible to Repeat\"      #> [11] \"Internship/Practicum\"     \"Laboratory\"               #> [13] \"Lecture\"                  \"Lecture/Supervised Lab\"   #> [15] \"Lecture/Unsupervised Lab\" \"Living Community\"         #> [17] \"Make-Up\"                  \"Online\"                   #> [19] \"Problem Session\"          \"Research\"                 #> [21] \"Seminar\"                  \"Special Exam\"             #> [23] \"Special Topics\"           \"Supervised Laboratory\"    #> [25] \"Synchronized\"             \"Test\"                     #> [27] \"Thesis/Dissertation\"      \"Unsupervised Laboratory\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-1","dir":"Articles","previous_headings":"Inspect the course data","what":"Exercises","title":"Getting started","text":"Determine possible values faculty_rank column. Determine range terms term column. Determine possible values grade column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-term-data","dir":"Articles","previous_headings":"","what":"Inspect the term data","title":"Getting started","text":"term data frame 13 term-related variables observations students complete term remain program beyond institution’s term-withdrawal deadline. can view help page (data dictionary) running observation one term one student keyed student ID. see data structure, run term 710,841 observations occupies approximately 82 MB memory. recorded term (unlike student), students can non-degree-seeking must complete term. number unique students term given , Summarize quantitative variables. Examine categorical variables values.","code":"# Run in Console ? term str(term) #> Classes 'data.table' and 'data.frame':   710841 obs. of  13 variables: #>  $ mcid               : chr  \"MID25783135\" \"MID25783135\" \"MID25783156\" \"MID25783156\" ... #>  $ institution        : chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term               : chr  \"19911\" \"19913\" \"20011\" \"20013\" ... #>  $ cip6               : chr  \"520101\" \"520101\" \"040201\" \"040201\" ... #>  $ level              : chr  \"01 Freshman\" \"02 Sophomore\" \"01 Freshman\" \"02 Sophomore\" ... #>  $ standing           : chr  \"Good Standing\" \"Good Standing\" \"Good Standing\" \"Good Standing\" ... #>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ hours_term         : num  19 14 14 16 16 17 18 18 17 9 ... #>  $ hours_term_attempt : num  19 14 14 16 16 17 18 18 17 13 ... #>  $ hours_cumul        : num  19 33 14 30 46 63 81 99 17 26 ... #>  $ hours_cumul_attempt: num  19 33 14 30 46 63 81 99 17 30 ... #>  $ gpa_term           : num  2.47 3.21 3.07 3.62 3.13 3.82 4 3.5 2.53 1.61 ... #>  $ gpa_cumul          : num  2.47 2.79 3.07 3.36 3.28 3.42 3.55 3.54 2.53 2.13 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"index\")= int(0) length(unique(term$mcid)) #> [1] 94028 summary(term$hours_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    9.00   12.00   11.45   15.00   46.00  summary(term$gpa_term) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   2.400   3.000   2.857   3.540   9.300     267 sort(unique(term$level)) #> [1] \"01 Freshman\"  \"02 Sophomore\" \"03 Junior\"    \"04 Senior\"  sort(unique(term$standing)) #> [1] \"Academic Probation\"               \"Academic Suspension\"              #> [3] \"Academic Suspension - Reinstated\" \"Academic Warning\"                 #> [5] \"Good Standing\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-2","dir":"Articles","previous_headings":"Inspect the term data","what":"Exercises","title":"Getting started","text":"Determine possible values coop column. Determine range terms term column. Determine median value gpa_cumul column.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"inspect-the-degree-data","dir":"Articles","previous_headings":"","what":"Inspect the degree data","title":"Getting started","text":"degree table 5 degree-related variables observations students complete program(s). can view help page (data dictionary) running observation unique combination student degree keyed student ID. see data structure, run degree 47,499 observations occupies approximately 10 MB memory. can confirm student IDs unique running, practice data included students earning double degree () term, number rows exceed number unique IDs. student ID, students degree subset students student. can confirm running following, sum 47,499 indicates IDs degree present student. Examine categorical variables values. Checking degrees recorded NA results empty table, thus students degree graduates.","code":"# Run in Console ? degree str(degree) #> Classes 'data.table' and 'data.frame':   47499 obs. of  5 variables: #>  $ mcid       : chr  \"MID25783162\" \"MID25783178\" \"MID25783188\" \"MID25783195\" ... #>  $ institution: chr  \"Institution M\" \"Institution M\" \"Institution M\" \"Institution M\" ... #>  $ term_degree: chr  \"19963\" \"20001\" \"20023\" \"19966\" ... #>  $ cip6       : chr  \"521401\" \"143501\" \"230101\" \"521401\" ... #>  $ degree     : chr  \"Bachelor of Science\" \"Bachelor of Science\" \"Bachelor of Arts\" \"Bachelor of Science\" ... #>  - attr(*, \".internal.selfref\")=<externalptr> nrow(degree) #> [1] 47499  length(unique(degree$mcid)) #> [1] 47499 # Isolate IDs degree_mcid <- unique(degree$mcid) student_mcid <- unique(student$mcid)  # Sum of logical results, 1 for every TRUE, 0 for every FALSE sum(degree_mcid %chin% student_mcid) #> [1] 47499 sort(unique(degree$institution)) #>  [1] \"Institution A\" \"Institution B\" \"Institution C\" \"Institution D\" #>  [5] \"Institution E\" \"Institution F\" \"Institution G\" \"Institution H\" #>  [9] \"Institution J\" \"Institution K\" \"Institution L\" \"Institution M\"  sort(unique(degree$degree)) #>  [1] \"Bachelor's Degree\"                   \"Bachelor of Architecture\"            #>  [3] \"Bachelor of Arts\"                    \"Bachelor of Arts and Sciences\"       #>  [5] \"Bachelor of Arts in Letters\"         \"Bachelor of Business Administration\" #>  [7] \"Bachelor of Fine Arts\"               \"Bachelor of Interior Design\"         #>  [9] \"Bachelor of Music\"                   \"Bachelor of Science\" degree[is.na(degree)] #> Empty data.table (0 rows and 5 cols): mcid,institution,term_degree,cip6,degree"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"exercises-3","dir":"Articles","previous_headings":"Inspect the degree data","what":"Exercises","title":"Getting started","text":"packages functions specialized data frame summaries. Try one—may find useful future data explorations. Install skimr package, load library(\"skimr\"), run skim(x), x one data tables, example,","code":"library(skimr) skim(student) skim(degree)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Getting started","text":"functions midfieldr briefly described Table 2 additional information available midfieldr Reference page. Detailed examples usage distributed throughout vignettes. Two helper functions discussed sections . Table 2: Functions provided midfieldr.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"select_required","dir":"Articles","previous_headings":"","what":"select_required()","title":"Getting started","text":"midfieldr convenience function reduce number columns MIDFIELD data table loading. Using function optional. select_required() selects columns typically required midfieldr functions. Operates data frame retain columns names match partially match search terms. Rows unaffected. primary benefit reducing screen clutter viewing data frames interactive session. disadvantage deleted columns unavailable unless first set aside copy source file reload using data() need . Arguments. midfield_x   MIDFIELD data frame, typically student, term, degree. select_add   Optional character vector search terms add default vector given c(\"mcid\", \"institution\", \"race\", \"sex\", \"^term\", \"cip6\", \"level\"). Argument, used, must used name. .   original source file.   output retains variables required midfieldr functions. Equivalent usage.   following implementations yield identical results","code":"# Create a copy of the source file source_term <- copy(term) source_term[] #>                mcid   institution   term   cip6        level      standing #>              <char>        <char> <char> <char>       <char>        <char> #>      1: MID25783135 Institution M  19911 520101  01 Freshman Good Standing #>      2: MID25783135 Institution M  19913 520101 02 Sophomore Good Standing #>      3: MID25783156 Institution M  20011 040201  01 Freshman Good Standing #>     ---                                                                    #> 710839: MID26697702 Institution L  20161 240101  01 Freshman Good Standing #> 710840: MID26697702 Institution L  20163 240101  01 Freshman Good Standing #> 710841: MID26697702 Institution L  20164 240101  01 Freshman Good Standing #>           coop hours_term hours_term_attempt hours_cumul hours_cumul_attempt #>         <char>      <num>              <num>       <num>               <num> #>      1:     No         19                 19          19                  19 #>      2:     No         14                 14          33                  33 #>      3:     No         14                 14          14                  14 #>     ---                                                                      #> 710839:     No         12                 12          12                  12 #> 710840:     No          6                  6          18                  18 #> 710841:     No          3                  3          21                  21 #>         gpa_term gpa_cumul #>            <num>     <num> #>      1:     2.47      2.47 #>      2:     3.21      2.79 #>      3:     3.07      3.07 #>     ---                    #> 710839:     3.25      3.25 #> 710840:     4.00      3.50 #> 710841:     4.00      3.57 # Select variables required by midfieldr functions term <- select_required(source_term) term[] #>                mcid   institution   term   cip6        level #>              <char>        <char> <char> <char>       <char> #>      1: MID25783135 Institution M  19911 520101  01 Freshman #>      2: MID25783135 Institution M  19913 520101 02 Sophomore #>      3: MID25783156 Institution M  20011 040201  01 Freshman #>     ---                                                      #> 710839: MID26697702 Institution L  20161 240101  01 Freshman #> 710840: MID26697702 Institution L  20163 240101  01 Freshman #> 710841: MID26697702 Institution L  20164 240101  01 Freshman # Required argument explicitly named x <- select_required(midfield_x = term)  # Required argument not named y <- select_required(term)  # Optional argument, if used, must be named. NULL yields the default columns. z <- select_required(term, select_add = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"same_content","dir":"Articles","previous_headings":"","what":"same_content()","title":"Getting started","text":"code chunk just , claim three results equivalent. verify three data tables content, use same_content(), midfieldr function wraps .equal() data.table objects ignores row order, column order, keys (). Arguments. x, y   Two data frames data.tables compare. Example.   Demonstrate equivalence data tables previous section. Demonstrate row column order ignored. two data tables content, printout indicates types differences.","code":"# Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Two columns from student, use key to order rows x <- student[, .(mcid, institution)] setkey(x, mcid) x[] #>               mcid   institution #>             <char>        <char> #>     1: MID25783135 Institution M #>     2: MID25783147 Institution M #>     3: MID25783156 Institution M #>    ---                           #> 97638: MID26697685 Institution L #> 97639: MID26697689 Institution L #> 97640: MID26697702 Institution L  # Same information with different row order, column order, and key y <- student[, .(institution, mcid)] setkey(y, institution) y[] #>          institution        mcid #>               <char>      <char> #>     1: Institution A MID26131491 #>     2: Institution A MID26131493 #>     3: Institution A MID26131501 #>    ---                           #> 97638: Institution M MID25852767 #> 97639: Institution M MID25852770 #> 97640: Institution M MID25852801  # Demonstrate equivalence same_content(x, y) #> [1] TRUE # Demonstrate non-equivalence same_content(student, degree) #> [1] \"Different number of rows\"    \"Different number of columns\" #> [3] \"Different column names\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-000-getting-started.html","id":"reusable-code-getting-started","dir":"Articles","previous_headings":"","what":"Reusable code: Getting started","title":"Getting started","text":"often conclude vignette Reusable code section two parts. first section, Preparation, describes immediate prerequisites “intake” required reusable code chunk. second section (labeled topic) provides reusable code—condensed version midfieldr functionality explored vignette. cases code can used -; others, code must edited suit goals project. Preparation.   case, intakes source data tables. Initial data processing.   summary code chunk ready reference.","code":"# Load source data data(student, term, degree, package = \"midfielddata\") # Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Case study: Goals","text":"student unit records (SUR) Registrar’s student-level data compiled institution anonymized curated MIDFIELD data steward. SURs include personal information (e.g., age, sex, race/ethnicity), enrollment information (e.g., institution, program, grade level), academic information (e.g., courses, grades, degrees). MIDFIELD data organized four tables—student, course, term, degree—keyed student ID. Caveat: Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences. program stickiness ratio number students graduating program number students ever enrolled program. Stickiness -inclusive alternative graduation rate measure program’s success attracting, keeping, graduating undergraduates. students excluded conventional definition graduation rate included stickiness metric: part-time, transfers, admitted term, migrators (Ohland et al., 2012).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"goals","dir":"Articles","previous_headings":"","what":"Goals","title":"Case study: Goals","text":"technical goal case study compare program stickiness Civil, Electrical, Industrial, Mechanical Engineering programs students grouped race/ethnicity sex. meta-goal case study illustrate typical procedure working SUR data.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"what-the-case-study-does","dir":"Articles","previous_headings":"","what":"What the case study does","title":"Case study: Goals","text":"focus procedures underlying rationale working SURs. reproducibility, provide necessary code. use data.table package instead base R dplyr package speed, memory efficiency, concise transforms via []-indexing operator. use ggplot2 package instead base R lattice (R packages) : ggplot2’s layered approach allows plots evolve (devolve) minimal changes code; easily-invoked facets legends simplify multivariate exploration; popularity yields extensive online help.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-001-case-goals.html","id":"what-the-case-study-does-not-do","dir":"Articles","previous_headings":"","what":"What the case study does not do","title":"Case study: Goals","text":"keep case study brief possible, explain details package syntax functions except selected instances. One can always use R help system read data set function. Additional online resources available, : midfieldr vignettes details syntax, functions, arguments. midfielddata home page data.table home page ggplot2 home page","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Case study: Data","text":"data processing goal reduce source data tables specific observations needed compute metrics. data processing tasks include filtering observations (rows), creating, renaming, recoding variables (columns), joining data frames. analysis organized produce two data frames—students ever enrolled programs students graduating programs—joined written file starting point Case study: Results. Caveat: Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"load-practice-data","dir":"Articles","previous_headings":"","what":"Load practice data","title":"Case study: Data","text":"Start script. writing script follow along, use packages vignette: Load source data. MIDFIELD practice data tables described Getting started.","code":"# Case study: Data # midfieldr vignette  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # Load practice data sets data(student, term, degree, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Case study: Data","text":"Optional. Reduce dimensions MIDFIELD data tables. convenience function reduce dimensions MIDFIELD data table start session selecting columns typically required midfieldr functions. Copying. Prevents operations DT affecting term reference (Dowle & Srinivasan, 2022). result 710,841 observations. usually note number observations change. Filtering. study, two variables term data needed start: student ID mcid program code cip6. drop unnecessary columns remove duplicate rows unique combinations student ID program CIP. result 161,696 observations 94,028 unique students. number unique students smaller number observations students change programs course study. one row per unique combination student (mcid) program code (cip6).","code":"# Work with required midfieldr variables only student <- select_required(student) term <- select_required(term) degree <- select_required(degree) # Working data frame DT <- copy(term)  # Display result DT[] #>                mcid   institution   term   cip6        level #>              <char>        <char> <char> <char>       <char> #>      1: MID25783135 Institution M  19911 520101  01 Freshman #>      2: MID25783135 Institution M  19913 520101 02 Sophomore #>      3: MID25783156 Institution M  20011 040201  01 Freshman #>      4: MID25783156 Institution M  20013 040201 02 Sophomore #>      5: MID25783156 Institution M  20021 040201 02 Sophomore #>     ---                                                      #> 710837: MID26697685 Institution L  20164 521201 02 Sophomore #> 710838: MID26697689 Institution L  20163 240101    04 Senior #> 710839: MID26697702 Institution L  20161 240101  01 Freshman #> 710840: MID26697702 Institution L  20163 240101  01 Freshman #> 710841: MID26697702 Institution L  20164 240101  01 Freshman # Minimize the dimensions of the data DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # Display the result DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783156 040201 #>      3: MID25783162 140102 #>      4: MID25783162 520301 #>      5: MID25783162 521401 #>     ---                    #> 161692: MID26697682 240101 #> 161693: MID26697685 300000 #> 161694: MID26697685 521201 #> 161695: MID26697689 240101 #> 161696: MID26697702 240101 # Count unique IDs length(unique(DT$mcid)) #> [1] 94028"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-data-sufficiency","dir":"Articles","previous_headings":"","what":"Filter for data sufficiency","title":"Case study: Data","text":"student records near lower upper terms bound available data must excluded prevent false summaries involving timely degree completion. apply filter, determine timely completion term data sufficiency. Creating variables. Using information term, add timely_term variable well supporting variables used construction. Creating variables. Using information term, add data_sufficiency variable well supporting variables used construction. Filtering. filter retain observations data sufficient drop unnecessary columns. result 111,932 observations 63,952 unique students.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, term)  # Display the result DT[] #>                mcid   cip6 term_i     level_i adj_span timely_term #>              <char> <char> <char>      <char>    <num>      <char> #>      1: MID25783135 520101  19911 01 Freshman        6       19963 #>      2: MID25783156 040201  20011 01 Freshman        6       20063 #>      3: MID25783162 140102  19921 01 Freshman        6       19973 #>      4: MID25783162 520301  19921 01 Freshman        6       19973 #>      5: MID25783162 521401  19921 01 Freshman        6       19973 #>     ---                                                            #> 161692: MID26697682 240101  20163 01 Freshman        6       20221 #> 161693: MID26697685 300000  20151 01 Freshman        6       20203 #> 161694: MID26697685 521201  20151 01 Freshman        6       20203 #> 161695: MID26697689 240101  20163   04 Senior        3       20191 #> 161696: MID26697702 240101  20161 01 Freshman        6       20213 # Determine data sufficiency for every student DT <- add_data_sufficiency(DT, term)  # Display the result DT[] #>                mcid   cip6     level_i adj_span timely_term term_i lower_limit #>              <char> <char>      <char>    <num>      <char> <char>      <char> #>      1: MID25783135 520101 01 Freshman        6       19963  19911       19871 #>      2: MID25783156 040201 01 Freshman        6       20063  20011       19871 #>      3: MID25783162 140102 01 Freshman        6       19973  19921       19871 #>      4: MID25783162 520301 01 Freshman        6       19973  19921       19871 #>      5: MID25783162 521401 01 Freshman        6       19973  19921       19871 #>     ---                                                                        #> 161692: MID26697682 240101 01 Freshman        6       20221  20163       20021 #> 161693: MID26697685 300000 01 Freshman        6       20203  20151       20021 #> 161694: MID26697685 521201 01 Freshman        6       20203  20151       20021 #> 161695: MID26697689 240101   04 Senior        3       20191  20163       20021 #> 161696: MID26697702 240101 01 Freshman        6       20213  20161       20021 #>         upper_limit data_sufficiency #>              <char>           <char> #>      1:       20036          include #>      2:       20036    exclude-upper #>      3:       20036          include #>      4:       20036          include #>      5:       20036          include #>     ---                              #> 161692:       20164    exclude-upper #> 161693:       20164    exclude-upper #> 161694:       20164    exclude-upper #> 161695:       20164    exclude-upper #> 161696:       20164    exclude-upper # Retain observations having sufficient data DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid, cip6)]  # Display the result DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>      4: MID25783162 521401 #>      5: MID25783178 140102 #>     ---                    #> 111928: MID26697576 521401 #> 111929: MID26697599 110401 #> 111930: MID26697599 521201 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-for-degree-seeking","dir":"Articles","previous_headings":"","what":"Filter for degree-seeking","title":"Case study: Data","text":"studying stickiness, exclude non-degree-seeking students. filter students using student data contains degree seeking students. Filtering. inner join student returns rows matching IDs data frames, selected columns. result 111,932 observations. (change expected example students midfielddata practice data degree-seeking.)","code":"# Inner join that filters DT DT <- student[DT, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Display the result DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>      4: MID25783162 521401 #>      5: MID25783178 140102 #>     ---                    #> 111928: MID26697576 521401 #> 111929: MID26697599 110401 #> 111930: MID26697599 521201 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"identify-programs","dir":"Articles","previous_headings":"","what":"Identify programs","title":"Case study: Data","text":"cip6 variable data identifies program student enrolled given term, based US Classification Instructional Programs (CIP) codes. CIP codes names included midfieldr cip data set. searched information obtain CIP codes four programs case study: Civil Engineering CIPs start 1408, Electrical Engineering 1410, Mechanical Engineering 1419, Industrial/Systems Engineering 1427, 1435, 1436, 1437. Filtering Gather 6-digit CIP codes programs case study. Drop unnecessary variables. keep cip4name , engineering least, 4-digit name tends disciplinary departmental name. Creating variables. Add variable label 15 programs one four conventional program abbreviations use comparing metrics, .e., Civil (CE), Electrical (EE), Mechanical (), Industrial/Systems Engineering (ISE). checked new abbreviations correctly represent programs, can finalize data frame program CIPs names.","code":"# Gather program CIP codes case_programs <- filter_cip(cip, keep_text = c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) case_programs <- case_programs[, .(cip6, cip4name)]  # Display the result case_programs[] #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 142701                                    Systems Engineering #> 13: 143501                                 Industrial Engineering #> 14: 143601                              Manufacturing Engineering #> 15: 143701                                    Operations Research # Assign four program names by CIP code case_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )]  # Confirm that abbreviations match the longer program names case_programs[, .(cip4name, program)] #>                                                   cip4name program #>                                                     <char>  <char> #>  1:                                      Civil Engineering      CE #>  2:                                      Civil Engineering      CE #>  3:                                      Civil Engineering      CE #>  4:                                      Civil Engineering      CE #>  5:                                      Civil Engineering      CE #>  6:                                      Civil Engineering      CE #>  7: Electrical, Electronics and Communications Engineering      EE #>  8: Electrical, Electronics and Communications Engineering      EE #>  9: Electrical, Electronics and Communications Engineering      EE #> 10: Electrical, Electronics and Communications Engineering      EE #> 11:                                 Mechanical Engineering      ME #> 12:                                    Systems Engineering     ISE #> 13:                                 Industrial Engineering     ISE #> 14:                              Manufacturing Engineering     ISE #> 15:                                    Operations Research     ISE # Case study CIPs and program names case_programs[, cip4name := NULL]  # Display the result case_programs[] #>       cip6 program #>     <char>  <char> #>  1: 140801      CE #>  2: 140802      CE #>  3: 140803      CE #>  4: 140804      CE #>  5: 140805      CE #>  6: 140899      CE #>  7: 141001      EE #>  8: 141003      EE #>  9: 141004      EE #> 10: 141099      EE #> 11: 141901      ME #> 12: 142701     ISE #> 13: 143501     ISE #> 14: 143601     ISE #> 15: 143701     ISE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"gather-ever-enrolled","dir":"Articles","previous_headings":"","what":"Gather ever enrolled","title":"Case study: Data","text":"Joining. join program names case_programs working data frame using left-outer join return selected rows. Filtering. instances NA programs dropped. result 7661 observations 7133 unique students. Filtering. program label can associated multiple CIP codes. drop code filter remove duplicates ensure unique combinations ID program. result 7660 observations 7133 unique students. Creating variables. Add variable label group “ever” enrolled distinguish group graduates created next. Copy data frame new name save later.","code":"# Left-outer join to DT DT <- case_programs[DT, .(mcid, cip6, program), on = c(\"cip6\")]  # Display the result DT[] #>                mcid   cip6 program #>              <char> <char>  <char> #>      1: MID25783135 520101    <NA> #>      2: MID25783162 140102    <NA> #>      3: MID25783162 520301    <NA> #>      4: MID25783162 521401    <NA> #>      5: MID25783178 140102    <NA> #>     ---                            #> 111928: MID26697576 521401    <NA> #> 111929: MID26697599 110401    <NA> #> 111930: MID26697599 521201    <NA> #> 111931: MID26697615 500901    <NA> #> 111932: MID26697623 451001    <NA> # Retain observations in our four programs DT <- DT[!is.na(program)]  # Display the result DT[] #>              mcid   cip6 program #>            <char> <char>  <char> #>    1: MID25783178 143501     ISE #>    2: MID25783441 140801      CE #>    3: MID25783491 141001      EE #>    4: MID25783912 143501     ISE #>    5: MID25784025 141901      ME #>   ---                            #> 7657: MID26696958 141901      ME #> 7658: MID26696967 141901      ME #> 7659: MID26697163 141901      ME #> 7660: MID26697444 141901      ME #> 7661: MID26697447 141001      EE # Drop duplicate rows DT[, cip6 := NULL] DT <- unique(DT)  # Display the result DT[] #>              mcid program #>            <char>  <char> #>    1: MID25783178     ISE #>    2: MID25783441      CE #>    3: MID25783491      EE #>    4: MID25783912     ISE #>    5: MID25784025      ME #>   ---                     #> 7656: MID26696958      ME #> 7657: MID26696967      ME #> 7658: MID26697163      ME #> 7659: MID26697444      ME #> 7660: MID26697447      EE # Conclude development of the ever-enrolled observations ever <- copy(DT) ever[, group := \"ever\"]  # Display the result ever[] #>              mcid program  group #>            <char>  <char> <char> #>    1: MID25783178     ISE   ever #>    2: MID25783441      CE   ever #>    3: MID25783491      EE   ever #>    4: MID25783912     ISE   ever #>    5: MID25784025      ME   ever #>   ---                            #> 7656: MID26696958      ME   ever #> 7657: MID26696967      ME   ever #> 7658: MID26697163      ME   ever #> 7659: MID26697444      ME   ever #> 7660: MID26697447      EE   ever"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"subset-for-graduates","dir":"Articles","previous_headings":"","what":"Subset for graduates","title":"Case study: Data","text":"Filtering. Students potentially counted graduates must subset ever enrolled population. re-initialize working data frame, retaining unique IDs . Filtering. inner join degree returns rows matching IDs data frames, selected columns. result 5390 observations 5390 unique students. IDs already filtered data sufficiency degree-seeking.","code":"# Unique IDs of students ever enrolled in the study programs DT <- DT[, .(mcid)] DT <- unique(DT)  # Display the result DT[] #>              mcid #>            <char> #>    1: MID25783178 #>    2: MID25783441 #>    3: MID25783491 #>    4: MID25783912 #>    5: MID25784025 #>   ---             #> 7129: MID26696958 #> 7130: MID26696967 #> 7131: MID26697163 #> 7132: MID26697444 #> 7133: MID26697447 # Inner join that filters DT DT <- DT[degree, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Display the result DT[] #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783441 140801 #>    3: MID25783491 141001 #>    4: MID25783912 143501 #>    5: MID25784489 140801 #>   ---                    #> 5386: MID26696771 141001 #> 5387: MID26696967 141901 #> 5388: MID26697163 141901 #> 5389: MID26697444 240199 #> 5390: MID26697447 141001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-graduates-by-completion-status","dir":"Articles","previous_headings":"","what":"Filter graduates by completion status","title":"Case study: Data","text":"counted graduate stickiness metric, student must complete program timely manner (default 6 years admission, reduced spans transfer students). Add variables. Completion status requires timely completion term variable. Creating variables. Using information degree, add completion_status variable well supporting variables used construction. Filtering. Retain records “positive” completion status (.e. completion 6 years less) drop unnecessary variables. result 4614 unique observations.","code":"# Calculate a timely completion term for every student DT <- add_timely_term(DT, term)  # Display the result DT[] #>              mcid   cip6 term_i      level_i adj_span timely_term #>            <char> <char> <char>       <char>    <num>      <char> #>    1: MID25783178 143501  19946  01 Freshman        6       20003 #>    2: MID25783441 140801  19921  01 Freshman        6       19973 #>    3: MID25783491 141001  19961  01 Freshman        6       20013 #>    4: MID25783912 143501  19971  01 Freshman        6       20023 #>    5: MID25784489 140801  19891  01 Freshman        6       19943 #>   ---                                                             #> 5386: MID26696771 141001  20101 02 Sophomore        5       20143 #> 5387: MID26696967 141901  20101  01 Freshman        6       20153 #> 5388: MID26697163 141901  20101 02 Sophomore        5       20143 #> 5389: MID26697444 240199  20101  01 Freshman        6       20153 #> 5390: MID26697447 141001  20111  01 Freshman        6       20163 # Determine completion status for every student DT <- add_completion_status(DT, degree)  # Display the result DT[] #>              mcid   cip6 term_i      level_i adj_span timely_term term_degree #>            <char> <char> <char>       <char>    <num>      <char>      <char> #>    1: MID25783178 143501  19946  01 Freshman        6       20003       20001 #>    2: MID25783441 140801  19921  01 Freshman        6       19973       19963 #>    3: MID25783491 141001  19961  01 Freshman        6       20013       20001 #>    4: MID25783912 143501  19971  01 Freshman        6       20023       20001 #>    5: MID25784489 140801  19891  01 Freshman        6       19943       19931 #>   ---                                                                         #> 5386: MID26696771 141001  20101 02 Sophomore        5       20143       20143 #> 5387: MID26696967 141901  20101  01 Freshman        6       20153       20141 #> 5388: MID26697163 141901  20101 02 Sophomore        5       20143       20133 #> 5389: MID26697444 240199  20101  01 Freshman        6       20153       20151 #> 5390: MID26697447 141001  20111  01 Freshman        6       20163       20154 #>       completion_status #>                  <char> #>    1:            timely #>    2:            timely #>    3:            timely #>    4:            timely #>    5:            timely #>   ---                   #> 5386:            timely #> 5387:            timely #> 5388:            timely #> 5389:            timely #> 5390:            timely # Retain timely completers DT <- DT[completion_status == \"timely\"] DT <- DT[, .(mcid, cip6)]  # Display the result DT[] #>              mcid   cip6 #>            <char> <char> #>    1: MID25783178 143501 #>    2: MID25783441 140801 #>    3: MID25783491 141001 #>    4: MID25783912 143501 #>    5: MID25784489 140801 #>   ---                    #> 4610: MID26696771 141001 #> 4611: MID26696967 141901 #> 4612: MID26697163 141901 #> 4613: MID26697444 240199 #> 4614: MID26697447 141001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"filter-graduates-by-program","dir":"Articles","previous_headings":"","what":"Filter graduates by program","title":"Case study: Data","text":"join program names working data frame using left-outer join return selected rows. filter retain program names NA. result 3552 unique observations. Creating variables. Add variable label group “grad” distinguish group ever enrolled students created earlier.","code":"# Left-outer join to DT DT <- case_programs[DT, .(mcid, program), on = c(\"cip6\")] DT <- DT[!is.na(program)]  # Unique observations DT <- unique(DT)  # Display the result DT[] #>              mcid program #>            <char>  <char> #>    1: MID25783178     ISE #>    2: MID25783441      CE #>    3: MID25783491      EE #>    4: MID25783912     ISE #>    5: MID25784489      CE #>   ---                     #> 3548: MID26696738      ME #> 3549: MID26696771      EE #> 3550: MID26696967      ME #> 3551: MID26697163      ME #> 3552: MID26697447      EE # Conclude development of the graduate observations grad <- copy(DT) grad[, group := \"grad\"]  # Display the result grad[] #>              mcid program  group #>            <char>  <char> <char> #>    1: MID25783178     ISE   grad #>    2: MID25783441      CE   grad #>    3: MID25783491      EE   grad #>    4: MID25783912     ISE   grad #>    5: MID25784489      CE   grad #>   ---                            #> 3548: MID26696738      ME   grad #> 3549: MID26696771      EE   grad #> 3550: MID26696967      ME   grad #> 3551: MID26697163      ME   grad #> 3552: MID26697447      EE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"combine-ever-and-grad","dir":"Articles","previous_headings":"","what":"Combine ever and grad","title":"Case study: Data","text":"Binding. Combine two data frames matching column names.","code":"# Combine two data frames DT <- rbindlist(list(ever, grad), use.names = TRUE)  # Display the result DT[] #>               mcid program  group #>             <char>  <char> <char> #>     1: MID25783178     ISE   ever #>     2: MID25783441      CE   ever #>     3: MID25783491      EE   ever #>     4: MID25783912     ISE   ever #>     5: MID25784025      ME   ever #>    ---                            #> 11208: MID26696738      ME   grad #> 11209: MID26696771      EE   grad #> 11210: MID26696967      ME   grad #> 11211: MID26697163      ME   grad #> 11212: MID26697447      EE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"add-demographics","dir":"Articles","previous_headings":"","what":"Add demographics","title":"Case study: Data","text":"Creating variables. Using columns student, add variables race/ethnicity sex using left-outer join. rows columns DT returned two columns added student. result 11,212 observations 7133 unique students. IDs labeled “grad” subset labeled “ever”. Verify built-data. avoid deriving data frame time needed vignettes, information provided study_observations data frame included midfieldr. verify two data frames identical.","code":"# Selecting columns from student student_cols <- student[, .(mcid, race, sex)]  # Add them to DT with a left join DT <- student_cols[DT, on = c(\"mcid\")]  # Display the result DT[] #>               mcid   race    sex program  group #>             <char> <char> <char>  <char> <char> #>     1: MID25783178  Black   Male     ISE   ever #>     2: MID25783441  White   Male      CE   ever #>     3: MID25783491  White   Male      EE   ever #>     4: MID25783912  White   Male     ISE   ever #>     5: MID25784025  Black   Male      ME   ever #>    ---                                          #> 11208: MID26696738  White   Male      ME   grad #> 11209: MID26696771  White Female      EE   grad #> 11210: MID26696967  White   Male      ME   grad #> 11211: MID26697163 Latine   Male      ME   grad #> 11212: MID26697447  Asian   Male      EE   grad # Demonstrate equivalence same_content(DT, study_observations) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"review","dir":"Articles","previous_headings":"","what":"Review","title":"Case study: Data","text":"better grasp structure data, can review selected sets observations ID. first example, ID produces one observation . student enrolled Civil Engineering completion, , timely. next example, ID produces two observations indicating student enrolled Civil Engineering timely graduate program. next example, ID produces two observations indicating student enrolled Electrical Engineering Mechanical Engineering timely graduate neither program. next example, ID produces three observations indicating student enrolled Electrical Engineering Civil Engineering timely graduate Civil.","code":"# Display one student by ID DT[mcid == \"MID26694225\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID26694225  White   Male      CE   ever # Display one student by ID DT[mcid == \"MID25786154\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID25786154  White Female      CE   ever #> 2: MID25786154  White Female      CE   grad # Display one student by ID DT[mcid == \"MID25868925\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID25868925  Asian Female      EE   ever #> 2: MID25868925  Asian Female      ME   ever # Display one student by ID DT[mcid == \"MID26526757\"] #>           mcid   race    sex program  group #>         <char> <char> <char>  <char> <char> #> 1: MID26526757  Asian Female      CE   ever #> 2: MID26526757  Asian Female      EE   ever #> 3: MID26526757  Asian Female      CE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Case study: Data","text":"Starting student, term, degree data tables, filtered data data sufficiency, degree seeking, program, timely completion four programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) processed data obtain observations needed determine stickiness.","code":""},{"path":[]},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-002-case-data.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case study: Data","text":"case study code chunks collected single, condensed script.","code":"# Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\")  # Import data data(student, term, degree, package = \"midfielddata\")  # Gather ever enrolled DT <- copy(term) DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # Filter for data sufficiency DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"] DT <- DT[, .(mcid, cip6)]  # Filter for degree-seeking DT <- DT[student, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Filter by program study_program <- filter_cip(cip, keep_text = c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) study_program <- study_program[, .(cip6, cip6name)] study_program[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] DT <- study_program[DT, .(mcid, cip6, program), on = c(\"cip6\")] DT <- DT[!is.na(program)] DT[, cip6 := NULL] DT <- unique(DT) ever <- copy(DT) ever[, group := \"ever\"]  # Gather graduate subset DT <- DT[, .(mcid)] DT <- unique(DT) DT <- DT[degree, .(mcid, cip6), on = c(\"mcid\"), nomatch = NULL]  # Filter by completion status DT <- add_timely_term(DT, midfield_term = term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"positive\"] DT <- DT[, .(mcid, cip6)]  # Filter by program DT <- study_program[DT, .(mcid, program), on = c(\"cip6\")] DT <- DT[!is.na(program)] DT <- unique(DT) grad <- copy(DT) grad[, group := \"grad\"]  # Combine two data frames and match the column names DT <- rbindlist(list(ever, grad), use.names = TRUE)  # Add demographics student_cols <- student[, .(mcid, race, sex)] DT <- student_cols[DT, on = c(\"mcid\")]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Case study: Results","text":"goal segment group summarize observations saved previously, calculate stickiness metric, display results. Caveat: Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"load-practice-data","dir":"Articles","previous_headings":"","what":"Load practice data","title":"Case study: Results","text":"Start script. writing script follow along, use packages vignette: Prepared data. study_observations, included midfieldr, contains post-processed observations students ever enrolled , students graduating , case study programs developed Case study: Data.","code":"# Case study: Results # midfieldr vignette  # Packages library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE ) # View prepared data study_observations #>               mcid   race    sex program  group #>             <char> <char> <char>  <char> <char> #>     1: MID25783178  Black   Male     ISE   ever #>     2: MID25783441  White   Male      CE   ever #>     3: MID25783491  White   Male      EE   ever #>     4: MID25783912  White   Male     ISE   ever #>     5: MID25784025  Black   Male      ME   ever #>    ---                                          #> 11208: MID26696738  White   Male      ME   grad #> 11209: MID26696771  White Female      EE   grad #> 11210: MID26696967  White   Male      ME   grad #> 11211: MID26697163 Latine   Male      ME   grad #> 11212: MID26697447  Asian   Male      EE   grad"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"group-and-summarize","dir":"Articles","previous_headings":"","what":"Group and summarize","title":"Case study: Results","text":"Copying. Prevents operations DT affecting study_observations reference (Dowle & Srinivasan, 2022). calculate stickiness, want count number students ever enrolled programs number students graduating programs, grouped race/ethnicity sex. grouping variables columns data set (race, sex, program, group)—structure designed support specific analytical goal. can now group summarize one line code.","code":"# Working data frame DT <- copy(study_observations)  # Display the result DT[] #>               mcid   race    sex program  group #>             <char> <char> <char>  <char> <char> #>     1: MID25783178  Black   Male     ISE   ever #>     2: MID25783441  White   Male      CE   ever #>     3: MID25783491  White   Male      EE   ever #>     4: MID25783912  White   Male     ISE   ever #>     5: MID25784025  Black   Male      ME   ever #>    ---                                          #> 11208: MID26696738  White   Male      ME   grad #> 11209: MID26696771  White Female      EE   grad #> 11210: MID26696967  White   Male      ME   grad #> 11211: MID26697163 Latine   Male      ME   grad #> 11212: MID26697447  Asian   Male      EE   grad # Group and summarize DT <- DT[, .N, by = c(\"group\", \"program\", \"race\", \"sex\")]  # Display the result DT[] #>       group program            race    sex     N #>      <char>  <char>          <char> <char> <int> #>   1:   ever     ISE           Black   Male   103 #>   2:   ever      CE           White   Male  1043 #>   3:   ever      EE           White   Male  1227 #>   4:   ever     ISE           White   Male   494 #>   5:   ever      ME           Black   Male   202 #>  ---                                             #> 101:   grad     ISE   International Female     3 #> 102:   grad     ISE   Other/Unknown Female     1 #> 103:   grad      EE Native American   Male     1 #> 104:   grad      ME Native American Female     1 #> 105:   grad      CE Native American   Male     1"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"compute-metric","dir":"Articles","previous_headings":"","what":"Compute metric","title":"Case study: Results","text":"Stickiness ratio number graduates number students ever enrolled program. able divide grad / ever like two values row. dcast() function accomplishes us. operation essentially transformation block records row records—process known number different names, e.g., pivot, crosstab, unstack, spread, widen (Mount & Zumel, 2019). step leaves graphing variables (program, race/ethnicity, sex) place. calculate percent stickiness. Verify built-data. avoid deriving data frame time needed vignettes, information provided study_results data frame included midfieldr. verify two data frames identical.","code":"# Transform to row-record form DT <- dcast(DT, program + sex + race ~ group, value.var = \"N\", fill = 0)  # Display the result DT[] #>     program    sex            race  ever  grad #>      <char> <char>          <char> <int> <int> #>  1:      CE Female           Asian    16     9 #>  2:      CE Female           Black    49    15 #>  3:      CE Female   International     1     0 #>  4:      CE Female          Latine    10     5 #>  5:      CE Female   Other/Unknown     6     2 #> ---                                            #> 51:      ME   Male   International    36    16 #> 52:      ME   Male          Latine    76    29 #> 53:      ME   Male Native American    14     4 #> 54:      ME   Male   Other/Unknown    43    20 #> 55:      ME   Male           White  1776   918 # Compute the metric DT[, stick := round(100 * grad / ever, 1)] setkey(DT, NULL)  # Display the result DT[] #>     program    sex            race  ever  grad stick #>      <char> <char>          <char> <int> <int> <num> #>  1:      CE Female           Asian    16     9  56.2 #>  2:      CE Female           Black    49    15  30.6 #>  3:      CE Female   International     1     0   0.0 #>  4:      CE Female          Latine    10     5  50.0 #>  5:      CE Female   Other/Unknown     6     2  33.3 #> ---                                                  #> 51:      ME   Male   International    36    16  44.4 #> 52:      ME   Male          Latine    76    29  38.2 #> 53:      ME   Male Native American    14     4  28.6 #> 54:      ME   Male   Other/Unknown    43    20  46.5 #> 55:      ME   Male           White  1776   918  51.7 # Demonstrate equivalence same_content(DT, study_results) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Case study: Results","text":"take several additional steps prepare data dissemination tables charts. Filtering. preserve anonymity people involved, remove observations 10 fewer graduates. Filtering. Let us assume study focuses “domestic” students known race/ethnicity. case, omit observations labeled “International” /Unknown”. Creating variables. found useful report data variable combines race/ethnicity sex. Recoding values. Readers can readily interpret charts tables programs unabbreviated. one quantitative variable (stickiness) every combination levels two categorical variables (program race/ethnicity/sex), data multiway data (Cleveland, 1993). one orders categorical variables critical visualizing effects. Conditioning. Convert two categorical variables ordered factors support ordering rows panels chart. use midfieldr order_multiway() function. column program_stick determines order programs chart; people_stick determines order race/ethnicity/sex groupings; values stick quantitative values graphed.","code":"# Preserve anonymity DT <- DT[grad >= 10]  # Display the result DT[] #>     program    sex          race  ever  grad stick #>      <char> <char>        <char> <int> <int> <num> #>  1:      CE Female         Black    49    15  30.6 #>  2:      CE Female         White   304   156  51.3 #>  3:      CE   Male         Asian    34    17  50.0 #>  4:      CE   Male         Black    90    25  27.8 #>  5:      CE   Male        Latine    53    22  41.5 #> ---                                                #> 27:      ME   Male         Black   202    65  32.2 #> 28:      ME   Male International    36    16  44.4 #> 29:      ME   Male        Latine    76    29  38.2 #> 30:      ME   Male Other/Unknown    43    20  46.5 #> 31:      ME   Male         White  1776   918  51.7 # Filter by study design DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")]  # Display the result DT[] #>     program    sex   race  ever  grad stick #>      <char> <char> <char> <int> <int> <num> #>  1:      CE Female  Black    49    15  30.6 #>  2:      CE Female  White   304   156  51.3 #>  3:      CE   Male  Asian    34    17  50.0 #>  4:      CE   Male  Black    90    25  27.8 #>  5:      CE   Male Latine    53    22  41.5 #> ---                                         #> 23:      ME Female  White   261   109  41.8 #> 24:      ME   Male  Asian   118    58  49.2 #> 25:      ME   Male  Black   202    65  32.2 #> 26:      ME   Male Latine    76    29  38.2 #> 27:      ME   Male  White  1776   918  51.7 # Create a variable DT[, people := paste(race, sex)] DT[, c(\"race\", \"sex\") := NULL] setcolorder(DT, c(\"program\", \"people\"))  # Display the result DT[] #>     program       people  ever  grad stick #>      <char>       <char> <int> <int> <num> #>  1:      CE Black Female    49    15  30.6 #>  2:      CE White Female   304   156  51.3 #>  3:      CE   Asian Male    34    17  50.0 #>  4:      CE   Black Male    90    25  27.8 #>  5:      CE  Latine Male    53    22  41.5 #> ---                                        #> 23:      ME White Female   261   109  41.8 #> 24:      ME   Asian Male   118    58  49.2 #> 25:      ME   Black Male   202    65  32.2 #> 26:      ME  Latine Male    76    29  38.2 #> 27:      ME   White Male  1776   918  51.7 # Recode values for charts and tables DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )]  # Display the result DT[] #>        program       people  ever  grad stick #>         <char>       <char> <int> <int> <num> #>  1:      Civil Black Female    49    15  30.6 #>  2:      Civil White Female   304   156  51.3 #>  3:      Civil   Asian Male    34    17  50.0 #>  4:      Civil   Black Male    90    25  27.8 #>  5:      Civil  Latine Male    53    22  41.5 #> ---                                           #> 23: Mechanical White Female   261   109  41.8 #> 24: Mechanical   Asian Male   118    58  49.2 #> 25: Mechanical   Black Male   202    65  32.2 #> 26: Mechanical  Latine Male    76    29  38.2 #> 27: Mechanical   White Male  1776   918  51.7 # Convert categorical variables to factors DT <- order_multiway(DT,   quantity = \"stick\",   categories = c(\"program\", \"people\"),   method = \"percent\",   ratio_of = c(\"grad\", \"ever\") )  # Display the result DT[] #>        program       people  grad  ever stick program_stick people_stick #>         <fctr>       <fctr> <num> <num> <num>         <num>        <num> #>  1:      Civil Black Female    15    49  30.6          50.4         38.4 #>  2:      Civil White Female   156   304  51.3          50.4         45.9 #>  3:      Civil   Asian Male    17    34  50.0          50.4         48.0 #>  4:      Civil   Black Male    25    90  27.8          50.4         34.2 #>  5:      Civil  Latine Male    22    53  41.5          50.4         41.5 #> ---                                                                      #> 23: Mechanical White Female   109   261  41.8          48.0         45.9 #> 24: Mechanical   Asian Male    58   118  49.2          48.0         48.0 #> 25: Mechanical   Black Male    65   202  32.2          48.0         34.2 #> 26: Mechanical  Latine Male    29    76  38.2          48.0         41.5 #> 27: Mechanical   White Male   918  1776  51.7          48.0         49.5"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"charts","dir":"Articles","previous_headings":"","what":"Charts","title":"Case study: Results","text":"first multiway chart, rows programs panels people, facilitating comparisons different program single group. Rows panels ordered bottom top order increasing stickiness.  Alternatively, can consider dual chart, swapping roles panels rows. rows people panels programs, facilitating comparisons different people within program. many years publishing research using MIDFIELD data, placing people rows multiway chart perhaps frequently used design.  chart illustrates importance ordering rows panels. conclude Industrial/Systems Engineering stickiest program four, followed Civil, Mechanical, Electrical descending order. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. example, Asian Female students asymmetrically higher Mechanical Engineering asymmetrically lower Industrial/Systems Engineering.","code":"ggplot(DT, aes(x = stick, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\") ggplot(DT, aes(x = stick, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"Case study: Results","text":"Data tables often needed publication. example, format data conventional row-record form groups people first column labeling rows program names labeling remaining columns. Groups numbers reporting threshold denoted NA omitted. Table 1: Program stickiness (%)","code":"# Select the columns I want for the table tbl <- DT[, .(program, people, stick)]  # Change factors to characters so rows/columns can be alphabetized tbl[, people := as.character(people)] tbl[, program := as.character(program)]  # Transform from block records to row records tbl <- dcast(tbl, people ~ program, value.var = \"stick\")  # Edit one column header setnames(tbl, old = \"people\", new = \"People\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Case study: Results","text":"Starting prepared data (case study observations), compute longitudinal stickiness four programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) grouped program, race/ethnicity, sex. Pre-dissemination results written file possible later use. filter selected records create data table charts dissemination.","code":""},{"path":[]},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-003-case-results.html","id":"complete-script","dir":"Articles","previous_headings":"Appendix","what":"Complete script","title":"Case study: Results","text":"case study code chunks collected single, condensed script.","code":"# Packages library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")  # Printing options for data.table options(   datatable.print.nrows = 15,   datatable.print.topn = 5,   datatable.print.class = TRUE )  # Copy the case study observations DT <- copy(study_observations)  # Group and summarize DT <- DT[, .N, by = c(\"group\", \"program\", \"race\", \"sex\")]  # Compute the metric DT <- dcast(DT, program + sex + race ~ group, value.var = \"N\", fill = 0) DT[, stick := round(100 * grad / ever, 1)]  # Prepare for dissemination DT <- DT[grad >= 10] DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")] DT[, people := paste(race, sex)] DT[, c(\"race\", \"sex\") := NULL] setcolorder(DT, c(\"program\", \"people\")) DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )]  # Convert categorical variables to factors DT <- order_multiway(DT,   quantity = \"stick\",   categories = c(\"program\", \"people\"),   method = \"percent\",   ratio_of = c(\"grad\", \"ever\") )  # Chart 1 ggplot(DT, aes(x = stick, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")  # Chart 2 ggplot(DT, aes(x = stick, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\")  # Table tbl <- DT[, .(program, people, stick)] tbl[, people := as.character(people)] tbl[, program := as.character(program)] tbl <- dcast(tbl, people ~ program, value.var = \"stick\") setnames(tbl, old = \"people\", new = \"People\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Planning","text":"Working MIDFIELD data iterative—intermediate results often cause us revisit earlier assumption select different bloc student attributes work . Nevertheless, completed analysis usually comprises following steps roughly sequence given . Accented entries indicate topics open vignette. Records Programs Metrics, blocs, groupings Data sufficiency Degree seeking Identify programs Ever-enrolled FYE proxies Starters Graduates Program labels Demographics variables Graduation rate Stickiness Multiway charts Tables","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Planning","text":"SUR Student Unit Records. Registrar’s student-level data compiled institution anonymized curated MIDFIELD data steward. MIDFIELD data organized four tables—student, course, term, degree. program US academic field study. Can used indicate specialty within field collection fields within Department, College, University. Programs denoted Classification Instructional Programs (CIP), taxonomy academic programs curated US Department Education (NCES, 2010). metric quantitative measure derived SURs. Includes statistical measures counts program starters graduates well comparative ratios graduation rate stickiness. Typically involves comparisons specific blocs students programs. bloc grouping SURs dealt unit, example, starters, students ever-enrolled, graduates, transfer students, traditional non-traditional students, migrators, etc. grouping variables Student-level, detailed data SURs characterize bloc records, typically used create bloc subsets comparison, example, program, race/ethnicity, sex, age, grade level, grades, etc.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-records","dir":"Articles","previous_headings":"","what":"Which records?","title":"Planning","text":"currently two collections MIDFIELD data: Research data: Complete institutional registrar’s data, students, programs, approximately 1.7 M undergraduates 19 US institutions 1987–2018. Available MIDFIELD partners. Practice data: Approximately 98,000 undergraduates 200 majors 12 US institutions 1987–2016. proportionate stratified sample MIDFIELD research data. Publicly available midfielddata R data package. Records collections organized four tables—student, course, term, degree—keyed student ID. Details Getting started. maintain confidentiality, practice data include fewer variables research data, variable names values generally subset research data. Thus researcher transitioning working practice data research data find practice scripts work research data minor modifications (). important caveat working practice data: Caveat: Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"load-data","dir":"Articles","previous_headings":"Which records?","what":"Load data","title":"Planning","text":"Practice data.   Loaded midfielddata package using data(), e.g., Research data.   Assuming one access, import data via user’s preferred file read function, e.g.,","code":"# Load practice data data(student, course, term, degree, package = \"midfielddata\") # Not run student <- fread(\"path_to_student_data\") course <- fread(\"path_to_course_data\") term <- fread(\"path_to_term_data\") degree <- fread(\"path_to_degree_data\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-programs","dir":"Articles","previous_headings":"","what":"Which programs?","title":"Planning","text":"Identify programs general terms, example, Engineering Engineering, Business, Social Sciences, Arts Humanities Electrical Engineering Computer Engineering shown Programs, use filter_cip() acting cip data set determine set CIP codes relevant study. majority vignette examples involve engineering programs. However, MIDFIELD research limited Engineering. MIDFIELD research data contain SURs undergraduates programs institution time span given. practice data, sample research data, similar attributes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-010-planning.html","id":"which-metrics-blocs-and-groupings","dir":"Articles","previous_headings":"","what":"Which metrics, blocs, and groupings?","title":"Planning","text":"data processing starts, decide metrics want compare among blocs students grouped variables. Metrics can include bloc counts comparative ratios, example: Blocs, e.g., counts starters, graduates, migrators, etc. Four-year persistence Six-year graduation rate Six-year stickiness metric determines blocs gather, example: Graduation rate requires bloc starters subset graduate starting program. Stickiness requires bloc ever enrolled program subset graduate program. research study design determines grouping variables, example, Completion status critical variable whenever graduation (program completion) involved. Programs, race/ethnicity sex important grouping variables many studies. student-level variables institution, GPA, grade level, etc., can also used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Data sufficiency","text":"data range overall span academic terms student unit record data provided institution. particularly interested lower upper limits continuous range. timely completion term last term student’s degree completion considered timely. many cases timely completion (TC) term 6 years admission. TC term can adjusted account transfer credits. (Currently, mechanism extending TC term co-ops migrators.) data sufficiency criterion Student records limited available data sufficient assess timely completion without biased counts completers non-completers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"upper-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Upper-limit data sufficiency","title":"Data sufficiency","text":"students admitted near upper limit institution’s data range, available data cover insufficient number years know completion timely. illustrate, figure compare two students admitted different terms representative time spans shown timely completion. scenario, assume institution data available 1986 1996.  Figure 1: Upper limit data sufficiency Student Student enters 1988 timely completion (TC) term 1994. following cases, data sufficiency criterion satisfied records included study. -1: First time college (FTIC), know first term entry term (.e., continuing student) can determine TC term. -2: Transfer student, know first term MIDFIELD institution. knowledge much time spent accumulating pre-MIDFIELD credit hours, can estimate TC term respect MIDFIELD entry level. Student B Student B enters 1993 TC term 1998, two years beyond range data. several possible cases, B-1: data limit, student completes program (timely known) B-2: data limit, student leaves data base (untimely known) B-3: data limit, student completes TC term (timely unknown) B-4: data limit, student completes TC term fails complete (untimely unknown) unknown outcomes cases B-3 B-4, including case B-1 B-2 invariably produces miscount completers non-completers. Thus criterion satisfied student B records excluded study.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"lower-limit-data-sufficiency","dir":"Articles","previous_headings":"","what":"Lower-limit data sufficiency","title":"Data sufficiency","text":"determine data sufficiency record exclusions lower limit data range, compare student’s first term (non-summer) first term data range (also non-summer). two terms identical, complete unit record excluded. illustrate three scenarios described .  Figure 2: Lower limit data sufficiency Student C Student C makes first appearance database term following data lower limit. conditions student C (FTIC transfer) identical student , thus student C included study. Student D Student D enters institution lower limit data range (“continuing” student) enter institution lower limit precisely. D-1: student D continuing, regardless status (FTIC transfer), making estimate TC term invariably leads false counts knowledge much time spent accumulating credit hours MIDFIELD institution lower data limit. Including D-1 also produces false counts student E (discussed ). D-2: student D continuing, , first time entry MIDFIELD institution lower data limit (, 1986), include study . Unfortunately, distinguish continuing students. exclude D-1 inherently excludes D-2 well. Student E Student E enters institution time continuing student D leaves database data lower limit term. E-1: Student E timely-complete program. case, include student D count non-completers low (E-1 cases missing), resulting inflated ratio completers non-completers. E-2: Student E timely-complete program. , include student D count completers low (E-2 cases missing), resulting diminished ratio completers non-completers. balance two effects unknowable. Since student E possibly included, Student D must also excluded.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Data sufficiency","text":"Specific student unit records upper lower limits institution’s data range must excluded prevent false counts due insufficient data. Based discussion , two specific filters implemented: Lower limit. IDs extant non-summer lower limit institution’s data range labeled possible exclusion. Upper limit. IDs timely completion term exceeds upper limit institution’s data range labeled possible exclusion. Caveat.  Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Data sufficiency","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started.","code":"# midfieldr: Data sufficiency  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # Load data data(term, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Data sufficiency","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Select.   Start ID column . Filter.   unique IDs.","code":"# Optional. Copy of source files with all variables source_term <- copy(term)  # Optional. Select variables required by midfieldr functions term <- select_required(source_term) # Working data frame DT <- copy(term) DT[] #>                mcid   institution   term   cip6        level #>              <char>        <char> <char> <char>       <char> #>      1: MID25783135 Institution M  19911 520101  01 Freshman #>      2: MID25783135 Institution M  19913 520101 02 Sophomore #>      3: MID25783156 Institution M  20011 040201  01 Freshman #>     ---                                                      #> 710839: MID26697702 Institution L  20161 240101  01 Freshman #> 710840: MID26697702 Institution L  20163 240101  01 Freshman #> 710841: MID26697702 Institution L  20164 240101  01 Freshman # Retain the minimum number of columns DT <- DT[, .(mcid)] # Filter for unique IDs DT <- unique(DT) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783156 #>     3: MID25783162 #>    ---             #> 94026: MID26697685 #> 94027: MID26697689 #> 94028: MID26697702"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"add_timely_term","dir":"Articles","previous_headings":"","what":"add_timely_term()","title":"Data sufficiency","text":"Add column data frame Student Unit Record (SUR) observations indicates latest term degree completion considered timely every student. Arguments. dframe   Data frame student unit record (SUR) observations keyed student ID. Required variable (column) mcid. midfield_term   Data frame SUR term observations keyed student ID. Default term. Required variables (columns) mcid, term, level. span   Optional integer scalar, number years define timely completion. Commonly used values 100%, 150%, 200% sched_span. Default 6 years. Argument used name. sched_span   Optional integer scalar, number years institution officially schedules completing program. Default 4 years. Argument used name. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_i   Student initial term, encoded YYYYT. level_i   Student level (01 Freshman, 02 Sophomore, etc.) initial term. adj_span   Integer span years timely completion, adjusted student’s initial level timely_term   Latest term degree completion considered timely. Encoded YYYYT.","code":"# Required arguments in order and explicitly named x <- add_timely_term(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_timely_term(DT, term)  # Using the implicit default for the midfield_term argument z <- add_timely_term(DT)  # Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Add timely term column and supporting variables DT <- add_timely_term(DT, term) DT[] #>               mcid term_i     level_i adj_span timely_term #>             <char> <char>      <char>    <num>      <char> #>     1: MID25783135  19911 01 Freshman        6       19963 #>     2: MID25783156  20011 01 Freshman        6       20063 #>     3: MID25783162  19921 01 Freshman        6       19973 #>    ---                                                     #> 94026: MID26697685  20151 01 Freshman        6       20203 #> 94027: MID26697689  20163   04 Senior        3       20191 #> 94028: MID26697702  20161 01 Freshman        6       20213"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"closer-look","dir":"Articles","previous_headings":"add_timely_term()","what":"Closer look","title":"Data sufficiency","text":"Examining records selected students detail. Example 1.   student’s initial term Fall 1991 (encoded 19911) initial level 01 Freshman. number years timely completion 6 years, , academic years 1991–92, 92–93, 93–94, 94–95, 95–96, 96–97. Thus timely completion term Spring 1997 (encoded 19963). Example 2.   student’s initial term Spring 2017 (encoded 20163) initial level 04 Senior infer completed three years program, yielding adjusted span 3 years. three years encompass terms 20163–20171, 20173–20181, 20183–20191, yielding timely completion term Fall 2019 (encoded 20191).","code":"# Display one student by ID DT[mcid == \"MID25783135\"] #>           mcid term_i     level_i adj_span timely_term #>         <char> <char>      <char>    <num>      <char> #> 1: MID25783135  19911 01 Freshman        6       19963 # Display one student by ID DT[mcid == \"MID26697689\"] #>           mcid term_i   level_i adj_span timely_term #>         <char> <char>    <char>    <num>      <char> #> 1: MID26697689  20163 04 Senior        3       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"alternate-source-names","dir":"Articles","previous_headings":"add_timely_term()","what":"Alternate source names","title":"Data sufficiency","text":"Arguments midfieldr functions accept alternate names, source-data file names workspace named something student, term, etc. example, working “toy” (exercise) data sets included midfieldr, might write something like ,","code":"# A toy set of IDs toy_mcid <- toy_student[, .(mcid)]  # Source data table names that differ from the defaults toy_DT <- add_timely_term(dframe = toy_mcid, midfield_term = toy_term)  # Equivalently toy_DT <- add_timely_term(toy_mcid, toy_term) toy_DT[] #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #> ---                                                      #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"silent-overwriting","dir":"Articles","previous_headings":"add_timely_term()","what":"Silent overwriting","title":"Data sufficiency","text":"Existing columns names one added columns deleted replaced. Using toy data illustrate, drop columns added timely term except adj_span. Reapplying function, adj_span column silently deleted replaced.","code":"# Drop three columns toy_DT <- toy_DT[, c(\"term_i\", \"level_i\", \"timely_term\") := NULL] toy_DT[] #>            mcid adj_span #>          <char>    <num> #>  1: MID25784187        6 #>  2: MID25784974        5 #>  3: MID25816209        5 #> ---                      #> 97: MID26691066        6 #> 98: MID26692025        3 #> 99: MID26692254        5 # Demonstrate overwriting toy_DT <- add_timely_term(toy_DT, toy_term) toy_DT[] #>            mcid term_i      level_i adj_span timely_term #>          <char> <char>       <char>    <num>      <char> #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #> ---                                                      #> 97: MID26691066  20103  01 Freshman        6       20161 #> 98: MID26692025  20131    04 Senior        3       20153 #> 99: MID26692254  20143 02 Sophomore        5       20191"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"add_data_sufficiency","dir":"Articles","previous_headings":"","what":"add_data_sufficiency()","title":"Data sufficiency","text":"Add column data frame Student Unit Record (SUR) observations labels row inclusion exclusion based data sufficiency near upper lower bounds institution’s data range. Arguments. dframe   Data frame student unit record (SUR) observations keyed student ID. Required variables mcid timely_term. midfield_term   Data frame SUR term observations keyed student ID. Default term. Required variables mcid, institution, term. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_i   Student initial term, encoded YYYYT. lower_limit   Initial term institution’s data range, encoded YYYYT. upper_limit   Final term institution’s data range, encoded YYYYT. data_sufficiency   Label observation inclusion exclusion based data sufficiency: “include”, indicating available data sufficient estimating timely degree completion; “exclude-upper”, indicating data insufficient upper limit data range; “exclude-lower”, indicating data insufficient lower limit. Similar details described previous section, add_data_sufficiency() accepts Alternate source names uses Silent overwriting existing columns name one added columns.","code":"# Required arguments in order and explicitly named x <- add_data_sufficiency(dframe = DT, midfield_term = term)  # Required arguments in order, but not named y <- add_data_sufficiency(DT, term)  # Using the implicit default for the midfield_term argument z <- add_data_sufficiency(DT)  # Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Retain required variables only DT <- DT[, .(mcid, timely_term)]  # Add data sufficiency column and supporting variables DT <- add_data_sufficiency(DT, term) DT[] #>               mcid timely_term term_i lower_limit upper_limit data_sufficiency #>             <char>      <char> <char>      <char>      <char>           <char> #>     1: MID25783135       19963  19911       19871       20036          include #>     2: MID25783156       20063  20011       19871       20036    exclude-upper #>     3: MID25783162       19973  19921       19871       20036          include #>    ---                                                                         #> 94026: MID26697685       20203  20151       20021       20164    exclude-upper #> 94027: MID26697689       20191  20163       20021       20164    exclude-upper #> 94028: MID26697702       20213  20161       20021       20164    exclude-upper"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"closer-look-1","dir":"Articles","previous_headings":"add_data_sufficiency()","what":"Closer look","title":"Data sufficiency","text":"Examining records selected students detail. excerpts, data range institution Fall 1987 Summer 2003. Example 3.   student’s initial term Fall 1991 1987 lower-limit exclusion apply; student’s timely completion term Spring 1996, 2003 upper-limit exclusion apply. record satisfies data sufficiency criterion. Exemplifies “Student ” Figure 1 “Student C” Figure 2. Example 4.   student’s initial term Fall 2001 1987 lower-limit exclusion apply; student’s timely completion term Spring 2006, 2003 upper-limit exclusion apply .Exemplifies “Student B” Figure 1. Example 5.   student’s initial term Fall 1987 1987 lower-limit exclusion applies. Exemplifies “Student D” Figure 2.","code":"# Display one student by ID DT[mcid == \"MID25783135\"] #>           mcid timely_term term_i lower_limit upper_limit data_sufficiency #>         <char>      <char> <char>      <char>      <char>           <char> #> 1: MID25783135       19963  19911       19871       20036          include # Display one student by ID DT[mcid == \"MID25783156\"] #>           mcid timely_term term_i lower_limit upper_limit data_sufficiency #>         <char>      <char> <char>      <char>      <char>           <char> #> 1: MID25783156       20063  20011       19871       20036    exclude-upper # Display one student by ID DT[mcid == \"MID25783197\"] #>           mcid timely_term term_i lower_limit upper_limit data_sufficiency #>         <char>      <char> <char>      <char>      <char>           <char> #> 1: MID25783197       19923  19871       19871       20036    exclude-lower"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-020-data-sufficiency.html","id":"reusable-code-data-sufficiency","dir":"Articles","previous_headings":"","what":"Reusable code: Data sufficiency","title":"Data sufficiency","text":"Preparation.   term data table intake section. Data sufficiency.   summary code chunk ready reference.","code":"DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Degree seeking","text":"design, student data table contains records degree-seeking students . use inner join student filter working data frame degree-seeking students. Filter source SURs data sufficiency. Filter degree seeking. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Degree seeking","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started.","code":"# midfieldr: Degree seeking (inner joins)  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # Load data data(student, term, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Degree seeking","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022).. Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"inner-joins","dir":"Articles","previous_headings":"","what":"Inner joins","title":"Degree seeking","text":"inner join merge operation returns observations (rows) two data frames match specified conditions . Using data.table syntax, two approaches: merge(X, Y, ) (similar base R) Y[X, j, ] (native data.table).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"using-mergex-y-by","dir":"Articles","previous_headings":"Inner joins","what":"Using merge(X, Y, by)","title":"Degree seeking","text":"general form inner join X data frame, matching rows returned Y data frame, matching rows returned vector shared column names merge = FALSE ensures inner join example, Y data frame student, extract ID column joining. Otherwise, columns data frames returned.","code":"merge(X, Y, by, all = FALSE) # Select columns in Y cols_we_want <- student[, .(mcid)]  # merge(X, Y) inner join merge(DT, cols_we_want, by = c(\"mcid\"), all = FALSE) #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"using-yx-j-on","dir":"Articles","previous_headings":"Inner joins","what":"Using Y[X, j, on]","title":"Degree seeking","text":"second approach—native data.table computationally efficient—form X data frame, matching rows returned Y data frame, matching rows returned j selects columns joined data frame retain (default columns) vector shared column names merge nomatch = NULL ensures inner join Demonstrate equivalence.   Showing two approaches produce result , inner joins, X Y interchangeable.","code":"Y[X, j, on, nomatch = NULL] # Y[X] inner join DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 # merge(X, Y) w <- merge(DT, cols_we_want, by = c(\"mcid\"), all = FALSE) # merge(Y, X) x <- merge(cols_we_want, DT, by = c(\"mcid\"), all = FALSE) # X[Y] y <- DT[student, .(mcid), on = c(\"mcid\"), nomatch = NULL] # Y[X] z <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL]  # Demonstrate equivalence same_content(w, x) #> [1] TRUE same_content(w, y) #> [1] TRUE same_content(w, z) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"selecting-columns","dir":"Articles","previous_headings":"Inner joins","what":"Selecting columns","title":"Degree seeking","text":"either method, can select columns data frames. Using merge() select columns explicitly subsetting two data frames. X[Y, j] syntax, however, can list columns returned data frames j list, , .(var1, var2, etc.), without subsetting original two data frames. Demonstrate equivalence.   Showing two approaches produce result.","code":"# Selecting columns from both data frames, merge() inner join x <- merge(DT[, .(mcid)], student[, .(mcid, institution)], by = c(\"mcid\"), all = FALSE) setkey(x, NULL) x[] #>               mcid   institution #>             <char>        <char> #>     1: MID25783135 Institution M #>     2: MID25783162 Institution M #>     3: MID25783178 Institution M #>    ---                           #> 63950: MID26697599 Institution L #> 63951: MID26697615 Institution L #> 63952: MID26697623 Institution L # Selecting columns from both data frames, X[Y] inner join y <- DT[student, .(mcid, institution), on = c(\"mcid\"), nomatch = NULL] y[] #>               mcid   institution #>             <char>        <char> #>     1: MID25783135 Institution M #>     2: MID25783162 Institution M #>     3: MID25783178 Institution M #>    ---                           #> 63950: MID26697599 Institution L #> 63951: MID26697615 Institution L #> 63952: MID26697623 Institution L # Demonstrate equivalence same_content(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"degree-seeking","dir":"Articles","previous_headings":"","what":"Degree seeking","title":"Degree seeking","text":"Work.   baseline data frame preserved earlier intake section. Filter. Use inner join student filter DT retain degree-seeking students. Filter.   Filter ensure IDs unique.","code":"# Reusable starting state DT <- copy(baseline) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 # Inner join for degree seeking DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] # One observation per ID DT <- unique(DT) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-030-degree-seeking.html","id":"reusable-code-degree-seeking","dir":"Articles","previous_headings":"","what":"Reusable code: Degree seeking","title":"Degree seeking","text":"Preparation.   baseline data frame preserved earlier intake section. Degree seeking.   summary code chunk ready reference.","code":"DT <- copy(baseline) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Programs","text":"program US academic field study. Can used indicate specialty within field collection fields within Department, College, University. Programs denoted CIP codes. CIP Classification Instructional Programs, taxonomy academic programs curated US Department Education (NCES, 2010). 2010 codes included midfieldr data set cip. cip6 Character variable term degree data tables program observations. Values 6-digit CIP codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Programs","text":"search cip data set included midfieldr using variety techniques obtain set 6-digit CIP codes programs study. assign custom program names codes groups codes. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"taxonomy","dir":"Articles","previous_headings":"","what":"Taxonomy","title":"Programs","text":"Academic programs three levels codes names: 6-digit code, specific program 4-digit code, group 6-digit programs comparable content 2-digit code, grouping 4-digit groups related content Specialties within discipline encoded 6-digit level, discipline represented one 4-digit codes (roughly corresponding academic department), collection disciplines represented one 2-digit codes (roughly corresponding academic college). example, Geotechnical Engineering (140802) specialty Civil Engineering (1408) department college Engineering (14). illustrate taxonomy little detail, show table programs assigned 2-digit code 41, “Science Technologies, Technicians”. 2-digit grouping subdivided 5 groups 4-digit level (codes 4100–4199) subdivided 9 programs 6-digit level (codes 410000–419999). Table 1: CIP taxonomy 2-digit program can include anywhere four 4-digit programs (e.g., code 24 Liberal Arts Sciences, General Studies Humanities) 238 4-digit programs (e.g., code 51 Health Professions Related Clinical Sciences). 4-digit programs include anywhere one 6-digit program (e.g., code 4100 ) 37 6-digit programs (e.g., code 1313 Education). Unfortunately, disciplines can comprise one 4-digit code. example, programs comprise broad discipline Industrial Systems Engineering encompass four distinct 4-digit codes: 1427 Systems Engineering, 1435 Industrial Engineering, 1436 Manufacturing Engineering, 1437 Operations Research. Hence importance able search CIP data programs interest.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Programs","text":"Open.   writing script follow along, use packages vignette: Loads midfieldr. cip adapted (NCES, 2010)","code":"# midfieldr: Programs  # Packages library(\"midfieldr\") library(\"data.table\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"inspect-the-cip-data","dir":"Articles","previous_headings":"","what":"Inspect the cip data","title":"Programs","text":"First glance. variables cip character strings, protects leading zeros CIP codes. number unique programs. sample program names uses random number generator, result differ shown).","code":"# Loads with midfieldr cip #>         cip2                                                  cip2name   cip4 #>       <char>                                                    <char> <char> #>    1:     01 Agriculture, Agricultural Operations and Related Sciences   0100 #>    2:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>    3:     01 Agriculture, Agricultural Operations and Related Sciences   0101 #>   ---                                                                         #> 1580:     54                                                   History   5401 #> 1581:     54                                                   History   5401 #> 1582:     99                         NonIPEDS - Undecided, Unspecified   9999 #>                                   cip4name   cip6 #>                                     <char> <char> #>    1:                 Agriculture, General 010000 #>    2: Agricultural Business and Management 010101 #>    3: Agricultural Business and Management 010102 #>   ---                                             #> 1580:                              History 540108 #> 1581:                              History 540199 #> 1582:    NonIPEDS - Undecided, Unspecified 999999 #>                                             cip6name #>                                               <char> #>    1:                           Agriculture, General #>    2:  Agricultural Business and Management, General #>    3: Agribusiness, Agricultural Business Operations #>   ---                                                #> 1580:                               Military History #> 1581:                                 History, Other #> 1582:              NonIPEDS - Undecided, Unspecified # Names and class of the CIP variables cip[, lapply(.SD, class)] #>         cip2  cip2name      cip4  cip4name      cip6  cip6name #>       <char>    <char>    <char>    <char>    <char>    <char> #> 1: character character character character character character # 2-digit level sort(unique(cip$cip2)) #>  [1] \"01\" \"03\" \"04\" \"05\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"19\" \"22\" \"23\" #> [16] \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" #> [31] \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"54\" #> [46] \"99\"  # 4-digit level length(unique(cip$cip4)) #> [1] 394  # 6-digit level length(unique(cip$cip6)) #> [1] 1582 # 2-digit name sample sample(cip[, cip2name], 10) #>  [1] \"Education\"                                                    #>  [2] \"Foreign Languages, Literatures and Linguistics\"               #>  [3] \"Business, Management, Marketing and Related Support Services\" #>  [4] \"Engineering\"                                                  #>  [5] \"Family and Consumer Sciences, Human Sciences\"                 #>  [6] \"Engineering Technology\"                                       #>  [7] \"Health Professions and Related Clinical Sciences\"             #>  [8] \"Business, Management, Marketing and Related Support Services\" #>  [9] \"Health Professions and Related Clinical Sciences\"             #> [10] \"Physical Sciences\"  # 4-digit name sample sample(cip[, cip4name], 10) #>  [1] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [2] \"Applied Horticulture, Horticultural Business Services\"                  #>  [3] \"Ophthalmic and Optometric Support Services and Allied Professions\"      #>  [4] \"Specialized Sales, Merchandising and Marketing Operations\"              #>  [5] \"Engineering-Related Fields\"                                             #>  [6] \"Teacher Education and Professional Development, Specific Subject Areas\" #>  [7] \"Allied Health Diagnostic, Intervention Treatment Professions\"           #>  [8] \"Leatherworking and Upholstery\"                                          #>  [9] \"Health, Medical Preparatory Programs\"                                   #> [10] \"Research and Experimental Psychology\"  # 6-digit name sample sample(cip[, cip6name], 10) #>  [1] \"Soil Sciences, Other\"                                  #>  [2] \"Health, Medical Physics\"                               #>  [3] \"Adult Literacy Tutor, Instructor\"                      #>  [4] \"Environmental Design, Architecture\"                    #>  [5] \"Advanced, Graduate Dentistry and Oral Sciences, Other\" #>  [6] \"Dental Materials (MS, PhD)\"                            #>  [7] \"Drafting and Design Technology, Technician, General\"   #>  [8] \"Chemical Engineering Technology, Technician\"           #>  [9] \"Social Science Teacher Education\"                      #> [10] \"Sports and Exercise\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"filter_cip","dir":"Articles","previous_headings":"","what":"filter_cip()","title":"Programs","text":"Subset cip data frame, retaining rows match partially match vector character strings. general text search function, filter_cip() applied data frames cip. Within midfieldr, however, ’s role search CIP content (hence name). Arguments. dframe   Data frame subset, default cip. keep_text   Character vector search text retaining rows, case-sensitive. drop_text   Optional character vector search text dropping rows. Argument used name. select   Optional character vector column names search return, default columns. Argument used name. Equivalent usage.   following implementations yield identical results, deviation conventional R usage, function designed permit usage filter_cip(character_vector) position first two arguments ignored first argument unnamed character vector. case, character vector assigned keep_text argument cip data set included midfieldr assigned dframe argument. Output.   Subset dframe rows matching elements keep_text. Additional subsetting optional arguments specified. Examples follow.","code":"# First two arguments in order and explicitly named w <- filter_cip(dframe = cip, keep_text = c(\"engineering\"))  # First two arguments in order, but not named x <- filter_cip(cip, c(\"engineering\"))  # Dropping vector notation when one element only y <- filter_cip(cip, \"engineering\")  # Demonstrate equivalence same_content(w, x) #> [1] TRUE same_content(w, y) #> [1] TRUE # Special case z <- filter_cip(\"engineering\")  # Demonstrate equivalence same_content(w, z) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-keyword-search","dir":"Articles","previous_headings":"","what":"Using a keyword search","title":"Programs","text":"Filtering CIP data programs containing word “engineering” yields 119 observations. optional drop_text select arguments named explicitly. Columns select subset filtering keep_text drop_text Suppose want find CIP codes names programs Civil Engineering. search insensitive case, start following code chunk. Table 2. Search results. search returns programs Civilization names well Engineering Technology. wanted Civil Engineering , can use sequence function calls, outcome one operation assigned first argument next operation. following code chunk read , “Start cip data frame, keep rows ‘civil’ detected, keep rows ‘engineering’ detected, drop rows ‘technology’ detected.” first pass operates cip, successive passes . Table 3. Search results. Equivalent usage.   Seeing Civil Engineering programs cip4name, used keep_text = c(\"civil engineering\") narrow search rows match full phrase. following implementations yield identical results,","code":"# Filter basics filter_cip(\"engineering\") #>        cip2                                         cip2name   cip4 #>      <char>                                           <char> <char> #>   1:     14                                      Engineering   1401 #>   2:     14                                      Engineering   1401 #>   3:     14                                      Engineering   1402 #>  ---                                                                #> 117:     29                            Military Technologies   2903 #> 118:     29                            Military Technologies   2903 #> 119:     51 Health Professions and Related Clinical Sciences   5123 #>                                                   cip4name   cip6 #>                                                     <char> <char> #>   1:                                  Engineering, General 140101 #>   2:                                  Engineering, General 140102 #>   3: Aerospace, Aeronautical and Astronautical Engineering 140201 #>  ---                                                              #> 117:                             Military Applied Sciences 290301 #> 118:                             Military Applied Sciences 290303 #> 119:            Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>                                                                <char> #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>  ---                                                                  #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering # Optional arguments drop_text and select filter_cip(\"engineering\",   drop_text = c(\"related\", \"technology\", \"technologies\"),   select = c(\"cip6\", \"cip6name\") ) #>       cip6                                                     cip6name #>     <char>                                                       <char> #>  1: 140101                                         Engineering, General #>  2: 140102                                              Pre-Engineering #>  3: 140201 Aerospace, Aeronautical and Astronautical, Space Engineering #> ---                                                                     #> 52: 144401                                        Engineering Chemistry #> 53: 144501                           Biological, Biosystems Engineering #> 54: 149999                                           Engineering, Other # Example 1 filter using keywords filter_cip(\"civil\") # First search first_pass <- filter_cip(cip, keep_text = \"civil\")  # Refine the search second_pass <- filter_cip(first_pass, keep_text = \"engineering\")  # Refine further third_pass <- filter_cip(second_pass, drop_text = \"technology\") # Three passes x <- filter_cip(\"civil\") x <- filter_cip(x, \"engineering\") x <- filter_cip(x, drop_text = \"technology\")  # Combined search y <- filter_cip(\"civil engineering\", drop_text = \"technology\")  # Demonstrate equivalence same_content(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"exercises","dir":"Articles","previous_headings":"Using a keyword search","what":"Exercises","title":"Programs","text":"Determine set 6-digit CIP codes expect used College Business. social sciences 2-digit CIP necessarily include possible social science programs. Let anthropology, economics, geography, linguistics, political science, jurisprudence, psychology, sociology defined social sciences. Determine set 6-digit codes collect study programs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-numerical-code-search","dir":"Articles","previous_headings":"","what":"Using a numerical code search","title":"Programs","text":"Suppose want study programs relating German culture, language, literature. Using “german” keep_text value yields Table 4. Search results. 6-digit program names find two interest, German Studies (050125) German Language Literature (160501). use character vector assign two codes keep_text argument. Table 5. Search results. 6-digit codes entered integers, produce error.","code":"# Search on text filter_cip(\"german\") # Search on codes filter_cip(c(\"050125\", \"160501\")) # Search that produces an error filter_cip(cip, c(050125, 160501)) #> Error in filter_cip(cip, c(50125, 160501)): Assertion on 'keep_text' failed. Must be of class 'string', not 'double'."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"exercise","dir":"Articles","previous_headings":"Using a numerical code search","what":"Exercise","title":"Programs","text":"Social sciences exercise previous section, searching “jurisprudence” produced two codes: “220203” “220204.” Search cip two codes determine 2-digit program belong. initial search term, “history.” results, Identify 2-digit CIP history. Use numerical search programs start 2-digit CIP. Subset 6-digit CIPs 6-digit CIP names. Assign result object name exercise_cip. Answer given check work.","code":"#>       cip6                         cip6name #>     <char>                           <char> #>  1: 540101                 History, General #>  2: 540102 American History (United States) #>  3: 540103                 European History #> ---                                         #>  7: 540107                 Canadian History #>  8: 540108                 Military History #>  9: 540199                   History, Other"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"using-a-regular-expression-search","dir":"Articles","previous_headings":"","what":"Using a regular expression search","title":"Programs","text":"Specifying 4-digit codes yields data frame 6-digit programs containing 4-digit string. use regular expression notation ^ match start strings. Table 6. Search results. 2-digit series represent general groupings related programs. , result includes History programs. Table 7. Search results. series argument can include combination 2, 4, 6-digit codes. can also passed function character vector. Table 8. Search results.","code":"# example 3 filter using regular expressions filter_cip(c(\"^1410\", \"^1419\")) # Search on 2-digit code filter_cip(\"^54\") # Search on vector of codes codes_we_want <- c(\"^24\", \"^4102\", \"^450202\") filter_cip(codes_we_want)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"when-search-terms-cannot-be-found","dir":"Articles","previous_headings":"","what":"When search terms cannot be found","title":"Programs","text":"keep_text argument includes terms found CIP data frame, unsuccessful terms identified message successful terms produce usual output. example, following keep_text argument includes three search terms present CIP data (“111111”, “^55”, “Bogus”) two (“050125” “160501”). However, seen earlier, none search terms found, error occurs.","code":"# Unsuccessful terms produce a message sub_cip <- filter_cip(c(\"050125\", \"111111\", \"160501\", \"Bogus\", \"^55\")) #> Can't find these terms: 111111, Bogus, ^55  # But the successful terms are returned sub_cip #>      cip2                                            cip2name   cip4 #>    <char>                                              <char> <char> #> 1:     05 Area, Ethnic, Cultural and Gender and Group Studies   0501 #> 2:     16      Foreign Languages, Literatures and Linguistics   1605 #>                                       cip4name   cip6 #>                                         <char> <char> #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #>                            <char> #> 1:                 German Studies #> 2: German Language and Literature # When none of the search terms are found filter_cip(c(\"111111\", \"Bogus\", \"^55\")) #> Error: The search result is empty. Possible causes are: #>  * 'dframe' contained no matches to terms in 'keep_text'. #>  * 'drop_text' eliminated all remaining rows."},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"cip-data-from-another-source","dir":"Articles","previous_headings":"","what":"CIP data from another source","title":"Programs","text":"use CIP data set another source, must structure cip: six character columns named follows,","code":"# Name and class of variables (columns) in cip unlist(lapply(cip, FUN = class)) #>        cip2    cip2name        cip4    cip4name        cip6    cip6name  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"assigning-program-names","dir":"Articles","previous_headings":"","what":"Assigning program names","title":"Programs","text":"Programs MIDFIELD data sets encoded 6-digit CIP codes. ’ve shown, multiple 6-digit codes can considered specialties within larger program 4-digit code even set distinct 4-digit codes. Thus program names cip generally inadequate grouping summarizing. User-defined program names nearly always required. studies require deliberate assignment user-defined program names CIP codes groups CIP codes. demonstrate creation data frame 6-digit CIP codes study plus user-defined names. searching cip, can find 4-digit codes four engineering programs : Civil (1408), Electrical (1410), Mechanical (1419), Industrial/Systems (1427, 1435, 1436, 1437). obtain 6-digit CIP codes. 4-digit names appropriate . task create variable custom program names. make assignments clear, approach assign new program column NA values, edit new column values.","code":"# Changing the number of rows to print options(datatable.print.nrows = 15)  # Four engineering programs four_programs <- filter_cip(c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\"))  # Retain the needed columns four_programs <- four_programs[, .(cip6, cip4name)] four_programs[] #>       cip6                                               cip4name #>     <char>                                                 <char> #>  1: 140801                                      Civil Engineering #>  2: 140802                                      Civil Engineering #>  3: 140803                                      Civil Engineering #>  4: 140804                                      Civil Engineering #>  5: 140805                                      Civil Engineering #>  6: 140899                                      Civil Engineering #>  7: 141001 Electrical, Electronics and Communications Engineering #>  8: 141003 Electrical, Electronics and Communications Engineering #>  9: 141004 Electrical, Electronics and Communications Engineering #> 10: 141099 Electrical, Electronics and Communications Engineering #> 11: 141901                                 Mechanical Engineering #> 12: 142701                                    Systems Engineering #> 13: 143501                                 Industrial Engineering #> 14: 143601                              Manufacturing Engineering #> 15: 143701                                    Operations Research # Assign a new column four_programs[, program := NA_character_] four_programs[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering    <NA> #>  8: 141003 Electrical, Electronics and Communications Engineering    <NA> #>  9: 141004 Electrical, Electronics and Communications Engineering    <NA> #> 10: 141099 Electrical, Electronics and Communications Engineering    <NA> #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-cip4name-ilike-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"1. Use cip4name %ilike% to recode one value","title":"Programs","text":"%like% function essentially wrapper function around base R grepl() function. %ilike% version case-insensitive. can view help page running (back-ticks facilitate help search terms starting symbol): approach, search one distinctive term . ’re using abbreviations compact output.","code":"# Run in Console ? `%like%` # Recode program using the 4-digit name four_programs[cip4name %ilike% \"electrical\", program := \"EE\"] four_programs[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering    <NA> #>  2: 140802                                      Civil Engineering    <NA> #>  3: 140803                                      Civil Engineering    <NA> #>  4: 140804                                      Civil Engineering    <NA> #>  5: 140805                                      Civil Engineering    <NA> #>  6: 140899                                      Civil Engineering    <NA> #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-cip6-like-to-recode-one-value","dir":"Articles","previous_headings":"Assigning program names","what":"2. Use cip6 %like% to recode one value","title":"Programs","text":"second approach, use %like% function , apply CIP code. use regular expression ^1408 meaning “starts 1408.”","code":"# Recode program using the 4-digit code four_programs[cip6 %like% \"^1408\", program := \"CE\"] four_programs[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering      CE #>  2: 140802                                      Civil Engineering      CE #>  3: 140803                                      Civil Engineering      CE #>  4: 140804                                      Civil Engineering      CE #>  5: 140805                                      Civil Engineering      CE #>  6: 140899                                      Civil Engineering      CE #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering    <NA> #> 12: 142701                                    Systems Engineering    <NA> #> 13: 143501                                 Industrial Engineering    <NA> #> 14: 143601                              Manufacturing Engineering    <NA> #> 15: 143701                                    Operations Research    <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"use-program-fcase-to-edit-all-values","dir":"Articles","previous_headings":"Assigning program names","what":"3. Use program := fcase() to edit all values","title":"Programs","text":"approach, use data.table function fcase(), implementation SQL CASE statement. data.table function %chin% like %%, character vectors.","code":"# Recode all program values four_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] four_programs[] #>       cip6                                               cip4name program #>     <char>                                                 <char>  <char> #>  1: 140801                                      Civil Engineering      CE #>  2: 140802                                      Civil Engineering      CE #>  3: 140803                                      Civil Engineering      CE #>  4: 140804                                      Civil Engineering      CE #>  5: 140805                                      Civil Engineering      CE #>  6: 140899                                      Civil Engineering      CE #>  7: 141001 Electrical, Electronics and Communications Engineering      EE #>  8: 141003 Electrical, Electronics and Communications Engineering      EE #>  9: 141004 Electrical, Electronics and Communications Engineering      EE #> 10: 141099 Electrical, Electronics and Communications Engineering      EE #> 11: 141901                                 Mechanical Engineering      ME #> 12: 142701                                    Systems Engineering     ISE #> 13: 143501                                 Industrial Engineering     ISE #> 14: 143601                              Manufacturing Engineering     ISE #> 15: 143701                                    Operations Research     ISE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"exercises-1","dir":"Articles","previous_headings":"Assigning program names","what":"Exercises","title":"Programs","text":"Obtain 9 programs 2-digit program 54 History. Add program column NA values. Rename “General” “” “General History” Shorten “History Philosophy…” “Sci/Tech History” Shorten “American History …” “US History” Shorten “Public Applied …” “Public/Applied History” Others retain 6-digit name Delete cip6name column. Answer given check work.","code":"#>      cip6                program #>    <char>                 <char> #> 1: 540101        General History #> 2: 540102             US History #> 3: 540103       European History #> 4: 540104       Sci/Tech History #> 5: 540105 Public/Applied History #> 6: 540106          Asian History #> 7: 540107       Canadian History #> 8: 540108       Military History #> 9: 540199        General History"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-040-programs.html","id":"reusable-code-programs","dir":"Articles","previous_headings":"","what":"Reusable code: Programs","title":"Programs","text":"Preparation.   provide working example, select four engineering programs case study used throughout vignettes (Civil, Electrical, Industrial/Systems, Mechanical Engineering). assume prior search cip yielded relevant codes used . Requires editing reuse different programs. Programs.   summary code chunk ready reference. Requires editing reuse different programs. Verify built-data.   study_programs, included midfieldr, contains case study information developed . verify two data frames content.","code":"# Edit as required for different programs case_study_programs <- filter_cip(c(\"^1408\", \"^1410\", \"^1419\", \"^1427\", \"^1435\", \"^1436\", \"^1437\")) # Recode program labels case_study_programs[, program := fcase(   cip6 %like% \"^1408\", \"CE\",   cip6 %like% \"^1410\", \"EE\",   cip6 %like% \"^1419\", \"ME\",   cip6 %chin% c(\"142701\", \"143501\", \"143601\", \"143701\"), \"ISE\" )] case_study_programs <- case_study_programs[, .(cip6, program)] # Demonstrate equivalence same_content(case_study_programs, study_programs) #> [1] TRUE"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Blocs","text":"bloc grouping SURs dealt unit, example, starters, ever-enrolled, graduates, transfers, traditional, non-traditional, migrators, etc. ever-enrolled Bloc students whose term records include specified program least one term. migrators Bloc students leave one program enroll another. Also called switchers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Blocs","text":"use left joins add variables working data frame filter students ever-enrolled case study programs. Migrators () yield one observation (program) ID. Filter source SURs data sufficiency degree-seeking. Gather ever-enrolled Filter program. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Blocs","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs).","code":"# midfieldr: Blocs (ever-enrolled)  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # Load practice data data(student, term, degree, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Blocs","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. Degree seeking.   Filter retain degree seeking students via inner join student. Code reproduced Degree seeking. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT) baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"left-joins","dir":"Articles","previous_headings":"","what":"Left joins","title":"Blocs","text":"left join merge operation two data frames returns observations (rows) “left” data frame X matching rows “right” data frame Y. Using data.table syntax, two approaches: merge(X, Y, ) (similar base R) Y[X, j, ] (native data.table).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"using-mergex-y-by","dir":"Articles","previous_headings":"Left joins","what":"Using merge(X, Y, by)","title":"Blocs","text":"general form left join X “left” data frame, rows returned Y “right” data frame, matching rows returned vector shared column names merge .x = TRUE ensures left join example, Y data frame term, extract ID CIP columns join. Alternatively, one can select Y columns within merge operation.","code":"merge(X, Y, by, all.x = TRUE) # Subset of term data frame to join cols_we_want <- term[, .(mcid, cip6)]  # merge(X, Y, by) left join merge(DT, cols_we_want, by = c(\"mcid\"), all.x = TRUE) #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783135 520101 #>      3: MID25783162 140102 #>     ---                    #> 535806: MID26697615 500901 #> 535807: MID26697615 500901 #> 535808: MID26697623 451001 # merge(X, Y, by) left join merge(DT, term[, .(mcid, cip6)], by = c(\"mcid\"), all.x = TRUE) #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783135 520101 #>      3: MID25783162 140102 #>     ---                    #> 535806: MID26697615 500901 #> 535807: MID26697615 500901 #> 535808: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"using-yx-j-on","dir":"Articles","previous_headings":"Left joins","what":"Using Y[X, j, on]","title":"Blocs","text":"second approach—native data.table computationally efficient—form X “left” data frame, rows returned Y “right” data frame, matching rows returned j selects columns joined data frame retain vector shared column names merge Demonstrate equivalence. Showing two approaches produce result.","code":"Y[X, j, on] # Y[X, j, on] left join (data.table native syntax) term[DT, .(mcid, cip6), on = c(\"mcid\")] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783135 520101 #>      3: MID25783162 140102 #>     ---                    #> 535806: MID26697615 500901 #> 535807: MID26697615 500901 #> 535808: MID26697623 451001 # merge(X, Y, by) left join x <- merge(DT, term[, .(mcid, cip6)], by = c(\"mcid\"), all.x = TRUE) setkey(x, NULL)  # Y[X, j, on] left join y <- term[DT, .(mcid, cip6), on = c(\"mcid\")]  # Demonstrate equivalence same_content(x, y) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"left-join-matching-rules","dir":"Articles","previous_headings":"Left joins","what":"Left join matching rules","title":"Blocs","text":"Rows X match Y   NA values columns normally filled Y values. example, students DT earn degree. left join (degree DT), rows DT returned. IDs DT match degree NA term_degree column (variable degree source table). result 63,952 unique IDs 40,779 degrees. Rows X multiple matches Y   yields new row X every matching row Y. example, students DT enrolled multiple terms. left join (term DT), rows DT returned. IDs DT multiple matches term multiple rows result, differentiated values term column (variable term source table). result 63,952 unique IDs distributed 535,808 observations. “Left” “right” matter.   left joins (unlike inner joins), X[Y] Y[X] return different results: Y[X, j, ] returns rows X X[Y, j, ] returns rows Y","code":"x <- degree[DT, .(mcid, term_degree), on = c(\"mcid\")] setkeyv(x, c(\"mcid\")) x[] #>               mcid term_degree #>             <char>      <char> #>     1: MID25783135        <NA> #>     2: MID25783162       19963 #>     3: MID25783178       20001 #>     4: MID25783195       19966 #>     5: MID25783220        <NA> #>    ---                         #> 63948: MID26697574       20113 #> 63949: MID26697576       20134 #> 63950: MID26697599       20143 #> 63951: MID26697615        <NA> #> 63952: MID26697623       20153 x <- term[DT, .(mcid, term), on = c(\"mcid\")] setkeyv(x, c(\"mcid\", \"term\")) x[] #>                mcid   term #>              <char> <char> #>      1: MID25783135  19911 #>      2: MID25783135  19913 #>      3: MID25783162  19921 #>      4: MID25783162  19923 #>      5: MID25783162  19931 #>     ---                    #> 535804: MID26697599  20141 #> 535805: MID26697599  20143 #> 535806: MID26697615  20101 #> 535807: MID26697615  20103 #> 535808: MID26697623  20101 # What we want x <- degree[DT, .(mcid, term_degree), on = c(\"mcid\")]  # Not what we want y <- DT[degree, .(mcid, term_degree), on = c(\"mcid\")]  # Same content? same_content(x, y) #> [1] \"Different number of rows\"  # Compare N rows nrow(x) #> [1] 63952 nrow(y) #> [1] 47499"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"ever-enrolled","dir":"Articles","previous_headings":"","what":"Ever-enrolled","title":"Blocs","text":"Work.   baseline data frame preserved earlier intake section. Add variable.   Use left join term DT add CIP variable. Filter.   Filter retain unique combinations ID CIP code.","code":"# Reusable starting state DT <- copy(baseline) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 # Left-outer join from term to DT DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] # One observation per ID-CIP combination DT <- unique(DT) DT[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>     ---                    #> 111930: MID26697599 110401 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Blocs","text":"Filter.   “ever-enrolled” usually means “ever-enrolled specific programs,” bloc concludes filter program. Code reproduced Groupings.","code":"# Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT[] #>       program        mcid #>        <char>      <char> #>    1:     ISE MID25783178 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 7658:      ME MID26697163 #> 7659:      ME MID26697444 #> 7660:      EE MID26697447"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-050-blocs.html","id":"reusable-code-blocs","dir":"Articles","previous_headings":"","what":"Reusable code: Blocs","title":"Blocs","text":"Preparation.   baseline data frame preserved earlier intake section. Ever-enrolled.   summary code chunk ready reference. Requires editing study_programs reuse different programs. Verify built-data.   study_ever, included midfieldr, contains case study information developed . verify two data frames content.","code":"DT <- copy(baseline) # Ever-enrolled bloc DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] DT <- unique(DT)  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) # Demonstrate equivalence same_content(DT, study_ever) #> [1] TRUE"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"potential-for-starter-miscounts","dir":"Articles","previous_headings":"","what":"Potential for starter miscounts","title":"FYE proxies","text":"US institutions, engineering students required complete First-Year Engineering (FYE) program prerequisite declaring engineering major. Administratively, degree-granting engineering programs Electrical Engineering Mechanical Engineering treat incoming post-FYE students “starting” cohorts. However, computing metric graduation rate requires count starters, FYE records must treated special care avoid miscount. illustrate potential miscounting starters, suppose wish calculate Mechanical Engineering () graduation rate. Students starting constitute starting pool fraction pool graduating graduation rate. FYE institutions, program typically define starting pool post-FYE cohort entering program. may best information available, invariably undercounts starters failing account FYE students leave institution switch non-engineering majors. absence FYE requirement students starters. neglecting students, count starters artificially low resulting graduation rate artificially high. true every degree-granting engineering major FYE institution. special nature FYE programs, address starter miscounts grouping FYE students admitted “undecided” “unknown” CIP codes—FYE students neither. admitted Engineering majors (2-digit CIP 14). simply don’t know degree-granting program (6-digit CIP) intended transition. Therefore, avoid miscounting starters FYE institutions, estimate 6-digit CIP codes degree-granting engineering programs FYE students declared required enroll FYE.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"FYE proxies","text":"FYE First-Year Engineering program, common-first-year curriculum prerequisite declaring engineering major US institutions. Denoted CIP code, FYE degree-granting program. FYE proxy estimate degree-granting engineering program FYE student enrolled required enroll FYE. proxy, 6-digit CIP code, denotes program FYE student can considered starter. bloc grouping SURs dealt unit, example, starters, ever-enrolled, graduates, transfers, traditional, non-traditional, migrators, etc. starters Bloc degree-seeking students initial terms enrolled degree-granting programs. migrators Bloc students leave one program enroll another. Also called switchers. multiple imputation Method imputing missing categorical data, case, imputing FYE proxy 6-digit CIP codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"FYE proxies","text":"apply prep_fye_mice() student term source files construct data frame suitable imputation using mice R package. procedure four steps: Use prep_fye_mice() midfieldr package estimate FYE proxy CIPs, treat remainder missing values, structure data frame imputation. Optional. default predictor variables (institution, race/ethnicity, sex) meet needs study, can define . Use mice() mice package impute 6-digit CIP missing values. Post-processing convert results useful form remove migrators. Three outcomes possible, depending goals available data: Use midfielddata practice data recreate fye_proxy data set included midfieldr—vignette. Use midfielddata practice data create alternate set FYE proxies based different random number seed different predictor variables. result IDs fye_proxy different ID-proxy pairings. Use MIDFIELD research data construct FYE proxies. given set source files, FYE proxies need created written file. result can used needed unless source files change. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"FYE proxies","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs).","code":"# midfieldr: FYE proxies  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\") library(\"mice\") # Load practice data data(student, term, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"FYE proxies","text":"one case data sufficiency degree seeking filters used. (Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"prep_fye_mice","dir":"Articles","previous_headings":"","what":"prep_fye_mice()","title":"FYE proxies","text":"purpose prep_fye_mice() preparing data frame mice R package. Operates complete, unfiltered student term source data create data frame three predictor variables FYE proxy variable. values proxy determined student’s first post-FYE program code, follows: Post-FYE Engineering.   student completes FYE enrolls engineering major. outcome, know student’s first opportunity, enrolled engineering major choosing. CIP code program returned student’s FYE proxy. Post-FYE Engineering.   student migrates non-engineering major post-FYE records database. data provide indication student’s preferred degree-granting engineering major. Thus FYE proxy value returned NA, treated missing data (imputed). Arguments. midfield_student   Data frame student observations, keyed student ID. Default student. Required variables mcid, race, sex. Use rows source student data table. midfield_term   Data frame term observations keyed student ID. Default term. Required variables mcid, institution, term, cip6. Use rows source term data table. fye_codes   Optional character vector 6-digit CIP codes assigned FYE programs. Default “140102”. Argument used name. Implicit arguments.   following implementations yield identical results. Output.   function returns one row per FYE student keyed student ID. required mice(), variables except ID factors. mcid (character) race (factor) sex (factor) institution (factor) proxy (factor) 6-digit CIP code NA","code":"# Required arguments in order and explicitly named x <- prep_fye_mice(midfield_student = student, midfield_term = term)  # Required arguments in order, but not named y <- prep_fye_mice(student, term)  # Using the implicit defaults z <- prep_fye_mice()  # Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Working data frame DT <- prep_fye_mice(student, term) DT[] #>              mcid   race    sex   institution  proxy #>            <char> <fctr> <fctr>        <fctr> <fctr> #>    1: MID26060301  Asian Female Institution C   <NA> #>    2: MID25995980 Latine Female Institution C   <NA> #>    3: MID25997636 Latine Female Institution C   <NA> #>   ---                                                #> 4490: MID25847220  White   Male Institution M 143501 #> 4491: MID25848589  White   Male Institution M 143501 #> 4492: MID25828870  White   Male Institution M 149999"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"missing-data","dir":"Articles","previous_headings":"","what":"Missing data","title":"FYE proxies","text":"output prep_fye_mive() contain missing values proxy column . variables complete. race/ethnicity sex value “unknown” treated observed value, missing data. values ID institution unknown missing example, observations (existed) removed. Checking variables except proxy complete. Number missing observations proxy. Missing random (MAR).   missing proxy data caused student’s decision migrate non-engineering major leave database. time making decision, FYE student yet enrolled degree-granting engineering major, thus decision unlikely related specific engineering major. CIP missing, therefore, unlikely related specific CIP value—may related observations institution, race/ethnicity, sex. Missing data type classified “missing random” (MAR) suitable multiple imputation yield unbiased results (Grace-Martin, 2012). Multiple imputation.   Lastly, 5–10 imputations generally considered adequate unbiasedness, Bodner (2008) recommends many imputations percentage missing data. shown , overall percentage missing data 37.6%, suggesting set number imputations 38. Chart.   Percent missing data category shown chart. (script, given [Chart script] appendix, uses copy DT set aside .) vertical dashed line indicates 38% percent missing data overall. Figure1: Percent missing data category.","code":"# Number of unique IDs x <- length(unique(DT$mcid))  # Number of complete cases on four variables y <- sum(complete.cases(DT[, .(mcid, race, sex, institution)]))  # Demonstrate equivalence all.equal(x, y) #> [1] TRUE # Number NAs in proxy sum(is.na(DT$proxy)) #> [1] 1689  # Percentage NAs in proxy 100 * round(sum(is.na(DT$proxy)) / nrow(DT), 3) #> [1] 37.6 # Number of proxies to be imputed (N_impute <- sum(is.na(DT$proxy))) #> [1] 1689  # Number of observations with complete predictor information (N_complete <- sum(complete.cases(DT[, .(mcid, race, sex, institution)]))) #> [1] 4492  # Percent missing proxies (percent_missing <- round(100 * N_impute / N_complete, 3)) #> [1] 37.6 # For the \"m\" argument in mice() (m_imputations <- round(percent_missing, 0)) #> [1] 38 # Set aside for the chart NA_proxies <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"setting-up-mice","dir":"Articles","previous_headings":"","what":"Setting up mice()","title":"FYE proxies","text":"mice package (van Buuren & Groothuis-Oudshoorn, 2011) implements multiple imputation chained equations (MICE). MICE also known “fully conditional specification” “sequential regression multiple imputation” suitable categorical variables (Azur et al., 2011). computational procedure follows approach suggested Dhana (2017).","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"standard-predictors","dir":"Articles","previous_headings":"Setting up mice()","what":"Standard predictors","title":"FYE proxies","text":"Framework.   first use mice() examine imputation framework calling function zero iterations DT data frame. mice() produces “multiply-imputed data set”, R object class “mids”. Imputation methods.   look closely two elements framework. first imputation method vector. “polyreg” imputation method (polytomous logistic regression) appropriate data, like , comprising unordered categorical variables. Variable proxy imputed using polyreg method; variables, predictors, imputed, thus methods empty. method correctly assigned, assign follows, Predictor matrix.   second element review predictor matrix. row label identifies variable predicted; columns indicate predictor variables. However, variables assigned method imputed. case, variable imputed proxy, row matrix gets used last row. zeros ones tell us proxy going predicted institution, race, sex. default setting incorrect, can set manually. , note bottom row row need proxy variable imputed.","code":"# Imputation framework framework <- mice(DT, maxit = 0) framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid        race         sex institution       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid race sex institution proxy #> mcid           0    1   1           1     1 #> race           0    0   1           1     1 #> sex            0    1   0           1     1 #> institution    0    1   1           0     1 #> proxy          0    1   1           1     0 #> Number of logged events:  1  #>   it im dep     meth  out #> 1  0  0     constant mcid # Imputation method method_vector <- framework[[\"method\"]] method_vector #>        mcid        race         sex institution       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # Manually assign the variable(s) being imputed method_vector[c(\"proxy\")] <- \"polyreg\"  # Manually assign the variable(s) not being imputed method_vector[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\" method_vector #>        mcid        race         sex institution       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # Imputation predictor matrix predictor_matrix <- framework[[\"predictorMatrix\"]] predictor_matrix #>             mcid race sex institution proxy #> mcid           0    1   1           1     1 #> race           0    0   1           1     1 #> sex            0    1   0           1     1 #> institution    0    1   1           0     1 #> proxy          0    1   1           1     0 # Predictor row for this example predictor_matrix[\"proxy\", ] #>        mcid        race         sex institution       proxy  #>           0           1           1           1           0 # Manually assign zero columns predictor_matrix[, c(\"mcid\", \"proxy\")] <- c(0, 0, 0, 0, 0)  # Manually assign predictor columns predictor_matrix[, c(\"institution\", \"race\", \"sex\")] <- c(0, 0, 0, 0, 1) predictor_matrix #>             mcid race sex institution proxy #> mcid           0    0   0           0     0 #> race           0    0   0           0     0 #> sex            0    0   0           0     0 #> institution    0    0   0           0     0 #> proxy          0    1   1           1     0"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"optional-predictors","dir":"Articles","previous_headings":"Setting up mice()","what":"Optional predictors","title":"FYE proxies","text":"default predictors set prep_fye_mice() institution (required), race/ethnicity, sex. acceptable, can skip next section, Imputing missing values. Predictors can edited added invoking mice(). , ensure missing values proxy column. variables expected complete (NA values). value “unknown” predictor column, e.g., race/ethnicity sex, acceptable value, missing data. Observations missing unknown values ID institution columns removed. example, suppose wish replace race/ethnicity sex people variable four possible values (Domestic Female, Domestic Male, International Female, International Male) “domestic” means US citizen; want add variable encodes year student’s first term FYE. Creating variables.   Remove unknown observations race/ethnicity sex create desired people variable. Check unique values. Adding variable.   Obtain student’s first term data set term data table using left-outer join. Filtering.   Ensure complete cases except proxy. Framework   optional predictors. Imputation method   optional predictors. Predictor matrix   optional predictors. Percent missing data   setting number multiple imputations.","code":"# Data frame to illustrate optional predictors opt_DT <- copy(DT)  # Factor to character cols_to_edit <- c(\"race\", \"sex\") opt_DT[, (cols_to_edit) := lapply(.SD, as.character), .SDcols = cols_to_edit]  # Filter unknown race and sex opt_DT <- opt_DT[sex != \"Unknown\"] opt_DT <- opt_DT[race != \"Other/Unknown\"]  # Create origin variable opt_DT[, origin := fcase(   race != \"International\", \"Domestic\",   race == \"International\", \"International\",   default = NA_character_ )] opt_DT <- opt_DT[!is.na(origin)]  # Create people variable opt_DT[, people := paste(origin, sex)] opt_DT[, people := as.factor(people)] opt_DT[, c(\"race\", \"sex\", \"origin\") := NULL]  # Display result setcolorder(opt_DT, c(\"mcid\", \"people\", \"institution\", \"proxy\")) opt_DT[] #>              mcid          people   institution  proxy #>            <char>          <fctr>        <fctr> <fctr> #>    1: MID26060301 Domestic Female Institution C   <NA> #>    2: MID25995980 Domestic Female Institution C   <NA> #>    3: MID25997636 Domestic Female Institution C   <NA> #>   ---                                                  #> 4341: MID25847220   Domestic Male Institution M 143501 #> 4342: MID25848589   Domestic Male Institution M 143501 #> 4343: MID25828870   Domestic Male Institution M 149999 # Display unique people sort(unique(opt_DT$people)) #> [1] Domestic Female      Domestic Male        International Female #> [4] International Male   #> 4 Levels: Domestic Female Domestic Male ... International Male # Add all term variables by ID cols_to_join <- term[, .(mcid, term)] opt_DT <- cols_to_join[opt_DT, on = c(\"mcid\")]  # Filter for first term setkeyv(opt_DT, c(\"mcid\", \"term\")) opt_DT <- opt_DT[, .SD[1], by = c(\"mcid\")]  # Create year variable opt_DT[, year := substr(term, 1, 4)] opt_DT[, year := as.factor(year)] opt_DT[, term := NULL]  # Display result setcolorder(opt_DT, c(\"mcid\", \"people\", \"institution\", \"year\", \"proxy\")) opt_DT[] #>              mcid               people   institution   year  proxy #>            <char>               <fctr>        <fctr> <fctr> <fctr> #>    1: MID25783162        Domestic Male Institution M   1992   <NA> #>    2: MID25783178        Domestic Male Institution M   1994 140701 #>    3: MID25783197        Domestic Male Institution M   1987 140701 #>   ---                                                              #> 4341: MID26648508 International Female Institution J   2009   <NA> #> 4342: MID26648517        Domestic Male Institution J   2009   <NA> #> 4343: MID26648553        Domestic Male Institution J   2009   <NA> # Identify complete cases in predictor variables rows_we_want <- complete.cases(opt_DT[, .(mcid, people, institution, year)])  # Filter for complete predictors opt_DT <- opt_DT[rows_we_want] opt_DT[] #>              mcid               people   institution   year  proxy #>            <char>               <fctr>        <fctr> <fctr> <fctr> #>    1: MID25783162        Domestic Male Institution M   1992   <NA> #>    2: MID25783178        Domestic Male Institution M   1994 140701 #>    3: MID25783197        Domestic Male Institution M   1987 140701 #>   ---                                                              #> 4341: MID26648508 International Female Institution J   2009   <NA> #> 4342: MID26648517        Domestic Male Institution J   2009   <NA> #> 4343: MID26648553        Domestic Male Institution J   2009   <NA> # Imputation framework opt_framework <- mice(opt_DT, maxit = 0) opt_framework #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>        mcid      people institution        year       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\"  #> PredictorMatrix: #>             mcid people institution year proxy #> mcid           0      1           1    1     1 #> people         0      0           1    1     1 #> institution    0      1           0    1     1 #> year           0      1           1    0     1 #> proxy          0      1           1    1     0 #> Number of logged events:  1  #>   it im dep     meth  out #> 1  0  0     constant mcid # Imputation framework opt_method_vector <- opt_framework[[\"method\"]] opt_method_vector #>        mcid      people institution        year       proxy  #>          \"\"          \"\"          \"\"          \"\"   \"polyreg\" # Imputation predictor matrix opt_predictor_matrix <- opt_framework[[\"predictorMatrix\"]] opt_predictor_matrix #>             mcid people institution year proxy #> mcid           0      1           1    1     1 #> people         0      0           1    1     1 #> institution    0      1           0    1     1 #> year           0      1           1    0     1 #> proxy          0      1           1    1     0 N_impute <- sum(is.na(opt_DT$proxy)) N_fye <- nrow(opt_DT)  # Percent missing data round(100 * N_impute / N_fye, 0) #> [1] 37"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"imputing-missing-values","dir":"Articles","previous_headings":"","what":"Imputing missing values","title":"FYE proxies","text":"three essential arguments mice() DT data frame, method_vector, predictor_matrix. number multiple imputations m set 38 discussed Missing data. default seed argument NULL, setting seed shown vignette results reproducible. Setting printFlag = TRUE displays progress console. practice data, 5 iterations 38 imputations takes 3 minutes (depending machine). MIDFIELD research data, however, imputation runs significantly longer.","code":"# Impute missing proxy data DT_mids <- mice(   data = DT,   m = m_imputations,   maxit = 5, # default   method = method_vector,   predictorMatrix = predictor_matrix,   seed = 20180624,   printFlag = TRUE ) # output in console with printFlag = TRUE # >  iter imp variable # >   1   1  proxy # >   1   2  proxy # >   1   3  proxy # >   1   4  proxy # >   1   5  proxy # >   --- # >   5  34  proxy # >   5  35  proxy # >   5  36  proxy # >   5  37  proxy # >   5  38  proxy"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"post-processing","dir":"Articles","previous_headings":"","what":"Post-processing","title":"FYE proxies","text":"Extracting result.   apply mice::complete() extract data mids object. missing data replaced imputed values. Selecting columns.   use result, need two columns: IDs predicted starting programs. Recoding.   convert CIP codes factor character. Filtering.   Proxies substitutes students starting FYE. Thus filter remove migrators, retaining proxies first-term FYE students . output code chunk result reproduced [Reusable code]. step concludes procedure creating FYE proxy data.","code":"# Revert to default random number generation set.seed(NULL)  # Extract data from the mids object DT <- mice::complete(DT_mids)  # Convert to data.table structure setDT(DT) DT <- DT[order(mcid)] DT[] #>              mcid          race    sex   institution  proxy #>            <char>        <fctr> <fctr>        <fctr> <fctr> #>    1: MID25783162         White   Male Institution M 140801 #>    2: MID25783178         Black   Male Institution M 140701 #>    3: MID25783197         White   Male Institution M 140701 #>   ---                                                       #> 4490: MID26648508 International Female Institution J 143501 #> 4491: MID26648517        Latine   Male Institution J 140201 #> 4492: MID26648553         White   Male Institution J 141901 # Subset the data DT <- DT[, .(mcid, proxy)] DT[] #>              mcid  proxy #>            <char> <fctr> #>    1: MID25783162 140801 #>    2: MID25783178 140701 #>    3: MID25783197 140701 #>   ---                    #> 4490: MID26648508 143501 #> 4491: MID26648517 140201 #> 4492: MID26648553 141901 # Convert factors DT[, proxy := as.character(proxy)] DT[] #>              mcid  proxy #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783178 140701 #>    3: MID25783197 140701 #>   ---                    #> 4490: MID26648508 143501 #> 4491: MID26648517 140201 #> 4492: MID26648553 141901 # Order term data by ID and term ordered_term <- term[, .(mcid, term, cip6)] setorderv(ordered_term, cols = c(\"mcid\", \"term\"))  # Obtain first term of all students first_term <- ordered_term[, .SD[1], by = c(\"mcid\")]  # Reduce to first term in FYE first_term_fye_mcid <- first_term[cip6 == \"140102\", .(mcid)]  # Inner join to remove migrators from working data frame DT <- first_term_fye_mcid[DT, on = c(\"mcid\"), nomatch = NULL] setkey(DT, NULL) DT[] #>              mcid  proxy #>            <char> <char> #>    1: MID25783162 140801 #>    2: MID25783178 140701 #>    3: MID25783197 140701 #>   ---                    #> 3736: MID26648422 142101 #> 3737: MID26648484 143501 #> 3738: MID26648553 141901"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"credibility","dir":"Articles","previous_headings":"Assessing FYE proxies","what":"Credibility","title":"FYE proxies","text":"summarize FYE proxy data set see many students algorithm assigned engineering majors. Start extracting unique set CIP codes proxy data set. Obtain program names cip data set (provided midfieldr). use 4-digit names engineering generally represent department-level programs. Join names proxy data set, summarize program, order rows descending N. comparison, National Science Foundation (NSF) reports 2012, top seven US engineering majors ranked enrollment (NSF, 2014): Mechanical Electrical Civil Chemical Industrial Aerospace Materials NSF data table break Computer Engineering separate observation—can assume Computer Engineering combined Electrical Engineering (practice followed many Engineering colleges), obtain following programs order enrollment, Display top 7 programs full set FYE proxies (limited case study), listed order decreasing N. Table 1: Top seven FYE proxies ranked number students assigned major. NSF results single year practice data used analysis span 30 years (1987–2016), differences expected. Nevertheless, listing matches top six programs NSF list nearly order (rows 5 6 swapped places). conclude imputation credible least extent ranking majors consistent expectations.","code":"# Identify unique CIP codes in the proxy data proxy_cips <- sort(unique(fye_proxy$proxy)) proxy_cips #>  [1] \"140201\" \"140301\" \"140501\" \"140601\" \"140701\" \"140801\" \"140901\" \"141001\" #>  [9] \"141101\" \"141301\" \"141401\" \"141801\" \"141901\" \"142101\" \"143301\" \"143501\" #> [17] \"149999\" # Obtain the 4-digit program names corresponding to these codes proxy_program_names <- filter_cip(cip, keep_text = proxy_cips) proxy_program_names <- proxy_program_names[, .(cip6, program = cip4name)] proxy_program_names[] #>       cip6                                                 program #>     <char>                                                  <char> #>  1: 140201   Aerospace, Aeronautical and Astronautical Engineering #>  2: 140301 Agricultural, Biological Engineering and Bioengineering #>  3: 140501                         Biomedical, Medical Engineering #> ---                                                                #> 15: 143301                                Construction Engineering #> 16: 143501                                  Industrial Engineering #> 17: 149999                                      Engineering, Other # Join these program names to the proxy data proxy_programs <- proxy_program_names[fye_proxy[, .(cip6 = proxy)], .(program), on = c(\"cip6\")]  # Count by program and order rows in descending magnitude proxy_programs <- proxy_programs[, .N, by = c(\"program\")] setorderv(proxy_programs, order = -1, cols = c(\"N\")) proxy_programs[] #>                                                    program     N #>                                                     <char> <int> #>  1:                                 Mechanical Engineering   938 #>  2:                                      Civil Engineering   562 #>  3: Electrical, Electronics and Communications Engineering   515 #> ---                                                              #> 15:                               Construction Engineering     3 #> 16:                                     Engineering, Other     1 #> 17:                        Biomedical, Medical Engineering     1 # Combine Electrical and Computer Engineering new_row <- data.table(   program = \"Electrical/Computer Engineering\",   N = sum(proxy_programs[program %ilike% \"Electrical|Computer\", N]) )  # Drop the separate Electrical and Computer rows proxy_programs <- proxy_programs[!program %ilike% \"Electrical|Computer\"]  # Bind the new row and order proxy_programs <- rbindlist(list(proxy_programs, new_row)) setorderv(proxy_programs, c(\"N\"), -1)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"quantifying-potential-miscounts","dir":"Articles","previous_headings":"Assessing FYE proxies","what":"Quantifying potential miscounts","title":"FYE proxies","text":"main goal estimating FYE proxies prevent starter miscounts. , assess potential miscounts FYE records treated recommended. start first_term data frame created earlier (Post-processing) containing initial term information students practice data. Identify starters, including FYE proxies, four case study programs. (procedure fully developed Starters vignette.) data frame contains direct-matriculation starters case study programs plus FYE students one programs estimated proxy. Grouping program type matriculation, can determine FYE percentage starters. results indicate (case study data) potential -count 23% 35% FYE proxies excluded counting starters.","code":"# First term of all students first_term[] #>               mcid   term   cip6 #>             <char> <char> <char> #>     1: MID25783135  19911 520101 #>     2: MID25783156  20011 040201 #>     3: MID25783162  19921 140102 #>    ---                           #> 94026: MID26697685  20151 300000 #> 94027: MID26697689  20163 240101 #> 94028: MID26697702  20161 240101 # Join proxies by ID (left join) to first-term data start <- fye_proxy[first_term, .(mcid, cip6, proxy), on = c(\"mcid\")]  # Distinguish FYE from direct matriculants start[, matric := fcase(   is.na(proxy), \"direct\",   !is.na(proxy), \"fye\" )]  # Create start variable start[, start := fcase(   matric == \"fye\", proxy,   matric == \"direct\", cip6 )]  # Filter to retain case study program starters join_labels <- copy(study_programs) setnames(join_labels, old = \"cip6\", new = \"start\") start <- join_labels[start, on = c(\"start\")] start <- start[!is.na(program)]  # Display result start[order(matric, start)] #>        start program        mcid   cip6  proxy matric #>       <char>  <char>      <char> <char> <char> <char> #>    1: 140801      CE MID25787414 140801   <NA> direct #>    2: 140801      CE MID25794372 140801   <NA> direct #>    3: 140801      CE MID25796088 140801   <NA> direct #>   ---                                                 #> 7707: 143501     ISE MID26640900 140102 143501    fye #> 7708: 143501     ISE MID26648141 140102 143501    fye #> 7709: 143501     ISE MID26648484 140102 143501    fye # Summarize start <- start[, .N, by = c(\"matric\", \"program\")]  # Transform to row-record form start <- dcast(start, program ~ matric, value.var = \"N\")  # Compute FYE as fraction of total start[, N_starters := direct + fye] start[, fye_pct := round(100 * fye / N_starters, 1)] start[] #>    program direct   fye N_starters fye_pct #>     <char>  <int> <int>      <int>   <num> #> 1:      CE   1120   562       1682    33.4 #> 2:      EE   1763   515       2278    22.6 #> 3:     ISE    532   287        819    35.0 #> 4:      ME   1992   938       2930    32.0"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"reusable-code-fye-proxies","dir":"Articles","previous_headings":"","what":"Reusable code: FYE proxies","title":"FYE proxies","text":"Preparation.   student term data tables intakes section. FYE proxies.   summary code chunk ready reference. Requires editing one using source data MIDFIELD practice data predictor variables institution, race/ethnicity, sex. number imputations (m) depends percentage missing data. random number seed set reproducibility. Verify built-data.   avoid deriving data frame time needed vignettes, information provided fye_proxy data frame included midfieldr. verify two data frames content.","code":"data(student, term, package = \"midfielddata\") # Prepare data for mice() DT <- prep_fye_mice(student, term)  # Percentage missing data suggests number of imputations N_impute <- sum(is.na(DT$proxy)) N_complete <- sum(complete.cases(DT[, .(mcid, race, sex, institution)])) m_imputations <- round(100 * N_impute / N_complete, 0)  # Setting up mice() framework <- mice(DT, maxit = 0) method_vector <- framework[[\"method\"]] method_vector[c(\"proxy\")] <- \"polyreg\" method_vector[c(\"mcid\", \"institution\", \"race\", \"sex\")] <- \"\" predictor_matrix <- framework[[\"predictorMatrix\"]] predictor_matrix[, c(\"mcid\", \"proxy\")] <- c(0, 0, 0, 0, 0) predictor_matrix[, c(\"institution\", \"race\", \"sex\")] <- c(0, 0, 0, 0, 1)  # Imputing missing values DT_mids <- mice(   data = DT,   m = m_imputations,   maxit = 5, # default   method = method_vector,   predictorMatrix = predictor_matrix,   seed = 20180624,   printFlag = TRUE )  # Post-processing set.seed(NULL) DT <- mice::complete(DT_mids) setDT(DT) DT <- DT[, .(mcid, proxy = as.character(proxy))]  # Remove migrators ordered_term <- term[, .(mcid, term, cip6)] setorderv(ordered_term, cols = c(\"mcid\", \"term\")) first_term <- ordered_term[, .SD[1], by = c(\"mcid\")] first_term_fye_mcid <- first_term[cip6 == \"140102\", .(mcid)] DT <- first_term_fye_mcid[DT, on = c(\"mcid\"), nomatch = NULL] setkey(DT, NULL) # Demonstrate equivalence same_content(DT, fye_proxy) #> [1] TRUE"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-060-fye-proxies.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"FYE proxies","text":"Script creating chart percent missing data grouped category.","code":"# New memory location x <- copy(NA_proxies)  # Convert factors to characters x <- x[, lapply(.SD, as.character)]  # Overall percentage missing proxies overall_miss <- 100 * round(nrow(x[is.na(proxy)]) / nrow(x), 3)  # Function for determining percent missing proxies by category missing_fraction <- function(DT, cat_level) {   DT[, group := fcase(     is.na(proxy), \"missing\",     default = \"not_missing\"   )]   DT <- DT[, .N, by = c(\"group\", \"cat_level\")]   DT <- dcast(DT, cat_level ~ group, value.var = \"N\")   DT[, pct_miss := 100 * round(missing / (missing + not_missing), 3)]   DT <- DT[, .(cat_level, pct_miss)] }  # Apply to institution category y <- x[, .(cat_level = institution, proxy)] inst <- missing_fraction(y, cat_level = \"institution\") inst[, category := \"institution\"]  # Apply to race/ethnicity category y <- x[, .(cat_level = race, proxy)] race <- missing_fraction(y, cat_level = \"race\") race[, category := \"race\"]  # Apply to sex category y <- x[, .(cat_level = sex, proxy)] sex <- missing_fraction(y, cat_level = \"sex\") sex[, category := \"sex\"]  # Gather results and plot DT <- rbindlist(list(inst, race, sex)) p <- ggplot(DT, aes(x = pct_miss, y = reorder(cat_level, pct_miss))) +   geom_vline(xintercept = overall_miss, linetype = 2, color = \"gray35\") +   geom_point(size = 2) +   facet_grid(     rows = vars(reorder(category, pct_miss)),     as.table = TRUE,     scales = \"free_y\",     space = \"free_y\"   ) +   labs(x = \"FYE proxy missing values (%)\", y = \"\") +   scale_x_continuous(breaks = seq(0, 100, 5), limits = c(20, 50)) +   theme(panel.grid.minor.x = element_blank())"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"special-cases","dir":"Articles","previous_headings":"","what":"Special cases","title":"Starters","text":"two special cases, entering student’s CIP code correspond degree-granting program. procedure identifying starters accommodate special cases. first case includes records CIP unspecified reported “undecided”. MIDFIELD data, conditions encoded CIP 999999. Students may enter CIP consider starters enroll degree-granting program. second case nuanced. US institutions, engineering students required complete First-Year Engineering (FYE) program prerequisite declaring engineering major. students admitted Engineering majors don’t know degree-granting program intended transition. FYE students starters Engineering (CIP 14) treated one limits study programs 2-digit CIP level. Otherwise, use FYE proxies—estimates degree-granting engineering programs (6-digit CIP level) FYE students declared required enroll FYE. One additional special case mentioned. Gathering bloc starters conventional graduation rate metric entails constraints—therefore excludes students—procedure developed .","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Starters","text":"bloc grouping SURs dealt unit, example, starters, ever-enrolled, graduates, transfers, traditional, non-traditional, migrators, etc. starters Bloc degree-seeking students initial terms enrolled degree-granting programs. entry term student’s first term database. start term first term student can considered starter. Identical entry term unless student enters undecided/unspecified. undecided/unspecified MIDFIELD taxonomy includes non-IPEDS code (CIP 999999) Undecided Unspecified indicating instances student declared major institution recorded program. FYE First-Year Engineering program, common-first-year curriculum prerequisite declaring engineering major US institutions. Denoted CIP code, FYE degree-granting program. FYE proxy estimate degree-granting engineering program FYE student enrolled required enroll FYE. proxy, 6-digit CIP code, denotes program FYE student can considered starter.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Starters","text":"use student term identify starters. Filter source SURs data sufficiency degree-seeking. Filter student’s first term (ignoring terms CIP undecided/unspecified). Identify program(s) student can considered starter. Substitute FYE proxy starting program FYE. Filter program. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Starters","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs). fye_proxy (derived FYE proxies).","code":"# midfieldr: Starters  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # Load practice data data(student, term, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Starters","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. Degree seeking.   Filter retain degree seeking students via inner join student. Code reproduced Degree seeking. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT) baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"isolate-the-start-term","dir":"Articles","previous_headings":"","what":"Isolate the start term","title":"Starters","text":"start term first term student can considered starter, , degree-seeking recorded undecided/unspecified. Add variables.   Left join add terms CIPs students. Filter.   remove observations undecided/unspecified (CIP 999999). rows remaining IDs CIPs degree-granting program (FYE), allowing us infer preferred starting programs. Filter.   Order rows ID term, filter retain start term observation. Given (remote) chance student enrolls two majors start term, use .SD[.min()] instead faster .SD[1]. Filter.   Remove unnecessary variables filter unique observations.","code":"# Term into DT left join DT <- term[DT, .(mcid, term, cip6), on = c(\"mcid\")] DT[] #>                mcid   term   cip6 #>              <char> <char> <char> #>      1: MID25783135  19911 520101 #>      2: MID25783135  19913 520101 #>      3: MID25783162  19921 140102 #>     ---                           #> 535806: MID26697615  20101 500901 #> 535807: MID26697615  20103 500901 #> 535808: MID26697623  20101 451001 # Remove undecided/unspecified DT <- DT[!cip6 %like% \"999999\"] # Retain observations of the earliest remaining terms by ID setorderv(DT, cols = c(\"mcid\", \"term\")) DT <- DT[, .SD[which.min(term)], by = \"mcid\"] # Unique combinations of ID and CIP DT <- DT[, .(mcid, cip6)] DT <- unique(DT) DT[] #>               mcid   cip6 #>             <char> <char> #>     1: MID25783135 520101 #>     2: MID25783162 140102 #>     3: MID25783178 140102 #>    ---                    #> 61848: MID26697599 521201 #> 61849: MID26697615 500901 #> 61850: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"starters-without-fye","dir":"Articles","previous_headings":"","what":"Starters without FYE","title":"Starters","text":"study excluded Engineering programs require FYE, data frame just derived desired bloc starters. case, rename cip6 start make explicit CIP codes column represent programs students can considered starters. code form retain ID variable change name CIP variable.","code":"# Not run  X <- X[, .(mcid, start = cip6)]"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"starters-with-fye","dir":"Articles","previous_headings":"","what":"Starters with FYE","title":"Starters","text":"Add variable.   Merge fye_proxy working data frame drop term variable. left join introduces NA proxy column students assigned FYE proxy. Create variable.   Estimated starting programs FYE students proxy column. Actual, recorded starting programs non-FYE students cip6 column. Create start column combine two. Select.   Omit unnecessary columns.","code":"# Join the proxies to the working data frame DT <- fye_proxy[DT, on = c(\"mcid\")] DT[] #>               mcid  proxy   cip6 #>             <char> <char> <char> #>     1: MID25783135   <NA> 520101 #>     2: MID25783162 140801 140102 #>     3: MID25783178 140701 140102 #>    ---                           #> 61848: MID26697599   <NA> 521201 #> 61849: MID26697615   <NA> 500901 #> 61850: MID26697623   <NA> 451001 # Combine all starting CIPs DT[, start := fcase(   cip6 == \"140102\", proxy,   cip6 != \"140102\", cip6 )] DT[] #>               mcid  proxy   cip6  start #>             <char> <char> <char> <char> #>     1: MID25783135   <NA> 520101 520101 #>     2: MID25783162 140801 140102 140801 #>     3: MID25783178 140701 140102 140701 #>    ---                                  #> 61848: MID26697599   <NA> 521201 521201 #> 61849: MID26697615   <NA> 500901 500901 #> 61850: MID26697623   <NA> 451001 451001 # Omit unnecessary columns. DT[, `:=`(cip6 = NULL, proxy = NULL)] DT[] #>               mcid  start #>             <char> <char> #>     1: MID25783135 520101 #>     2: MID25783162 140801 #>     3: MID25783178 140701 #>    ---                    #> 61848: MID26697599 521201 #> 61849: MID26697615 500901 #> 61850: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"closer-look","dir":"Articles","previous_headings":"Starters with FYE","what":"Closer look","title":"Starters","text":"Examining records selected students detail. Example 1.   results, student starter CIP 140801 (Civil Engineering). excerpt record term shows enrolled CIP 999999 (undecided/unspecified) three terms followed CIP 140801. entered undecided/unspecified, consider starter Civil Engineering. Example 2.   results, student starter CIP 140701 (Chemical Engineering). excerpt record term shows enrolled CIP 140102 (FYE) five terms followed CIP 140701. transitioned post-FYE Chemical Engineering consider starter program. Example 3.   results, student starter CIP 140801 (Civil Engineering). excerpt record term shows enrolled CIP 140102 (FYE) two terms followed CIP 520301 (Accounting). transitioned post-FYE non-engineering major, consider starter imputed FYE proxy program, case Civil Engineering.","code":"# Analysis result DT[mcid == \"MID25816220\"] #>           mcid  start #>         <char> <char> #> 1: MID25816220 140801 # Order rows of source table setkeyv(term, c(\"mcid\", \"term\"))  # Sequence of term records term[mcid == \"MID25816220\", .(mcid, term, cip6)][1:5] #>           mcid   term   cip6 #>         <char> <char> <char> #> 1: MID25816220  19981 999999 #> 2: MID25816220  19983 999999 #> 3: MID25816220  19991 999999 #> 4: MID25816220  19993 140801 #> 5: MID25816220  19995 140801 # Analysis result DT[mcid == \"MID25783178\"] #>           mcid  start #>         <char> <char> #> 1: MID25783178 140701 # Sequence of term records term[mcid == \"MID25783178\", .(mcid, term, cip6)][1:7] #>           mcid   term   cip6 #>         <char> <char> <char> #> 1: MID25783178  19946 140102 #> 2: MID25783178  19951 140102 #> 3: MID25783178  19953 140102 #> 4: MID25783178  19956 140102 #> 5: MID25783178  19961 140102 #> 6: MID25783178  19963 140701 #> 7: MID25783178  19965 140701 # Analysis result DT[mcid == \"MID25783162\"] #>           mcid  start #>         <char> <char> #> 1: MID25783162 140801 # Sequence of term records term[mcid == \"MID25783162\", .(mcid, term, cip6)][1:4] #>           mcid   term   cip6 #>         <char> <char> <char> #> 1: MID25783162  19921 140102 #> 2: MID25783162  19923 140102 #> 3: MID25783162  19931 520301 #> 4: MID25783162  19933 520301"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Starters","text":"Filter.   “starter” usually means “starter specific programs,” bloc concludes filter program.","code":"# Rename cip6 as start join_labels <- copy(study_programs) join_labels <- join_labels[, .(program, start = cip6)]  # Filter by program DT <- join_labels[DT, on = c(\"start\"), nomatch = NULL] DT[, start := NULL] DT <- unique(DT) DT[] #>       program        mcid #>        <char>      <char> #>    1:      CE MID25783162 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 5788:      ME MID26696958 #> 5789:      ME MID26696967 #> 5790:      ME MID26697444"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-070-starters.html","id":"reusable-code-starters","dir":"Articles","previous_headings":"","what":"Reusable code: Starters","title":"Starters","text":"Preparation.   baseline data frame preserved earlier intake section. Starters.   summary code chunk ready reference. Verify built-data.   study_starters, included midfieldr, contains case study information developed . verify two data frames content.","code":"DT <- copy(baseline) # Isolate starting term DT <- term[DT, .(mcid, term, cip6), on = c(\"mcid\")] DT <- DT[!cip6 %like% \"999999\"] setorderv(DT, cols = c(\"mcid\", \"term\")) DT <- DT[, .SD[which.min(term)], by = \"mcid\"] DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # For starters without FYE, rename cip6 as start, omit the proxy steps  # Continue for starters with FYE DT <- fye_proxy[DT, .(mcid, cip6, proxy), on = c(\"mcid\")] DT[, start := fcase(   cip6 == \"140102\", proxy,   cip6 != \"140102\", cip6 )] DT <- DT[, .(mcid, start)]  # Filter by program on start join_labels <- copy(study_programs) join_labels <- join_labels[, .(program, start = cip6)] DT <- join_labels[DT, on = c(\"start\"), nomatch = NULL] DT[, start := NULL] DT <- unique(DT) # Demonstrate equivalence same_content(DT, study_starters) #> [1] TRUE"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Graduates","text":"bloc grouping SURs dealt unit, example, starters, ever-enrolled, graduates, transfers, traditional, non-traditional, migrators, etc. completers Bloc students complete baccalaureate programs, earning first degrees. timely completion criterion Completing program specified span years, many cases, within 6 years admission (150% “normal” 4-year span), possibly less transfer students. completion status derived midfieldr variable indicating whether student completes degree, , whether completion timely. Possible values “timely”, “late”, “NA”. Late completers often excluded count “graduates.” graduates Bloc timely completers. casual usage, “graduate” might mean completers, midfieldr context intend restrict definition timely completers unless noted otherwise.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Graduates","text":"bloc graduates (timely completers) can determined independent blocs. Filter source SURs data sufficiency degree-seeking. Determine completion status. Filter graduates (timely completers). Filter degree program. next step might subset graduates necessary meet needs metric. example, graduation rate metric requires graduates subset starters program. postpone step treating metrics. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Graduates","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs).","code":"# midfieldr: Graduates  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # Load practice data data(student, term, degree, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Graduates","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. Degree seeking.   Filter retain degree seeking students via inner join student. Code reproduced Degree seeking. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"add_completion_status","dir":"Articles","previous_headings":"","what":"add_completion_status()","title":"Graduates","text":"Add columns data frame Student Unit Record (SUR) observations indicate whether student completed degree, , whether completion timely. input data frame must columns ID timely completion term. use add_timely_term() , though alternatively retained timely_term variable previous code chunks. Arguments. dframe   Data frame student unit record (SUR) observations keyed student ID. Required variables mcid timely_term. midfield_degree   Data frame SUR degree observations keyed student ID. Default degree. Required variables mcid term_degree. Equivalent usage.   following implementations yield identical results, Output.   Adds following columns data frame. term_degree   Character. Term program completed. Encoded YYYYT. NA indicates non-completion. completion_status   Character. Completion status: “timely”, indicating degree completion later timely completion term; “late”, indicating completion timely completion term; “NA” indicating non-completion. Similar details described data sufficiency vignette, add_completion_status() accepts Alternate source names uses Silent overwriting existing columns name one added columns.","code":"# Timely term required before completion status DT <- add_timely_term(DT, term)  # Drop unnecessary columns DT[, c(\"term_i\", \"level_i\", \"adj_span\") := NULL] # Required arguments in order and explicitly named x <- add_completion_status(dframe = DT, midfield_degree = degree)  # Required arguments in order, but not named y <- add_completion_status(DT, degree)  # Using the implicit default for the midfield_degree argument z <- add_completion_status(DT)  # Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE # Add completion status and supporting variables DT <- add_completion_status(DT, degree) DT[] #>               mcid timely_term term_degree completion_status #>             <char>      <char>      <char>            <char> #>     1: MID25783135       19963        <NA>              <NA> #>     2: MID25783162       19973       19963            timely #>     3: MID25783178       20003       20001            timely #>    ---                                                       #> 63950: MID26697599       20153       20143            timely #> 63951: MID26697615       20153        <NA>              <NA> #> 63952: MID26697623       20153       20153            timely"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"closer-look","dir":"Articles","previous_headings":"add_completion_status()","what":"Closer look","title":"Graduates","text":"Examining records selected students detail. Example 1.   student degree term, Spring 1997 (encoded 19963) indicating successful completion. degree term exceed timely completion term, Spring 1998 (encoded 19973), completion status “timely”. Example 2.   student degree term, Spring 2017 (encoded 20163) indicating successful completion. degree term exceeds timely completion term, Spring 2016 (encoded 20153), completion status “late”. Example 3.   student’s degree term NA, indicating complete program. Thus completion status NA well.","code":"# Display one student by ID DT[mcid == \"MID25783162\"] #>           mcid timely_term term_degree completion_status #>         <char>      <char>      <char>            <char> #> 1: MID25783162       19973       19963            timely # Display one student by ID DT[mcid == \"MID26696871\"] #>           mcid timely_term term_degree completion_status #>         <char>      <char>      <char>            <char> #> 1: MID26696871       20153       20163              late # Display one student by ID DT[mcid == \"MID26697615\"] #>           mcid timely_term term_degree completion_status #>         <char>      <char>      <char>            <char> #> 1: MID26697615       20153        <NA>              <NA>"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"graduates","dir":"Articles","previous_headings":"","what":"Graduates","title":"Graduates","text":"Defining “graduates” timely completers, filter retain records completion status “timely”. data set comprises timely graduates practice data.","code":"# Graduates DT <- DT[completion_status == \"timely\"]  # Filter for unique IDs DT <- DT[, .(mcid)] DT <- unique(DT) DT[] #>               mcid #>             <char> #>     1: MID25783162 #>     2: MID25783178 #>     3: MID25783195 #>    ---             #> 37045: MID26697576 #> 37046: MID26697599 #> 37047: MID26697623"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"filter-by-program","dir":"Articles","previous_headings":"","what":"Filter by program","title":"Graduates","text":"case, “filter program” means filter degree program. Hence join variables degree obtain CIP codes graduates. Add variables.   Left join selected variables degree. IDs graduates, NA values CIP column joining. check follows, result integer number rows incomplete case, .e., NA either column. result zero. Filter.   Join program labels filter retain desired programs. Code adapted Groupings.","code":"# Add degree CIP codes cols_we_want <- degree[, .(mcid, cip6)] DT <- cols_we_want[DT, on = c(\"mcid\")] DT[] #>               mcid   cip6 #>             <char> <char> #>     1: MID25783162 521401 #>     2: MID25783178 143501 #>     3: MID25783195 521401 #>    ---                    #> 37045: MID26697576 521401 #> 37046: MID26697599 110401 #> 37047: MID26697623 520301 # Verify no NAs in CIP column sum(!complete.cases(DT)) #> [1] 0 # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT[] #>       program        mcid #>        <char>      <char> #>    1:     ISE MID25783178 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 3620:      ME MID26696967 #> 3621:      ME MID26697163 #> 3622:      EE MID26697447"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-080-graduates.html","id":"reusable-code-graduates","dir":"Articles","previous_headings":"","what":"Reusable code: Graduates","title":"Graduates","text":"Preparation.   baseline data frame preserved earlier intake section. Graduates.   summary code chunk ready reference.","code":"DT <- copy(baseline) # Gather graduates and their degree CIPs DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"timely\"] DT <- degree[DT, .(mcid, cip6), on = c(\"mcid\")]  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT)"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Groupings","text":"bloc grouping SURs dealt unit, example, starters, ever-enrolled, graduates, transfers, traditional, non-traditional, migrators, etc. grouping variables Student-level SUR variables used group summarize specific blocs. common groupings program, race/ethnicity, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Groupings","text":"join grouping variables bloc initial processing (data sufficiency degree seeking) subsetting criteria define bloc. two common join operations add grouping variables : Program labels   using inner join CIPs. Demographics   using left join IDs. variables can usefully joined grouping operations. include examples student, term, degree. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Groupings","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs).","code":"# midfieldr: Groupings  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") # Load practice data data(student, term, degree, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Groupings","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency.   Filter satisfy data sufficiency criterion. Code reproduced Data sufficiency. Degree seeking.   Filter retain degree seeking students via inner join student. Code reproduced Degree seeking. Baseline copies.   preserve current data frame examples join ID. join CIP variable examples join CIP.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(term) # Filter for data sufficiency, output unique IDs DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\", .(mcid)] DT <- unique(DT) # Filter for degree seeking, output unique IDs DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT <- unique(DT) # Reusable starting state with ID baseline_mcid <- copy(DT) baseline_mcid[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 # Reusable starting state with CIP baseline_cip <- term[DT, .(mcid, cip6), on = c(\"mcid\")] baseline_cip <- unique(baseline_cip) baseline_cip[] #>                mcid   cip6 #>              <char> <char> #>      1: MID25783135 520101 #>      2: MID25783162 140102 #>      3: MID25783162 520301 #>     ---                    #> 111930: MID26697599 110401 #> 111931: MID26697615 500901 #> 111932: MID26697623 451001"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"program-labels","dir":"Articles","previous_headings":"","what":"Program labels","title":"Groupings","text":"point typical workflow, SUR bloc progress data frame program labels (similar study_programs). data frames 6-digit CIP variable join . Program labels serve two main functions: Filtering variable   finalize bloc. example, “starters” “graduates” usually mean starters graduates specific programs. Thus bloc procedure typically concludes program filter Ever-enrolled, Starters, Graduates. Grouping variable   summarizing data. filtered bloc retain records specific programs, program label retained used grouping variables race/ethnicity sex computing comparing metrics. role groupings, program label join developed detail vignette. Rationale inner join.   inner join accomplishes two tasks: adds column program labels bloc; filters bloc retain observations CIPs matching desired programs. Work.   CIP baseline data frame preserved earlier intake section. Filtering.   inner join adds program label filters matching CIPs. can see filtering effect noting baseline data frame 111,932 observations inner join selected programs returned 7661 observations. can also verify selected programs, e.g., Students can migrate majors different 6-digit CIP codes, codes might grouped single program label. common example Engineering “Industrial/Systems Engineering” label assign following CIP codes: 142701 Systems Engineering 143501 Industrial Engineering 143601 Manufacturing Engineering 143701 Operations Research student migrating among CIPs appear multiple rows current bloc, yet consider change CIP change major. next step addresses anomaly. Select.   Drop CIP code. Filter.   Filter unique observations. difference number observations indicates example includes one student ISE two CIPs. examine student’s record .","code":"# Reusable starting state DT <- copy(baseline_cip) # Join program labels via inner join DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[] #>         cip6 program        mcid #>       <char>  <char>      <char> #>    1: 143501     ISE MID25783178 #>    2: 140801      CE MID25783441 #>    3: 141001      EE MID25783491 #>   ---                            #> 7659: 141901      ME MID26697163 #> 7660: 141901      ME MID26697444 #> 7661: 141001      EE MID26697447 # Verify program labels sort(unique(DT$program)) #> [1] \"CE\"  \"EE\"  \"ISE\" \"ME\"  # Verify program CIP codes sort(unique(DT$cip6)) #> [1] \"140801\" \"141001\" \"141901\" \"142701\" \"143501\" # Prepare to filter DT[, cip6 := NULL] DT[] #>       program        mcid #>        <char>      <char> #>    1:     ISE MID25783178 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 7659:      ME MID26697163 #> 7660:      ME MID26697444 #> 7661:      EE MID26697447 # Case study ever enrolled DT <- unique(DT) DT[] #>       program        mcid #>        <char>      <char> #>    1:     ISE MID25783178 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 7658:      ME MID26697163 #> 7659:      ME MID26697444 #> 7660:      EE MID26697447"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"closer-look","dir":"Articles","previous_headings":"Program labels","what":"Closer look","title":"Groupings","text":"Examining records selected students detail. Example 1.   student’s term record includes CIP 142701 (Systems Engineering) CIP 143501 (Industrial Engineering), majors combined Industrial/Systems Engineering (ISE) major, illustrating rationale filtering unique observations ID/program pairs ID/CIP pairs.","code":"# All terms, one ID x <- term[mcid == \"MID26530540\", .(mcid, cip6)]  # Join case study program labels x <- study_programs[x, on = c(\"cip6\")]  # Unique CIPs for this student unique(x) #>      cip6 program        mcid #>    <char>  <char>      <char> #> 1: 999999    <NA> MID26530540 #> 2: 141901      ME MID26530540 #> 3: 143501     ISE MID26530540 #> 4: 142701     ISE MID26530540 #> 5: 119999    <NA> MID26530540"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"demographics","dir":"Articles","previous_headings":"","what":"Demographics","title":"Groupings","text":"Demographic variables (race/ethnicity sex) regularly left-joined blocs grouping summarizing. Work.   ID baseline data frame preserved earlier intake section. Select.   student, select join-variable (student ID) variables want add. selecting columns , don’t select columns join operation follow. Add variables.   Left join two data frames, retaining variables .","code":"# Reusable starting state DT <- copy(baseline_mcid) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 # Extract desired columns cols_we_want <- student[, .(mcid, race, sex)] cols_we_want[] #>               mcid            race    sex #>             <char>          <char> <char> #>     1: MID25783135           White   Male #>     2: MID25783147           White Female #>     3: MID25783156           White Female #>    ---                                    #> 97638: MID26697685           White   Male #> 97639: MID26697689 Native American   Male #> 97640: MID26697702           White   Male # Add demographics DT <- cols_we_want[DT, on = c(\"mcid\")] DT[] #>               mcid   race    sex #>             <char> <char> <char> #>     1: MID25783135  White   Male #>     2: MID25783162  White   Male #>     3: MID25783178  Black   Male #>    ---                           #> 63950: MID26697599  White   Male #> 63951: MID26697615 Latine   Male #> 63952: MID26697623  Black Female"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"unknown-race-or-sex","dir":"Articles","previous_headings":"Demographics","what":"Unknown race or sex","title":"Groupings","text":"often want remove records race/ethnicity sex “unknown”. Filter.   data.table syntax, can use x %ilike% pattern case-insensitive wrapper around grepl() find matches partial matches. example, “unknown” values sex. , filter similar, e.g. Alternatively, statements can combined negating (!) (|) statement. “unknowns” removed, race sex values :","code":"# Display values unique(DT$race) #> [1] \"White\"           \"Black\"           \"Asian\"           \"International\"   #> [5] \"Native American\" \"Latine\"          \"Other/Unknown\" unique(DT$sex) #> [1] \"Male\"   \"Female\" # Remove records with unknown race/ethnicity, if any DT <- DT[!race %ilike% \"unknown\"] DT[] #>               mcid   race    sex #>             <char> <char> <char> #>     1: MID25783135  White   Male #>     2: MID25783162  White   Male #>     3: MID25783178  Black   Male #>    ---                           #> 62546: MID26697599  White   Male #> 62547: MID26697615 Latine   Male #> 62548: MID26697623  Black Female # Remove records with unknown sex, if any DT[!sex %ilike% \"unknown\"] # Remove unknowns in either of two columns DT[!(race %ilike% \"unknown\" | sex %ilike% \"unknown\")] sort(unique(DT$race)) #> [1] \"Asian\"           \"Black\"           \"International\"   \"Latine\"          #> [5] \"Native American\" \"White\" sort(unique(DT$sex)) #> [1] \"Female\" \"Male\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"add-origin","dir":"Articles","previous_headings":"Demographics","what":"Add origin","title":"Groupings","text":"origin demographic variable use distinguish “domestic” students “international” students. variable recoding race variable. Add variable.   Assuming race/ethnicity “unknown” removed, use conditional assignment create “origin” variable. “unknowns” removed, origin values :","code":"# Two values for origin DT[, origin := fifelse(race == \"International\", \"International\", \"Domestic\")] DT[] #>               mcid   race    sex   origin #>             <char> <char> <char>   <char> #>     1: MID25783135  White   Male Domestic #>     2: MID25783162  White   Male Domestic #>     3: MID25783178  Black   Male Domestic #>    ---                                    #> 62546: MID26697599  White   Male Domestic #> 62547: MID26697615 Latine   Male Domestic #> 62548: MID26697623  Black Female Domestic sort(unique(DT$origin)) #> [1] \"Domestic\"      \"International\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"add-people","dir":"Articles","previous_headings":"Demographics","what":"Add people","title":"Groupings","text":"people demographic variable use many summaries. variable combines race sex variables. Add variable.   combine race/ethnicity sex create grouping variable. “unknowns” removed, people values :","code":"DT[, people := paste(race, sex)] DT[] #>               mcid   race    sex   origin       people #>             <char> <char> <char>   <char>       <char> #>     1: MID25783135  White   Male Domestic   White Male #>     2: MID25783162  White   Male Domestic   White Male #>     3: MID25783178  Black   Male Domestic   Black Male #>    ---                                                 #> 62546: MID26697599  White   Male Domestic   White Male #> 62547: MID26697615 Latine   Male Domestic  Latine Male #> 62548: MID26697623  Black Female Domestic Black Female sort(unique(DT$people)) #>  [1] \"Asian Female\"           \"Asian Male\"             \"Black Female\"           #>  [4] \"Black Male\"             \"International Female\"   \"International Male\"     #>  [7] \"Latine Female\"          \"Latine Male\"            \"Native American Female\" #> [10] \"Native American Male\"   \"White Female\"           \"White Male\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"other-variables","dir":"Articles","previous_headings":"","what":"Other variables","title":"Groupings","text":"Depending one’s research question, number MIDFIELD variables might used grouping records. section illustrate joining variables student, term, degree working data frame. use original source files copied earlier variables want use removed applied select_required().","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"from-student","dir":"Articles","previous_headings":"Other variables","what":"From student","title":"Groupings","text":"Work.   Reset working data frame. available variables source student data : Select.   Select variables key (ID). Add variables.   Left join add new columns.","code":"# Reusable starting state DT <- copy(baseline_mcid) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 # Variables in the practice data set names(source_student) #>  [1] \"mcid\"           \"institution\"    \"transfer\"       \"hours_transfer\" #>  [5] \"race\"           \"sex\"            \"age\"            \"us_citizen\"     #>  [9] \"home_zip\"       \"high_school\"    \"sat_math\"       \"sat_verbal\"     #> [13] \"act_comp\" # Extract desired columns cols_we_want <- source_student[, .(mcid, transfer, hours_transfer)] # Add desired columns cols_we_want[DT, on = c(\"mcid\")] #>               mcid              transfer hours_transfer #>             <char>                <char>          <num> #>     1: MID25783135 First-Time in College             NA #>     2: MID25783162 First-Time in College             NA #>     3: MID25783178 First-Time in College             NA #>    ---                                                  #> 63950: MID26697599 First-Time in College             NA #> 63951: MID26697615 First-Time in College             NA #> 63952: MID26697623 First-Time in College             NA"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"from-term","dir":"Articles","previous_headings":"Other variables","what":"From term","title":"Groupings","text":"Work.   Reset working data frame. available variables source term data : Select.   Select variables key (ID). Add variables.   Left join add new columns. Rows X multiple matches Y.   Consistent left join matching rules, students enrolled multiple terms multiple rows joined data frame. Thus result 535,808 observations 63,952 unique students.","code":"# Reusable starting state DT <- copy(baseline_mcid) # Variables in the practice data set names(source_term) #>  [1] \"mcid\"                \"institution\"         \"term\"                #>  [4] \"cip6\"                \"level\"               \"standing\"            #>  [7] \"coop\"                \"hours_term\"          \"hours_term_attempt\"  #> [10] \"hours_cumul\"         \"hours_cumul_attempt\" \"gpa_term\"            #> [13] \"gpa_cumul\" # Extract desired columns cols_we_want <- source_term[, .(mcid, term, hours_term, gpa_term)] # Add desired columns cols_we_want[DT, on = c(\"mcid\")] #>                mcid   term hours_term gpa_term #>              <char> <char>      <num>    <num> #>      1: MID25783135  19911         19     2.47 #>      2: MID25783135  19913         14     3.21 #>      3: MID25783162  19921         17     2.53 #>     ---                                        #> 535806: MID26697615  20101         15     3.67 #> 535807: MID26697615  20103         13     3.38 #> 535808: MID26697623  20101          3     2.00"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"from-degree","dir":"Articles","previous_headings":"Other variables","what":"From degree","title":"Groupings","text":"Work.   Reset working data frame. available variables source degree data : Select.   Select two variables key (ID). Add variables.   Left join add new columns. Rows X match Y.   Consistent left join matching rules, students DT graduate NA values term_degree cip6 columns joined data tables. Thus result 63,952 unique students 40,779 earned degrees.","code":"# Reusable starting state DT <- copy(baseline_mcid) DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 # Variables in the practice data set names(source_degree) #> [1] \"mcid\"        \"institution\" \"term_degree\" \"cip6\"        \"degree\" # Extract desired columns cols_we_want <- source_degree[, .(mcid, cip6, degree)] # Add desired columns cols_we_want[DT, on = c(\"mcid\")] #>               mcid   cip6                              degree #>             <char> <char>                              <char> #>     1: MID25783135   <NA>                                <NA> #>     2: MID25783162 521401                 Bachelor of Science #>     3: MID25783178 143501                 Bachelor of Science #>    ---                                                        #> 63950: MID26697599 110401                    Bachelor of Arts #> 63951: MID26697615   <NA>                                <NA> #> 63952: MID26697623 520301 Bachelor of Business Administration"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"reusable-code-program-labels","dir":"Articles","previous_headings":"","what":"Reusable code: Program labels","title":"Groupings","text":"Preparation.   CIP baseline data frame preserved earlier intake section. Program labels.   summary code chunk ready reference. gathering bloc starters, join-variable might start instead cip6.","code":"DT <- copy(baseline_cip) # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-090-groupings.html","id":"reusable-code-demographics","dir":"Articles","previous_headings":"","what":"Reusable code: Demographics","title":"Groupings","text":"Preparation.   ID baseline data frame preserved earlier intake section. Demographics.   summary code chunk ready reference.","code":"DT <- copy(baseline_mcid) # Join race/ethnicity and sex cols_we_want <- student[, .(mcid, race, sex)] DT <- cols_we_want[DT, on = c(\"mcid\")]"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Graduation rate","text":"graduation rate (general) Graduation rate \\((G)\\) ratio number starter-graduates \\((N_{sg})\\) number starters \\((N_s)\\), \\[ G=\\frac{N_{sg}}{N_s} \\] bloc grouping SURs dealt unit, example, starters, ever-enrolled, graduates, transfers, traditional, non-traditional, migrators, etc. starters Bloc degree-seeking students enrolled first term degree-granting programs. starter-graduates Subset starters bloc graduates (timely completers) starting programs. timely completion criterion Completing program specified span years, many cases, within 6 years admission (150% “normal” 4-year span), possibly less transfer students. migrators Bloc students leave one program enroll another institution. Also called switchers. undecided/unspecified MIDFIELD taxonomy includes non-IPEDS code (CIP 999999) Undecided Unspecified indicating instances student declared major institution recorded program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"starters-and-migrators","dir":"Articles","previous_headings":"","what":"Starters and migrators","title":"Graduation rate","text":"pertain graduation rate metric, relationships among starters, migrators, graduates (timely completers) given program P illustrated Figure 1. overall rectangle represents set students ever enrolled program P. interior rectangle represents set graduates (timely completers) program P. Region 1 (shaded) represents graduation rate denominator \\((N_s)\\), set starters program P. Region 2 (shaded) represents graduation rate numerator \\((N_{sg})\\), subset starters also graduates program P. Region 3 (unshaded) represents set students excluded graduation rate metric, depending “program” defined discussed . Figure 1. Graduation rate metric. Starters, migrators, timely completers. calculating graduation rate, whether migrator-graduates included count graduates depends program defined terms CIP codes. Institution level. Graduation rate computed institution level includes migrators within institution. example, starters Engineering (CIP 14) graduate Business (CIP 52) starters timely completers institution level. IPEDS defines rate institution completion rate. 2-digit CIP. Graduation rate includes migrator graduates within 2-digit CIP. example, starters Engineering (CIP 14) graduating Business (CIP 52) excluded count Business graduates, migrators within Engineering (6-digit CIP codes starting 14) starters timely completers Engineering. 4-digit CIP. Similar 2-digit case. example, starters Electrical Engineering (CIP 1410) graduating Mechanical Engineering (CIP 1419) excluded count Mechanical Engineering graduates, migrators within Electrical Engineering (6-digit CIP codes starting 1410) starters timely completers Electrical Engineering. 6-digit CIP. Rarely used. Graduation rate CIP level excludes migrators count graduates. Multiple CIPs. cases, single program major includes different 4-digit CIPs. example, migrators Systems Engineering (CIP 1427), Industrial Engineering (CIP 1435), Manufacturing Engineering (CIP 1436), Operations Research (CIP 1437) might considered starters timely completers general program Industrial & Systems Engineering.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"who-is-a-starter","dir":"Articles","previous_headings":"","what":"Who is a starter?","title":"Graduation rate","text":"US, predominant definition graduation rate established US Department Education, Integrated Postsecondary Education Data System (IPEDS). IPEDS definition underlies finding cited earlier graduation rate metric may exclude 60% students. Many IPEDS exclusions relate starters defined. expanding starters definition, MIDFIELD proposes graduation rate definition includes conventionally excluded students except migrators. graduation rate (IPEDS) fraction cohort full-time, first-time, degree-seeking undergraduates complete program within percentage (100%, 150%, 200%) “normal” time (typically 4 years) defined institution. IPEDS excludes students attend college part-time, transfer institutions, start Winter Spring terms (NCES-IPEDS, 2020). graduation rate (MIDFIELD) fraction cohort degree-seeking undergraduates complete program timely manner (typically 6 years). MIDFIELD includes students attend college part-time, transfer institutions, start term. Table 1 summarizes comparison IPEDS MIDFIELD graduation rate definitions. Table 1: Comparing graduation rate definitions  First-Year Engineering (FYE) starters estimate degree-granting engineering program FYE student enrolled required enroll FYE. FYE proxy, 6-digit CIP code, denotes program FYE student can considered starter. additional details, see vignette FYE proxies.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Graduation rate","text":"Demonstrating following elements MIDFIELD workflow. Planning.   metric graduation rate. Required blocs starters subset starters graduate starting major. Grouping variables program, race/ethnicity, sex. Programs four Engineering programs used throughout. Initial processing.   Filter source SURs data sufficiency degree-seeking. Blocs.   Gather starters, filter program. Gather graduates, filter program, filter starters’ IDs programs. Groupings.   Add grouping variables. Metrics   Summarize grouping variables compute graduation rate. Displays   Create multiway chart results table. Caveat: Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Graduation rate","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs). fye_proxy (derived FYE proxies).","code":"# midfieldr: Graduation rate  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\") # Load practice data data(student, term, degree, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Graduation rate","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency. Obtain IDs students data sufficiency criteria satisfied. Code reproduced Data sufficiency. Degree seeking. Filter retain degree-seeking students . Code reproduced Degree seeking. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(term) # Filter for data sufficiency DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"] # Filter for degree seeking DT <- DT[, .(mcid)] DT <- unique(DT) DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"starters","dir":"Articles","previous_headings":"","what":"Starters","title":"Graduation rate","text":"Preparation.   baseline data frame preserved earlier intake section. Starters.   summary code chunk Starters Copy.   prepare joining graduates.","code":"# Reset the working data frame DT <- copy(baseline) # Isolate starting term DT <- term[DT, .(mcid, term, cip6), on = c(\"mcid\")] DT <- DT[!cip6 %like% \"999999\"] setorderv(DT, cols = c(\"mcid\", \"term\")) DT <- DT[, .SD[which.min(term)], by = \"mcid\"] DT <- DT[, .(mcid, cip6)] DT <- unique(DT)  # Continue for starters with FYE DT <- fye_proxy[DT, .(mcid, cip6, proxy), on = c(\"mcid\")] DT[, start := fcase(   cip6 == \"140102\", proxy,   cip6 != \"140102\", cip6 )] DT <- DT[, .(mcid, start)]  # Filter by program on start join_labels <- copy(study_programs) join_labels <- join_labels[, .(program, start = cip6)] DT <- join_labels[DT, on = c(\"start\"), nomatch = NULL] DT[, start := NULL] DT <- unique(DT) # Prepare for joining setcolorder(DT, c(\"mcid\")) starters <- copy(DT) starters[] #>              mcid program #>            <char>  <char> #>    1: MID25783162      CE #>    2: MID25783441      CE #>    3: MID25783491      EE #>   ---                     #> 5788: MID26696958      ME #> 5789: MID26696967      ME #> 5790: MID26697444      ME"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"graduates","dir":"Articles","previous_headings":"","what":"Graduates","title":"Graduation rate","text":"Preparation.   baseline data frame preserved earlier intake section. Graduates   summary code chunk Graduates","code":"# Reset the working data frame DT <- copy(baseline) # Gather graduates and their degree CIPs DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"timely\"] DT <- degree[DT, .(mcid, cip6), on = c(\"mcid\")]  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT[] #>       program        mcid #>        <char>      <char> #>    1:     ISE MID25783178 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 3620:      ME MID26696967 #> 3621:      ME MID26697163 #> 3622:      EE MID26697447"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"starter-graduates","dir":"Articles","previous_headings":"","what":"Starter-graduates","title":"Graduation rate","text":"section introduces new material—adapted reusable code sections vignettes. graduation rate metric, timely completer counted among graduates start complete program. Filter.   Use inner join filter graduates ID program match IDs programs starters. Copy.   prepare joining starters.","code":"# Starter-graduates DT <- starters[DT, on = c(\"mcid\", \"program\"), nomatch = NULL] # Prepare for joining setcolorder(DT, c(\"mcid\")) graduates <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"closer-look","dir":"Articles","previous_headings":"Starter-graduates","what":"Closer look","title":"Graduation rate","text":"Examining records selected students detail. Example 1.   student starter timely completer Industrial/Systems Engineering (ISE). appear blocs. Example 2.   student starter Electrical Engineering (EE). excluded graduation rate starter-graduate bloc complete EE. degree find completed CIP 143501 (ISE), one study programs. also excluded count ISE graduates weren’t ISE starter. Example 3.   student starter Civil Engineering (CE). excluded graduation rate starter-graduate bloc complete CE. degree find completed CIP 521401 (Marketing). also excluded count Marketing graduates weren’t Marketing starter.","code":"# Same ID in different blocs mcid_we_want <- \"MID25783912\" starters[mcid == mcid_we_want] #>           mcid program #>         <char>  <char> #> 1: MID25783912     ISE  graduates[mcid == mcid_we_want] #>           mcid program #>         <char>  <char> #> 1: MID25783912     ISE # Same ID in different blocs mcid_we_want <- \"MID25784893\" starters[mcid == mcid_we_want] #>           mcid program #>         <char>  <char> #> 1: MID25784893      EE  graduates[mcid == mcid_we_want] #> Empty data.table (0 rows and 2 cols): mcid,program  degree[mcid == mcid_we_want, .(mcid, cip6)] #>           mcid   cip6 #>         <char> <char> #> 1: MID25784893 143501 # Same ID in different blocs mcid_we_want <- \"MID25783162\" starters[mcid == mcid_we_want] #>           mcid program #>         <char>  <char> #> 1: MID25783162      CE  graduates[mcid == mcid_we_want] #> Empty data.table (0 rows and 2 cols): mcid,program  degree[mcid == mcid_we_want, .(mcid, cip6)] #>           mcid   cip6 #>         <char> <char> #> 1: MID25783162 521401"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"groupings","dir":"Articles","previous_headings":"","what":"Groupings","title":"Graduation rate","text":"One grouping variables (program) already included data frames. next grouping variable bloc distinguish starters graduates two data frames combined. Add variable.   Label starters graduates. Join.   Combine two blocs prepare summarizing. student starting graduating program now two observations data: one starter one graduate. Add variables.   Demographics Groupings","code":"# For grouping by bloc starters[, bloc := \"starters\"] graduates[, bloc := \"graduates\"] # Prepare for summarizing DT <- rbindlist(list(starters, graduates)) DT[] #>              mcid program      bloc #>            <char>  <char>    <char> #>    1: MID25783162      CE  starters #>    2: MID25783441      CE  starters #>    3: MID25783491      EE  starters #>   ---                               #> 8011: MID26696642      EE graduates #> 8012: MID26696738      ME graduates #> 8013: MID26696967      ME graduates # Join race/ethnicity and sex cols_we_want <- student[, .(mcid, race, sex)] DT <- cols_we_want[DT, on = c(\"mcid\")] DT[] #>              mcid   race    sex program      bloc #>            <char> <char> <char>  <char>    <char> #>    1: MID25783162  White   Male      CE  starters #>    2: MID25783441  White   Male      CE  starters #>    3: MID25783491  White   Male      EE  starters #>   ---                                             #> 8011: MID26696642  White   Male      EE graduates #> 8012: MID26696738  White   Male      ME graduates #> 8013: MID26696967  White   Male      ME graduates"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"graduation-rate","dir":"Articles","previous_headings":"","what":"Graduation rate","title":"Graduation rate","text":"Summarize.   Count numbers observations combination grouping variables. Reshape.   Transform row-record form set graduation rate calculation. Transform N column two columns, one starters one graduates. Create variable.   Compute metric.","code":"# Count observations by group grouping_variables <- c(\"bloc\", \"program\", \"sex\", \"race\") DT <- DT[, .N, by = grouping_variables] setorderv(DT, grouping_variables) DT[] #>           bloc program    sex            race     N #>         <char>  <char> <char>          <char> <int> #>   1: graduates      CE Female           Asian     6 #>   2: graduates      CE Female           Black     8 #>   3: graduates      CE Female          Latine     4 #>   4: graduates      CE Female   Other/Unknown     1 #>   5: graduates      CE Female           White   101 #>   6: graduates      CE   Male           Asian    12 #>   7: graduates      CE   Male           Black    17 #>  ---                                                #>  95:  starters      ME   Male           Asian    91 #>  96:  starters      ME   Male           Black   156 #>  97:  starters      ME   Male   International    31 #>  98:  starters      ME   Male          Latine    47 #>  99:  starters      ME   Male Native American     8 #> 100:  starters      ME   Male   Other/Unknown    27 #> 101:  starters      ME   Male           White  1465 # Prepare to compute metric DT <- dcast(DT, program + sex + race ~ bloc, value.var = \"N\", fill = 0) DT[] #>     program    sex            race graduates starters #>      <char> <char>          <char>     <int>    <int> #>  1:      CE Female           Asian         6       12 #>  2:      CE Female           Black         8       36 #>  3:      CE Female          Latine         4       11 #>  4:      CE Female   Other/Unknown         1        5 #>  5:      CE Female           White       101      243 #>  6:      CE   Male           Asian        12       24 #>  7:      CE   Male           Black        17       63 #> ---                                                   #> 48:      ME   Male           Asian        37       91 #> 49:      ME   Male           Black        41      156 #> 50:      ME   Male   International        14       31 #> 51:      ME   Male          Latine        13       47 #> 52:      ME   Male Native American         1        8 #> 53:      ME   Male   Other/Unknown        12       27 #> 54:      ME   Male           White       615     1465 # Compute metric DT[, rate := round(100 * graduates / starters, 1)] DT[] #>     program    sex            race graduates starters  rate #>      <char> <char>          <char>     <int>    <int> <num> #>  1:      CE Female           Asian         6       12  50.0 #>  2:      CE Female           Black         8       36  22.2 #>  3:      CE Female          Latine         4       11  36.4 #>  4:      CE Female   Other/Unknown         1        5  20.0 #>  5:      CE Female           White       101      243  41.6 #>  6:      CE   Male           Asian        12       24  50.0 #>  7:      CE   Male           Black        17       63  27.0 #> ---                                                         #> 48:      ME   Male           Asian        37       91  40.7 #> 49:      ME   Male           Black        41      156  26.3 #> 50:      ME   Male   International        14       31  45.2 #> 51:      ME   Male          Latine        13       47  27.7 #> 52:      ME   Male Native American         1        8  12.5 #> 53:      ME   Male   Other/Unknown        12       27  44.4 #> 54:      ME   Male           White       615     1465  42.0"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Graduation rate","text":"Filter.   Let us assume study focuses “domestic” students known race/ethnicity. case, omit observations labeled “International” “/Unknown”. Filter.   preserve anonymity people involved, remove observations fewer N_threshold graduates. research data, typically set threshold 10; practice data, demonstrate procedure using threshold 5. Add variable.   combine race/ethnicity sex create combined grouping variable. Recode.   Readers can readily interpret charts tables programs unabbreviated.","code":"# Study design assumption DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")] DT[] #>     program    sex            race graduates starters  rate #>      <char> <char>          <char>     <int>    <int> <num> #>  1:      CE Female           Asian         6       12  50.0 #>  2:      CE Female           Black         8       36  22.2 #>  3:      CE Female          Latine         4       11  36.4 #> ---                                                         #> 37:      ME   Male          Latine        13       47  27.7 #> 38:      ME   Male Native American         1        8  12.5 #> 39:      ME   Male           White       615     1465  42.0 # Preserve anonymity N_threshold <- 5 DT <- DT[graduates >= N_threshold] DT[] #>     program    sex   race graduates starters  rate #>      <char> <char> <char>     <int>    <int> <num> #>  1:      CE Female  Asian         6       12  50.0 #>  2:      CE Female  Black         8       36  22.2 #>  3:      CE Female  White       101      243  41.6 #> ---                                                #> 27:      ME   Male  Black        41      156  26.3 #> 28:      ME   Male Latine        13       47  27.7 #> 29:      ME   Male  White       615     1465  42.0 # Create a combined category DT[, people := paste(race, sex)] DT[, `:=`(race = NULL, sex = NULL)] setcolorder(DT, c(\"program\", \"people\")) DT[] #>     program       people graduates starters  rate #>      <char>       <char>     <int>    <int> <num> #>  1:      CE Asian Female         6       12  50.0 #>  2:      CE Black Female         8       36  22.2 #>  3:      CE White Female       101      243  41.6 #> ---                                               #> 27:      ME   Black Male        41      156  26.3 #> 28:      ME  Latine Male        13       47  27.7 #> 29:      ME   White Male       615     1465  42.0 # Recode values for chart and table readability DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )] DT[] #>        program       people graduates starters  rate #>         <char>       <char>     <int>    <int> <num> #>  1:      Civil Asian Female         6       12  50.0 #>  2:      Civil Black Female         8       36  22.2 #>  3:      Civil White Female       101      243  41.6 #> ---                                                  #> 27: Mechanical   Black Male        41      156  26.3 #> 28: Mechanical  Latine Male        13       47  27.7 #> 29: Mechanical   White Male       615     1465  42.0"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-100-grad-rate.html","id":"displays","dir":"Articles","previous_headings":"","what":"Displays","title":"Graduation rate","text":"Order factors.   Order levels categories. Code adapted Multiway data charts. Multiway chart.   Code adapted Multiway data charts. vertical reference line aggregate graduation rate program, independent race/ethnicity sex. Figure 2: Graduation rates four Engineering majors.  Results table.   Code adapted Multiway data charts. (Optional) Format table nearer publication quality. use kable() knitr package. Table 2: Graduation rates (%) four Engineering majors. value NA indicates group removed number graduates threshold set preserve anonymity.","code":"# Order the categories DT <- order_multiway(DT,   quantity   = \"rate\",   categories = c(\"program\", \"people\"),   method     = \"percent\",   ratio_of   = c(\"graduates\", \"starters\") ) DT[] #>        program       people graduates starters  rate program_rate people_rate #>         <fctr>       <fctr>     <num>    <num> <num>        <num>       <num> #>  1:      Civil Asian Female         6       12  50.0         42.3        40.4 #>  2:      Civil Black Female         8       36  22.2         42.3        30.0 #>  3:      Civil White Female       101      243  41.6         42.3        35.4 #> ---                                                                           #> 27: Mechanical   Black Male        41      156  26.3         38.7        29.8 #> 28: Mechanical  Latine Male        13       47  27.7         38.7        35.7 #> 29: Mechanical   White Male       615     1465  42.0         38.7        41.1 ggplot(DT, aes(x = rate, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_rate), linetype = 2, linewidth = 0.5) +   geom_point() +   labs(x = \"Graduation rate (%)\", y = \"\") +   scale_x_continuous(limits = c(20, 65)) # Select variables and remove factors display_table <- copy(DT) display_table <- display_table[, .(program, people, rate)] display_table[, people := as.character(people)] display_table[, program := as.character(program)]  # Construct table display_table <- dcast(display_table, people ~ program, value.var = \"rate\") setnames(display_table,   old = c(\"people\"),   new = c(\"People\"),   skip_absent = TRUE ) display_table[] #>           People Civil Electrical Industrial/Systems Mechanical #>           <char> <num>      <num>              <num>      <num> #> 1:  Asian Female  50.0       30.4                 NA       50.0 #> 2:    Asian Male  50.0       35.9               46.9       40.7 #> 3:  Black Female  22.2       36.4               28.6       22.0 #> 4:    Black Male  27.0       31.6               35.0       26.3 #> 5: Latine Female    NA       38.5               55.6         NA #> 6:   Latine Male  32.4       38.5               52.4       27.7 #> 7:  White Female  41.6       25.4               43.3       30.1 #> 8:    White Male  44.7       36.8               41.3       42.0 knitr::kable(display_table,   align = \"lrrrr\",   caption = \"Table 2: Graduation rates (%) of four Engineering majors.\" )"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Stickiness","text":"stickiness Stickiness \\((S)\\) ratio number graduates \\((N_g)\\) program number ever enrolled \\((N_e)\\) program, \\[ S = \\frac{N_g}{N_e} \\] bloc grouping SURs dealt unit, example, starters, ever-enrolled, graduates, transfers, traditional, non-traditional, migrators, etc. ever-enrolled Bloc degree-seeking students enrolled program least one term, without regard starting programs. graduates Bloc graduates (timely completers) program, without regard starting programs. timely completion criterion Completing program specified span years, many cases, within 6 years admission (150% “normal” 4-year span), possibly less transfer students. migrators Bloc students leave one program enroll another institution. Also called switchers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"a-more-inclusive-metric","dir":"Articles","previous_headings":"","what":"A more inclusive metric","title":"Stickiness","text":"Stickiness, comparison graduation rate, characteristics: Includes migrators, graduation rate . based bloc ever enrolled rather starters, need FYE proxies. Counts graduates (timely completers) program, eliminating need filter graduates based starting program. Like MIDFIELD definition graduation rate (contrast IPEDS definition), includes students attend college part-time, transfer institutions, start term. pertain stickiness metric, relationships among starters, migrators, graduates (timely completers) given program P illustrated Figure 1. interior rectangle represents stickiness numerator \\((N_g)\\), set graduates (timely completers) program P. overall rectangle represents stickiness denominator \\((N_e)\\), set students ever enrolled program P. Figure 1. Stickiness metric. Starters, migrators, timely completers.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Stickiness","text":"Demonstrating following elements MIDFIELD workflow. Planning.   metric stickiness. Required blocs ever-enrolled graduates. Grouping variables program, race/ethnicity, sex. Programs four Engineering programs used throughout. Initial processing.   Filter source SURs data sufficiency degree-seeking. Blocs.   Gather ever enrolled, filter program. Gather graduates, filter program. Groupings.   Add grouping variables. Metrics   Summarize grouping variables compute stickiness. Displays   Create multiway chart results table. Caveat: Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Stickiness","text":"Open.   writing script follow along, use packages vignette: Load.   MIDFIELD practice data tables. Described Getting started. Loads midfieldr. study_programs (derived Programs).","code":"# midfieldr: Stickiness  # Packages library(\"midfieldr\") library(\"midfielddata\") library(\"data.table\") library(\"ggplot2\") # Load practice data data(student, term, degree, package = \"midfielddata\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Stickiness","text":"(Optional) Select.   Columns required midfieldr functions. Code reproduced Getting started. Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Data sufficiency. Obtain IDs students data sufficiency criteria satisfied. Code reproduced Data sufficiency. Degree seeking. Filter retain degree-seeking students . Code reproduced Degree seeking. preserve data frame baseline examples vignette.","code":"# Optional. Copy of source files with all variables source_student <- copy(student) source_term <- copy(term) source_degree <- copy(degree)  # Optional. Select variables required by midfieldr functions student <- select_required(source_student) term <- select_required(source_term) degree <- select_required(source_degree) # Working data frame DT <- copy(term) # Filter for data sufficiency DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"] # Filter for degree seeking DT <- DT[, .(mcid)] DT <- unique(DT) DT <- student[DT, .(mcid), on = c(\"mcid\"), nomatch = NULL] DT[] #>               mcid #>             <char> #>     1: MID25783135 #>     2: MID25783162 #>     3: MID25783178 #>    ---             #> 63950: MID26697599 #> 63951: MID26697615 #> 63952: MID26697623 baseline <- copy(DT)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"ever-enrolled","dir":"Articles","previous_headings":"","what":"Ever enrolled","title":"Stickiness","text":"Preparation.   baseline data frame preserved earlier intake section. Ever enrolled.   summary code chunk Blocs. Copy.   prepare joining graduates.","code":"# Reset the working data frame DT <- copy(baseline) # Ever-enrolled bloc DT <- term[DT, .(mcid, cip6), on = c(\"mcid\")] DT <- unique(DT)  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT[] #>       program        mcid #>        <char>      <char> #>    1:     ISE MID25783178 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 7658:      ME MID26697163 #> 7659:      ME MID26697444 #> 7660:      EE MID26697447 # Prepare for joining setcolorder(DT, c(\"mcid\")) ever_enrolled <- copy(DT) ever_enrolled[] #>              mcid program #>            <char>  <char> #>    1: MID25783178     ISE #>    2: MID25783441      CE #>    3: MID25783491      EE #>   ---                     #> 7658: MID26697163      ME #> 7659: MID26697444      ME #> 7660: MID26697447      EE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"graduates","dir":"Articles","previous_headings":"","what":"Graduates","title":"Stickiness","text":"Preparation.   baseline data frame preserved earlier intake section. Graduates   summary code chunk Graduates Copy.   prepare joining ever enrolled","code":"# Reset the working data frame DT <- copy(baseline) # Gather graduates and their degree CIPs DT <- add_timely_term(DT, term) DT <- add_completion_status(DT, degree) DT <- DT[completion_status == \"timely\"] DT <- degree[DT, .(mcid, cip6), on = c(\"mcid\")]  # Filter by program DT <- study_programs[DT, on = c(\"cip6\"), nomatch = NULL] DT[, cip6 := NULL] DT <- unique(DT) DT[] #>       program        mcid #>        <char>      <char> #>    1:     ISE MID25783178 #>    2:      CE MID25783441 #>    3:      EE MID25783491 #>   ---                     #> 3620:      ME MID26696967 #> 3621:      ME MID26697163 #> 3622:      EE MID26697447 # Prepare for joining setcolorder(DT, c(\"mcid\")) graduates <- copy(DT) graduates[] #>              mcid program #>            <char>  <char> #>    1: MID25783178     ISE #>    2: MID25783441      CE #>    3: MID25783491      EE #>   ---                     #> 3620: MID26696967      ME #> 3621: MID26697163      ME #> 3622: MID26697447      EE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"groupings","dir":"Articles","previous_headings":"","what":"Groupings","title":"Stickiness","text":"One grouping variables (program) already included data frames. next grouping variable bloc distinguish starters graduates two data frames combined. Add variable.   Label eve enrolled graduates. Join.   Combine two blocs prepare summarizing. graduate two observations data: one ever enrolled one graduate. Add variables.   Demographics Groupings","code":"# For grouping by bloc ever_enrolled[, bloc := \"ever_enrolled\"] graduates[, bloc := \"graduates\"] # Prepare for summarizing DT <- rbindlist(list(ever_enrolled, graduates)) DT[] #>               mcid program          bloc #>             <char>  <char>        <char> #>     1: MID25783178     ISE ever_enrolled #>     2: MID25783441      CE ever_enrolled #>     3: MID25783491      EE ever_enrolled #>    ---                                   #> 11280: MID26696967      ME     graduates #> 11281: MID26697163      ME     graduates #> 11282: MID26697447      EE     graduates # Join race/ethnicity and sex cols_we_want <- student[, .(mcid, race, sex)] DT <- cols_we_want[DT, on = c(\"mcid\")] DT[] #>               mcid   race    sex program          bloc #>             <char> <char> <char>  <char>        <char> #>     1: MID25783178  Black   Male     ISE ever_enrolled #>     2: MID25783441  White   Male      CE ever_enrolled #>     3: MID25783491  White   Male      EE ever_enrolled #>    ---                                                 #> 11280: MID26696967  White   Male      ME     graduates #> 11281: MID26697163 Latine   Male      ME     graduates #> 11282: MID26697447  Asian   Male      EE     graduates"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"stickiness","dir":"Articles","previous_headings":"","what":"Stickiness","title":"Stickiness","text":"Summarize.   Count numbers observations combination grouping variables. Reshape.   Transform row-record form set stickiness metric calculation. Transform N column two columns, one ever-enrolled one graduates. Create variable.   Compute metric.","code":"# Count observations by group grouping_variables <- c(\"bloc\", \"program\", \"sex\", \"race\") DT <- DT[, .N, by = grouping_variables] setorderv(DT, grouping_variables) DT[] #>               bloc program    sex            race     N #>             <char>  <char> <char>          <char> <int> #>   1: ever_enrolled      CE Female           Asian    16 #>   2: ever_enrolled      CE Female           Black    49 #>   3: ever_enrolled      CE Female   International     1 #>   4: ever_enrolled      CE Female          Latine    10 #>   5: ever_enrolled      CE Female   Other/Unknown     6 #>   6: ever_enrolled      CE Female           White   304 #>   7: ever_enrolled      CE   Male           Asian    34 #>  ---                                                    #>  99:     graduates      ME   Male           Asian    59 #> 100:     graduates      ME   Male           Black    65 #> 101:     graduates      ME   Male   International    17 #> 102:     graduates      ME   Male          Latine    29 #> 103:     graduates      ME   Male Native American     4 #> 104:     graduates      ME   Male   Other/Unknown    21 #> 105:     graduates      ME   Male           White   936 # Prepare to compute metric DT <- dcast(DT, program + sex + race ~ bloc, value.var = \"N\", fill = 0) DT[] #>     program    sex            race ever_enrolled graduates #>      <char> <char>          <char>         <int>     <int> #>  1:      CE Female           Asian            16         9 #>  2:      CE Female           Black            49        15 #>  3:      CE Female   International             1         0 #>  4:      CE Female          Latine            10         5 #>  5:      CE Female   Other/Unknown             6         2 #>  6:      CE Female           White           304       160 #>  7:      CE   Male           Asian            34        17 #> ---                                                        #> 49:      ME   Male           Asian           118        59 #> 50:      ME   Male           Black           202        65 #> 51:      ME   Male   International            36        17 #> 52:      ME   Male          Latine            76        29 #> 53:      ME   Male Native American            14         4 #> 54:      ME   Male   Other/Unknown            43        21 #> 55:      ME   Male           White          1776       936 # Compute metric DT[, stickiness := round(100 * graduates / ever_enrolled, 1)] DT[] #>     program    sex            race ever_enrolled graduates stickiness #>      <char> <char>          <char>         <int>     <int>      <num> #>  1:      CE Female           Asian            16         9       56.2 #>  2:      CE Female           Black            49        15       30.6 #>  3:      CE Female   International             1         0        0.0 #>  4:      CE Female          Latine            10         5       50.0 #>  5:      CE Female   Other/Unknown             6         2       33.3 #>  6:      CE Female           White           304       160       52.6 #>  7:      CE   Male           Asian            34        17       50.0 #> ---                                                                   #> 49:      ME   Male           Asian           118        59       50.0 #> 50:      ME   Male           Black           202        65       32.2 #> 51:      ME   Male   International            36        17       47.2 #> 52:      ME   Male          Latine            76        29       38.2 #> 53:      ME   Male Native American            14         4       28.6 #> 54:      ME   Male   Other/Unknown            43        21       48.8 #> 55:      ME   Male           White          1776       936       52.7"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"prepare-for-dissemination","dir":"Articles","previous_headings":"","what":"Prepare for dissemination","title":"Stickiness","text":"Filter.   Let us assume study focuses “domestic” students known race/ethnicity. case, omit observations labeled “International” “/Unknown”. Filter.   preserve anonymity people involved, remove observations fewer N_threshold graduates. research data, typically set threshold 10; practice data, demonstrate procedure using threshold 5. Add variable.   combine race/ethnicity sex create combined grouping variable. Recode.   Readers can readily interpret charts tables programs unabbreviated.","code":"# Study design assumption DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")] DT[] #>     program    sex            race ever_enrolled graduates stickiness #>      <char> <char>          <char>         <int>     <int>      <num> #>  1:      CE Female           Asian            16         9       56.2 #>  2:      CE Female           Black            49        15       30.6 #>  3:      CE Female          Latine            10         5       50.0 #> ---                                                                   #> 37:      ME   Male          Latine            76        29       38.2 #> 38:      ME   Male Native American            14         4       28.6 #> 39:      ME   Male           White          1776       936       52.7 # Preserve anonymity N_threshold <- 5 DT <- DT[graduates >= N_threshold] DT[] #>     program    sex   race ever_enrolled graduates stickiness #>      <char> <char> <char>         <int>     <int>      <num> #>  1:      CE Female  Asian            16         9       56.2 #>  2:      CE Female  Black            49        15       30.6 #>  3:      CE Female Latine            10         5       50.0 #> ---                                                          #> 29:      ME   Male  Black           202        65       32.2 #> 30:      ME   Male Latine            76        29       38.2 #> 31:      ME   Male  White          1776       936       52.7 # Create a combined category DT[, people := paste(race, sex)] DT[, `:=`(race = NULL, sex = NULL)] setcolorder(DT, c(\"program\", \"people\")) DT[] #>     program        people ever_enrolled graduates stickiness #>      <char>        <char>         <int>     <int>      <num> #>  1:      CE  Asian Female            16         9       56.2 #>  2:      CE  Black Female            49        15       30.6 #>  3:      CE Latine Female            10         5       50.0 #> ---                                                          #> 29:      ME    Black Male           202        65       32.2 #> 30:      ME   Latine Male            76        29       38.2 #> 31:      ME    White Male          1776       936       52.7 # Recode values for chart and table readability DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )] DT[] #>        program        people ever_enrolled graduates stickiness #>         <char>        <char>         <int>     <int>      <num> #>  1:      Civil  Asian Female            16         9       56.2 #>  2:      Civil  Black Female            49        15       30.6 #>  3:      Civil Latine Female            10         5       50.0 #> ---                                                             #> 29: Mechanical    Black Male           202        65       32.2 #> 30: Mechanical   Latine Male            76        29       38.2 #> 31: Mechanical    White Male          1776       936       52.7"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-110-stickiness.html","id":"displays","dir":"Articles","previous_headings":"","what":"Displays","title":"Stickiness","text":"Order factors.   Order levels categories. Code adapted Multiway data charts. Multiway chart.   Code adapted Multiway data charts. vertical reference line aggregate stickiness program, independent race/ethnicity sex. Figure 2: Stickiness four Engineering majors.  Results table.   Code adapted Multiway data charts. (Optional) Format table nearer publication quality. use kable() knitr package. Table 2: Stickiness (%) four Engineering majors. value NA indicates group removed number graduates threshold set preserve anonymity.","code":"# Order the categories DT <- order_multiway(DT,   quantity   = \"stickiness\",   categories = c(\"program\", \"people\"),   method     = \"percent\",   ratio_of   = c(\"graduates\", \"ever_enrolled\") ) DT[] #>        program        people graduates ever_enrolled stickiness #>         <fctr>        <fctr>     <num>         <num>      <num> #>  1:      Civil  Asian Female         9            16       56.2 #>  2:      Civil  Black Female        15            49       30.6 #>  3:      Civil Latine Female         5            10       50.0 #> ---                                                             #> 29: Mechanical    Black Male        65           202       32.2 #> 30: Mechanical   Latine Male        29            76       38.2 #> 31: Mechanical    White Male       936          1776       52.7 #>     program_stickiness people_stickiness #>                  <num>             <num> #>  1:               51.6              44.0 #>  2:               51.6              39.5 #>  3:               51.6              51.4 #> ---                                      #> 29:               48.9              34.2 #> 30:               48.9              41.5 #> 31:               48.9              50.7 ggplot(DT, aes(x = stickiness, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   geom_vline(aes(xintercept = program_stickiness), linetype = 2, linewidth = 0.5) +   geom_point() +   labs(x = \"Stickiness (%)\", y = \"\") +   scale_x_continuous(limits = c(20, 65)) # Select variables and remove factors display_table <- copy(DT) display_table <- display_table[, .(program, people, stickiness)] display_table[, people := as.character(people)] display_table[, program := as.character(program)]  # Construct table display_table <- dcast(display_table, people ~ program, value.var = \"stickiness\") setnames(display_table,   old = c(\"people\"),   new = c(\"People\"),   skip_absent = TRUE ) display_table[] #>           People Civil Electrical Industrial/Systems Mechanical #>           <char> <num>      <num>              <num>      <num> #> 1:  Asian Female  56.2       38.9               35.7       59.1 #> 2:    Asian Male  50.0       46.0               52.3       50.0 #> 3:  Black Female  30.6       40.7               48.4       32.0 #> 4:    Black Male  27.8       33.8               44.7       32.2 #> 5: Latine Female  50.0       42.9               61.5         NA #> 6:   Latine Male  41.5       34.9               62.5       38.2 #> 7:  White Female  52.6       32.4               54.7       42.5 #> 8:    White Male  54.8       42.5               54.7       52.7 knitr::kable(display_table,   align = \"lrrrr\",   caption = \"Table 2: Stickiness (%) of four Engineering majors.\" )"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Multiway data and charts","text":"multiway data data set three variables: category m levels; second independent category n levels; quantitative variable (response) length mn “value response combination levels two categorical variables.” multiway chart multi-panel dot plot: horizontal, quantitative scales; rows encode one category; panels encode second category. panels identical axes. ordering rows panels “crucial perception effects.” multiway superposition Multiway data can extended include third category p levels; quantitative response length mnp, one combination levels three categories; rows panels encode first two categories usual; p data markers encode third category row. Clarity usually requires p = 2 . program stickiness ratio \\((S)\\) number students graduating program \\((N_g)\\) number students ever enrolled program \\((N_e)\\). \\[ S=\\frac{N_g}{N_e} \\]","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Multiway data and charts","text":"start results data frame Case study: Results vignette, containing data four engineering programs (Civil, Electrical, Industrial/Systems, Mechanical Engineering) grouped program, race/ethnicity, sex. data filtered data sufficiency, degree seeking, program, graduates filtered timely completion. prepare data use input order_multiway() use results construct multiway charts ordered category median values category percentage values. Caveat:   Student Unit Records included midfieldr midfielddata practice data, research data, suitable practice working SURs drawing inferences program attributes student experiences.","code":""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Multiway data and charts","text":"Open.   writing script follow along, use packages vignette: Loads midfieldr. study_results (derived Case study: Results).","code":"# midfieldr: Multiway data and charts  # Packages library(\"midfieldr\") library(\"data.table\") library(\"ggplot2\")"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"initial-processing","dir":"Articles","previous_headings":"","what":"Initial processing","title":"Multiway data and charts","text":"Work.   Using copy() avoids -reference effects (Dowle & Srinivasan, 2022). Filter.   Human subject privacy potentially risk small populations even anonymized observations. Therefore, tabulating graphing data dissemination, omit observations fewer 10 students ever enrolled. magnitude bound (ever >= 10) can vary depending one’s data. Filter.   reviewed specific results advance, find small-population filter (case) removes Native American students one programs—omit well. Filter.   many studies also omit rows race/ethnicity values ambiguous.","code":"# Working data frame DT <- copy(study_results) # Protecting privacy of small populations DT <- DT[ever >= 10] # Optional filter DT <- DT[!race %chin% c(\"Native American\")] # Ambiguous race/ethnicity values DT <- DT[!race %chin% c(\"International\", \"Other/Unknown\")] DT[] #>     program    sex   race  ever  grad stick #>      <char> <char> <char> <int> <int> <num> #>  1:      CE Female  Asian    16     9  56.2 #>  2:      CE Female  Black    49    15  30.6 #>  3:      CE Female Latine    10     5  50.0 #> ---                                         #> 30:      ME   Male  Black   202    65  32.2 #> 31:      ME   Male Latine    76    29  38.2 #> 32:      ME   Male  White  1776   918  51.7"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"preparing-the-categorical-variables","dir":"Articles","previous_headings":"","what":"Preparing the categorical variables","title":"Multiway data and charts","text":"apply order_multiway() function, edit categorical variables create forms want final charts tables. Recode.   first multiway categorical variable program. improve readability charts, recode program abbreviations. Create variable.   combine race sex single categorical variable (denoted people) second, independent categorical variable. point, multiway categories (programs people) “character” class.","code":"# Recode for panel and row labels DT[, program := fcase(   program %like% \"CE\", \"Civil\",   program %like% \"EE\", \"Electrical\",   program %like% \"ME\", \"Mechanical\",   program %like% \"ISE\", \"Industrial/Systems\" )] # Create a new category DT[, people := paste(race, sex)] setcolorder(DT, c(\"program\", \"people\", \"race\", \"sex\")) DT[] #>        program        people   race    sex  ever  grad stick #>         <char>        <char> <char> <char> <int> <int> <num> #>  1:      Civil  Asian Female  Asian Female    16     9  56.2 #>  2:      Civil  Black Female  Black Female    49    15  30.6 #>  3:      Civil Latine Female Latine Female    10     5  50.0 #> ---                                                          #> 30: Mechanical    Black Male  Black   Male   202    65  32.2 #> 31: Mechanical   Latine Male Latine   Male    76    29  38.2 #> 32: Mechanical    White Male  White   Male  1776   918  51.7"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"order_multiway","dir":"Articles","previous_headings":"","what":"order_multiway()","title":"Multiway data and charts","text":"Converts categorical variables factors ordered quantitative variable. Arguments. dframe   Data frame multiway data columns. Two additional numeric columns required using percentage ordering method. quantity   Name (quotes) single multiway quantitative variable. categories   Vector names (quotes) two multiway categorical variables. method   “median” (default) “percent”, method ordering levels categories. Argument used name. ratio_of   Vector names (quotes) numerator denominator columns produced quantitative variable, required using percentage ordering method. Argument used name. Equivalent usage.   following implementations yield identical results, Output.   Adds two columns data frame containing computed values determine ordering factors. column names values depend ordering method: method = \"median\"   Yields medians quantitative variable grouped categorical variables. method = \"percent\"   Yields percentages based ratio produces quantitative variable grouped categorical variables.","code":"# Required arguments in order and explicitly named x <- order_multiway(   dframe = DT,   quantity = \"grad\",   categories = c(\"program\", \"people\"),   method = \"median\" )  # Required arguments in order, but not named y <- order_multiway(DT, \"grad\", c(\"program\", \"people\"), method = \"median\")  # Using the implicit default for method z <- order_multiway(DT, \"grad\", c(\"program\", \"people\"))  # Demonstrate equivalence same_content(x, y) #> [1] TRUE same_content(x, z) #> [1] TRUE"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"median-ordered-data","dir":"Articles","previous_headings":"","what":"Median-ordered data","title":"Multiway data and charts","text":"example, select count graduates (grad) quantitative variable use order_multiway() order categories median numbers graduates. minimize number columns printout, select three multiway variables drop columns. Applying order_multiway(), specify \"grad\" quantitative column, \"program\" \"people\" two categorical columns, \"median\" method ordering levels. function adds two columns (program_median people_median) display computed median values used order factors. median method, new column names combination category variable names (categories) plus median. example, results show median number Civil Engineering graduates 19.5 median number Asian Female graduates 13.5. confirm results computing median values independently. following values agree program_median variable , next result agrees values people_median. output, can see categories “factor” class: program factor 4 levels; people factor 8 levels; neither ordered alphabetically—ordering increasing median value expected.","code":"# Select multiway variables when quantity is count DT_count <- copy(DT) DT_count <- DT_count[, .(program, people, grad)] DT_count[] #>        program        people  grad #>         <char>        <char> <int> #>  1:      Civil  Asian Female     9 #>  2:      Civil  Black Female    15 #>  3:      Civil Latine Female     5 #> ---                                #> 30: Mechanical    Black Male    65 #> 31: Mechanical   Latine Male    29 #> 32: Mechanical    White Male   918 # Convert categories to factors ordered by median DT_count <- order_multiway(DT_count,   quantity = \"grad\",   categories = c(\"program\", \"people\"),   method = \"median\" ) DT_count[] #>        program        people  grad program_median people_median #>         <fctr>        <fctr> <int>          <num>         <num> #>  1:      Civil  Asian Female     9           19.5          13.5 #>  2:      Civil  Black Female    15           19.5          33.0 #>  3:      Civil Latine Female     5           19.5           5.5 #> ---                                                             #> 30: Mechanical    Black Male    65           43.5          55.5 #> 31: Mechanical   Latine Male    29           43.5          22.0 #> 32: Mechanical    White Male   918           43.5         533.5 # Verify order_multiway() output temp <- DT_count[, lapply(.SD, median), .SDcols = c(\"grad\"), by = c(\"program\")] temp[] #>               program  grad #>                <fctr> <num> #> 1:              Civil  19.5 #> 2:         Electrical  56.5 #> 3: Industrial/Systems  38.5 #> 4:         Mechanical  43.5 # Verify order_multiway() output temp <- DT_count[, lapply(.SD, median), .SDcols = c(\"grad\"), by = c(\"people\")] temp[] #>            people  grad #>            <fctr> <num> #>  1:  Asian Female  13.5 #>  2:  Black Female  33.0 #>  3: Latine Female   5.5 #> ---                     #>  6:    Black Male  55.5 #>  7:   Latine Male  22.0 #>  8:    White Male 533.5 # Verify first category is a factor levels(DT_count$program) #> [1] \"Civil\"              \"Industrial/Systems\" \"Mechanical\"         #> [4] \"Electrical\"  # Verify second category is a factor levels(DT_count$people) #> [1] \"Latine Female\" \"Asian Female\"  \"Latine Male\"   \"Black Female\"  #> [5] \"Asian Male\"    \"Black Male\"    \"White Female\"  \"White Male\""},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"median-ordered-charts","dir":"Articles","previous_headings":"","what":"Median-ordered charts","title":"Multiway data and charts","text":"use conventional ggplot2 functions create multiway graphs. create set axis labels scale specifications series median-ordered charts. use logarithmic scale case numbers span three orders magnitude. first two multiway charts encodes programs rows people panels. .table = FALSE argument places rows panels “graphical order”, , increasing left right bottom top. panel median value drawn vertical reference line panel. Figure 1. Rows columns ordered median values. programs assigned rows program medians increase bottom top. Civil Engineering smallest median; Electrical Engineering largest. drew chart two columns illustrate graph order panels. Hispanic/LatinX Female students smallest median number graduates, followed Asian Female students, Hispanic/LatinX Male students, Black Female students, etc. space permits, however, laying panels single column can useful seeing effects. , redraw panels one column. Figure 2. Redraw panels one column. Reading multiway graph can effectively compare values within panel panels. rows ordered, one expects generally increasing trend within panel. response greater smaller expected creates visual asymmetry. interesting stories often visual anomalies. example, top panel clearly shows variability White Male data across four programs; White Female panel shows clear counter-trend—numbers decrease program medians increase. However, chart permit us effectively compare eight values given program. create second multiway switch aesthetic roles categories—example encoding people rows programs panels. Figure 3. Switching row column assignments categorical variables. chart, visual asymmetries stand Electrical Engineering, White Female, low given overall rank Mechanical Engineering, Black Female, low given overall rank Industrial/Systems Engineering, Black Female, high given overall rank Civil Engineering, Hispanic/LatinX Male, high given overall rank","code":"# Common x-scale and axis labels for median-ordered charts common_scale_x_log10 <- scale_x_log10(   limits = c(3, 1000),   breaks = c(3, 10, 30, 100, 300, 1000),   minor_breaks = c(seq(3, 10, 1), seq(20, 100, 10), seq(200, 1000, 100)) ) common_labs <- labs(   x = \"Number of graduates (log base 10 scale)\",   y = \"\",   title = \"Engineering graduates\" )  # Draw vertical lines in panels common_geom_vline <- function(x) {   geom_vline(aes(xintercept = x),     linetype = 2,     color = \"gray70\"   ) } # Two columns of panels ggplot(DT_count, aes(x = grad, y = program)) +   facet_wrap(vars(people), ncol = 2, as.table = FALSE) +   common_geom_vline(DT_count$people_median) +   common_scale_x_log10 +   common_labs +   geom_point() # Programs encoded by rows ggplot(DT_count, aes(x = grad, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   common_geom_vline(DT_count$people_median) +   common_scale_x_log10 +   common_labs +   geom_point() # People encoded by rows ggplot(DT_count, aes(x = grad, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   common_geom_vline(DT_count$program_median) +   common_scale_x_log10 +   common_labs +   geom_point()"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"avoid-alphabetical-order","dir":"Articles","previous_headings":"","what":"Avoid alphabetical order","title":"Multiway data and charts","text":"next figure, data plotted alphabetical order. effects seen previous chart revealed. White Female graduates fewer expected Electrical Engineering apparent Hispanic/LatinX Male graduates higher expected Civil Engineering apparent etc. Figure 4. Alphabetical ordering conceals patterns data. ordering scheme based values quantitative variable necessary multiway chart reveal response affected categories.","code":"# Create alphabetical ordering DT_alpha <- copy(DT) DT_alpha[, people := factor(people, levels = sort(unique(people), decreasing = TRUE))]  # People encoded by rows, alphabetically ggplot(DT_alpha, aes(x = grad, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = TRUE) +   common_scale_x_log10 +   common_labs +   geom_point()"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"multiway-superposition","dir":"Articles","previous_headings":"","what":"Multiway superposition","title":"Multiway data and charts","text":"illustrate superposing data, return data set separate columns race/ethnicity sex. Let’s use grad quantitative variable omit unnecessary variables. superposed category sex. multiway data conditioned grad, quantitative variable, program race, two categorical variables. example, program race factors, ordered median number graduates sex remains unordered character variable. Using conventional ggplot syntax, aesthetics include x y . superpose data markers sex rows assigning color = sex inside aes() function. Figure 5. Using superposition display three categories. superposing data sex, facilitate direct comparison Male Female students within program race. Swapping rows panels yields next chart, can directly compare Male Female students within race/ethnicity category across programs. men tend outnumber women engineering programs, chart clearly shows clusters sex. Figure 6. Switching row column assignments two categorical variables.","code":"# Select multiway variables with a superposed category DT_count <- copy(DT) DT_count <- DT_count[, .(program, race, sex, grad)] DT_count[] #>        program   race    sex  grad #>         <char> <char> <char> <int> #>  1:      Civil  Asian Female     9 #>  2:      Civil  Black Female    15 #>  3:      Civil Latine Female     5 #> ---                                #> 30: Mechanical  Black   Male    65 #> 31: Mechanical Latine   Male    29 #> 32: Mechanical  White   Male   918 # Convert categories to factors ordered by median DT_count <- order_multiway(DT_count,   quantity = \"grad\",   categories = c(\"program\", \"race\") ) DT_count[] #>        program   race  grad    sex program_median race_median #>         <fctr> <fctr> <int> <char>          <num>       <num> #>  1:      Civil  Asian     9 Female           19.5        16.0 #>  2:      Civil  Black    15 Female           19.5        44.5 #>  3:      Civil Latine     5 Female           19.5        14.0 #> ---                                                           #> 30: Mechanical  Black    65   Male           43.5        44.5 #> 31: Mechanical Latine    29   Male           43.5        14.0 #> 32: Mechanical  White   918   Male           43.5       209.5 # Race/ethnicity encoded by rows, sex superposed ggplot(DT_count, aes(x = grad, y = race, color = sex)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   common_geom_vline(DT_count$program_median) +   common_scale_x_log10 +   common_labs +   geom_point() +   scale_color_manual(values = c(\"#762A83\", \"#1B7837\")) # Program encoded by rows, sex superposed ggplot(DT_count, aes(x = grad, y = program, color = sex)) +   facet_wrap(vars(race), ncol = 1, as.table = FALSE) +   common_geom_vline(DT_count$race_median) +   common_scale_x_log10 +   common_labs +   geom_point() +   scale_color_manual(values = c(\"#762A83\", \"#1B7837\"))"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"percentage-ordered-data","dir":"Articles","previous_headings":"","what":"Percentage-ordered data","title":"Multiway data and charts","text":"persistence metrics stickiness graduation rate, quantitative variable ratio percentage. , return original case study results select stickiness (stick) quantitative variable. stickiness ratio, set method “percent” assign grad ever ratio_of argument. order_multiway() sums ever grad counts category produces grouped percentages order category levels. function converts categories factors adds two columns (program_stick people_stick) display computed percentages used order factors. percentage method, new column names combination category variable names (categories) plus quantitative column name (x). example, results show stickiness Civil Engineering (program_stick) 50.5%, Asian Females, 44% (people_stick). confirm results computing group stickiness values independently. following values agree program_stick variable , next result agrees values people_stick.","code":"# Select multiway variables when quantity is a percentage options(datatable.print.topn = 3) DT_ratio <- copy(DT) DT_ratio[, c(\"race\", \"sex\") := NULL] DT_ratio[] #>        program        people  ever  grad stick #>         <char>        <char> <int> <int> <num> #>  1:      Civil  Asian Female    16     9  56.2 #>  2:      Civil  Black Female    49    15  30.6 #>  3:      Civil Latine Female    10     5  50.0 #> ---                                            #> 30: Mechanical    Black Male   202    65  32.2 #> 31: Mechanical   Latine Male    76    29  38.2 #> 32: Mechanical    White Male  1776   918  51.7 # Convert categories to factors ordered by group percentages DT_ratio <- order_multiway(DT_ratio,   quantity = \"stick\",   categories = c(\"program\", \"people\"),   method = \"percent\",   ratio_of = c(\"grad\", \"ever\") ) DT_ratio[] #>        program        people  grad  ever stick program_stick people_stick #>         <fctr>        <fctr> <num> <num> <num>         <num>        <num> #>  1:      Civil  Asian Female     9    16  56.2          50.5         44.0 #>  2:      Civil  Black Female    15    49  30.6          50.5         38.4 #>  3:      Civil Latine Female     5    10  50.0          50.5         48.9 #> ---                                                                       #> 30: Mechanical    Black Male    65   202  32.2          48.0         34.2 #> 31: Mechanical   Latine Male    29    76  38.2          48.0         41.5 #> 32: Mechanical    White Male   918  1776  51.7          48.0         49.5 # Verify order_multiway() output temp <- DT[, lapply(.SD, sum), .SDcols = c(\"ever\", \"grad\"), by = c(\"program\")] temp[, stick := round(100 * grad / ever, 1)] temp[] #>               program  ever  grad stick #>                <char> <int> <int> <num> #> 1:              Civil  1599   807  50.5 #> 2:         Electrical  2134   847  39.7 #> 3: Industrial/Systems  1076   555  51.6 #> 4:         Mechanical  2540  1219  48.0 # Verify order_multiway() output temp <- DT[, lapply(.SD, sum), .SDcols = c(\"ever\", \"grad\"), by = c(\"people\")] temp[, stick := round(100 * grad / ever, 1)] temp[] #>            people  ever  grad stick #>            <char> <int> <int> <num> #>  1:  Asian Female   116    51  44.0 #>  2:  Black Female   362   139  38.4 #>  3: Latine Female    47    23  48.9 #> ---                                 #>  6:    Black Male   682   233  34.2 #>  7:   Latine Male   224    93  41.5 #>  8:    White Male  4540  2248  49.5"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"percentage-ordered-charts","dir":"Articles","previous_headings":"","what":"Percentage-ordered charts","title":"Multiway data and charts","text":"quantitative variable group stickiness. first chart encodes programs rows people panels. Row-order determined program stickiness computed students; panel order determined people stickiness computed programs. order rows panels changed earlier charts. Figure 7. Rows column ordered percentages. visual asymmetries chart stand Electrical Engineering, White Female, low given overall rank Hispanic/LatinX Female, Mechanical Engineering, low given overall rank Asian Female, Industrial/Systems Engineering, low given overall rank Black Female Male Civil Mechanical Engineering, low given overall rank , compare eight values given program effectively. done far better second chart encodes people rows programs panels. Figure 8. Switching row column assignments categorical variables. chart shows lot variability. visual asymmetries stand Hispanic/LatinX Female Male, Industrial/Systems Engineering, high given overall rank Asian Female, Civil Mechanical Engineering, high given overall rank White Female, Electrical Engineering, low given overall rank Asian Male, Electrical Engineering, high given overall rank","code":"# Programs encoded by rows ggplot(DT_ratio, aes(x = stick, y = program)) +   facet_wrap(vars(people), ncol = 1, as.table = FALSE) +   common_geom_vline(DT_ratio$people_stick) +   labs(x = \"Stickiness\", y = \"\", title = \"Engineering stickiness\") +   geom_point() # People encoded by rows ggplot(DT_ratio, aes(x = stick, y = people)) +   facet_wrap(vars(program), ncol = 1, as.table = FALSE) +   common_geom_vline(DT_ratio$program_stick) +   labs(x = \"Stickiness\", y = \"\", title = \"Engineering stickiness\") +   geom_point()"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"tabulating-counts","dir":"Articles","previous_headings":"","what":"Tabulating counts","title":"Multiway data and charts","text":"Readers reviewers charts often want see exact numbers represented data markers. serve need, tabulate multiway data transforming block-record form (convenient use ggplot2) row-record form, , “long” “wide” form. illustrate, let’s tabulate number graduates people program. Start selecting desired variables . Use dcast() transform block records row records. Edit one column name print table. Table 1: Number engineering graduates Multiway data structure lends tables type. levels one category first column; levels second category table header; quantitative variable fills cells—response value combination levels two categories.","code":"# Select the desired variables tbl <- copy(DT) tbl <- tbl[, .(program, people, grad)] tbl[] #>        program        people  grad #>         <char>        <char> <int> #>  1:      Civil  Asian Female     9 #>  2:      Civil  Black Female    15 #>  3:      Civil Latine Female     5 #> ---                                #> 30: Mechanical    Black Male    65 #> 31: Mechanical   Latine Male    29 #> 32: Mechanical    White Male   918 # Transform shape to row-record form tbl <- dcast(tbl, people ~ program, value.var = \"grad\") tbl[] #>           people Civil Electrical Industrial/Systems Mechanical #>           <char> <int>      <int>              <int>      <int> #>  1: Asian Female     9         14                 15         13 #>  2:   Asian Male    17         86                 34         58 #>  3: Black Female    15         58                 43         23 #> ---                                                             #>  6:  Latine Male    22         22                 20         29 #>  7: White Female   156         55                126        109 #>  8:   White Male   558        509                263        918 # Edit column header setnames(tbl, old = \"people\", new = \"Group\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"tabulating-percentages","dir":"Articles","previous_headings":"","what":"Tabulating percentages","title":"Multiway data and charts","text":"tabulating percentages, readers reviewers likely want percentage values well underlying ratios integers. example, suggest one way values can presented single table. step, concatenate character string ratio integers parentheses followed resulting percentage value. e.g., (9/16) 56.2. Now can perform transformation block records row records . Edit one column name print table. Table 2: Percent stickiness four engineering programs","code":"# Select the desired variables tbl <- copy(DT) tbl <- tbl[, .(program, people, grad, ever, stick)] tbl[] #>        program        people  grad  ever stick #>         <char>        <char> <int> <int> <num> #>  1:      Civil  Asian Female     9    16  56.2 #>  2:      Civil  Black Female    15    49  30.6 #>  3:      Civil Latine Female     5    10  50.0 #> ---                                            #> 30: Mechanical    Black Male    65   202  32.2 #> 31: Mechanical   Latine Male    29    76  38.2 #> 32: Mechanical    White Male   918  1776  51.7 # Construct new cell values tbl[, results := paste0(\"(\", grad, \"/\", ever, \") \", format(stick, nsmall = 1))] tbl[] #>        program        people  grad  ever stick         results #>         <char>        <char> <int> <int> <num>          <char> #>  1:      Civil  Asian Female     9    16  56.2     (9/16) 56.2 #>  2:      Civil  Black Female    15    49  30.6    (15/49) 30.6 #>  3:      Civil Latine Female     5    10  50.0     (5/10) 50.0 #> ---                                                            #> 30: Mechanical    Black Male    65   202  32.2   (65/202) 32.2 #> 31: Mechanical   Latine Male    29    76  38.2    (29/76) 38.2 #> 32: Mechanical    White Male   918  1776  51.7 (918/1776) 51.7 # Transform shape to row-record form tbl <- dcast(tbl, people ~ program, value.var = \"results\") tbl[] #>           people           Civil      Electrical Industrial/Systems #>           <char>          <char>          <char>             <char> #>  1: Asian Female     (9/16) 56.2    (14/36) 38.9       (15/42) 35.7 #>  2:   Asian Male    (17/34) 50.0   (86/189) 45.5       (34/65) 52.3 #>  3: Black Female    (15/49) 30.6   (58/145) 40.0       (43/93) 46.2 #> ---                                                                 #>  6:  Latine Male    (22/53) 41.5    (22/63) 34.9       (20/32) 62.5 #>  7: White Female  (156/304) 51.3   (55/173) 31.8     (126/234) 53.8 #>  8:   White Male (558/1043) 53.5 (509/1227) 41.5     (263/494) 53.2 #>          Mechanical #>              <char> #>  1:    (13/22) 59.1 #>  2:   (58/118) 49.2 #>  3:    (23/75) 30.7 #> ---                 #>  6:    (29/76) 38.2 #>  7:  (109/261) 41.8 #>  8: (918/1776) 51.7 # Edit column header setnames(tbl, old = \"people\", new = \"Group\", skip_absent = TRUE)"},{"path":"https://midfieldr.github.io/midfieldr/articles/art-120-multiway.html","id":"closing","dir":"Articles","previous_headings":"","what":"Closing","title":"Multiway data and charts","text":"used longitudinal SURs illustrate structure multiway data create multiway charts tables several types. demonstrated filtering data dissemination preserve anonymity. used two methods ordering rows panels multiway charts: grouped medians data summary counts grouped percentages data ratios percentages. illustrated visual perception effects practicable within panel panels. advice (Cleveland’s) encode levels category rows least one chart. Thus minimum number exploratory charts number independent categorical variables.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Layton. Maintainer, author, copyright holder. Russell Long. Data manager, author, copyright holder. Matthew Ohland. Author, copyright holder. Marisa Orr. Author, copyright holder. Susan Lord. Author, copyright holder. US National Science Foundation. Funder.","code":""},{"path":"https://midfieldr.github.io/midfieldr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Layton R, Long R, Ohland M, Orr M, Lord S (2022). midfieldr: Tools Studying MIDFIELD Student Unit Record Data R. https://github.com/MIDFIELDR/midfieldr, https://midfield.online/.","code":"@Manual{,   title = {midfieldr: Tools for Studying MIDFIELD Student Unit Record Data in R},   author = {Richard Layton and Russell Long and Matthew Ohland and Marisa Orr and Susan Lord},   year = {2022},   note = {https://github.com/MIDFIELDR/midfieldr, https://midfield.online/}, }"},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our pledge","title":"Contributor code of conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Contributor code of conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement responsibilities","title":"Contributor code of conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor code of conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor code of conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement midfield@purdue.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement guidelines","title":"Contributor code of conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement guidelines","what":"1. Correction","title":"Contributor code of conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement guidelines","what":"2. Warning","title":"Contributor code of conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement guidelines","what":"3. Temporary Ban","title":"Contributor code of conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement guidelines","what":"4. Permanent Ban","title":"Contributor code of conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://midfieldr.github.io/midfieldr/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor code of conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"midfieldr","dir":"","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Tools Studying MIDFIELD Student Unit Record Data R goal midfieldr provide tools guides working longitudinal data MIDFIELD database.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"MIDFIELD (June 2022) contains Student Unit Records (SURs) 1.7M undergraduates nineteen US institutions 1987 2018, though different institutions provide data different time spans. MIDFIELD large enough permit summarizing multiple characteristics race/ethnicity, sex, program. Access MIDFIELD research database currently limited MIDFIELD partner institutions. However, sample data accessible via midfielddata R package. midfieldr R package provides tools working MIDFIELD SURs, MIDFIELD research data midfielddata practice data. midfielddata R data package provides proportionate stratified sample MIDFIELD research data. sample contains anonymized SURs nearly 98,000 undergraduates 12 institutions 1987–2016. refer sample data tables MIDFIELD practice data, suitable practice working SURs drawing inferences program attributes student experiences. practice data characterized Table 1. Table 1: Attributes practice data tables midfielddata four data tables (research data practice data) keyed student ID. course table multiple observations (rows) per student one observation per student per course. term table also multiple rows per student, one observation per student per term. student degree tables one observation per student.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"outline typical workflow : Plan records, programs, metrics use Gather relevant blocs records Join appropriate grouping variables Compute metrics Create tables charts display results Assess findings iterate. illustrate usage, tabulate counts engineering students race/ethnicity, sex, graduation status. Data processing performed using data.table syntax. Tabulated results usage example shown Table 2, ordered alphabetically. “Timely completion” count graduates completing programs 6 years; “Late completion” count graduating 6 years; “complete” count non-graduates. Table 2: Completion status engineering undergraduates practice data","code":"# Packages used library(\"midfieldr\") library(\"midfielddata\") suppressPackageStartupMessages(library(\"data.table\"))  # Load the practice data data(student, term, degree, package = \"midfielddata\")  # Reduce dimensions of source data tables student <- select_required(student) term    <- select_required(term) degree  <- select_required(degree)  # Initialize the working data frame DT <- term[, .(mcid, cip6)]  # Filter observations for data sufficiency DT <- add_timely_term(DT, term) DT <- add_data_sufficiency(DT, term) DT <- DT[data_sufficiency == \"include\"]  # Inner join to filter observations for degree-seeking cols_we_want <- student[, .(mcid)] DT <- cols_we_want[DT, on = c(\"mcid\"), nomatch = NULL]  # Filter observations for engineering programs DT <- DT[cip6 %like% \"^14\"]  # Filter observations for unique students (first instance) DT <- DT[, .SD[1], by = c(\"mcid\")]  # Add completion status variable DT <- add_completion_status(DT, degree)  # Left join to add race/ethnicity and sex variables (omit unknowns) cols_we_want <- student[, .(mcid, race, sex)] DT <- student[DT, on = c(\"mcid\")] DT <- DT[!(race %ilike% \"unknown\" | sex %ilike% \"unknown\")]  # Create a variable combining race/ethnicity and sex DT[, people := paste(race, sex)]  # Aggregate observations by groupings DT_display <- DT[, .N, by = c(\"completion_status\", \"people\")]  # Transform to row-record form DT_display <- dcast(DT_display, people ~ completion_status, value.var = \"N\")  # Prepare the table for display  setcolorder(DT_display, c(\"people\", \"timely\", \"late\")) setkeyv(DT_display, c(\"people\")) setnames(DT_display,          old = c(\"people\", \"timely\", \"late\", \"NA\"),          new = c(\"People\", \"Timely completion\", \"Late completion\", \"Did not complete\"))"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"Articles. listing vignettes. Reference (midfieldr). listing midfieldr functions prepared data. Reference (midfielddata). listing four practice MIDFIELD data tables.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"R (>= 3.5.0) data.table (>= 1.9.8) ggplot2 recommended data graphics, required.","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"install-midfieldr","dir":"","previous_headings":"","what":"Install midfieldr","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr yet available CRAN. install development version midfieldr drat repository, type Console: can confirm successful installation running following lines bring package help page Help window.","code":"# Install midfieldr from drat repo install.packages(\"midfieldr\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") # Run in Console library(\"midfieldr\") help(\"midfieldr-package\")"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"install-midfielddata","dir":"","previous_headings":"","what":"Install midfielddata","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"size, installing practice data takes time; please patient wait prompt “>” reappear. Console, run: can confirm successful installation running following lines bring package help page Help window.","code":"# Install midfielddata   install.packages(\"midfielddata\",                   repos = \"https://MIDFIELDR.github.io/drat/\",                   type = \"source\") # be patient # Run in Console library(\"midfielddata\") help(\"midfielddata-package\")"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"contribute midfieldr, Please clone repo locally. Commit contribution separate branch. submit function, please use checkmate package include runtime argument checks tinytest package write unit tests code. Save tests inst/tinytest/ directory. provide feedback report bug, Use GitHub Issues page. Please run package unit tests report results bug report. user can run package tests installing tinytest package running: Participation open source project subject Code Conduct.","code":"# Detailed test results test_results <- tinytest::test_package(\"midfieldr\") as.data.frame(test_results)"},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"https://midfieldr.github.io/midfieldr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Studying MIDFIELD Student Unit Record Data in R","text":"midfieldr licensed GPL (>= 2.0) (full license) © 2018–2022 Richard Layton, Russell Long, Susan Lord, Matthew Ohland, Marisa Orr.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://midfieldr.github.io/midfieldr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine completion status for every student — add_completion_status","title":"Determine completion status for every student — add_completion_status","text":"Add columns data frame Student Unit Record (SUR) observations  indicate whether student completed degree, , whether  completion timely.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine completion status for every student — add_completion_status","text":"","code":"add_completion_status(dframe, midfield_degree = degree)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine completion status for every student — add_completion_status","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variables mcid  timely_term. midfield_degree Data frame SUR degree observations keyed  student ID. Default degree. Required variables  mcid term_degree.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine completion status for every student — add_completion_status","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_degree Character. Term first degree(s)   completed. Encoded YYYYT. Joined midfield_degree data table. completion_status Character. Label observation   indicate completion status. Possible values : \"timely\", indicating   completion later timely completion term; \"late\", indicating   completion timely completion term; \"NA\" indicating   non-completion.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine completion status for every student — add_completion_status","text":"\"completion\" mean undergraduate earning first baccalaureate  degree (degrees, students earning one degree  term). Additional degrees, , earned later term first  degree ignored. many studies, students must complete degree specified time span,  example 4-, 6-, 8-years admission. , completion  timely; , completion late grouped  non-completers computing metric graduation rate. Completion status \"timely\" students completing degree later  timely completion terms. See also add_timely_term().","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_completion_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine completion status for every student — add_completion_status","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add completion status column dframe <- add_timely_term(dframe, toy_term)  # Add completion status column add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree #>  1: MID25784187  19885  01 Freshman        6       19943       19946 #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993       19963 #>  5: MID25828870  19881  01 Freshman        6       19933       19923 #>  6: MID25829749  19995    03 Junior        4       20033        <NA> #>  7: MID25841418  19981    03 Junior        4       20013       19993 #>  8: MID25845197  19905    03 Junior        4       19943       19921 #>  9: MID25846316  19911  01 Freshman        6       19963       19951 #> 10: MID25847220  19891  01 Freshman        6       19943       19933 #>     completion_status #>  1:              late #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely  # Existing completion_status column, if any, is overwritten dframe[, completion_status := NA_character_] #>            mcid term_i      level_i adj_span timely_term completion_status #>  1: MID25784187  19885  01 Freshman        6       19943              <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931              <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923              <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993              <NA> #>  5: MID25828870  19881  01 Freshman        6       19933              <NA> #>  6: MID25829749  19995    03 Junior        4       20033              <NA> #>  7: MID25841418  19981    03 Junior        4       20013              <NA> #>  8: MID25845197  19905    03 Junior        4       19943              <NA> #>  9: MID25846316  19911  01 Freshman        6       19963              <NA> #> 10: MID25847220  19891  01 Freshman        6       19943              <NA> add_completion_status(dframe, toy_degree) #>            mcid term_i      level_i adj_span timely_term term_degree #>  1: MID25784187  19885  01 Freshman        6       19943       19946 #>  2: MID25784974  19883 02 Sophomore        5       19931        <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923        <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993       19963 #>  5: MID25828870  19881  01 Freshman        6       19933       19923 #>  6: MID25829749  19995    03 Junior        4       20033        <NA> #>  7: MID25841418  19981    03 Junior        4       20013       19993 #>  8: MID25845197  19905    03 Junior        4       19943       19921 #>  9: MID25846316  19911  01 Freshman        6       19963       19951 #> 10: MID25847220  19891  01 Freshman        6       19943       19933 #>     completion_status #>  1:              late #>  2:              <NA> #>  3:              <NA> #>  4:            timely #>  5:            timely #>  6:              <NA> #>  7:            timely #>  8:            timely #>  9:            timely #> 10:            timely"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine data sufficiency for every student — add_data_sufficiency","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"Add column data frame Student Unit Record (SUR) observations  labels row inclusion exclusion based data sufficiency near  upper lower bounds institution's data range.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"add_data_sufficiency(dframe, midfield_term = term)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variables mcid  timely_term. See also add_timely_term(). midfield_term Data frame SUR term observations keyed  student ID. Default term. Required variables  mcid, institution, term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_i Character. Initial term student's longitudinal   record, encoded YYYYT. overwritten present dframe. lower_limit Character. Initial term institution's data   range, encoded YYYYT upper_limit Character. Final term institution's data   range, encoded YYYYT data_sufficiency Character. Label observation   inclusion exclusion based data sufficiency. Possible values :   include, indicating available data sufficient   estimating timely completion; exclude-upper, indicating   data insufficient upper limit data range;   exclude-lower, indicating data insufficient   lower limit.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"time span MIDFIELD term data varies institution,  lower upper bounds. student records,  near bounds creates unavoidable ambiguity trying assess  degree completion. records must identified cases  excluded prevent false summary counts.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_data_sufficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine data sufficiency for every student — add_data_sufficiency","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Timely term column is required to add data sufficiency column dframe <- add_timely_term(dframe, midfield_term = toy_term)  # Add data sufficiency column add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include  # Existing data_sufficiency column, if any, is overwritten dframe[, data_sufficiency := NA_character_] #>            mcid term_i      level_i adj_span timely_term data_sufficiency #>  1: MID25784187  19885  01 Freshman        6       19943             <NA> #>  2: MID25784974  19883 02 Sophomore        5       19931             <NA> #>  3: MID25816209  19881 02 Sophomore        5       19923             <NA> #>  4: MID25819358  19946 02 Sophomore        5       19993             <NA> #>  5: MID25828870  19881  01 Freshman        6       19933             <NA> #>  6: MID25829749  19995    03 Junior        4       20033             <NA> #>  7: MID25841418  19981    03 Junior        4       20013             <NA> #>  8: MID25845197  19905    03 Junior        4       19943             <NA> #>  9: MID25846316  19911  01 Freshman        6       19963             <NA> #> 10: MID25847220  19891  01 Freshman        6       19943             <NA> add_data_sufficiency(dframe, midfield_term = toy_term) #>            mcid      level_i adj_span timely_term term_i lower_limit #>  1: MID25784187  01 Freshman        6       19943  19885       19881 #>  2: MID25784974 02 Sophomore        5       19931  19883       19881 #>  3: MID25816209 02 Sophomore        5       19923  19881       19881 #>  4: MID25819358 02 Sophomore        5       19993  19946       19881 #>  5: MID25828870  01 Freshman        6       19933  19881       19881 #>  6: MID25829749    03 Junior        4       20033  19995       19881 #>  7: MID25841418    03 Junior        4       20013  19981       19881 #>  8: MID25845197    03 Junior        4       19943  19905       19881 #>  9: MID25846316  01 Freshman        6       19963  19911       19881 #> 10: MID25847220  01 Freshman        6       19943  19891       19881 #>     upper_limit data_sufficiency #>  1:       19995          include #>  2:       19995          include #>  3:       19995    exclude-lower #>  4:       19995          include #>  5:       19995    exclude-lower #>  6:       19995    exclude-upper #>  7:       19995    exclude-upper #>  8:       19995          include #>  9:       19995          include #> 10:       19995          include"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns for student race/ethnicity and sex — add_race_sex","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"Add columns data frame Student Unit Record (SUR)  observations labels row student's race/ethnicity sex.  Requires MIDFIELD student data frame environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"","code":"add_race_sex(dframe, midfield_student = student)"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variable mcid. midfield_student Data frame SUR student observations keyed  student ID. Default student. Required variables  mcid, race, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: race Character, self-reported race/ethnicity, e.g.,   Asian, Black, Hispanic/LatinX, etc. sex Character, self-reported sex, values Female, Male,   Unknown","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"MIDFIELD student data includes variables race (race/ethnicity)  sex self-reported institution.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_race_sex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add columns for student race/ethnicity and sex — add_race_sex","text":"","code":"# Start with an excerpt from the degree data set  dframe <- toy_degree[1:5, c(\"mcid\", \"cip6\")]  # Add columns for race/ethnicity and sex add_race_sex(dframe, midfield_student = toy_student) #>           mcid   cip6  race    sex #> 1: MID25784187 520801 White   Male #> 2: MID25819358 260502 White   Male #> 3: MID25828870 140801 White   Male #> 4: MID25841418 030506 White   Male #> 5: MID25845197 409999 White Female  # Repeat with an example from the term data set  dframe <- toy_term[21:26, c(\"mcid\", \"institution\", \"level\")] add_race_sex(dframe, midfield_student = toy_student) #>           mcid   institution        level  race  sex #> 1: MID25846316 Institution M  01 Freshman White Male #> 2: MID25846316 Institution M 02 Sophomore White Male #> 3: MID25846316 Institution M    03 Junior White Male #> 4: MID25846316 Institution M    03 Junior White Male #> 5: MID25846316 Institution M    04 Senior White Male #> 6: MID25846316 Institution M    04 Senior White Male  # Existing race and sex columns, if any, are overwritten dframe[, c(\"race\", \"sex\") := NA_character_] #>           mcid   institution        level race  sex #> 1: MID25846316 Institution M    04 Senior <NA> <NA> #> 2: MID25846316 Institution M  01 Freshman <NA> <NA> #> 3: MID25846316 Institution M    03 Junior <NA> <NA> #> 4: MID25846316 Institution M    03 Junior <NA> <NA> #> 5: MID25846316 Institution M    04 Senior <NA> <NA> #> 6: MID25846316 Institution M 02 Sophomore <NA> <NA> add_race_sex(dframe, midfield_student = toy_student) #>           mcid   institution        level  race  sex #> 1: MID25846316 Institution M  01 Freshman White Male #> 2: MID25846316 Institution M 02 Sophomore White Male #> 3: MID25846316 Institution M    03 Junior White Male #> 4: MID25846316 Institution M    03 Junior White Male #> 5: MID25846316 Institution M    04 Senior White Male #> 6: MID25846316 Institution M    04 Senior White Male"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a timely completion term for every student — add_timely_term","title":"Calculate a timely completion term for every student — add_timely_term","text":"Add column data frame Student Unit Record (SUR) observations  indicates latest term degree completion  considered  timely every student.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"add_timely_term(   dframe,   midfield_term = term,   ...,   span = NULL,   sched_span = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a timely completion term for every student — add_timely_term","text":"dframe Data frame student unit record (SUR) observations keyed  student ID. Required variable mcid. midfield_term Data frame SUR term observations keyed  student ID. Default term. Required variables  mcid, term, level. ... used, forces later arguments used name. span Optional integer scalar, number years define timely completion. Commonly used values 100%, 150%, 200%   sched_span. Default 6 years. sched_span Optional integer scalar, number years institution officially schedules completing program. Default 4 years.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a timely completion term for every student — add_timely_term","text":"data.table  following properties: Rows modified. Grouping structures preserved. Columns listed added. Caution! existing column   name one added columns silently overwritten.   columns modified. Columns added: term_i Character. Initial term student's longitudinal   record, encoded YYYYT level_i Character. Student level (01 Freshman, 02 Sophomore,   etc.) initial term adj_span Numeric. Integer span years timely completion   adjusted student's initial level. timely_term Character. Latest term program   completion considered timely every student. Encoded YYYYT.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a timely completion term for every student — add_timely_term","text":"\"completion\" mean undergraduate earning first baccalaureate  degree (degrees, students earning one degree  term). many studies, students must complete programs specified time  span, example 4-, 6-, 8-years admission. ,  completion timely; , completion late grouped  non-completers computing metric graduation rate. heuristic assigns span number years (default 6 years)  every student. students admitted second-year level higher,  span reduced one year full year student assumed  completed. example, student admitted  second-year level assumed completed one year program,  span reduced one year. adjusted span added initial term create timely  completion term timely_term column.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/add_timely_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a timely completion term for every student — add_timely_term","text":"","code":"# Start with an excerpt from the student data set  dframe <- toy_student[1:10, .(mcid)]  # Add timely completion term column add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943  # Define timely completion as 200% of scheduled span (8 years) add_timely_term(dframe, midfield_term = toy_term, span = 8) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        8       19963 #>  2: MID25784974  19883 02 Sophomore        7       19951 #>  3: MID25816209  19881 02 Sophomore        7       19943 #>  4: MID25819358  19946 02 Sophomore        7       20013 #>  5: MID25828870  19881  01 Freshman        8       19953 #>  6: MID25829749  19995    03 Junior        6       20053 #>  7: MID25841418  19981    03 Junior        6       20033 #>  8: MID25845197  19905    03 Junior        6       19963 #>  9: MID25846316  19911  01 Freshman        8       19983 #> 10: MID25847220  19891  01 Freshman        8       19963  # Existing timely_term column, if any, is overwritten dframe[, timely_term := NA_character_] #>            mcid timely_term #>  1: MID25784187        <NA> #>  2: MID25784974        <NA> #>  3: MID25816209        <NA> #>  4: MID25819358        <NA> #>  5: MID25828870        <NA> #>  6: MID25829749        <NA> #>  7: MID25841418        <NA> #>  8: MID25845197        <NA> #>  9: MID25846316        <NA> #> 10: MID25847220        <NA> add_timely_term(dframe, midfield_term = toy_term) #>            mcid term_i      level_i adj_span timely_term #>  1: MID25784187  19885  01 Freshman        6       19943 #>  2: MID25784974  19883 02 Sophomore        5       19931 #>  3: MID25816209  19881 02 Sophomore        5       19923 #>  4: MID25819358  19946 02 Sophomore        5       19993 #>  5: MID25828870  19881  01 Freshman        6       19933 #>  6: MID25829749  19995    03 Junior        4       20033 #>  7: MID25841418  19981    03 Junior        4       20013 #>  8: MID25845197  19905    03 Junior        4       19943 #>  9: MID25846316  19911  01 Freshman        6       19963 #> 10: MID25847220  19891  01 Freshman        6       19943"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of academic programs — cip","title":"Table of academic programs — cip","text":"data table based US National Center Education Statistics (NCES), Integrated Postsecondary Education Data System (IPEDS), 2010 CIP, http://nces.ed.gov/ipeds/cipcode/. data codes names 1582 instructional programs organized three levels: 2-digit series, 4-digit series, 6-digit series.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of academic programs — cip","text":"","code":"cip"},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of academic programs — cip","text":"data.table 1582 rows 6 columns keyed 6-digit CIP code: cip6 Character 6-digit code representing \"specific   instructional programs\" (US National Center Education Statistics). cip6name Character program name 6-digit level cip4 Character 4-digit code (first 4 digits cip6)   representing \"intermediate groupings programs   comparable content objectives.\" cip4name Character program name 4-digit level. cip2 Character 2-digit code (first 2 digits cip6)   representing \"general groupings related programs.\" cip2name Character program name 2-digit level.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of academic programs — cip","text":"midfielddata taxonomy includes one non-IPEDS code (999999) Undecided Unspecified, instances institutions reported program information students enrolled program.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare FYE data for multiple imputation — condition_fye","title":"Prepare FYE data for multiple imputation — condition_fye","text":"Constructs data frame Student Unit Records (SURs) First-Year  Engineering (FYE) programs conditions data later use  input mice R package multiple imputation. Sets three  variables predictors (institution, race, sex) one variable  predicted (program CIP code) NA values imputed. Requires  MIDFIELD student term data frames environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare FYE data for multiple imputation — condition_fye","text":"","code":"condition_fye(midfield_student, midfield_term, ..., fye_codes = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare FYE data for multiple imputation — condition_fye","text":"midfield_student Data frame Student Unit Record (SUR) student observations,  keyed student ID. Required variables  mcid, race, sex. midfield_term Data frame SUR term observations keyed  student ID. Required variables  mcid, institution, term, cip6. ... used, forces later arguments used name. fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default 140102. Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes---start 14---ignored.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare FYE data for multiple imputation — condition_fye","text":"data.table conditioned later use input  mice R package multiple imputation. data following  properties: One row every FYE student. Grouping structures preserved. Columns returned: mcid Character, anonymized student identifier. Returned             -. race Factor, race/ethnicity self-reported             student. imputation predictor variable. sex Factor, sex self-reported             student. imputation predictor variable. institution Factor, anonymized institution name.             imputation predictor variable. cip6 Factor, 6-digit CIP code student's known,             post-FYE engineering program NA representing missing            values imputed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare FYE data for multiple imputation — condition_fye","text":"US institutions, First-Year Engineering (FYE) programs comprise  common first year curriculum prerequisite declaring   engineering major. longitudinal studies, FYE programs can problematic  combining observations non-FYE institutions.  example, suppose calculating graduation rate Mechanical  Engineering () programs. definitions, students starting  constitute pool; fraction pool graduates  rate. FYE starters, even graduate , excluded  count start . Therefore, include FYE students persistence metric requiring degree-granting \"starting\" program, predict engineering program (Electrical Engineering, Mechanical Engineering, etc.)  FYE student declared required enroll FYE. purpose condition_fye() prepare data  making prediction.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Prepare FYE data for multiple imputation — condition_fye","text":"method requires MIDFIELD-style student term data tables  contain minimum institutions studied also FYE  programs. function extracts terms FYE students sorts  two categories: Students complete FYE declare engineering major.     easy case--student's first opportunity,     enrolled engineering program choosing. use     program predicted  starting program. Students , FYE, declare engineering major.     complicated case---data provide information     regarding engineering program student declared     originally institution required enroll FYE.     students, treat starting program missing data     predicted using multiple imputation. cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. first () post-FYE program identified. program engineering, CIP retained predicted starting major. , CIP replaced NA treated missing data imputation. Lastly, predictor variables (institution, race, sex) predicted variable (6-digit CIP code) converted unordered factors.  resulting data frame ready use input mice package.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_fye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare FYE data for multiple imputation — condition_fye","text":"","code":"# # Using toy data # DT <- toy_student[, .(mcid, race, sex)] # condition_fye(dframe = DT, midfield_term = toy_term) #  #  # # Overwrites institution if present in dframe # DT <- toy_student[, .(mcid, institution, race, sex)] # condition_fye(dframe = DT, midfield_term = toy_term) #  #  # # Other columns, if any, are dropped # colnames(toy_student) # colnames(condition_fye(toy_student, toy_term)) #  #  # # Optional argument permits multiple CIP codes for FYE # condition_fye(DT, toy_term, fye_codes = c(\"140101\", \"140102\"))"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition multiway data by ordering category levels — condition_multiway","title":"Condition multiway data by ordering category levels — condition_multiway","text":"Transform data frame two independent categorical variables  factors levels ordered display multiway dot plot. Multiway  data comprise single quantitative value (response) every  combination levels two categorical variables. ordering  rows panels crucial perception effects (Cleveland, 1993).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition multiway data by ordering category levels — condition_multiway","text":"","code":"condition_multiway(dframe, x, yy, ..., order_by = NULL, param_col = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Condition multiway data by ordering category levels — condition_multiway","text":"dframe Data frame one numeric variable two  categorical variables class character factor. Two additional  numeric columns required using \"percent\" ordering method. x Character, name (quotes) single multiway quantitative  variable yy Character, vector names (quotes) two multiway  categorical variables ... used, forces later arguments used name. order_by Character, “median” (default) “percent”, method  ordering levels categories. median method computes  medians quantitative column grouped category. percent  method computes percentages based ratio produced  quantitative variable except grouped category. param_col Character vector names (quotes)  numerator denominator columns produced quantitative  variable, required order_by \"percent\". Names can  order; algorithm assumes parameter  larger column sum denominator ratio.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition multiway data by ordering category levels — condition_multiway","text":"data.table  following properties: Rows modified. Grouping structures preserved. columns specified yy converted factors       ordered. columns modified. Two columns added. Caution! existing column   name one added columns silently overwritten. Columns added: Y_median columns (ordering method \"median\") Numeric.       Two columns medians quantitative variable grouped       categorical variables. Y placeholder column name       replaced category name yy. example, suppose        yy = c(\"program\", \"people\") order_by = \"median\".       two new column names program_median       people_median. Y_X columns (ordering method \"percent\") Numeric. Two       columns percentages based ratio produces       quantitative variable except grouped categorical variables.       Y        placeholder column name       replaced category name yy; X  placeholder       replaced quantitative variable name x. example,       suppose yy = c(\"program\", \"people\"), x = \"grad_rate\",       order_by = \"percent\". two new column names         program_grad_rate people_grad_rate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition multiway data by ordering category levels — condition_multiway","text":"context, \"multiway\" refers data structure graph design defined Cleveland (1993), methods analysis described  Kroonenberg (2008). Multiway data comprise three variables: categorical variable m  levels; second independent categorical variable n levels;  quantitative variable (response) length mn  cross-classifies categories, , value  response combination levels two categorical variables. multiway dot plot, one category encoded panels, second  category encoded rows panel, quantitative variable  encoded along identical horizontal scales.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/condition_multiway.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Condition multiway data by ordering category levels — condition_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley,    Hoboken, NJ.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_cip","title":"Subset rows that include matches to search strings — filter_cip","text":"Subset data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_cip","text":"","code":"filter_cip(   dframe = cip,   keep_text = NULL,   ...,   drop_text = NULL,   select = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows that include matches to search strings — filter_cip","text":"dframe Data frame searched. Default cip. keep_text Optional character vector search text retaining rows, default NULL. ... used, force later arguments used name. drop_text Optional character vector search text dropping rows, default NULL. select Optional character vector column names return, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_cip","text":"data.table following properties: Rows matching elements keep_text excluding rows           matching elements drop_text. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_cip","text":"function designed permit usage  filter_cip(character_vector) position first two  arguments ignored first argument unnamed  character vector. case, character vector assigned  keep_text argument cip data set included  midfieldr assigned (default) dframe argument. Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_cip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows that include matches to search strings — filter_cip","text":"","code":"# Subset using keywords filter_cip(cip, keep_text = \"engineering\") #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>   4:   14                                      Engineering 1403 #>   5:   14                                      Engineering 1404 #>  ---                                                            #> 115:   15                           Engineering Technology 1516 #> 116:   15                           Engineering Technology 1599 #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                     cip4name   cip6 #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering   # drop_text argument, when used, must be named filter_cip(cip, \"civil engineering\", drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other   # Subset using numerical codes filter_cip(cip, keep_text = c(\"050125\", \"160501\")) #>    cip2                                            cip2name cip4 #> 1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #> 2:   16      Foreign Languages, Literatures and Linguistics 1605 #>                                       cip4name   cip6 #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #> 1:                 German Studies #> 2: German Language and Literature   # Subset using regular expressions filter_cip(cip, keep_text = \"^54\") #>    cip2 cip2name cip4 cip4name   cip6 #> 1:   54  History 5401  History 540101 #> 2:   54  History 5401  History 540102 #> 3:   54  History 5401  History 540103 #> 4:   54  History 5401  History 540104 #> 5:   54  History 5401  History 540105 #> 6:   54  History 5401  History 540106 #> 7:   54  History 5401  History 540107 #> 8:   54  History 5401  History 540108 #> 9:   54  History 5401  History 540199 #>                                               cip6name #> 1:                                    History, General #> 2:                    American History (United States) #> 3:                                    European History #> 4:    History and Philosophy of Science and Technology #> 5: Public, Applied History and Archival Administration #> 6:                                       Asian History #> 7:                                    Canadian History #> 8:                                    Military History #> 9:                                      History, Other filter_cip(cip, keep_text = c(\"^1407\", \"^1408\")) #>    cip2    cip2name cip4             cip4name   cip6 #> 1:   14 Engineering 1407 Chemical Engineering 140701 #> 2:   14 Engineering 1407 Chemical Engineering 140702 #> 3:   14 Engineering 1407 Chemical Engineering 140799 #> 4:   14 Engineering 1408    Civil Engineering 140801 #> 5:   14 Engineering 1408    Civil Engineering 140802 #> 6:   14 Engineering 1408    Civil Engineering 140803 #> 7:   14 Engineering 1408    Civil Engineering 140804 #> 8:   14 Engineering 1408    Civil Engineering 140805 #> 9:   14 Engineering 1408    Civil Engineering 140899 #>                                  cip6name #> 1:                   Chemical Engineering #> 2:  Chemical and Biomolecular Engineering #> 3:            Chemical Engineering, Other #> 4:             Civil Engineering, General #> 5:               Geotechnical Engineering #> 6:                 Structural Engineering #> 7: Transportation and Highway Engineering #> 8:            Water Resources Engineering #> 9:               Civil Engineering, Other   # Select columns filter_cip(cip,   keep_text = \"^54\",   select = c(\"cip6\", \"cip4name\") ) #>      cip6 cip4name #> 1: 540101  History #> 2: 540102  History #> 3: 540103  History #> 4: 540104  History #> 5: 540105  History #> 6: 540106  History #> 7: 540107  History #> 8: 540108  History #> 9: 540199  History   # Multiple passes to narrow the results first_pass <- filter_cip(cip, \"civil\") second_pass <- filter_cip(first_pass, \"engineering\") filter_cip(second_pass, drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows by matching values in shared key columns — filter_match","title":"Subset rows by matching values in shared key columns — filter_match","text":"Subset rows one data frame values key column match values similar key column second data frame. Columns subset unless selected optional argument.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"filter_match(dframe, match_to, by_col, ..., select = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows by matching values in shared key columns — filter_match","text":"dframe Data frame subset returned. Must contain key column named by_col. match_to Data frame key column values matched . column used required key column named by_col. by_col Character scalar, name key column. Values key column must character strings. ... used, force later arguments used name. select Optional character vector dframe column names retain, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows by matching values in shared key columns — filter_match","text":"data.table following properties: Rows matching values. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows by matching values in shared key columns — filter_match","text":"Two data frames input. match_to data frame subset retain key column .  result merged dframe inner-join, returning rows dframe values matching key values match_to. Column subsetting occurs inner join, key column included vector column names select.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows by matching values in shared key columns — filter_match","text":"","code":"# Start with a toy sample of student (built-in data set) head(toy_student) #>           mcid   institution              transfer hours_transfer  race    sex #> 1: MID25784187 Institution M First-Time in College             NA White   Male #> 2: MID25784974 Institution M First-Time in College             NA White   Male #> 3: MID25816209 Institution M First-Time in College             NA White   Male #> 4: MID25819358 Institution M First-Time in College             NA White   Male #> 5: MID25828870 Institution M First-Time in College             NA White   Male #> 6: MID25829749 Institution M   First-Time Transfer             NA White Female nrow(toy_student) #> [1] 99   # Filter by matching IDs of graduates student_example <- filter_match(toy_student,   match_to = toy_degree,   by_col = \"mcid\" ) head(student_example) #>           mcid   institution              transfer hours_transfer  race    sex #> 1: MID25784187 Institution M First-Time in College             NA White   Male #> 2: MID25819358 Institution M First-Time in College             NA White   Male #> 3: MID25828870 Institution M First-Time in College             NA White   Male #> 4: MID25841418 Institution M First-Time in College             NA White   Male #> 5: MID25845197 Institution M First-Time in College             NA White Female #> 6: MID25846316 Institution M First-Time in College             NA White   Male # Note change in number of rows nrow(student_example) #> [1] 65   # Same filter and select 3 columns only student_example <- filter_match(toy_student,   match_to = toy_degree,   by_col = \"mcid\",   select = c(\"mcid\", \"race\", \"sex\") ) head(student_example) #>           mcid  race    sex #> 1: MID25784187 White   Male #> 2: MID25819358 White   Male #> 3: MID25828870 White   Male #> 4: MID25841418 White   Male #> 5: MID25845197 White Female #> 6: MID25846316 White   Male nrow(student_example) #> [1] 65   # Filter term data for engineering program codes (start with \"14\") term_example <- toy_term[grepl(\"^14\", cip6), ] head(term_example) #>           mcid   institution  term   cip6        level hours_term #> 1: MID25828870 Institution M 19923 140801    04 Senior         12 #> 2: MID25828870 Institution M 19891 140102 02 Sophomore         14 #> 3: MID25828870 Institution M 19903 140801    04 Senior         17 #> 4: MID25828870 Institution M 19881 140102  01 Freshman         17 #> 5: MID25828870 Institution M 19901 140801    03 Junior         14 #> 6: MID25828870 Institution M 19883 140102 02 Sophomore         14 nrow(term_example) #> [1] 61   # Filter student by matching IDs of engineering students student_example <- filter_match(toy_student,   match_to = term_example,   by_col = \"mcid\",   select = c(\"mcid\", \"institution\", \"transfer\", \"sex\") ) head(student_example) #>           mcid   institution              transfer    sex #> 1: MID25828870 Institution M First-Time in College   Male #> 2: MID25846316 Institution M First-Time in College   Male #> 3: MID25847220 Institution M First-Time in College   Male #> 4: MID25848589 Institution M First-Time in College   Male #> 5: MID25977316 Institution B First-Time in College   Male #> 6: MID25995980 Institution C First-Time in College Female nrow(student_example) #> [1] 22   # The 'by_col' column does not have to be included in the `select` columns student_example <- filter_match(toy_student,   match_to = term_example,   by_col = \"mcid\",   select = c(\"institution\", \"transfer\", \"sex\") ) head(student_example) #>      institution              transfer    sex #> 1: Institution M First-Time in College   Male #> 2: Institution M First-Time in College   Male #> 3: Institution M First-Time in College   Male #> 4: Institution M First-Time in College   Male #> 5: Institution B First-Time in College   Male #> 6: Institution C First-Time in College Female nrow(student_example) #> [1] 22"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows that include matches to search strings — filter_search","title":"Subset rows that include matches to search strings — filter_search","text":"Subset data frame, retaining rows match partially match vector character strings. Columns subset unless selected optional argument. commonly used searching CIP data set.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"filter_search(dframe, keep_text = NULL, ..., drop_text = NULL, select = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows that include matches to search strings — filter_search","text":"dframe Data frame searched. keep_text Optional character vector search text retaining rows, default NULL. ... used, force later arguments used name. drop_text Optional character vector search text dropping rows, default NULL. select Optional character vector column names return, default columns.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows that include matches to search strings — filter_search","text":"data.table following properties: Rows matching elements keep_text excluding rows           matching elements drop_text. columns specified select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows that include matches to search strings — filter_search","text":"Search terms can include regular expressions. Uses grepl(), therefore non-character columns () can coerced character also searched matches. Columns subset values select search concludes. none optional arguments specified, function returns original data frame.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/filter_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows that include matches to search strings — filter_search","text":"","code":"# Subset using keywords filter_search(cip, keep_text = \"engineering\") #>      cip2                                         cip2name cip4 #>   1:   14                                      Engineering 1401 #>   2:   14                                      Engineering 1401 #>   3:   14                                      Engineering 1402 #>   4:   14                                      Engineering 1403 #>   5:   14                                      Engineering 1404 #>  ---                                                            #> 115:   15                           Engineering Technology 1516 #> 116:   15                           Engineering Technology 1599 #> 117:   29                            Military Technologies 2903 #> 118:   29                            Military Technologies 2903 #> 119:   51 Health Professions and Related Clinical Sciences 5123 #>                                                     cip4name   cip6 #>   1:                                    Engineering, General 140101 #>   2:                                    Engineering, General 140102 #>   3:   Aerospace, Aeronautical and Astronautical Engineering 140201 #>   4: Agricultural, Biological Engineering and Bioengineering 140301 #>   5:                               Architectural Engineering 140401 #>  ---                                                                #> 115:                                          Nanotechnology 151601 #> 116:    Engineering-Related Technologies, Technicians, Other 159999 #> 117:                               Military Applied Sciences 290301 #> 118:                               Military Applied Sciences 290303 #> 119:              Rehabilitation and Therapeutic Professions 512312 #>                                                              cip6name #>   1:                                             Engineering, General #>   2:                                                  Pre-Engineering #>   3:     Aerospace, Aeronautical and Astronautical, Space Engineering #>   4:          Agricultural, Biological Engineering and Bioengineering #>   5:                                        Architectural Engineering #>  ---                                                                  #> 115:                                                   Nanotechnology #> 116:             Engineering Related Technologies, Technicians, Other #> 117:                                       Combat Systems Engineering #> 118:                                            Engineering Acoustics #> 119: Assistive, Augmentative Technology and Rehabiliation Engineering   # drop_text argument, when used, must be named filter_search(cip, \"civil engineering\", drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other   # Subset using numerical codes filter_search(cip, keep_text = c(\"050125\", \"160501\")) #>    cip2                                            cip2name cip4 #> 1:   05 Area, Ethnic, Cultural and Gender and Group Studies 0501 #> 2:   16      Foreign Languages, Literatures and Linguistics 1605 #>                                       cip4name   cip6 #> 1:                                Area Studies 050125 #> 2: Germanic Languages, Literatures Linguistics 160501 #>                          cip6name #> 1:                 German Studies #> 2: German Language and Literature   # subset using regular expressions filter_search(cip, keep_text = \"^54\") #>    cip2 cip2name cip4 cip4name   cip6 #> 1:   54  History 5401  History 540101 #> 2:   54  History 5401  History 540102 #> 3:   54  History 5401  History 540103 #> 4:   54  History 5401  History 540104 #> 5:   54  History 5401  History 540105 #> 6:   54  History 5401  History 540106 #> 7:   54  History 5401  History 540107 #> 8:   54  History 5401  History 540108 #> 9:   54  History 5401  History 540199 #>                                               cip6name #> 1:                                    History, General #> 2:                    American History (United States) #> 3:                                    European History #> 4:    History and Philosophy of Science and Technology #> 5: Public, Applied History and Archival Administration #> 6:                                       Asian History #> 7:                                    Canadian History #> 8:                                    Military History #> 9:                                      History, Other filter_search(cip, keep_text = c(\"^1407\", \"^1408\")) #>    cip2    cip2name cip4             cip4name   cip6 #> 1:   14 Engineering 1407 Chemical Engineering 140701 #> 2:   14 Engineering 1407 Chemical Engineering 140702 #> 3:   14 Engineering 1407 Chemical Engineering 140799 #> 4:   14 Engineering 1408    Civil Engineering 140801 #> 5:   14 Engineering 1408    Civil Engineering 140802 #> 6:   14 Engineering 1408    Civil Engineering 140803 #> 7:   14 Engineering 1408    Civil Engineering 140804 #> 8:   14 Engineering 1408    Civil Engineering 140805 #> 9:   14 Engineering 1408    Civil Engineering 140899 #>                                  cip6name #> 1:                   Chemical Engineering #> 2:  Chemical and Biomolecular Engineering #> 3:            Chemical Engineering, Other #> 4:             Civil Engineering, General #> 5:               Geotechnical Engineering #> 6:                 Structural Engineering #> 7: Transportation and Highway Engineering #> 8:            Water Resources Engineering #> 9:               Civil Engineering, Other   # Select columns filter_search(cip,   keep_text = \"^54\",   select = c(\"cip6\", \"cip4name\") ) #>      cip6 cip4name #> 1: 540101  History #> 2: 540102  History #> 3: 540103  History #> 4: 540104  History #> 5: 540105  History #> 6: 540106  History #> 7: 540107  History #> 8: 540108  History #> 9: 540199  History   # Multiple passes to narrow the results first_pass <- filter_search(cip, \"civil\") second_pass <- filter_search(first_pass, \"engineering\") filter_search(second_pass, drop_text = \"technology\") #>    cip2    cip2name cip4          cip4name   cip6 #> 1:   14 Engineering 1408 Civil Engineering 140801 #> 2:   14 Engineering 1408 Civil Engineering 140802 #> 3:   14 Engineering 1408 Civil Engineering 140803 #> 4:   14 Engineering 1408 Civil Engineering 140804 #> 5:   14 Engineering 1408 Civil Engineering 140805 #> 6:   14 Engineering 1408 Civil Engineering 140899 #>                                  cip6name #> 1:             Civil Engineering, General #> 2:               Geotechnical Engineering #> 3:                 Structural Engineering #> 4: Transportation and Highway Engineering #> 5:            Water Resources Engineering #> 6:               Civil Engineering, Other"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_predicted_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted starting programs for FYE students — fye_predicted_start","title":"Predicted starting programs for FYE students — fye_predicted_start","text":"Predicted starting programs First-Year Engineering (FYE) students  midfielddata data tables. Keyed student ID. Contains  6-digit CIP codes substituted First-Year-Engineering (FYE)  CIP code analysis requires starting programs  degree-granting. Suitable use midfielddata practice data .","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_predicted_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted starting programs for FYE students — fye_predicted_start","text":"","code":"fye_predicted_start"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_predicted_start.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Predicted starting programs for FYE students — fye_predicted_start","text":"data.table 5033 rows 2 columns keyed student ID. variables : mcid Character, de-identified student ID. start Character, 6-digit CIP code predicted starting   program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_predicted_start.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted starting programs for FYE students — fye_predicted_start","text":"Starting programs fye_predicted_start engineering  programs predict students declared  required enroll FYE. prediction based first post-FYE  program multivariate imputation suitable multiple categorical  variables using mice package. predictor variables institution,  race, sex. predicted variable 6-digit CIP code  degree-granting engineering program institution. fye_predicted_start holds practice data midfielddata---values commingled research database available MIDFIELD partners.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting program proxies for FYE students — fye_proxy","title":"Starting program proxies for FYE students — fye_proxy","text":"Proxies degree-granting engineering programs estimate  First-Year Engineering (FYE) students declared  required enroll FYE. Keyed student ID. Proxies provided  students midfielddata practice data enroll FYE  first term.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting program proxies for FYE students — fye_proxy","text":"","code":"fye_proxy"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting program proxies for FYE students — fye_proxy","text":"data.table 3738 rows 2 columns keyed student ID. variables : mcid Character, de-identified student ID. proxy Character, 6-digit CIP code estimated proxy   program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_proxy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting program proxies for FYE students — fye_proxy","text":"proxy variable contains 6-digit CIP codes degree-granting engineering  programs, e.g., Electrical Engineering, Mechanical Engineering, etc.,  substituted FYE CIP code analysis requires  degree-granting starting programs. common application  graduation rate calculation. estimation based students' first post-FYE programs  multiple imputation suitable categorical variables using  mice package. predictor variables institution, race, sex.  estimated variable 6-digit CIP code degree-granting  engineering program institution. fye_proxy holds practice data midfielddata--- values commingled MIDFIELD research database.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Starting programs imputed for FYE students — fye_start","title":"Starting programs imputed for FYE students — fye_start","text":"data table Degree-granting, engineering CIP codes can  substituted First-Year-Engineering (FYE) codes required  persistence metric.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starting programs imputed for FYE students — fye_start","text":"","code":"fye_start"},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starting programs imputed for FYE students — fye_start","text":"data.table 5033 rows 2 columns keyed student ID. variables : mcid Character, de-identified student ID. start Character, 6-digit CIP code predicted starting   program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/fye_start.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Starting programs imputed for FYE students — fye_start","text":"FYE different non-degree-granting CIP designations \"undecided\" \"undeclared\". FYE students neither undecided undeclared---accepted institutions Engineering majors. Starting programs fye_start engineering programs predict students declared required enroll FYE. prediction based first post-FYE program imputation suitable multiple categorical variables using mice package. predictor variables institution, race, sex. predicted variable 6-digit CIP code degree-granting engineering program institution. fye_start holds practice data midfielddata---values commingled research database available MIDFIELD partners.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"goal midfieldr provide tools working MIDFIELD data, resource longitudinal, de-identified, individual student unit records.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/midfieldr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for Studying MIDFIELD Student Unit Record Data in R — midfieldr-package","text":"MIDFIELD (June 2022) contains Student  Unit Records (SURs) 1.7M undergraduates nineteen US institutions  1987 2018, though different institutions provide data different  time spans. MIDFIELD large enough permit grouping summarizing multiple characteristics, enabling researchers examine student characteristics (race/ethnicity, sex, prior achievement) curricular pathways (including coursework program) institution time. proportionate stratified sample data (practice) available midfielddata, R data package longitudinal student unit-records 98,000 undergraduates 12 institutions  1987--2016 organized four data tables: student course term degree tools midfieldr work equally well practice data midfielddata research data MIDFIELD. work supported grant US National Science Foundation (EEC 1545667).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":null,"dir":"Reference","previous_headings":"","what":"Order categorical variables of multiway data — order_multiway","title":"Order categorical variables of multiway data — order_multiway","text":"Transform data frame two independent categorical variables  factors levels ordered display multiway dot plot. Multiway  data comprise single quantitative value (response) every  combination levels two categorical variables. ordering  rows panels crucial perception effects (Cleveland, 1993).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order categorical variables of multiway data — order_multiway","text":"","code":"order_multiway(   dframe,   quantity,   categories,   ...,   method = NULL,   ratio_of = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order categorical variables of multiway data — order_multiway","text":"dframe Data frame one numeric variable two  categorical variables class character factor. Two additional  numeric columns required using \"percent\" ordering method. quantity Character, name (quotes) single multiway quantitative  variable categories Character, vector names (quotes) two multiway  categorical variables ... used, forces later arguments used name. method Character, “median” (default) “percent”, method  ordering levels categories. median method computes  medians quantitative column grouped category. percent  method computes percentages based ratio underlying  quantitative percentage variable except grouped category. ratio_of Character vector names (quotes)  numerator denominator columns produced quantitative  variable, required method \"percent\". Names can  order; algorithm assumes parameter  larger column sum denominator ratio.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order categorical variables of multiway data — order_multiway","text":"data.table  following properties: Rows modified. Grouping structures preserved. columns specified categories converted factors       ordered. columns modified. Two columns added. Caution! existing column   name one added columns silently overwritten. names added columns incorporate names multiway  variables. Columns added: CATEGORY_median columns (ordering method \"median\") Numeric. Two columns medians quantitative variable grouped       categorical variables. CATEGORY placeholder       column name replaced category name       categories argument. example, suppose       categories = c(\"program\", \"people\")       method = \"median\". two new column names       program_median people_median. CATEGORY_QUANTITY columns (ordering method \"percent\") Numeric. Two columns percentages based ratio       produces quantitative variable except grouped categorical       variables. CATEGORY placeholder column name       replaced category name categories argument;       QUANTITY placeholder replaced quantitative variable       name quantity argument. example, suppose       categories = c(\"program\", \"people\"),       quantity = \"grad_rate\", method = \"percent\". two       new column names  program_grad_rate       people_grad_rate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Order categorical variables of multiway data — order_multiway","text":"context, \"multiway\" refers data structure graph design defined Cleveland (1993), methods analysis described  Kroonenberg (2008). Multiway data comprise three variables: categorical variable m  levels; second independent categorical variable n levels;  quantitative variable (response) length mn  cross-classifies categories, , value  response combination levels two categorical variables. multiway dot plot, one category encoded panels, second  category encoded rows panel, quantitative variable  encoded along identical horizontal scales.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Order categorical variables of multiway data — order_multiway","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley,    Hoboken, NJ.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order categorical variables of multiway data — order_multiway","text":"","code":"# Subset of built-in data set dframe <- study_results[program == \"EE\" | program == \"ME\"] dframe[, people := paste(race, sex)] #>     program    sex            race ever grad stick                 people #>  1:      EE Female           Asian   36   14  38.9           Asian Female #>  2:      EE Female           Black  145   58  40.0           Black Female #>  3:      EE Female   International    8    3  37.5   International Female #>  4:      EE Female          Latine   14    6  42.9          Latine Female #>  5:      EE Female Native American    3    0   0.0 Native American Female #>  6:      EE Female   Other/Unknown    8    3  37.5   Other/Unknown Female #>  7:      EE Female           White  173   55  31.8           White Female #>  8:      EE   Male           Asian  189   86  45.5             Asian Male #>  9:      EE   Male           Black  287   97  33.8             Black Male #> 10:      EE   Male   International   70   35  50.0     International Male #> 11:      EE   Male          Latine   63   22  34.9            Latine Male #> 12:      EE   Male Native American    8    1  12.5   Native American Male #> 13:      EE   Male   Other/Unknown   27    9  33.3     Other/Unknown Male #> 14:      EE   Male           White 1227  509  41.5             White Male #> 15:      ME Female           Asian   22   13  59.1           Asian Female #> 16:      ME Female           Black   75   23  30.7           Black Female #> 17:      ME Female   International    3    1  33.3   International Female #> 18:      ME Female          Latine   10    4  40.0          Latine Female #> 19:      ME Female Native American    5    1  20.0 Native American Female #> 20:      ME Female   Other/Unknown    8    4  50.0   Other/Unknown Female #> 21:      ME Female           White  261  109  41.8           White Female #> 22:      ME   Male           Asian  118   58  49.2             Asian Male #> 23:      ME   Male           Black  202   65  32.2             Black Male #> 24:      ME   Male   International   36   16  44.4     International Male #> 25:      ME   Male          Latine   76   29  38.2            Latine Male #> 26:      ME   Male Native American   14    4  28.6   Native American Male #> 27:      ME   Male   Other/Unknown   43   20  46.5     Other/Unknown Male #> 28:      ME   Male           White 1776  918  51.7             White Male #>     program    sex            race ever grad stick                 people dframe[, c(\"race\", \"sex\") := NULL] #>     program ever grad stick                 people #>  1:      EE   36   14  38.9           Asian Female #>  2:      EE  145   58  40.0           Black Female #>  3:      EE    8    3  37.5   International Female #>  4:      EE   14    6  42.9          Latine Female #>  5:      EE    3    0   0.0 Native American Female #>  6:      EE    8    3  37.5   Other/Unknown Female #>  7:      EE  173   55  31.8           White Female #>  8:      EE  189   86  45.5             Asian Male #>  9:      EE  287   97  33.8             Black Male #> 10:      EE   70   35  50.0     International Male #> 11:      EE   63   22  34.9            Latine Male #> 12:      EE    8    1  12.5   Native American Male #> 13:      EE   27    9  33.3     Other/Unknown Male #> 14:      EE 1227  509  41.5             White Male #> 15:      ME   22   13  59.1           Asian Female #> 16:      ME   75   23  30.7           Black Female #> 17:      ME    3    1  33.3   International Female #> 18:      ME   10    4  40.0          Latine Female #> 19:      ME    5    1  20.0 Native American Female #> 20:      ME    8    4  50.0   Other/Unknown Female #> 21:      ME  261  109  41.8           White Female #> 22:      ME  118   58  49.2             Asian Male #> 23:      ME  202   65  32.2             Black Male #> 24:      ME   36   16  44.4     International Male #> 25:      ME   76   29  38.2            Latine Male #> 26:      ME   14    4  28.6   Native American Male #> 27:      ME   43   20  46.5     Other/Unknown Male #> 28:      ME 1776  918  51.7             White Male #>     program ever grad stick                 people data.table::setcolorder(dframe, c(\"program\", \"people\"))  # Class before ordering class(dframe$program) #> [1] \"character\" class(dframe$people) #> [1] \"character\"  # Class and levels after ordering mw1 <- order_multiway(dframe,                        quantity = \"stick\",                        categories = c(\"program\", \"people\")) class(mw1$program) #> [1] \"factor\" levels(mw1$program) #> [1] \"EE\" \"ME\" class(mw1$people) #> [1] \"factor\" levels(mw1$people) #>  [1] \"Native American Female\" \"Native American Male\"   \"Black Male\"             #>  [4] \"Black Female\"           \"International Female\"   \"Latine Male\"            #>  [7] \"White Female\"           \"Other/Unknown Male\"     \"Latine Female\"          #> [10] \"Other/Unknown Female\"   \"White Male\"             \"International Male\"     #> [13] \"Asian Male\"             \"Asian Female\"            # Display category medians  mw1 #>     program                 people stick ever grad program_median people_median #>  1:      EE           Asian Female  38.9   36   14           37.5         49.00 #>  2:      EE           Black Female  40.0  145   58           37.5         35.35 #>  3:      EE   International Female  37.5    8    3           37.5         35.40 #>  4:      EE          Latine Female  42.9   14    6           37.5         41.45 #>  5:      EE Native American Female   0.0    3    0           37.5         10.00 #>  6:      EE   Other/Unknown Female  37.5    8    3           37.5         43.75 #>  7:      EE           White Female  31.8  173   55           37.5         36.80 #>  8:      EE             Asian Male  45.5  189   86           37.5         47.35 #>  9:      EE             Black Male  33.8  287   97           37.5         33.00 #> 10:      EE     International Male  50.0   70   35           37.5         47.20 #> 11:      EE            Latine Male  34.9   63   22           37.5         36.55 #> 12:      EE   Native American Male  12.5    8    1           37.5         20.55 #> 13:      EE     Other/Unknown Male  33.3   27    9           37.5         39.90 #> 14:      EE             White Male  41.5 1227  509           37.5         46.60 #> 15:      ME           Asian Female  59.1   22   13           40.9         49.00 #> 16:      ME           Black Female  30.7   75   23           40.9         35.35 #> 17:      ME   International Female  33.3    3    1           40.9         35.40 #> 18:      ME          Latine Female  40.0   10    4           40.9         41.45 #> 19:      ME Native American Female  20.0    5    1           40.9         10.00 #> 20:      ME   Other/Unknown Female  50.0    8    4           40.9         43.75 #> 21:      ME           White Female  41.8  261  109           40.9         36.80 #> 22:      ME             Asian Male  49.2  118   58           40.9         47.35 #> 23:      ME             Black Male  32.2  202   65           40.9         33.00 #> 24:      ME     International Male  44.4   36   16           40.9         47.20 #> 25:      ME            Latine Male  38.2   76   29           40.9         36.55 #> 26:      ME   Native American Male  28.6   14    4           40.9         20.55 #> 27:      ME     Other/Unknown Male  46.5   43   20           40.9         39.90 #> 28:      ME             White Male  51.7 1776  918           40.9         46.60 #>     program                 people stick ever grad program_median people_median  # Existing factors (if any) are re-ordered mw2 <- dframe mw2$program <- factor(mw2$program, levels = c(\"ME\", \"EE\"))  # Levels before conditioning levels(mw2$program)  #> [1] \"ME\" \"EE\"  # Levels after conditioning mw2 <- order_multiway(dframe,                        quantity = \"stick\",                        categories = c(\"program\", \"people\")) levels(mw2$program)  #> [1] \"EE\" \"ME\"  # Ordering using percent method order_multiway(dframe,                 quantity = \"stick\",                 categories = c(\"program\", \"people\"),                 method = \"percent\",                 ratio_of = c(\"grad\", \"ever\")) #>     program                 people grad ever stick program_stick people_stick #>  1:      EE           Asian Female   14   36  38.9          39.8         46.6 #>  2:      EE           Black Female   58  145  40.0          39.8         36.8 #>  3:      EE   International Female    3    8  37.5          39.8         36.4 #>  4:      EE          Latine Female    6   14  42.9          39.8         41.7 #>  5:      EE Native American Female    0    3   0.0          39.8         12.5 #>  6:      EE   Other/Unknown Female    3    8  37.5          39.8         43.8 #>  7:      EE           White Female   55  173  31.8          39.8         37.8 #>  8:      EE             Asian Male   86  189  45.5          39.8         46.9 #>  9:      EE             Black Male   97  287  33.8          39.8         33.1 #> 10:      EE     International Male   35   70  50.0          39.8         48.1 #> 11:      EE            Latine Male   22   63  34.9          39.8         36.7 #> 12:      EE   Native American Male    1    8  12.5          39.8         22.7 #> 13:      EE     Other/Unknown Male    9   27  33.3          39.8         41.4 #> 14:      EE             White Male  509 1227  41.5          39.8         47.5 #> 15:      ME           Asian Female   13   22  59.1          47.8         46.6 #> 16:      ME           Black Female   23   75  30.7          47.8         36.8 #> 17:      ME   International Female    1    3  33.3          47.8         36.4 #> 18:      ME          Latine Female    4   10  40.0          47.8         41.7 #> 19:      ME Native American Female    1    5  20.0          47.8         12.5 #> 20:      ME   Other/Unknown Female    4    8  50.0          47.8         43.8 #> 21:      ME           White Female  109  261  41.8          47.8         37.8 #> 22:      ME             Asian Male   58  118  49.2          47.8         46.9 #> 23:      ME             Black Male   65  202  32.2          47.8         33.1 #> 24:      ME     International Male   16   36  44.4          47.8         48.1 #> 25:      ME            Latine Male   29   76  38.2          47.8         36.7 #> 26:      ME   Native American Male    4   14  28.6          47.8         22.7 #> 27:      ME     Other/Unknown Male   20   43  46.5          47.8         41.4 #> 28:      ME             White Male  918 1776  51.7          47.8         47.5 #>     program                 people grad ever stick program_stick people_stick"},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Order categorical variables of multiway data — order_multiway_categories","title":"Order categorical variables of multiway data — order_multiway_categories","text":"Transform data frame two independent categorical variables  factors levels ordered display multiway dot plot. Multiway  data comprise single quantitative value (response) every  combination levels two categorical variables. ordering  rows panels crucial perception effects (Cleveland, 1993).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order categorical variables of multiway data — order_multiway_categories","text":"","code":"order_multiway_categories(   dframe,   quantity,   categories,   ...,   method = NULL,   ratio_of = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order categorical variables of multiway data — order_multiway_categories","text":"dframe Data frame one numeric variable two  categorical variables class character factor. Two additional  numeric columns required using \"percent\" ordering method. quantity Character, name (quotes) single multiway quantitative  variable categories Character, vector names (quotes) two multiway  categorical variables ... used, forces later arguments used name. method Character, “median” (default) “percent”, method  ordering levels categories. median method computes  medians quantitative column grouped category. percent  method computes percentages based ratio underlying  quantitative percentage variable except grouped category. ratio_of Character vector names (quotes)  numerator denominator columns produced quantitative  variable, required method \"percent\". Names can  order; algorithm assumes parameter  larger column sum denominator ratio.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order categorical variables of multiway data — order_multiway_categories","text":"data.table  following properties: Rows modified. Grouping structures preserved. columns specified categories converted factors       ordered. columns modified. Two columns added. Caution! existing column   name one added columns silently overwritten. names added columns incorporate names multiway  variables. Columns added: CATEGORY_median columns (ordering method \"median\") Numeric. Two columns medians quantitative variable grouped       categorical variables. CATEGORY placeholder       column name replaced category name       categories argument. example, suppose       categories = c(\"program\", \"people\")       method = \"median\". two new column names       program_median people_median. CATEGORY_QUANTITY columns (ordering method \"percent\") Numeric. Two columns percentages based ratio       produces quantitative variable except grouped categorical       variables. CATEGORY placeholder column name       replaced category name categories argument;       QUANTITY placeholder replaced quantitative variable       name quantity argument. example, suppose       categories = c(\"program\", \"people\"),       quantity = \"grad_rate\", method = \"percent\". two       new column names  program_grad_rate       people_grad_rate.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Order categorical variables of multiway data — order_multiway_categories","text":"context, \"multiway\" refers data structure graph design defined Cleveland (1993), methods analysis described  Kroonenberg (2008). Multiway data comprise three variables: categorical variable m  levels; second independent categorical variable n levels;  quantitative variable (response) length mn  cross-classifies categories, , value  response combination levels two categorical variables. multiway dot plot, one category encoded panels, second  category encoded rows panel, quantitative variable  encoded along identical horizontal scales.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/order_multiway_categories.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Order categorical variables of multiway data — order_multiway_categories","text":"Cleveland WS (1993). Visualizing Data. Hobart Press, Summit, NJ. Kroonenberg PM (2008). Applied Multiway Data Analysis. Wiley,    Hoboken, NJ.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/preprocess_fye.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare FYE data for multiple imputation — preprocess_fye","title":"Prepare FYE data for multiple imputation — preprocess_fye","text":"Constructs data frame Student Unit Records (SURs) First-Year  Engineering (FYE) programs conditions data later use  input mice R package multiple imputation. Sets three  variables predictors (institution, race, sex) one variable  predicted (program CIP code) NA values imputed. Requires  MIDFIELD student term data frames environment.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/preprocess_fye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare FYE data for multiple imputation — preprocess_fye","text":"","code":"preprocess_fye(midfield_student, midfield_term, ..., fye_codes = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/preprocess_fye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare FYE data for multiple imputation — preprocess_fye","text":"midfield_student Data frame Student Unit Record (SUR) student observations,  keyed student ID. Required variables  mcid, race, sex. midfield_term Data frame SUR term observations keyed  student ID. Required variables  mcid, institution, term, cip6. ... used, forces later arguments used name. fye_codes Optional character vector 6-digit CIP codes identify FYE programs, default 140102. Codes must 6-digit strings numbers; regular expressions prohibited. Non-engineering codes---start 14---ignored.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/preprocess_fye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare FYE data for multiple imputation — preprocess_fye","text":"data.table conditioned later use input  mice R package multiple imputation. data following  properties: One row every FYE student. Grouping structures preserved. Columns returned: mcid Character, anonymized student identifier. Returned             -. race Factor, race/ethnicity self-reported             student. imputation predictor variable. sex Factor, sex self-reported             student. imputation predictor variable. institution Factor, anonymized institution name.             imputation predictor variable. cip6 Factor, 6-digit CIP code student's known,             post-FYE engineering program NA representing missing            values imputed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/preprocess_fye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare FYE data for multiple imputation — preprocess_fye","text":"US institutions, First-Year Engineering (FYE) programs comprise  common first year curriculum prerequisite declaring   engineering major. longitudinal studies, FYE programs can problematic  combining observations non-FYE institutions.  example, suppose calculating graduation rate Mechanical  Engineering () programs. definitions, students starting  constitute pool; fraction pool graduates  rate. FYE starters, even graduate , excluded  count start . Therefore, include FYE students persistence metric requiring degree-granting \"starting\" program, predict engineering program (Electrical Engineering, Mechanical Engineering, etc.)  FYE student declared required enroll FYE. purpose preprocess_fye() prepare data  making prediction.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/preprocess_fye.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Prepare FYE data for multiple imputation — preprocess_fye","text":"method requires MIDFIELD-style student term data tables  contain minimum institutions studied also FYE  programs. function extracts terms FYE students sorts  two categories: Students complete FYE declare engineering major.     easy case--student's first opportunity,     enrolled engineering program choosing. use     program predicted  starting program. Students , FYE, declare engineering major.     complicated case---data provide information     regarding engineering program student declared     originally institution required enroll FYE.     students, treat starting program missing data     predicted using multiple imputation. cases students enter FYE, change programs, re-enter FYE, first group FYE terms considered. programs FYE ignored. first () post-FYE program identified. program engineering, CIP retained predicted starting major. , CIP replaced NA treated missing data imputation. Lastly, predictor variables (institution, race, sex) predicted variable (6-digit CIP code) converted unordered factors.  resulting data frame ready use input mice package.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/preprocess_fye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare FYE data for multiple imputation — preprocess_fye","text":"","code":"# # Using toy data # DT <- toy_student[, .(mcid, race, sex)] # preprocess_fye(dframe = DT, midfield_term = toy_term) #  #  # # Overwrites institution if present in dframe # DT <- toy_student[, .(mcid, institution, race, sex)] # preprocess_fye(dframe = DT, midfield_term = toy_term) #  #  # # Other columns, if any, are dropped # colnames(toy_student) # colnames(preprocess_fye(toy_student, toy_term)) #  #  # # Optional argument permits multiple CIP codes for FYE # preprocess_fye(DT, toy_term, fye_codes = c(\"140101\", \"140102\"))"},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare FYE data for multiple imputation — prep_fye_mice","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"Constructs data frame Student Unit Records (SURs) First-Year  Engineering (FYE) programs conditions data later use  input mice R package multiple imputation. Sets three  variables predictors (institution, race/ethnicity, sex) one  variable estimated (program CIP code).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"","code":"prep_fye_mice(   midfield_student = student,   midfield_term = term,   ...,   fye_codes = NULL )"},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"midfield_student Data frame Student Unit Record (SUR) student  observations, keyed student ID. Default student.  Required variables mcid, race, sex. midfield_term Data frame SUR term observations keyed  student ID. Default term. Required variables  mcid, institution, term, cip6. ... used, forces later arguments used name. fye_codes Optional character vector 6-digit CIP codes identify  FYE programs, default \"140102\". Codes must 6-digit strings  numbers; regular expressions prohibited. Non-engineering  codes---start 14---produce error.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"data.table conditioned later use input  mice R package multiple imputation. data following  properties: One row every FYE student, first-term migrator. Grouping structures preserved. Columns returned: mcid Character, anonymized student identifier. Returned             -. race Factor, race/ethnicity self-reported             student. imputation predictor variable. sex Factor, sex self-reported             student. imputation predictor variable. institution Factor, anonymized institution name.             imputation predictor variable. proxy Factor, 6-digit CIP code student's known,             post-FYE engineering program NA representing missing             values imputed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"US institutions, engineering students required complete   First-Year Engineering (FYE) program prerequisite declaring  engineering major. Administratively, degree-granting engineering programs  Electrical Engineering Mechanical Engineering treat  incoming post-FYE students \"starting\" cohorts.  However,  computing metric requires count starters---graduation rate,  example---FYE records must treated special care avoid  miscount. illustrate potential miscounting starters, suppose wish  calculate Mechanical Engineering () graduation rate. Students  starting constitute starting pool fraction pool  graduating graduation rate. FYE institutions, program  typically define starting pool post-FYE cohort entering  program. may best information available, invariably  undercounts starters failing account FYE students  transition (post-FYE) degree-granting engineering programs---students  may left institution switched non-engineering majors.  either case, absence FYE requirement, students  starters. neglecting students, count  starters artificially low resulting graduation rate  artificially high. true every degree-granting engineering  discipline FYE institution. Therefore, avoid miscounting starters FYE institutions,  estimate \"FYE proxy\", , 6-digit CIP codes  degree-granting engineering programs FYE students declared  required enroll FYE. purpose  prep_fye_mice() prepare data making estimation. running prep_fye_mice() running mice(), one can edit variables add variables create custom set predictors.  mice package expects predictors proxy variables  factors. delete institution variable ensures  student's imputed program available institution. addition, ensure missing values proxy column.  variables expected complete (NA values). value  \"unknown\" predictor column, e.g., race/ethnicity sex,  acceptable value, missing data. Observations missing unknown  values ID institution columns () removed.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"function extracts terms FYE students, including  migrate enter Engineering first term, identifies  first post-FYE program enroll, .  treatment yields two possible outcomes values returned  proxy column: student completes FYE enrolls engineering major.      outcome, know student's first opportunity,      enrolled engineering program choosing. CIP code      program returned student's FYE proxy. student enroll post-FYE engineering major.      students records database switched      Engineering another program. outcome, data provide      information regarding engineering program student      declared originally institution required enroll      FYE. students proxy value NA returned.      data treated missing values imputed mice(). cases students enter FYE, change programs, re-enter FYE,  first group FYE terms considered. programs FYE  ignored. resulting data frame ready use input mice package,  variables except mcid returned factors.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/prep_fye_mice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare FYE data for multiple imputation — prep_fye_mice","text":"","code":"# Using toy data prep_fye_mice(toy_student, toy_term) #>            mcid   race    sex   institution  proxy #>  1: MID26060301  Asian Female Institution C   <NA> #>  2: MID25995980 Latine Female Institution C   <NA> #>  3: MID25997636 Latine Female Institution C   <NA> #>  4: MID26086310 Latine Female Institution C   <NA> #>  5: MID26000057  White Female Institution C   <NA> #>  6: MID26614720  Asian   Male Institution J   <NA> #>  7: MID26593796  White   Male Institution J   <NA> #>  8: MID25848589  White   Male Institution M 143501 #>  9: MID25846316  White   Male Institution M 143501 #> 10: MID25847220  White   Male Institution M 143501 #> 11: MID25828870  White   Male Institution M 149999  # Other columns, if any, are dropped colnames(toy_student) #> [1] \"mcid\"        \"institution\" \"race\"        \"sex\"         colnames(prep_fye_mice(toy_student, toy_term)) #> [1] \"mcid\"        \"race\"        \"sex\"         \"institution\" \"proxy\"        # Optional argument permits multiple CIP codes for FYE prep_fye_mice(midfield_student = toy_student,                midfield_term =toy_term,                fye_codes = c(\"140101\", \"140102\")) #>            mcid   race    sex   institution  proxy #>  1: MID25977316  White   Male Institution B   <NA> #>  2: MID26060301  Asian Female Institution C   <NA> #>  3: MID25995980 Latine Female Institution C   <NA> #>  4: MID25997636 Latine Female Institution C   <NA> #>  5: MID26086310 Latine Female Institution C   <NA> #>  6: MID26000057  White Female Institution C   <NA> #>  7: MID26614720  Asian   Male Institution J   <NA> #>  8: MID26593796  White   Male Institution J   <NA> #>  9: MID25848589  White   Male Institution M 143501 #> 10: MID25846316  White   Male Institution M 143501 #> 11: MID25847220  White   Male Institution M 143501 #> 12: MID25828870  White   Male Institution M 149999"},{"path":"https://midfieldr.github.io/midfieldr/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. wrapr stop_if_dot_args","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for equal content between two data tables — same_content","title":"Test for equal content between two data tables — same_content","text":"Test data equality data.table objects. Convenience function  used vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for equal content between two data tables — same_content","text":"","code":"same_content(x, y)"},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for equal content between two data tables — same_content","text":"x Data frame compared. target argument  .equal() y Data frame compared. current argument  .equal()","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for equal content between two data tables — same_content","text":"Either TRUE description differences x y.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for equal content between two data tables — same_content","text":"Wrapper around .equal() class data.table ignores row  order, column order, data.table keys. inputs must date frames.  Equivalent : .equal(target, current, ignore.row.order = TRUE, ignore.col.order = TRUE)","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/same_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for equal content between two data tables — same_content","text":"","code":"# Same information and ignore row order, column order x <- toy_student[order(mcid), .(mcid, institution)] y <- toy_student[order(institution), .(institution, mcid)] same_content(x, y) #> [1] TRUE  # Different number of rows x <- toy_student[1:10] y <- toy_student[1:11] same_content(x, y) #> [1] \"Different number of rows\"  # Different column names x <- toy_student[, .(mcid)] y <- toy_student[, .(institution)] same_content(x, y) #> [1] \"Different column names\"  # Different number of columns and column names x <- toy_student[, .(mcid)] y <- toy_student[, .(mcid, institution)] same_content(x, y) #> [1] \"Different number of columns\" \"Different column names\"       # Different number of rows, number of columns, and column names x <- toy_student y <- toy_term same_content(x, y) #> [1] \"Different number of rows\"    \"Different number of columns\" #> [3] \"Different column names\"       # Different row content x <- toy_student[1:10] y <- toy_student[2:11] same_content(x, y) #> [1] \"Dataset 'current' has rows not present in 'target'\""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":null,"dir":"Reference","previous_headings":"","what":"Select required midfieldr variables — select_required","title":"Select required midfieldr variables — select_required","text":"Subset data frame, selecting columns matching partially matching  vector character strings. convenience function reduce dimensions  MIDFIELD data table start session selecting  columns typically required midfieldr functions. Particularly useful  interactive sessions viewing data tables various stages   analysis.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select required midfieldr variables — select_required","text":"","code":"select_required(midfield_x, ..., select_add = NULL)"},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select required midfieldr variables — select_required","text":"midfield_x Data frame columns selected, typically  student, term, degree subsets. ... used, force later arguments used name. select_add Optional character vector search terms add default  vector given c(\"mcid\", \"institution\", \"race\", \"sex\",  \"^term\", \"cip6\", \"level\").","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select required midfieldr variables — select_required","text":"data.table following properties: Rows modified. Columns names match partially match values            select. Grouping structures preserved.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select required midfieldr variables — select_required","text":"Several midfieldr functions designed operate one  MIDFIELD data tables, usually student, term, degree.  family functions requires small subset available  variables, e.g., mcid, cip6, term. required  columns built function. select argument used  add search strings default vector. column names midfield_x searched matches  partial matches using grep(), thus search terms can include regular  expressions. Variables names match partially match search  terms returned; columns dropped. Rows unaffected.  Search terms present silently ignored. One use function select columns non-MIDFIELD data frame,  benefit user---conventional column selection syntax  better suited task. , specialize column selection  serve midfieldr functions.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/select_required.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select required midfieldr variables — select_required","text":"","code":"# Default character vector for selecting columns default_cols<- c(\"mcid\", \"institution\", \"race\", \"sex\", \"^term\", \"cip6\", \"level\")  # Create one string separated by OR search_pattern <- paste(default_cols, collapse = \"|\")  # Find names of columns matching or partially matching  x <- select_required(toy_student)  names(x) #> [1] \"mcid\"        \"institution\" \"race\"        \"sex\"         grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE  x <- select_required(toy_term)  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        \"cip6\"        \"level\"       grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE TRUE  x <- select_required(toy_degree)  names(x) #> [1] \"mcid\"        \"institution\" \"term_degree\" \"cip6\"        grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE TRUE  x <- select_required(toy_course)  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        grepl(search_pattern, names(x)) #> [1] TRUE TRUE TRUE  # Adding search terms x <- select_required(toy_course, select_add = c(\"abbrev\", \"number\", \"grade\"))  names(x) #> [1] \"mcid\"        \"institution\" \"term\"        \"abbrev\"      \"number\"      #> [6] \"grade\""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_ever.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study ever enrolled — study_ever","title":"Case-study ever enrolled — study_ever","text":"Data table IDs students ever enrolled four programs study  (Civil, Electrical, Industrial/Systems, Mechanical Engineering)  filtering data sufficiency, degree seeking, program. Provided  convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_ever.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study ever enrolled — study_ever","text":"","code":"study_ever"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_ever.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study ever enrolled — study_ever","text":"data.table 7660 rows 2 columns. mcid Character, anonymized student identifier program Character, abbreviated labels four engineering programs.   Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\"   (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_mcid.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study IDs — study_mcid","title":"Case-study IDs — study_mcid","text":"Data table IDs students ever enrolled four programs study  (Civil, Electrical, Industrial/Systems, Mechanical Engineering)  filtering data sufficiency, degree seeking, program. Provided  convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_mcid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study IDs — study_mcid","text":"","code":"study_mcid"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_mcid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study IDs — study_mcid","text":"data.table 7133 rows 1 column. mcid Character, anonymized student identifier","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study observations — study_observations","title":"Case-study observations — study_observations","text":"Data table post-processed observations students ever enrolled ,   students graduating , four programs case study. Keyed  student ID. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study observations — study_observations","text":"","code":"study_observations"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study observations — study_observations","text":"data.table 11,212 rows 5 columns. mcid Character, anonymized student identifier race Character, self-reported race/ethnicity. sex Character, self-reported sex. program Character, academic program label. group Character, indicating grouping (ever   grad) observation belongs.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_observations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study observations — study_observations","text":"Starting case-study starting pool students ever enrolled  four programs study (Civil, Electrical, Industrial/Systems,  Mechanical Engineering), filtered data data sufficiency,  degree seeking, program, timely completion. data frame \"ever enrolled\" data frame \"timely graduates\"  bound using shared column names distinguished  group variable.  data structure facilitates grouping  summarizing race, sex, program, group.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study starting pool — study_pool","title":"Case-study starting pool — study_pool","text":"intermediate result provided convenience vignette users.  starting pool students term practice data. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study starting pool — study_pool","text":"","code":"study_pool"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study starting pool — study_pool","text":"data.table 161,696 rows 2 columns. mcid Character, anonymized student identifier cip6 Character, 6-digit CIP program codes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_pool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study starting pool — study_pool","text":"Starting midfielddata term practice data set, extracted  every observation unique combinations ID program CIP code.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study program labels and CIP codes — study_program","title":"Case-study program labels and CIP codes — study_program","text":"Data table program CIP codes labels four programs  case study. Keyed 6-digit CIPs. Provided convenience vignette  users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study program labels and CIP codes — study_program","text":"","code":"study_program"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study program labels and CIP codes — study_program","text":"data.table 15 rows 2 columns. cip6 Character, 6-digit CIP program codes. program Character, abbreviated labels four engineering programs.   Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\"   (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study program labels and CIP codes — study_program","text":"Starting midfieldr cip data set, extracted CIPs  four programs case study assigned custom label  used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study program labels and codes — study_programs","title":"Case-study program labels and codes — study_programs","text":"Data table program CIP codes labels four programs  case study. Keyed 6-digit CIPs. Provided convenience vignette  users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study program labels and codes — study_programs","text":"","code":"study_programs"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study program labels and codes — study_programs","text":"data.table 15 rows 2 columns. cip6 Character, 6-digit CIP program codes. program Character, abbreviated labels four engineering programs.   Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\"   (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_programs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study program labels and codes — study_programs","text":"Starting midfieldr cip data set, extracted CIPs  four programs case study assigned custom label  used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study program labels and CIP codes — study_program_cips","title":"Case-study program labels and CIP codes — study_program_cips","text":"Data table program CIP codes labels four programs  case study. Keyed 6-digit CIPs. Provided convenience vignette  users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study program labels and CIP codes — study_program_cips","text":"","code":"study_program_cips"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study program labels and CIP codes — study_program_cips","text":"data.table 15 rows 2 columns. cip6 Character, 6-digit CIP program codes. program Character, abbreviated labels four engineering programs.   Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\"   (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_cips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study program labels and CIP codes — study_program_cips","text":"Starting midfieldr cip data set, extracted CIPs  four programs case study assigned custom label  used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study program labels and codes — study_program_labels","title":"Case-study program labels and codes — study_program_labels","text":"Data table program CIP codes labels four programs  case study. Keyed 6-digit CIPs. Provided convenience vignette  users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study program labels and codes — study_program_labels","text":"","code":"study_program_labels"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_labels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study program labels and codes — study_program_labels","text":"data.table 15 rows 2 columns. cip6 Character, 6-digit CIP program codes. program Character, abbreviated labels four engineering programs.   Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\"   (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_program_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study program labels and codes — study_program_labels","text":"Starting midfieldr cip data set, extracted CIPs  four programs case study assigned custom label  used grouping summarizing.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study results — study_results","title":"Case-study results — study_results","text":"Data table longitudinal stickiness keyed program, race/ethnicity,  sex. Provided convenience vignette users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study results — study_results","text":"","code":"study_results"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study results — study_results","text":"data.table 55 rows 6 columns. program Character, academic program label. race Character, self-reported race/ethnicity. sex Character, self-reported sex. ever Numerical, number students ever enrolled program. grad Numerical, number students completing program. stick Numerical, program stickiness, ratio grad   ever, percent.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study results — study_results","text":"Starting prepared data (case study stickiness observations),  compute longitudinal stickiness four programs study (Civil,  Electrical, Industrial/Systems, Mechanical Engineering) grouped  program, race/ethnicity, sex. Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data. Results based data  filtered data sufficiency, degree seeking, program, timely  completion.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study starters — study_starters","title":"Case-study starters — study_starters","text":"Data table students considered starters one four engineering  programs case study (Civil, Electrical, Industrial/Systems,  Mechanical Engineering). Includes substitutions FYE proxies students  required enroll FYE programs. Provided convenience vignette  users.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study starters — study_starters","text":"","code":"study_starters"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study starters — study_starters","text":"data.table 5790 rows 2 columns. mcid Character, anonymized student identifier program Character, abbreviated labels four engineering programs.   Values \"CE\" (Civil Engineering), \"EE\" (Electrical Engineering), \"ISE\"   (Industrial/Systems Engineering),  \"\" (Mechanical Engineering).","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study starters — study_starters","text":"student term source data filtered data  sufficiency degree-seeking. filter student’s first term  (ignoring terms CIP undecided/unspecified). identify  program(s) student can considered starter, substituting   FYE proxy starting program FYE. filter program. CIP variable renamed start distinguish  midfieldr cip6 variables start contains estimated  program codes cip6 variables contain actual student records.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starting_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study observations starting pool — study_starting_pool","title":"Case-study observations starting pool — study_starting_pool","text":"intermediate result provided convenience vignette users.  Data midfielddata package processed obtain observations  students ever enrolled case study programs Civil, Electrical,  Industrial/Systems, Mechanical Engineering without filtering  data sufficiency timely completion. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starting_pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study observations starting pool — study_starting_pool","text":"","code":"study_starting_pool"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_starting_pool.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study observations starting pool — study_starting_pool","text":"data.table 161,696 rows 2 columns keyed ID. mcid Character, anonymized student identifier cip6 Character, 6-digit CIP codes programs students  ever enrolled.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness results — study_stickiness","title":"Case-study stickiness results — study_stickiness","text":"intermediate result provided convenience vignette users.  Longitudinal stickiness results Civil, Electrical, Industrial, Mechanical Engineering programs midfielddata. Results keyed program, race/ethnicity, sex.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness results — study_stickiness","text":"","code":"study_stickiness"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness results — study_stickiness","text":"data.table 33 rows 6 columns keyed program, race/ethnicity, sex. program Character, program name assigned grouping   summarizing display graphs tables. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student, values  Female, Male. ever Numerical, number students ever enrolled program,  accounting data sufficiency timely completion. grad Numerical, number students completing program,  accounting data sufficiency timely completion. stick Numerical, program stickiness, ratio number  students completing program number students ever enrolled  program.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case-study stickiness results — study_stickiness","text":"Longitudinal stickiness ratio number students graduating program number students ever enrolled program time span available data.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-study stickiness observations — study_stickiness_observ","title":"Case-study stickiness observations — study_stickiness_observ","text":"intermediate result provided convenience vignette users.  Data midfielddata package processed obtain observations students ever enrolled , graduating timely fashion , case study programs Civil, Electrical, Industrial/Systems,  Mechanical Engineering. Keyed student ID.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-study stickiness observations — study_stickiness_observ","text":"","code":"study_stickiness_observ"},{"path":"https://midfieldr.github.io/midfieldr/reference/study_stickiness_observ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Case-study stickiness observations — study_stickiness_observ","text":"data.table 11212 rows 5 columns keyed ID. mcid Character, anonymized student identifier race Character, race/ethnicity self-reported student,   e.g., Asian, Black, Hispanic/LatinX, etc. sex Character, sex self-reported student,   values Female, Male, Unknown program Character, abbreviation indicating program   student completed group Character, indicating grouping (ever   grad) student belongs.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":null,"dir":"Reference","previous_headings":"","what":"Course data for examples — toy_course","title":"Course data for examples — toy_course","text":"small subset course practice data use package  vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Course data for examples — toy_course","text":"","code":"toy_course"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_course.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Course data for examples — toy_course","text":"data.table 4616 rows 6 columns keyed student ID. mcid Character, anonymized student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. abbrev Character, course alphabetical identifier, e.g. ENGR, MATH,  ENGL. number Character, course numeric identifier, e.g. 101, 3429. grade Character, course grade, e.g., +, , -, B+, , NG, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree data for examples — toy_degree","title":"Degree data for examples — toy_degree","text":"small subset degree practice data use package  vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree data for examples — toy_degree","text":"","code":"toy_degree"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_degree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Degree data for examples — toy_degree","text":"data.table 65 rows 4 columns keyed student ID. mcid Character, anonymized student ID. institution Character, anonymized institution name, e.g.,       Institution , Institution B, etc. term_degree Character, academic year term  student completes program, format YYYYT. cip6 Character, 6-digit CIP code program student  earns degree.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data for examples — toy_student","title":"Student data for examples — toy_student","text":"small subset student practice data use package  vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data for examples — toy_student","text":"","code":"toy_student"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_student.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data for examples — toy_student","text":"data.table 99 rows 4 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,   Institution , Institution B, etc. race Character, race/ethnicity self-reported student,  e.g., Asian, Black, Latine, etc. sex character, sex self-reported student, possible  values Female, Male, Unknown.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Term data for examples — toy_term","title":"Term data for examples — toy_term","text":"small subset term practice data use package  vignette examples.","code":""},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term data for examples — toy_term","text":"","code":"toy_term"},{"path":"https://midfieldr.github.io/midfieldr/reference/toy_term.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Term data for examples — toy_term","text":"data.table 150 rows 5 columns keyed student ID. mcid Character, de-identified student ID. institution Character, de-identified institution name, e.g.,       Institution , Institution B, etc. term Character, academic year term, format YYYYT. cip6 Character, 6-digit CIP code program student  enrolled term. level Character, 01 Freshman, 02 Sophomore, etc.","code":""},{"path":[]},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009028--2022-11","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9028 / 2022-11","title":"midfieldr 1.0.0.9028 / 2022-11","text":"Rename filter_search() filter_cip() better capture purpose. Made cip default data frame search. Permits usage like filter_cip(\"engineering\") first argument can keep_text character vector search strings, yet unnamed. Edit vignettes consistent organization prose. Finished first complete draft “Graduation rate” vignette. Add same_content() convenience function. Add “Stickiness” vignette Add “Groupings” vignette.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009027--2022-10","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9027 / 2022-10","title":"midfieldr 1.0.0.9027 / 2022-10","text":"Separate vignettes FYE starters. starters, add case non-FYE institutions. Edit vignettes consistent organization prose. Add select_required(). Add planning blocs vignettes.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009026--2022-09","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9026 / 2022-09","title":"midfieldr 1.0.0.9026 / 2022-09","text":"Add FYE function vignette. Revise multiway function name. Add order_multiway() examples. Add initial graduation rate vignette. Add README tests directory. Consistent comments R code chunk commands.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009025--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9025 / 2021-07","title":"midfieldr 1.0.0.9025 / 2021-07","text":"Editing functions names data names descriptive. Change name built-fye_start data set fye_predicted_start. New order_multiway_categories() replace condition_multiway(). Revised argument names. New preprocess_fye() replace condition_fye().","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009024--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9024 / 2021-07","title":"midfieldr 1.0.0.9024 / 2021-07","text":"Revise add_completion_status(), changing three possible values “timely”, “late”, NA. Drop completion column (information available term_degree column). Revise vignettes consistent format.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009023--2021-07","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9023 / 2021-07","title":"midfieldr 1.0.0.9023 / 2021-07","text":"Updated condition_multiway(), unit tests, multiway vignette.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009022--2021-06-29","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9022 / 2021-06-29","title":"midfieldr 1.0.0.9022 / 2021-06-29","text":"Revise add vignettes data sufficiency, degree seeking (inner joins), programs, completion, demographics (left outer joins). Correction condition_multiway() alphabetical ordering, revise unit tests. Remove dependency Rdpack.","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009021--2021-06","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9021 / 2021-06","title":"midfieldr 1.0.0.9021 / 2021-06","text":"midfield_student argument, functions appears, assigned default value student instead NULL. argument can omitted unless intended data frame called something student. Similarly, midfield_course, midfield_term, midfield_degree arguments, occur, assigned default values course, term, degree. Reorganize logical flow data processing case study vignettes reflect latest thinking order filters applied. Functions return supporting variables, delete optional “details” arguments. Edit function names variable names, update unit tests. Temporarily remove vignettes updated. Make inner joins explicit, delete add_filter_match(). Revise data sufficiency include lower limit exclusions. Make left-outer joins explicit, delete add_race_sex().","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-1009020--2021-06","dir":"Changelog","previous_headings":"","what":"midfieldr 1.0.0.9020 / 2021-06","title":"midfieldr 1.0.0.9020 / 2021-06","text":"Significant changes earlier versions, backwards compatibility, prompting version number change 1.0.0. Change names practice data tables match names research data Edit practice data values consistency research data values Revise built-data sets use vignettes Rd examples Switch wrapr coalesce %?% assigning default arguments Initial round runtime assertions unit tests complete Make function names arguments internally consistent Edit functions depend data.table functionality Make MIDFIELD data arguments explicit functions Remove dependency dplyr related packages Replace Travis CI GitHub Actions CI Use package checkmate runtime assertions Remove dependency installing midfielddata Switch package tinytest unit testing Separate case study detailed vignettes Completely overhaul midfieldr functions Update README midfielddata README Revise vignettes use new functions","code":""},{"path":"https://midfieldr.github.io/midfieldr/news/index.html","id":"midfieldr-010--2018-06","dir":"Changelog","previous_headings":"","what":"midfieldr 0.1.0 / 2018-06","title":"midfieldr 0.1.0 / 2018-06","text":"Initial development version public GitHub","code":""}]
